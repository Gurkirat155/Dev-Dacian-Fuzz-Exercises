/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/chimera/src/Asserts.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | abstract contract Asserts {
  5 |     |     function gt(uint256 a, uint256 b, string memory reason) internal virtual;
  6 |     | 
  7 |     |     function gte(uint256 a, uint256 b, string memory reason) internal virtual;
  8 |     | 
  9 |     |     function lt(uint256 a, uint256 b, string memory reason) internal virtual;
 10 |     | 
 11 |     |     function lte(uint256 a, uint256 b, string memory reason) internal virtual;
 12 |     | 
 13 |     |     function eq(uint256 a, uint256 b, string memory reason) internal virtual;
 14 |     | 
 15 |     |     function t(bool b, string memory reason) internal virtual;
 16 |     | 
 17 |     |     function between(uint256 value, uint256 low, uint256 high) internal virtual returns (uint256);
 18 |     | 
 19 |     |     function between(int256 value, int256 low, int256 high) internal virtual returns (int256);
 20 |     | 
 21 |     |     function precondition(bool p) internal virtual;
 22 |     | }
 23 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/chimera/src/BaseProperties.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity ^0.8.0;
 3 |     | 
 4 |     | import {BaseSetup} from "./BaseSetup.sol";
 5 |     | 
 6 |     | abstract contract BaseProperties is BaseSetup {}
 7 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/chimera/src/BaseSetup.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity ^0.8.0;
 3 |     | 
 4 |     | abstract contract BaseSetup {
 5 |     |     function setup() internal virtual;
 6 |     | }
 7 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/chimera/src/BaseTargetFunctions.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity ^0.8.0;
 3 |     | 
 4 |     | import {BaseProperties} from "./BaseProperties.sol";
 5 |     | import {Asserts} from "./Asserts.sol";
 6 |     | 
 7 |     | abstract contract BaseTargetFunctions is BaseProperties, Asserts {}
 8 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/chimera/src/CryticAsserts.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {Asserts} from "./Asserts.sol";
  5 |     | 
  6 |     | contract CryticAsserts is Asserts {
  7 |     |     event Log(string);
  8 |     | 
  9 |     |     function gt(uint256 a, uint256 b, string memory reason) internal virtual override {
 10 |     |         if (!(a > b)) {
 11 |     |             emit Log(reason);
 12 |     |             assert(false);
 13 |     |         }
 14 |     |     }
 15 |     | 
 16 |     |     function gte(uint256 a, uint256 b, string memory reason) internal virtual override {
 17 |     |         if (!(a >= b)) {
 18 |     |             emit Log(reason);
 19 |     |             assert(false);
 20 |     |         }
 21 |     |     }
 22 |     | 
 23 |     |     function lt(uint256 a, uint256 b, string memory reason) internal virtual override {
 24 |     |         if (!(a < b)) {
 25 |     |             emit Log(reason);
 26 |     |             assert(false);
 27 |     |         }
 28 |     |     }
 29 |     | 
 30 |     |     function lte(uint256 a, uint256 b, string memory reason) internal virtual override {
 31 |     |         if (!(a <= b)) {
 32 |     |             emit Log(reason);
 33 |     |             assert(false);
 34 |     |         }
 35 |     |     }
 36 |     | 
 37 |     |     function eq(uint256 a, uint256 b, string memory reason) internal virtual override {
 38 |     |         if (!(a == b)) {
 39 |     |             emit Log(reason);
 40 |     |             assert(false);
 41 |     |         }
 42 |     |     }
 43 |     | 
 44 |     |     function t(bool b, string memory reason) internal virtual override {
 45 |     |         if (!b) {
 46 |     |             emit Log(reason);
 47 |     |             assert(false);
 48 |     |         }
 49 |     |     }
 50 |     | 
 51 |     |     function between(uint256 value, uint256 low, uint256 high) internal virtual override returns (uint256) {
 52 |     |         if (value < low || value > high) {
 53 |     |             uint256 ans = low + (value % (high - low + 1));
 54 |     |             return ans;
 55 |     |         }
 56 |     |         return value;
 57 |     |     }
 58 |     | 
 59 |     |     function between(int256 value, int256 low, int256 high) internal virtual override returns (int256) {
 60 |     |         if (value < low || value > high) {
 61 |     |             int256 range = high - low + 1;
 62 |     |             int256 clamped = (value - low) % (range);
 63 |     |             if (clamped < 0) clamped += range;
 64 |     |             int256 ans = low + clamped;
 65 |     |             return ans;
 66 |     |         }
 67 |     |         return value;
 68 |     |     }
 69 |     | 
 70 |     |     function precondition(bool p) internal virtual override {
 71 |     |         require(p);
 72 |     |     }
 73 |     | }
 74 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/chimera/src/FoundryAsserts.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | import {Test} from "forge-std/Test.sol";
  5 |     | import {Asserts} from "./Asserts.sol";
  6 |     | 
  7 |     | contract FoundryAsserts is Test, Asserts {
  8 |     |     function gt(uint256 a, uint256 b, string memory reason) internal virtual override {
  9 |     |         assertGt(a, b, reason);
 10 |     |     }
 11 |     | 
 12 |     |     function gte(uint256 a, uint256 b, string memory reason) internal virtual override {
 13 |     |         assertGe(a, b, reason);
 14 |     |     }
 15 |     | 
 16 |     |     function lt(uint256 a, uint256 b, string memory reason) internal virtual override {
 17 |     |         assertLt(a, b, reason);
 18 |     |     }
 19 |     | 
 20 |     |     function lte(uint256 a, uint256 b, string memory reason) internal virtual override {
 21 |     |         assertLe(a, b, reason);
 22 |     |     }
 23 |     | 
 24 |     |     function eq(uint256 a, uint256 b, string memory reason) internal virtual override {
 25 |     |         assertEq(a, b, reason);
 26 |     |     }
 27 |     | 
 28 |     |     function t(bool b, string memory reason) internal virtual override {
 29 |     |         assertTrue(b, reason);
 30 |     |     }
 31 |     | 
 32 |     |     function between(uint256 value, uint256 low, uint256 high) internal virtual override returns (uint256) {
 33 |     |         if (value < low || value > high) {
 34 |     |             uint256 ans = low + (value % (high - low + 1));
 35 |     |             return ans;
 36 |     |         }
 37 |     |         return value;
 38 |     |     }
 39 |     | 
 40 |     |     function between(int256 value, int256 low, int256 high) internal virtual override returns (int256) {
 41 |     |         if (value < low || value > high) {
 42 |     |             int256 range = high - low + 1;
 43 |     |             int256 clamped = (value - low) % (range);
 44 |     |             if (clamped < 0) clamped += range;
 45 |     |             int256 ans = low + clamped;
 46 |     |             return ans;
 47 |     |         }
 48 |     |         return value;
 49 |     |     }
 50 |     | 
 51 |     |     function precondition(bool p) internal virtual override {
 52 |     |         vm.assume(p);
 53 |     |     }
 54 |     | }
 55 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/chimera/src/Hevm.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | // slither-disable-start shadowing-local
  5 |     | 
  6 |     | interface IHevm {
  7 |     |     // Set block.timestamp to newTimestamp
  8 |     |     function warp(uint256 newTimestamp) external;
  9 |     | 
 10 |     |     // Set block.number to newNumber
 11 |     |     function roll(uint256 newNumber) external;
 12 |     | 
 13 |     |     // Add the condition b to the assumption base for the current branch
 14 |     |     // This function is almost identical to require
 15 |     |     function assume(bool b) external;
 16 |     | 
 17 |     |     // Sets the eth balance of usr to amt
 18 |     |     function deal(address usr, uint256 amt) external;
 19 |     | 
 20 |     |     // Loads a storage slot from an address
 21 |     |     function load(address where, bytes32 slot) external returns (bytes32);
 22 |     | 
 23 |     |     // Stores a value to an address' storage slot
 24 |     |     function store(address where, bytes32 slot, bytes32 value) external;
 25 |     | 
 26 |     |     // Signs data (privateKey, digest) => (v, r, s)
 27 |     |     function sign(uint256 privateKey, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);
 28 |     | 
 29 |     |     // Gets address for a given private key
 30 |     |     function addr(uint256 privateKey) external returns (address addr);
 31 |     | 
 32 |     |     // Performs a foreign function call via terminal
 33 |     |     function ffi(string[] calldata inputs) external returns (bytes memory result);
 34 |     | 
 35 |     |     // Performs the next smart contract call with specified `msg.sender`
 36 |     |     function prank(address newSender) external;
 37 |     | 
 38 |     |     // Creates a new fork with the given endpoint and the latest block and returns the identifier of the fork
 39 |     |     function createFork(string calldata urlOrAlias) external returns (uint256);
 40 |     | 
 41 |     |     // Takes a fork identifier created by createFork and sets the corresponding forked state as active
 42 |     |     function selectFork(uint256 forkId) external;
 43 |     | 
 44 |     |     // Returns the identifier of the current fork
 45 |     |     function activeFork() external returns (uint256);
 46 |     | 
 47 |     |     // Labels the address in traces
 48 |     |     function label(address addr, string calldata label) external;
 49 |     | 
 50 |     |     /// Sets an address' code.
 51 |     |     function etch(address target, bytes calldata newRuntimeBytecode) external;
 52 |     | }
 53 |     | 
 54 |     | IHevm constant vm = IHevm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);
 55 |     | 
 56 |     | // slither-disable-end shadowing-local
 57 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/Base.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | import {StdStorage} from "./StdStorage.sol";
  5 |     | import {Vm, VmSafe} from "./Vm.sol";
  6 |     | 
  7 |     | abstract contract CommonBase {
  8 |     |     // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.
  9 |     |     address internal constant VM_ADDRESS = address(uint160(uint256(keccak256("hevm cheat code"))));
 10 |     |     // console.sol and console2.sol work by executing a staticcall to this address.
 11 |     |     address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;
 12 |     |     // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.
 13 |     |     address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
 14 |     |     // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.
 15 |     |     address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256("foundry default caller"))));
 16 |     |     // Address of the test contract, deployed by the DEFAULT_SENDER.
 17 |     |     address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;
 18 |     |     // Deterministic deployment address of the Multicall3 contract.
 19 |     |     address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;
 20 |     |     // The order of the secp256k1 curve.
 21 |     |     uint256 internal constant SECP256K1_ORDER =
 22 |     |         115792089237316195423570985008687907852837564279074904382605163141518161494337;
 23 |     | 
 24 |     |     uint256 internal constant UINT256_MAX =
 25 |     |         115792089237316195423570985008687907853269984665640564039457584007913129639935;
 26 |     | 
 27 |     |     Vm internal constant vm = Vm(VM_ADDRESS);
 28 |     |     StdStorage internal stdstore;
 29 |     | }
 30 |     | 
 31 |     | abstract contract TestBase is CommonBase {}
 32 |     | 
 33 |     | abstract contract ScriptBase is CommonBase {
 34 |     |     VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);
 35 |     | }
 36 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdAssertions.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | pragma experimental ABIEncoderV2;
   4 |     | 
   5 |     | import {Vm} from "./Vm.sol";
   6 |     | 
   7 |     | abstract contract StdAssertions {
   8 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
   9 |     | 
  10 |     |     event log(string);
  11 |     |     event logs(bytes);
  12 |     | 
  13 |     |     event log_address(address);
  14 |     |     event log_bytes32(bytes32);
  15 |     |     event log_int(int256);
  16 |     |     event log_uint(uint256);
  17 |     |     event log_bytes(bytes);
  18 |     |     event log_string(string);
  19 |     | 
  20 |     |     event log_named_address(string key, address val);
  21 |     |     event log_named_bytes32(string key, bytes32 val);
  22 |     |     event log_named_decimal_int(string key, int256 val, uint256 decimals);
  23 |     |     event log_named_decimal_uint(string key, uint256 val, uint256 decimals);
  24 |     |     event log_named_int(string key, int256 val);
  25 |     |     event log_named_uint(string key, uint256 val);
  26 |     |     event log_named_bytes(string key, bytes val);
  27 |     |     event log_named_string(string key, string val);
  28 |     | 
  29 |     |     event log_array(uint256[] val);
  30 |     |     event log_array(int256[] val);
  31 |     |     event log_array(address[] val);
  32 |     |     event log_named_array(string key, uint256[] val);
  33 |     |     event log_named_array(string key, int256[] val);
  34 |     |     event log_named_array(string key, address[] val);
  35 |     | 
  36 |     |     bool private _failed;
  37 |     | 
  38 |     |     function failed() public view returns (bool) {
  39 |     |         if (_failed) {
  40 |     |             return _failed;
  41 |     |         } else {
  42 |     |             return vm.load(address(vm), bytes32("failed")) != bytes32(0);
  43 |     |         }
  44 |     |     }
  45 |     | 
  46 |     |     function fail() internal virtual {
  47 |     |         vm.store(address(vm), bytes32("failed"), bytes32(uint256(1)));
  48 |     |         _failed = true;
  49 |     |     }
  50 |     | 
  51 |     |     function assertTrue(bool data) internal pure virtual {
  52 |     |         vm.assertTrue(data);
  53 |     |     }
  54 |     | 
  55 |     |     function assertTrue(bool data, string memory err) internal pure virtual {
  56 |     |         vm.assertTrue(data, err);
  57 |     |     }
  58 |     | 
  59 |     |     function assertFalse(bool data) internal pure virtual {
  60 |     |         vm.assertFalse(data);
  61 |     |     }
  62 |     | 
  63 |     |     function assertFalse(bool data, string memory err) internal pure virtual {
  64 |     |         vm.assertFalse(data, err);
  65 |     |     }
  66 |     | 
  67 |     |     function assertEq(bool left, bool right) internal pure virtual {
  68 |     |         vm.assertEq(left, right);
  69 |     |     }
  70 |     | 
  71 |     |     function assertEq(bool left, bool right, string memory err) internal pure virtual {
  72 |     |         vm.assertEq(left, right, err);
  73 |     |     }
  74 |     | 
  75 |     |     function assertEq(uint256 left, uint256 right) internal pure virtual {
  76 |     |         vm.assertEq(left, right);
  77 |     |     }
  78 |     | 
  79 |     |     function assertEq(uint256 left, uint256 right, string memory err) internal pure virtual {
  80 |     |         vm.assertEq(left, right, err);
  81 |     |     }
  82 |     | 
  83 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
  84 |     |         vm.assertEqDecimal(left, right, decimals);
  85 |     |     }
  86 |     | 
  87 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
  88 |     |         vm.assertEqDecimal(left, right, decimals, err);
  89 |     |     }
  90 |     | 
  91 |     |     function assertEq(int256 left, int256 right) internal pure virtual {
  92 |     |         vm.assertEq(left, right);
  93 |     |     }
  94 |     | 
  95 |     |     function assertEq(int256 left, int256 right, string memory err) internal pure virtual {
  96 |     |         vm.assertEq(left, right, err);
  97 |     |     }
  98 |     | 
  99 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 100 |     |         vm.assertEqDecimal(left, right, decimals);
 101 |     |     }
 102 |     | 
 103 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 104 |     |         vm.assertEqDecimal(left, right, decimals, err);
 105 |     |     }
 106 |     | 
 107 |     |     function assertEq(address left, address right) internal pure virtual {
 108 |     |         vm.assertEq(left, right);
 109 |     |     }
 110 |     | 
 111 |     |     function assertEq(address left, address right, string memory err) internal pure virtual {
 112 |     |         vm.assertEq(left, right, err);
 113 |     |     }
 114 |     | 
 115 |     |     function assertEq(bytes32 left, bytes32 right) internal pure virtual {
 116 |     |         vm.assertEq(left, right);
 117 |     |     }
 118 |     | 
 119 |     |     function assertEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 120 |     |         vm.assertEq(left, right, err);
 121 |     |     }
 122 |     | 
 123 |     |     function assertEq32(bytes32 left, bytes32 right) internal pure virtual {
 124 |     |         assertEq(left, right);
 125 |     |     }
 126 |     | 
 127 |     |     function assertEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 128 |     |         assertEq(left, right, err);
 129 |     |     }
 130 |     | 
 131 |     |     function assertEq(string memory left, string memory right) internal pure virtual {
 132 |     |         vm.assertEq(left, right);
 133 |     |     }
 134 |     | 
 135 |     |     function assertEq(string memory left, string memory right, string memory err) internal pure virtual {
 136 |     |         vm.assertEq(left, right, err);
 137 |     |     }
 138 |     | 
 139 |     |     function assertEq(bytes memory left, bytes memory right) internal pure virtual {
 140 |     |         vm.assertEq(left, right);
 141 |     |     }
 142 |     | 
 143 |     |     function assertEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 144 |     |         vm.assertEq(left, right, err);
 145 |     |     }
 146 |     | 
 147 |     |     function assertEq(bool[] memory left, bool[] memory right) internal pure virtual {
 148 |     |         vm.assertEq(left, right);
 149 |     |     }
 150 |     | 
 151 |     |     function assertEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
 152 |     |         vm.assertEq(left, right, err);
 153 |     |     }
 154 |     | 
 155 |     |     function assertEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
 156 |     |         vm.assertEq(left, right);
 157 |     |     }
 158 |     | 
 159 |     |     function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
 160 |     |         vm.assertEq(left, right, err);
 161 |     |     }
 162 |     | 
 163 |     |     function assertEq(int256[] memory left, int256[] memory right) internal pure virtual {
 164 |     |         vm.assertEq(left, right);
 165 |     |     }
 166 |     | 
 167 |     |     function assertEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
 168 |     |         vm.assertEq(left, right, err);
 169 |     |     }
 170 |     | 
 171 |     |     function assertEq(address[] memory left, address[] memory right) internal pure virtual {
 172 |     |         vm.assertEq(left, right);
 173 |     |     }
 174 |     | 
 175 |     |     function assertEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
 176 |     |         vm.assertEq(left, right, err);
 177 |     |     }
 178 |     | 
 179 |     |     function assertEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
 180 |     |         vm.assertEq(left, right);
 181 |     |     }
 182 |     | 
 183 |     |     function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
 184 |     |         vm.assertEq(left, right, err);
 185 |     |     }
 186 |     | 
 187 |     |     function assertEq(string[] memory left, string[] memory right) internal pure virtual {
 188 |     |         vm.assertEq(left, right);
 189 |     |     }
 190 |     | 
 191 |     |     function assertEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
 192 |     |         vm.assertEq(left, right, err);
 193 |     |     }
 194 |     | 
 195 |     |     function assertEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
 196 |     |         vm.assertEq(left, right);
 197 |     |     }
 198 |     | 
 199 |     |     function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
 200 |     |         vm.assertEq(left, right, err);
 201 |     |     }
 202 |     | 
 203 |     |     // Legacy helper
 204 |     |     function assertEqUint(uint256 left, uint256 right) internal pure virtual {
 205 |     |         assertEq(left, right);
 206 |     |     }
 207 |     | 
 208 |     |     function assertNotEq(bool left, bool right) internal pure virtual {
 209 |     |         vm.assertNotEq(left, right);
 210 |     |     }
 211 |     | 
 212 |     |     function assertNotEq(bool left, bool right, string memory err) internal pure virtual {
 213 |     |         vm.assertNotEq(left, right, err);
 214 |     |     }
 215 |     | 
 216 |     |     function assertNotEq(uint256 left, uint256 right) internal pure virtual {
 217 |     |         vm.assertNotEq(left, right);
 218 |     |     }
 219 |     | 
 220 |     |     function assertNotEq(uint256 left, uint256 right, string memory err) internal pure virtual {
 221 |     |         vm.assertNotEq(left, right, err);
 222 |     |     }
 223 |     | 
 224 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 225 |     |         vm.assertNotEqDecimal(left, right, decimals);
 226 |     |     }
 227 |     | 
 228 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err)
 229 |     |         internal
 230 |     |         pure
 231 |     |         virtual
 232 |     |     {
 233 |     |         vm.assertNotEqDecimal(left, right, decimals, err);
 234 |     |     }
 235 |     | 
 236 |     |     function assertNotEq(int256 left, int256 right) internal pure virtual {
 237 |     |         vm.assertNotEq(left, right);
 238 |     |     }
 239 |     | 
 240 |     |     function assertNotEq(int256 left, int256 right, string memory err) internal pure virtual {
 241 |     |         vm.assertNotEq(left, right, err);
 242 |     |     }
 243 |     | 
 244 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 245 |     |         vm.assertNotEqDecimal(left, right, decimals);
 246 |     |     }
 247 |     | 
 248 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 249 |     |         vm.assertNotEqDecimal(left, right, decimals, err);
 250 |     |     }
 251 |     | 
 252 |     |     function assertNotEq(address left, address right) internal pure virtual {
 253 |     |         vm.assertNotEq(left, right);
 254 |     |     }
 255 |     | 
 256 |     |     function assertNotEq(address left, address right, string memory err) internal pure virtual {
 257 |     |         vm.assertNotEq(left, right, err);
 258 |     |     }
 259 |     | 
 260 |     |     function assertNotEq(bytes32 left, bytes32 right) internal pure virtual {
 261 |     |         vm.assertNotEq(left, right);
 262 |     |     }
 263 |     | 
 264 |     |     function assertNotEq(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 265 |     |         vm.assertNotEq(left, right, err);
 266 |     |     }
 267 |     | 
 268 |     |     function assertNotEq32(bytes32 left, bytes32 right) internal pure virtual {
 269 |     |         assertNotEq(left, right);
 270 |     |     }
 271 |     | 
 272 |     |     function assertNotEq32(bytes32 left, bytes32 right, string memory err) internal pure virtual {
 273 |     |         assertNotEq(left, right, err);
 274 |     |     }
 275 |     | 
 276 |     |     function assertNotEq(string memory left, string memory right) internal pure virtual {
 277 |     |         vm.assertNotEq(left, right);
 278 |     |     }
 279 |     | 
 280 |     |     function assertNotEq(string memory left, string memory right, string memory err) internal pure virtual {
 281 |     |         vm.assertNotEq(left, right, err);
 282 |     |     }
 283 |     | 
 284 |     |     function assertNotEq(bytes memory left, bytes memory right) internal pure virtual {
 285 |     |         vm.assertNotEq(left, right);
 286 |     |     }
 287 |     | 
 288 |     |     function assertNotEq(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 289 |     |         vm.assertNotEq(left, right, err);
 290 |     |     }
 291 |     | 
 292 |     |     function assertNotEq(bool[] memory left, bool[] memory right) internal pure virtual {
 293 |     |         vm.assertNotEq(left, right);
 294 |     |     }
 295 |     | 
 296 |     |     function assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal pure virtual {
 297 |     |         vm.assertNotEq(left, right, err);
 298 |     |     }
 299 |     | 
 300 |     |     function assertNotEq(uint256[] memory left, uint256[] memory right) internal pure virtual {
 301 |     |         vm.assertNotEq(left, right);
 302 |     |     }
 303 |     | 
 304 |     |     function assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal pure virtual {
 305 |     |         vm.assertNotEq(left, right, err);
 306 |     |     }
 307 |     | 
 308 |     |     function assertNotEq(int256[] memory left, int256[] memory right) internal pure virtual {
 309 |     |         vm.assertNotEq(left, right);
 310 |     |     }
 311 |     | 
 312 |     |     function assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal pure virtual {
 313 |     |         vm.assertNotEq(left, right, err);
 314 |     |     }
 315 |     | 
 316 |     |     function assertNotEq(address[] memory left, address[] memory right) internal pure virtual {
 317 |     |         vm.assertNotEq(left, right);
 318 |     |     }
 319 |     | 
 320 |     |     function assertNotEq(address[] memory left, address[] memory right, string memory err) internal pure virtual {
 321 |     |         vm.assertNotEq(left, right, err);
 322 |     |     }
 323 |     | 
 324 |     |     function assertNotEq(bytes32[] memory left, bytes32[] memory right) internal pure virtual {
 325 |     |         vm.assertNotEq(left, right);
 326 |     |     }
 327 |     | 
 328 |     |     function assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal pure virtual {
 329 |     |         vm.assertNotEq(left, right, err);
 330 |     |     }
 331 |     | 
 332 |     |     function assertNotEq(string[] memory left, string[] memory right) internal pure virtual {
 333 |     |         vm.assertNotEq(left, right);
 334 |     |     }
 335 |     | 
 336 |     |     function assertNotEq(string[] memory left, string[] memory right, string memory err) internal pure virtual {
 337 |     |         vm.assertNotEq(left, right, err);
 338 |     |     }
 339 |     | 
 340 |     |     function assertNotEq(bytes[] memory left, bytes[] memory right) internal pure virtual {
 341 |     |         vm.assertNotEq(left, right);
 342 |     |     }
 343 |     | 
 344 |     |     function assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal pure virtual {
 345 |     |         vm.assertNotEq(left, right, err);
 346 |     |     }
 347 |     | 
 348 |     |     function assertLt(uint256 left, uint256 right) internal pure virtual {
 349 |     |         vm.assertLt(left, right);
 350 |     |     }
 351 |     | 
 352 |     |     function assertLt(uint256 left, uint256 right, string memory err) internal pure virtual {
 353 |     |         vm.assertLt(left, right, err);
 354 |     |     }
 355 |     | 
 356 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 357 |     |         vm.assertLtDecimal(left, right, decimals);
 358 |     |     }
 359 |     | 
 360 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 361 |     |         vm.assertLtDecimal(left, right, decimals, err);
 362 |     |     }
 363 |     | 
 364 |     |     function assertLt(int256 left, int256 right) internal pure virtual {
 365 |     |         vm.assertLt(left, right);
 366 |     |     }
 367 |     | 
 368 |     |     function assertLt(int256 left, int256 right, string memory err) internal pure virtual {
 369 |     |         vm.assertLt(left, right, err);
 370 |     |     }
 371 |     | 
 372 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 373 |     |         vm.assertLtDecimal(left, right, decimals);
 374 |     |     }
 375 |     | 
 376 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 377 |     |         vm.assertLtDecimal(left, right, decimals, err);
 378 |     |     }
 379 |     | 
 380 |     |     function assertGt(uint256 left, uint256 right) internal pure virtual {
 381 |     |         vm.assertGt(left, right);
 382 |     |     }
 383 |     | 
 384 |     |     function assertGt(uint256 left, uint256 right, string memory err) internal pure virtual {
 385 |     |         vm.assertGt(left, right, err);
 386 |     |     }
 387 |     | 
 388 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 389 |     |         vm.assertGtDecimal(left, right, decimals);
 390 |     |     }
 391 |     | 
 392 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 393 |     |         vm.assertGtDecimal(left, right, decimals, err);
 394 |     |     }
 395 |     | 
 396 |     |     function assertGt(int256 left, int256 right) internal pure virtual {
 397 |     |         vm.assertGt(left, right);
 398 |     |     }
 399 |     | 
 400 |     |     function assertGt(int256 left, int256 right, string memory err) internal pure virtual {
 401 |     |         vm.assertGt(left, right, err);
 402 |     |     }
 403 |     | 
 404 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 405 |     |         vm.assertGtDecimal(left, right, decimals);
 406 |     |     }
 407 |     | 
 408 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 409 |     |         vm.assertGtDecimal(left, right, decimals, err);
 410 |     |     }
 411 |     | 
 412 |     |     function assertLe(uint256 left, uint256 right) internal pure virtual {
 413 |     |         vm.assertLe(left, right);
 414 |     |     }
 415 |     | 
 416 |     |     function assertLe(uint256 left, uint256 right, string memory err) internal pure virtual {
 417 |     |         vm.assertLe(left, right, err);
 418 |     |     }
 419 |     | 
 420 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 421 |     |         vm.assertLeDecimal(left, right, decimals);
 422 |     |     }
 423 |     | 
 424 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 425 |     |         vm.assertLeDecimal(left, right, decimals, err);
 426 |     |     }
 427 |     | 
 428 |     |     function assertLe(int256 left, int256 right) internal pure virtual {
 429 |     |         vm.assertLe(left, right);
 430 |     |     }
 431 |     | 
 432 |     |     function assertLe(int256 left, int256 right, string memory err) internal pure virtual {
 433 |     |         vm.assertLe(left, right, err);
 434 |     |     }
 435 |     | 
 436 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 437 |     |         vm.assertLeDecimal(left, right, decimals);
 438 |     |     }
 439 |     | 
 440 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 441 |     |         vm.assertLeDecimal(left, right, decimals, err);
 442 |     |     }
 443 |     | 
 444 |     |     function assertGe(uint256 left, uint256 right) internal pure virtual {
 445 |     |         vm.assertGe(left, right);
 446 |     |     }
 447 |     | 
 448 |     |     function assertGe(uint256 left, uint256 right, string memory err) internal pure virtual {
 449 |     |         vm.assertGe(left, right, err);
 450 |     |     }
 451 |     | 
 452 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal pure virtual {
 453 |     |         vm.assertGeDecimal(left, right, decimals);
 454 |     |     }
 455 |     | 
 456 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal pure virtual {
 457 |     |         vm.assertGeDecimal(left, right, decimals, err);
 458 |     |     }
 459 |     | 
 460 |     |     function assertGe(int256 left, int256 right) internal pure virtual {
 461 |     |         vm.assertGe(left, right);
 462 |     |     }
 463 |     | 
 464 |     |     function assertGe(int256 left, int256 right, string memory err) internal pure virtual {
 465 |     |         vm.assertGe(left, right, err);
 466 |     |     }
 467 |     | 
 468 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal pure virtual {
 469 |     |         vm.assertGeDecimal(left, right, decimals);
 470 |     |     }
 471 |     | 
 472 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal pure virtual {
 473 |     |         vm.assertGeDecimal(left, right, decimals, err);
 474 |     |     }
 475 |     | 
 476 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal pure virtual {
 477 |     |         vm.assertApproxEqAbs(left, right, maxDelta);
 478 |     |     }
 479 |     | 
 480 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err)
 481 |     |         internal
 482 |     |         pure
 483 |     |         virtual
 484 |     |     {
 485 |     |         vm.assertApproxEqAbs(left, right, maxDelta, err);
 486 |     |     }
 487 |     | 
 488 |     |     function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals)
 489 |     |         internal
 490 |     |         pure
 491 |     |         virtual
 492 |     |     {
 493 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);
 494 |     |     }
 495 |     | 
 496 |     |     function assertApproxEqAbsDecimal(
 497 |     |         uint256 left,
 498 |     |         uint256 right,
 499 |     |         uint256 maxDelta,
 500 |     |         uint256 decimals,
 501 |     |         string memory err
 502 |     |     ) internal pure virtual {
 503 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);
 504 |     |     }
 505 |     | 
 506 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal pure virtual {
 507 |     |         vm.assertApproxEqAbs(left, right, maxDelta);
 508 |     |     }
 509 |     | 
 510 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal pure virtual {
 511 |     |         vm.assertApproxEqAbs(left, right, maxDelta, err);
 512 |     |     }
 513 |     | 
 514 |     |     function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals)
 515 |     |         internal
 516 |     |         pure
 517 |     |         virtual
 518 |     |     {
 519 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals);
 520 |     |     }
 521 |     | 
 522 |     |     function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err)
 523 |     |         internal
 524 |     |         pure
 525 |     |         virtual
 526 |     |     {
 527 |     |         vm.assertApproxEqAbsDecimal(left, right, maxDelta, decimals, err);
 528 |     |     }
 529 |     | 
 530 |     |     function assertApproxEqRel(
 531 |     |         uint256 left,
 532 |     |         uint256 right,
 533 |     |         uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%
 534 |     |     ) internal pure virtual {
 535 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta);
 536 |     |     }
 537 |     | 
 538 |     |     function assertApproxEqRel(
 539 |     |         uint256 left,
 540 |     |         uint256 right,
 541 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 542 |     |         string memory err
 543 |     |     ) internal pure virtual {
 544 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta, err);
 545 |     |     }
 546 |     | 
 547 |     |     function assertApproxEqRelDecimal(
 548 |     |         uint256 left,
 549 |     |         uint256 right,
 550 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 551 |     |         uint256 decimals
 552 |     |     ) internal pure virtual {
 553 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);
 554 |     |     }
 555 |     | 
 556 |     |     function assertApproxEqRelDecimal(
 557 |     |         uint256 left,
 558 |     |         uint256 right,
 559 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 560 |     |         uint256 decimals,
 561 |     |         string memory err
 562 |     |     ) internal pure virtual {
 563 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);
 564 |     |     }
 565 |     | 
 566 |     |     function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal pure virtual {
 567 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta);
 568 |     |     }
 569 |     | 
 570 |     |     function assertApproxEqRel(
 571 |     |         int256 left,
 572 |     |         int256 right,
 573 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 574 |     |         string memory err
 575 |     |     ) internal pure virtual {
 576 |     |         vm.assertApproxEqRel(left, right, maxPercentDelta, err);
 577 |     |     }
 578 |     | 
 579 |     |     function assertApproxEqRelDecimal(
 580 |     |         int256 left,
 581 |     |         int256 right,
 582 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 583 |     |         uint256 decimals
 584 |     |     ) internal pure virtual {
 585 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);
 586 |     |     }
 587 |     | 
 588 |     |     function assertApproxEqRelDecimal(
 589 |     |         int256 left,
 590 |     |         int256 right,
 591 |     |         uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
 592 |     |         uint256 decimals,
 593 |     |         string memory err
 594 |     |     ) internal pure virtual {
 595 |     |         vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);
 596 |     |     }
 597 |     | 
 598 |     |     // Inherited from DSTest, not used but kept for backwards-compatibility
 599 |     |     function checkEq0(bytes memory left, bytes memory right) internal pure returns (bool) {
 600 |     |         return keccak256(left) == keccak256(right);
 601 |     |     }
 602 |     | 
 603 |     |     function assertEq0(bytes memory left, bytes memory right) internal pure virtual {
 604 |     |         assertEq(left, right);
 605 |     |     }
 606 |     | 
 607 |     |     function assertEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 608 |     |         assertEq(left, right, err);
 609 |     |     }
 610 |     | 
 611 |     |     function assertNotEq0(bytes memory left, bytes memory right) internal pure virtual {
 612 |     |         assertNotEq(left, right);
 613 |     |     }
 614 |     | 
 615 |     |     function assertNotEq0(bytes memory left, bytes memory right, string memory err) internal pure virtual {
 616 |     |         assertNotEq(left, right, err);
 617 |     |     }
 618 |     | 
 619 |     |     function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {
 620 |     |         assertEqCall(target, callDataA, target, callDataB, true);
 621 |     |     }
 622 |     | 
 623 |     |     function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)
 624 |     |         internal
 625 |     |         virtual
 626 |     |     {
 627 |     |         assertEqCall(targetA, callDataA, targetB, callDataB, true);
 628 |     |     }
 629 |     | 
 630 |     |     function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)
 631 |     |         internal
 632 |     |         virtual
 633 |     |     {
 634 |     |         assertEqCall(target, callDataA, target, callDataB, strictRevertData);
 635 |     |     }
 636 |     | 
 637 |     |     function assertEqCall(
 638 |     |         address targetA,
 639 |     |         bytes memory callDataA,
 640 |     |         address targetB,
 641 |     |         bytes memory callDataB,
 642 |     |         bool strictRevertData
 643 |     |     ) internal virtual {
 644 |     |         (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);
 645 |     |         (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);
 646 |     | 
 647 |     |         if (successA && successB) {
 648 |     |             assertEq(returnDataA, returnDataB, "Call return data does not match");
 649 |     |         }
 650 |     | 
 651 |     |         if (!successA && !successB && strictRevertData) {
 652 |     |             assertEq(returnDataA, returnDataB, "Call revert data does not match");
 653 |     |         }
 654 |     | 
 655 |     |         if (!successA && successB) {
 656 |     |             emit log("Error: Calls were not equal");
 657 |     |             emit log_named_bytes("  Left call revert data", returnDataA);
 658 |     |             emit log_named_bytes(" Right call return data", returnDataB);
 659 |     |             revert("assertion failed");
 660 |     |         }
 661 |     | 
 662 |     |         if (successA && !successB) {
 663 |     |             emit log("Error: Calls were not equal");
 664 |     |             emit log_named_bytes("  Left call return data", returnDataA);
 665 |     |             emit log_named_bytes(" Right call revert data", returnDataB);
 666 |     |             revert("assertion failed");
 667 |     |         }
 668 |     |     }
 669 |     | }
 670 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdChains.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {VmSafe} from "./Vm.sol";
   5 |     | 
   6 |     | /**
   7 |     |  * StdChains provides information about EVM compatible chains that can be used in scripts/tests.
   8 |     |  * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are
   9 |     |  * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of
  10 |     |  * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the
  11 |     |  * alias used in this contract, which can be found as the first argument to the
  12 |     |  * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.
  13 |     |  *
  14 |     |  * There are two main ways to use this contract:
  15 |     |  *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or
  16 |     |  *      `setChain(string memory chainAlias, Chain memory chain)`
  17 |     |  *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.
  18 |     |  *
  19 |     |  * The first time either of those are used, chains are initialized with the default set of RPC URLs.
  20 |     |  * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in
  21 |     |  * `defaultRpcUrls`.
  22 |     |  *
  23 |     |  * The `setChain` function is straightforward, and it simply saves off the given chain data.
  24 |     |  *
  25 |     |  * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say
  26 |     |  * we want to retrieve the RPC URL for `mainnet`:
  27 |     |  *   - If you have specified data with `setChain`, it will return that.
  28 |     |  *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it
  29 |     |  *     is valid (e.g. a URL is specified, or an environment variable is given and exists).
  30 |     |  *   - If neither of the above conditions is met, the default data is returned.
  31 |     |  *
  32 |     |  * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.
  33 |     |  */
  34 |     | abstract contract StdChains {
  35 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  36 |     | 
  37 |     |     bool private stdChainsInitialized;
  38 |     | 
  39 |     |     struct ChainData {
  40 |     |         string name;
  41 |     |         uint256 chainId;
  42 |     |         string rpcUrl;
  43 |     |     }
  44 |     | 
  45 |     |     struct Chain {
  46 |     |         // The chain name.
  47 |     |         string name;
  48 |     |         // The chain's Chain ID.
  49 |     |         uint256 chainId;
  50 |     |         // The chain's alias. (i.e. what gets specified in `foundry.toml`).
  51 |     |         string chainAlias;
  52 |     |         // A default RPC endpoint for this chain.
  53 |     |         // NOTE: This default RPC URL is included for convenience to facilitate quick tests and
  54 |     |         // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy
  55 |     |         // usage as you will be throttled and this is a disservice to others who need this endpoint.
  56 |     |         string rpcUrl;
  57 |     |     }
  58 |     | 
  59 |     |     // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.
  60 |     |     mapping(string => Chain) private chains;
  61 |     |     // Maps from the chain's alias to it's default RPC URL.
  62 |     |     mapping(string => string) private defaultRpcUrls;
  63 |     |     // Maps from a chain ID to it's alias.
  64 |     |     mapping(uint256 => string) private idToAlias;
  65 |     | 
  66 |     |     bool private fallbackToDefaultRpcUrls = true;
  67 |     | 
  68 |     |     // The RPC URL will be fetched from config or defaultRpcUrls if possible.
  69 |     |     function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {
  70 |     |         require(bytes(chainAlias).length != 0, "StdChains getChain(string): Chain alias cannot be the empty string.");
  71 |     | 
  72 |     |         initializeStdChains();
  73 |     |         chain = chains[chainAlias];
  74 |     |         require(
  75 |     |             chain.chainId != 0,
  76 |     |             string(abi.encodePacked("StdChains getChain(string): Chain with alias \"", chainAlias, "\" not found."))
  77 |     |         );
  78 |     | 
  79 |     |         chain = getChainWithUpdatedRpcUrl(chainAlias, chain);
  80 |     |     }
  81 |     | 
  82 |     |     function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {
  83 |     |         require(chainId != 0, "StdChains getChain(uint256): Chain ID cannot be 0.");
  84 |     |         initializeStdChains();
  85 |     |         string memory chainAlias = idToAlias[chainId];
  86 |     | 
  87 |     |         chain = chains[chainAlias];
  88 |     | 
  89 |     |         require(
  90 |     |             chain.chainId != 0,
  91 |     |             string(abi.encodePacked("StdChains getChain(uint256): Chain with ID ", vm.toString(chainId), " not found."))
  92 |     |         );
  93 |     | 
  94 |     |         chain = getChainWithUpdatedRpcUrl(chainAlias, chain);
  95 |     |     }
  96 |     | 
  97 |     |     // set chain info, with priority to argument's rpcUrl field.
  98 |     |     function setChain(string memory chainAlias, ChainData memory chain) internal virtual {
  99 |     |         require(
 100 |     |             bytes(chainAlias).length != 0,
 101 |     |             "StdChains setChain(string,ChainData): Chain alias cannot be the empty string."
 102 |     |         );
 103 |     | 
 104 |     |         require(chain.chainId != 0, "StdChains setChain(string,ChainData): Chain ID cannot be 0.");
 105 |     | 
 106 |     |         initializeStdChains();
 107 |     |         string memory foundAlias = idToAlias[chain.chainId];
 108 |     | 
 109 |     |         require(
 110 |     |             bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),
 111 |     |             string(
 112 |     |                 abi.encodePacked(
 113 |     |                     "StdChains setChain(string,ChainData): Chain ID ",
 114 |     |                     vm.toString(chain.chainId),
 115 |     |                     " already used by \"",
 116 |     |                     foundAlias,
 117 |     |                     "\"."
 118 |     |                 )
 119 |     |             )
 120 |     |         );
 121 |     | 
 122 |     |         uint256 oldChainId = chains[chainAlias].chainId;
 123 |     |         delete idToAlias[oldChainId];
 124 |     | 
 125 |     |         chains[chainAlias] =
 126 |     |             Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});
 127 |     |         idToAlias[chain.chainId] = chainAlias;
 128 |     |     }
 129 |     | 
 130 |     |     // set chain info, with priority to argument's rpcUrl field.
 131 |     |     function setChain(string memory chainAlias, Chain memory chain) internal virtual {
 132 |     |         setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));
 133 |     |     }
 134 |     | 
 135 |     |     function _toUpper(string memory str) private pure returns (string memory) {
 136 |     |         bytes memory strb = bytes(str);
 137 |     |         bytes memory copy = new bytes(strb.length);
 138 |     |         for (uint256 i = 0; i < strb.length; i++) {
 139 |     |             bytes1 b = strb[i];
 140 |     |             if (b >= 0x61 && b <= 0x7A) {
 141 |     |                 copy[i] = bytes1(uint8(b) - 32);
 142 |     |             } else {
 143 |     |                 copy[i] = b;
 144 |     |             }
 145 |     |         }
 146 |     |         return string(copy);
 147 |     |     }
 148 |     | 
 149 |     |     // lookup rpcUrl, in descending order of priority:
 150 |     |     // current -> config (foundry.toml) -> environment variable -> default
 151 |     |     function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)
 152 |     |         private
 153 |     |         view
 154 |     |         returns (Chain memory)
 155 |     |     {
 156 |     |         if (bytes(chain.rpcUrl).length == 0) {
 157 |     |             try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {
 158 |     |                 chain.rpcUrl = configRpcUrl;
 159 |     |             } catch (bytes memory err) {
 160 |     |                 string memory envName = string(abi.encodePacked(_toUpper(chainAlias), "_RPC_URL"));
 161 |     |                 if (fallbackToDefaultRpcUrls) {
 162 |     |                     chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);
 163 |     |                 } else {
 164 |     |                     chain.rpcUrl = vm.envString(envName);
 165 |     |                 }
 166 |     |                 // Distinguish 'not found' from 'cannot read'
 167 |     |                 // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions
 168 |     |                 bytes memory oldNotFoundError =
 169 |     |                     abi.encodeWithSignature("CheatCodeError", string(abi.encodePacked("invalid rpc url ", chainAlias)));
 170 |     |                 bytes memory newNotFoundError = abi.encodeWithSignature(
 171 |     |                     "CheatcodeError(string)", string(abi.encodePacked("invalid rpc url: ", chainAlias))
 172 |     |                 );
 173 |     |                 bytes32 errHash = keccak256(err);
 174 |     |                 if (
 175 |     |                     (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))
 176 |     |                         || bytes(chain.rpcUrl).length == 0
 177 |     |                 ) {
 178 |     |                     /// @solidity memory-safe-assembly
 179 |     |                     assembly {
 180 |     |                         revert(add(32, err), mload(err))
 181 |     |                     }
 182 |     |                 }
 183 |     |             }
 184 |     |         }
 185 |     |         return chain;
 186 |     |     }
 187 |     | 
 188 |     |     function setFallbackToDefaultRpcUrls(bool useDefault) internal {
 189 |     |         fallbackToDefaultRpcUrls = useDefault;
 190 |     |     }
 191 |     | 
 192 |     |     function initializeStdChains() private {
 193 |     |         if (stdChainsInitialized) return;
 194 |     | 
 195 |     |         stdChainsInitialized = true;
 196 |     | 
 197 |     |         // If adding an RPC here, make sure to test the default RPC URL in `test_Rpcs` in `StdChains.t.sol`
 198 |     |         setChainWithDefaultRpcUrl("anvil", ChainData("Anvil", 31337, "http://127.0.0.1:8545"));
 199 |     |         setChainWithDefaultRpcUrl(
 200 |     |             "mainnet", ChainData("Mainnet", 1, "https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP")
 201 |     |         );
 202 |     |         setChainWithDefaultRpcUrl(
 203 |     |             "sepolia", ChainData("Sepolia", 11155111, "https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001")
 204 |     |         );
 205 |     |         setChainWithDefaultRpcUrl("holesky", ChainData("Holesky", 17000, "https://rpc.holesky.ethpandaops.io"));
 206 |     |         setChainWithDefaultRpcUrl("optimism", ChainData("Optimism", 10, "https://mainnet.optimism.io"));
 207 |     |         setChainWithDefaultRpcUrl(
 208 |     |             "optimism_sepolia", ChainData("Optimism Sepolia", 11155420, "https://sepolia.optimism.io")
 209 |     |         );
 210 |     |         setChainWithDefaultRpcUrl("arbitrum_one", ChainData("Arbitrum One", 42161, "https://arb1.arbitrum.io/rpc"));
 211 |     |         setChainWithDefaultRpcUrl(
 212 |     |             "arbitrum_one_sepolia", ChainData("Arbitrum One Sepolia", 421614, "https://sepolia-rollup.arbitrum.io/rpc")
 213 |     |         );
 214 |     |         setChainWithDefaultRpcUrl("arbitrum_nova", ChainData("Arbitrum Nova", 42170, "https://nova.arbitrum.io/rpc"));
 215 |     |         setChainWithDefaultRpcUrl("polygon", ChainData("Polygon", 137, "https://polygon-rpc.com"));
 216 |     |         setChainWithDefaultRpcUrl(
 217 |     |             "polygon_amoy", ChainData("Polygon Amoy", 80002, "https://rpc-amoy.polygon.technology")
 218 |     |         );
 219 |     |         setChainWithDefaultRpcUrl("avalanche", ChainData("Avalanche", 43114, "https://api.avax.network/ext/bc/C/rpc"));
 220 |     |         setChainWithDefaultRpcUrl(
 221 |     |             "avalanche_fuji", ChainData("Avalanche Fuji", 43113, "https://api.avax-test.network/ext/bc/C/rpc")
 222 |     |         );
 223 |     |         setChainWithDefaultRpcUrl(
 224 |     |             "bnb_smart_chain", ChainData("BNB Smart Chain", 56, "https://bsc-dataseed1.binance.org")
 225 |     |         );
 226 |     |         setChainWithDefaultRpcUrl(
 227 |     |             "bnb_smart_chain_testnet",
 228 |     |             ChainData("BNB Smart Chain Testnet", 97, "https://rpc.ankr.com/bsc_testnet_chapel")
 229 |     |         );
 230 |     |         setChainWithDefaultRpcUrl("gnosis_chain", ChainData("Gnosis Chain", 100, "https://rpc.gnosischain.com"));
 231 |     |         setChainWithDefaultRpcUrl("moonbeam", ChainData("Moonbeam", 1284, "https://rpc.api.moonbeam.network"));
 232 |     |         setChainWithDefaultRpcUrl(
 233 |     |             "moonriver", ChainData("Moonriver", 1285, "https://rpc.api.moonriver.moonbeam.network")
 234 |     |         );
 235 |     |         setChainWithDefaultRpcUrl("moonbase", ChainData("Moonbase", 1287, "https://rpc.testnet.moonbeam.network"));
 236 |     |         setChainWithDefaultRpcUrl("base_sepolia", ChainData("Base Sepolia", 84532, "https://sepolia.base.org"));
 237 |     |         setChainWithDefaultRpcUrl("base", ChainData("Base", 8453, "https://mainnet.base.org"));
 238 |     |         setChainWithDefaultRpcUrl("blast_sepolia", ChainData("Blast Sepolia", 168587773, "https://sepolia.blast.io"));
 239 |     |         setChainWithDefaultRpcUrl("blast", ChainData("Blast", 81457, "https://rpc.blast.io"));
 240 |     |         setChainWithDefaultRpcUrl("fantom_opera", ChainData("Fantom Opera", 250, "https://rpc.ankr.com/fantom/"));
 241 |     |         setChainWithDefaultRpcUrl(
 242 |     |             "fantom_opera_testnet", ChainData("Fantom Opera Testnet", 4002, "https://rpc.ankr.com/fantom_testnet/")
 243 |     |         );
 244 |     |         setChainWithDefaultRpcUrl("fraxtal", ChainData("Fraxtal", 252, "https://rpc.frax.com"));
 245 |     |         setChainWithDefaultRpcUrl("fraxtal_testnet", ChainData("Fraxtal Testnet", 2522, "https://rpc.testnet.frax.com"));
 246 |     |         setChainWithDefaultRpcUrl(
 247 |     |             "berachain_bartio_testnet", ChainData("Berachain bArtio Testnet", 80084, "https://bartio.rpc.berachain.com")
 248 |     |         );
 249 |     |         setChainWithDefaultRpcUrl("flare", ChainData("Flare", 14, "https://flare-api.flare.network/ext/C/rpc"));
 250 |     |         setChainWithDefaultRpcUrl(
 251 |     |             "flare_coston2", ChainData("Flare Coston2", 114, "https://coston2-api.flare.network/ext/C/rpc")
 252 |     |         );
 253 |     |     }
 254 |     | 
 255 |     |     // set chain info, with priority to chainAlias' rpc url in foundry.toml
 256 |     |     function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {
 257 |     |         string memory rpcUrl = chain.rpcUrl;
 258 |     |         defaultRpcUrls[chainAlias] = rpcUrl;
 259 |     |         chain.rpcUrl = "";
 260 |     |         setChain(chainAlias, chain);
 261 |     |         chain.rpcUrl = rpcUrl; // restore argument
 262 |     |     }
 263 |     | }
 264 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdCheats.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {StdStorage, stdStorage} from "./StdStorage.sol";
   7 |     | import {console2} from "./console2.sol";
   8 |     | import {Vm} from "./Vm.sol";
   9 |     | 
  10 |     | abstract contract StdCheatsSafe {
  11 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
  12 |     | 
  13 |     |     uint256 private constant UINT256_MAX =
  14 |     |         115792089237316195423570985008687907853269984665640564039457584007913129639935;
  15 |     | 
  16 |     |     bool private gasMeteringOff;
  17 |     | 
  18 |     |     // Data structures to parse Transaction objects from the broadcast artifact
  19 |     |     // that conform to EIP1559. The Raw structs is what is parsed from the JSON
  20 |     |     // and then converted to the one that is used by the user for better UX.
  21 |     | 
  22 |     |     struct RawTx1559 {
  23 |     |         string[] arguments;
  24 |     |         address contractAddress;
  25 |     |         string contractName;
  26 |     |         // json value name = function
  27 |     |         string functionSig;
  28 |     |         bytes32 hash;
  29 |     |         // json value name = tx
  30 |     |         RawTx1559Detail txDetail;
  31 |     |         // json value name = type
  32 |     |         string opcode;
  33 |     |     }
  34 |     | 
  35 |     |     struct RawTx1559Detail {
  36 |     |         AccessList[] accessList;
  37 |     |         bytes data;
  38 |     |         address from;
  39 |     |         bytes gas;
  40 |     |         bytes nonce;
  41 |     |         address to;
  42 |     |         bytes txType;
  43 |     |         bytes value;
  44 |     |     }
  45 |     | 
  46 |     |     struct Tx1559 {
  47 |     |         string[] arguments;
  48 |     |         address contractAddress;
  49 |     |         string contractName;
  50 |     |         string functionSig;
  51 |     |         bytes32 hash;
  52 |     |         Tx1559Detail txDetail;
  53 |     |         string opcode;
  54 |     |     }
  55 |     | 
  56 |     |     struct Tx1559Detail {
  57 |     |         AccessList[] accessList;
  58 |     |         bytes data;
  59 |     |         address from;
  60 |     |         uint256 gas;
  61 |     |         uint256 nonce;
  62 |     |         address to;
  63 |     |         uint256 txType;
  64 |     |         uint256 value;
  65 |     |     }
  66 |     | 
  67 |     |     // Data structures to parse Transaction objects from the broadcast artifact
  68 |     |     // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON
  69 |     |     // and then converted to the one that is used by the user for better UX.
  70 |     | 
  71 |     |     struct TxLegacy {
  72 |     |         string[] arguments;
  73 |     |         address contractAddress;
  74 |     |         string contractName;
  75 |     |         string functionSig;
  76 |     |         string hash;
  77 |     |         string opcode;
  78 |     |         TxDetailLegacy transaction;
  79 |     |     }
  80 |     | 
  81 |     |     struct TxDetailLegacy {
  82 |     |         AccessList[] accessList;
  83 |     |         uint256 chainId;
  84 |     |         bytes data;
  85 |     |         address from;
  86 |     |         uint256 gas;
  87 |     |         uint256 gasPrice;
  88 |     |         bytes32 hash;
  89 |     |         uint256 nonce;
  90 |     |         bytes1 opcode;
  91 |     |         bytes32 r;
  92 |     |         bytes32 s;
  93 |     |         uint256 txType;
  94 |     |         address to;
  95 |     |         uint8 v;
  96 |     |         uint256 value;
  97 |     |     }
  98 |     | 
  99 |     |     struct AccessList {
 100 |     |         address accessAddress;
 101 |     |         bytes32[] storageKeys;
 102 |     |     }
 103 |     | 
 104 |     |     // Data structures to parse Receipt objects from the broadcast artifact.
 105 |     |     // The Raw structs is what is parsed from the JSON
 106 |     |     // and then converted to the one that is used by the user for better UX.
 107 |     | 
 108 |     |     struct RawReceipt {
 109 |     |         bytes32 blockHash;
 110 |     |         bytes blockNumber;
 111 |     |         address contractAddress;
 112 |     |         bytes cumulativeGasUsed;
 113 |     |         bytes effectiveGasPrice;
 114 |     |         address from;
 115 |     |         bytes gasUsed;
 116 |     |         RawReceiptLog[] logs;
 117 |     |         bytes logsBloom;
 118 |     |         bytes status;
 119 |     |         address to;
 120 |     |         bytes32 transactionHash;
 121 |     |         bytes transactionIndex;
 122 |     |     }
 123 |     | 
 124 |     |     struct Receipt {
 125 |     |         bytes32 blockHash;
 126 |     |         uint256 blockNumber;
 127 |     |         address contractAddress;
 128 |     |         uint256 cumulativeGasUsed;
 129 |     |         uint256 effectiveGasPrice;
 130 |     |         address from;
 131 |     |         uint256 gasUsed;
 132 |     |         ReceiptLog[] logs;
 133 |     |         bytes logsBloom;
 134 |     |         uint256 status;
 135 |     |         address to;
 136 |     |         bytes32 transactionHash;
 137 |     |         uint256 transactionIndex;
 138 |     |     }
 139 |     | 
 140 |     |     // Data structures to parse the entire broadcast artifact, assuming the
 141 |     |     // transactions conform to EIP1559.
 142 |     | 
 143 |     |     struct EIP1559ScriptArtifact {
 144 |     |         string[] libraries;
 145 |     |         string path;
 146 |     |         string[] pending;
 147 |     |         Receipt[] receipts;
 148 |     |         uint256 timestamp;
 149 |     |         Tx1559[] transactions;
 150 |     |         TxReturn[] txReturns;
 151 |     |     }
 152 |     | 
 153 |     |     struct RawEIP1559ScriptArtifact {
 154 |     |         string[] libraries;
 155 |     |         string path;
 156 |     |         string[] pending;
 157 |     |         RawReceipt[] receipts;
 158 |     |         TxReturn[] txReturns;
 159 |     |         uint256 timestamp;
 160 |     |         RawTx1559[] transactions;
 161 |     |     }
 162 |     | 
 163 |     |     struct RawReceiptLog {
 164 |     |         // json value = address
 165 |     |         address logAddress;
 166 |     |         bytes32 blockHash;
 167 |     |         bytes blockNumber;
 168 |     |         bytes data;
 169 |     |         bytes logIndex;
 170 |     |         bool removed;
 171 |     |         bytes32[] topics;
 172 |     |         bytes32 transactionHash;
 173 |     |         bytes transactionIndex;
 174 |     |         bytes transactionLogIndex;
 175 |     |     }
 176 |     | 
 177 |     |     struct ReceiptLog {
 178 |     |         // json value = address
 179 |     |         address logAddress;
 180 |     |         bytes32 blockHash;
 181 |     |         uint256 blockNumber;
 182 |     |         bytes data;
 183 |     |         uint256 logIndex;
 184 |     |         bytes32[] topics;
 185 |     |         uint256 transactionIndex;
 186 |     |         uint256 transactionLogIndex;
 187 |     |         bool removed;
 188 |     |     }
 189 |     | 
 190 |     |     struct TxReturn {
 191 |     |         string internalType;
 192 |     |         string value;
 193 |     |     }
 194 |     | 
 195 |     |     struct Account {
 196 |     |         address addr;
 197 |     |         uint256 key;
 198 |     |     }
 199 |     | 
 200 |     |     enum AddressType {
 201 |     |         Payable,
 202 |     |         NonPayable,
 203 |     |         ZeroAddress,
 204 |     |         Precompile,
 205 |     |         ForgeAddress
 206 |     |     }
 207 |     | 
 208 |     |     // Checks that `addr` is not blacklisted by token contracts that have a blacklist.
 209 |     |     function assumeNotBlacklisted(address token, address addr) internal view virtual {
 210 |     |         // Nothing to check if `token` is not a contract.
 211 |     |         uint256 tokenCodeSize;
 212 |     |         assembly {
 213 |     |             tokenCodeSize := extcodesize(token)
 214 |     |         }
 215 |     |         require(tokenCodeSize > 0, "StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.");
 216 |     | 
 217 |     |         bool success;
 218 |     |         bytes memory returnData;
 219 |     | 
 220 |     |         // 4-byte selector for `isBlacklisted(address)`, used by USDC.
 221 |     |         (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));
 222 |     |         vm.assume(!success || abi.decode(returnData, (bool)) == false);
 223 |     | 
 224 |     |         // 4-byte selector for `isBlackListed(address)`, used by USDT.
 225 |     |         (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));
 226 |     |         vm.assume(!success || abi.decode(returnData, (bool)) == false);
 227 |     |     }
 228 |     | 
 229 |     |     // Checks that `addr` is not blacklisted by token contracts that have a blacklist.
 230 |     |     // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for
 231 |     |     // backwards compatibility, since this name was used in the original PR which already has
 232 |     |     // a release. This function can be removed in a future release once we want a breaking change.
 233 |     |     function assumeNoBlacklisted(address token, address addr) internal view virtual {
 234 |     |         assumeNotBlacklisted(token, addr);
 235 |     |     }
 236 |     | 
 237 |     |     function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {
 238 |     |         if (addressType == AddressType.Payable) {
 239 |     |             assumeNotPayable(addr);
 240 |     |         } else if (addressType == AddressType.NonPayable) {
 241 |     |             assumePayable(addr);
 242 |     |         } else if (addressType == AddressType.ZeroAddress) {
 243 |     |             assumeNotZeroAddress(addr);
 244 |     |         } else if (addressType == AddressType.Precompile) {
 245 |     |             assumeNotPrecompile(addr);
 246 |     |         } else if (addressType == AddressType.ForgeAddress) {
 247 |     |             assumeNotForgeAddress(addr);
 248 |     |         }
 249 |     |     }
 250 |     | 
 251 |     |     function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {
 252 |     |         assumeAddressIsNot(addr, addressType1);
 253 |     |         assumeAddressIsNot(addr, addressType2);
 254 |     |     }
 255 |     | 
 256 |     |     function assumeAddressIsNot(
 257 |     |         address addr,
 258 |     |         AddressType addressType1,
 259 |     |         AddressType addressType2,
 260 |     |         AddressType addressType3
 261 |     |     ) internal virtual {
 262 |     |         assumeAddressIsNot(addr, addressType1);
 263 |     |         assumeAddressIsNot(addr, addressType2);
 264 |     |         assumeAddressIsNot(addr, addressType3);
 265 |     |     }
 266 |     | 
 267 |     |     function assumeAddressIsNot(
 268 |     |         address addr,
 269 |     |         AddressType addressType1,
 270 |     |         AddressType addressType2,
 271 |     |         AddressType addressType3,
 272 |     |         AddressType addressType4
 273 |     |     ) internal virtual {
 274 |     |         assumeAddressIsNot(addr, addressType1);
 275 |     |         assumeAddressIsNot(addr, addressType2);
 276 |     |         assumeAddressIsNot(addr, addressType3);
 277 |     |         assumeAddressIsNot(addr, addressType4);
 278 |     |     }
 279 |     | 
 280 |     |     // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to
 281 |     |     // `addr` and checking the `success` return value.
 282 |     |     // NOTE: This function may result in state changes depending on the fallback/receive logic
 283 |     |     // implemented by `addr`, which should be taken into account when this function is used.
 284 |     |     function _isPayable(address addr) private returns (bool) {
 285 |     |         require(
 286 |     |             addr.balance < UINT256_MAX,
 287 |     |             "StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds"
 288 |     |         );
 289 |     |         uint256 origBalanceTest = address(this).balance;
 290 |     |         uint256 origBalanceAddr = address(addr).balance;
 291 |     | 
 292 |     |         vm.deal(address(this), 1);
 293 |     |         (bool success,) = payable(addr).call{value: 1}("");
 294 |     | 
 295 |     |         // reset balances
 296 |     |         vm.deal(address(this), origBalanceTest);
 297 |     |         vm.deal(addr, origBalanceAddr);
 298 |     | 
 299 |     |         return success;
 300 |     |     }
 301 |     | 
 302 |     |     // NOTE: This function may result in state changes depending on the fallback/receive logic
 303 |     |     // implemented by `addr`, which should be taken into account when this function is used. See the
 304 |     |     // `_isPayable` method for more information.
 305 |     |     function assumePayable(address addr) internal virtual {
 306 |     |         vm.assume(_isPayable(addr));
 307 |     |     }
 308 |     | 
 309 |     |     function assumeNotPayable(address addr) internal virtual {
 310 |     |         vm.assume(!_isPayable(addr));
 311 |     |     }
 312 |     | 
 313 |     |     function assumeNotZeroAddress(address addr) internal pure virtual {
 314 |     |         vm.assume(addr != address(0));
 315 |     |     }
 316 |     | 
 317 |     |     function assumeNotPrecompile(address addr) internal pure virtual {
 318 |     |         assumeNotPrecompile(addr, _pureChainId());
 319 |     |     }
 320 |     | 
 321 |     |     function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {
 322 |     |         // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific
 323 |     |         // address), but the same rationale for excluding them applies so we include those too.
 324 |     | 
 325 |     |         // These are reserved by Ethereum and may be on all EVM-compatible chains.
 326 |     |         vm.assume(addr < address(0x1) || addr > address(0xff));
 327 |     | 
 328 |     |         // forgefmt: disable-start
 329 |     |         if (chainId == 10 || chainId == 420) {
 330 |     |             // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21
 331 |     |             vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));
 332 |     |         } else if (chainId == 42161 || chainId == 421613) {
 333 |     |             // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains
 334 |     |             vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));
 335 |     |         } else if (chainId == 43114 || chainId == 43113) {
 336 |     |             // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59
 337 |     |             vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));
 338 |     |             vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));
 339 |     |             vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));
 340 |     |         }
 341 |     |         // forgefmt: disable-end
 342 |     |     }
 343 |     | 
 344 |     |     function assumeNotForgeAddress(address addr) internal pure virtual {
 345 |     |         // vm, console, and Create2Deployer addresses
 346 |     |         vm.assume(
 347 |     |             addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67
 348 |     |                 && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C
 349 |     |         );
 350 |     |     }
 351 |     | 
 352 |     |     function readEIP1559ScriptArtifact(string memory path)
 353 |     |         internal
 354 |     |         view
 355 |     |         virtual
 356 |     |         returns (EIP1559ScriptArtifact memory)
 357 |     |     {
 358 |     |         string memory data = vm.readFile(path);
 359 |     |         bytes memory parsedData = vm.parseJson(data);
 360 |     |         RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));
 361 |     |         EIP1559ScriptArtifact memory artifact;
 362 |     |         artifact.libraries = rawArtifact.libraries;
 363 |     |         artifact.path = rawArtifact.path;
 364 |     |         artifact.timestamp = rawArtifact.timestamp;
 365 |     |         artifact.pending = rawArtifact.pending;
 366 |     |         artifact.txReturns = rawArtifact.txReturns;
 367 |     |         artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);
 368 |     |         artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);
 369 |     |         return artifact;
 370 |     |     }
 371 |     | 
 372 |     |     function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {
 373 |     |         Tx1559[] memory txs = new Tx1559[](rawTxs.length);
 374 |     |         for (uint256 i; i < rawTxs.length; i++) {
 375 |     |             txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);
 376 |     |         }
 377 |     |         return txs;
 378 |     |     }
 379 |     | 
 380 |     |     function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {
 381 |     |         Tx1559 memory transaction;
 382 |     |         transaction.arguments = rawTx.arguments;
 383 |     |         transaction.contractName = rawTx.contractName;
 384 |     |         transaction.functionSig = rawTx.functionSig;
 385 |     |         transaction.hash = rawTx.hash;
 386 |     |         transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);
 387 |     |         transaction.opcode = rawTx.opcode;
 388 |     |         return transaction;
 389 |     |     }
 390 |     | 
 391 |     |     function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)
 392 |     |         internal
 393 |     |         pure
 394 |     |         virtual
 395 |     |         returns (Tx1559Detail memory)
 396 |     |     {
 397 |     |         Tx1559Detail memory txDetail;
 398 |     |         txDetail.data = rawDetail.data;
 399 |     |         txDetail.from = rawDetail.from;
 400 |     |         txDetail.to = rawDetail.to;
 401 |     |         txDetail.nonce = _bytesToUint(rawDetail.nonce);
 402 |     |         txDetail.txType = _bytesToUint(rawDetail.txType);
 403 |     |         txDetail.value = _bytesToUint(rawDetail.value);
 404 |     |         txDetail.gas = _bytesToUint(rawDetail.gas);
 405 |     |         txDetail.accessList = rawDetail.accessList;
 406 |     |         return txDetail;
 407 |     |     }
 408 |     | 
 409 |     |     function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {
 410 |     |         string memory deployData = vm.readFile(path);
 411 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, ".transactions");
 412 |     |         RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));
 413 |     |         return rawToConvertedEIPTx1559s(rawTxs);
 414 |     |     }
 415 |     | 
 416 |     |     function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {
 417 |     |         string memory deployData = vm.readFile(path);
 418 |     |         string memory key = string(abi.encodePacked(".transactions[", vm.toString(index), "]"));
 419 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, key);
 420 |     |         RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));
 421 |     |         return rawToConvertedEIPTx1559(rawTx);
 422 |     |     }
 423 |     | 
 424 |     |     // Analogous to readTransactions, but for receipts.
 425 |     |     function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {
 426 |     |         string memory deployData = vm.readFile(path);
 427 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, ".receipts");
 428 |     |         RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));
 429 |     |         return rawToConvertedReceipts(rawReceipts);
 430 |     |     }
 431 |     | 
 432 |     |     function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {
 433 |     |         string memory deployData = vm.readFile(path);
 434 |     |         string memory key = string(abi.encodePacked(".receipts[", vm.toString(index), "]"));
 435 |     |         bytes memory parsedDeployData = vm.parseJson(deployData, key);
 436 |     |         RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));
 437 |     |         return rawToConvertedReceipt(rawReceipt);
 438 |     |     }
 439 |     | 
 440 |     |     function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {
 441 |     |         Receipt[] memory receipts = new Receipt[](rawReceipts.length);
 442 |     |         for (uint256 i; i < rawReceipts.length; i++) {
 443 |     |             receipts[i] = rawToConvertedReceipt(rawReceipts[i]);
 444 |     |         }
 445 |     |         return receipts;
 446 |     |     }
 447 |     | 
 448 |     |     function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {
 449 |     |         Receipt memory receipt;
 450 |     |         receipt.blockHash = rawReceipt.blockHash;
 451 |     |         receipt.to = rawReceipt.to;
 452 |     |         receipt.from = rawReceipt.from;
 453 |     |         receipt.contractAddress = rawReceipt.contractAddress;
 454 |     |         receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);
 455 |     |         receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);
 456 |     |         receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);
 457 |     |         receipt.status = _bytesToUint(rawReceipt.status);
 458 |     |         receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);
 459 |     |         receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);
 460 |     |         receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);
 461 |     |         receipt.logsBloom = rawReceipt.logsBloom;
 462 |     |         receipt.transactionHash = rawReceipt.transactionHash;
 463 |     |         return receipt;
 464 |     |     }
 465 |     | 
 466 |     |     function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)
 467 |     |         internal
 468 |     |         pure
 469 |     |         virtual
 470 |     |         returns (ReceiptLog[] memory)
 471 |     |     {
 472 |     |         ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);
 473 |     |         for (uint256 i; i < rawLogs.length; i++) {
 474 |     |             logs[i].logAddress = rawLogs[i].logAddress;
 475 |     |             logs[i].blockHash = rawLogs[i].blockHash;
 476 |     |             logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);
 477 |     |             logs[i].data = rawLogs[i].data;
 478 |     |             logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);
 479 |     |             logs[i].topics = rawLogs[i].topics;
 480 |     |             logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);
 481 |     |             logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);
 482 |     |             logs[i].removed = rawLogs[i].removed;
 483 |     |         }
 484 |     |         return logs;
 485 |     |     }
 486 |     | 
 487 |     |     // Deploy a contract by fetching the contract bytecode from
 488 |     |     // the artifacts directory
 489 |     |     // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`
 490 |     |     function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {
 491 |     |         bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
 492 |     |         /// @solidity memory-safe-assembly
 493 |     |         assembly {
 494 |     |             addr := create(0, add(bytecode, 0x20), mload(bytecode))
 495 |     |         }
 496 |     | 
 497 |     |         require(addr != address(0), "StdCheats deployCode(string,bytes): Deployment failed.");
 498 |     |     }
 499 |     | 
 500 |     |     function deployCode(string memory what) internal virtual returns (address addr) {
 501 |     |         bytes memory bytecode = vm.getCode(what);
 502 |     |         /// @solidity memory-safe-assembly
 503 |     |         assembly {
 504 |     |             addr := create(0, add(bytecode, 0x20), mload(bytecode))
 505 |     |         }
 506 |     | 
 507 |     |         require(addr != address(0), "StdCheats deployCode(string): Deployment failed.");
 508 |     |     }
 509 |     | 
 510 |     |     /// @dev deploy contract with value on construction
 511 |     |     function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {
 512 |     |         bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
 513 |     |         /// @solidity memory-safe-assembly
 514 |     |         assembly {
 515 |     |             addr := create(val, add(bytecode, 0x20), mload(bytecode))
 516 |     |         }
 517 |     | 
 518 |     |         require(addr != address(0), "StdCheats deployCode(string,bytes,uint256): Deployment failed.");
 519 |     |     }
 520 |     | 
 521 |     |     function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {
 522 |     |         bytes memory bytecode = vm.getCode(what);
 523 |     |         /// @solidity memory-safe-assembly
 524 |     |         assembly {
 525 |     |             addr := create(val, add(bytecode, 0x20), mload(bytecode))
 526 |     |         }
 527 |     | 
 528 |     |         require(addr != address(0), "StdCheats deployCode(string,uint256): Deployment failed.");
 529 |     |     }
 530 |     | 
 531 |     |     // creates a labeled address and the corresponding private key
 532 |     |     function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {
 533 |     |         privateKey = uint256(keccak256(abi.encodePacked(name)));
 534 |     |         addr = vm.addr(privateKey);
 535 |     |         vm.label(addr, name);
 536 |     |     }
 537 |     | 
 538 |     |     // creates a labeled address
 539 |     |     function makeAddr(string memory name) internal virtual returns (address addr) {
 540 |     |         (addr,) = makeAddrAndKey(name);
 541 |     |     }
 542 |     | 
 543 |     |     // Destroys an account immediately, sending the balance to beneficiary.
 544 |     |     // Destroying means: balance will be zero, code will be empty, and nonce will be 0
 545 |     |     // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce
 546 |     |     // only after tx ends, this will run immediately.
 547 |     |     function destroyAccount(address who, address beneficiary) internal virtual {
 548 |     |         uint256 currBalance = who.balance;
 549 |     |         vm.etch(who, abi.encode());
 550 |     |         vm.deal(who, 0);
 551 |     |         vm.resetNonce(who);
 552 |     | 
 553 |     |         uint256 beneficiaryBalance = beneficiary.balance;
 554 |     |         vm.deal(beneficiary, currBalance + beneficiaryBalance);
 555 |     |     }
 556 |     | 
 557 |     |     // creates a struct containing both a labeled address and the corresponding private key
 558 |     |     function makeAccount(string memory name) internal virtual returns (Account memory account) {
 559 |     |         (account.addr, account.key) = makeAddrAndKey(name);
 560 |     |     }
 561 |     | 
 562 |     |     function deriveRememberKey(string memory mnemonic, uint32 index)
 563 |     |         internal
 564 |     |         virtual
 565 |     |         returns (address who, uint256 privateKey)
 566 |     |     {
 567 |     |         privateKey = vm.deriveKey(mnemonic, index);
 568 |     |         who = vm.rememberKey(privateKey);
 569 |     |     }
 570 |     | 
 571 |     |     function _bytesToUint(bytes memory b) private pure returns (uint256) {
 572 |     |         require(b.length <= 32, "StdCheats _bytesToUint(bytes): Bytes length exceeds 32.");
 573 |     |         return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
 574 |     |     }
 575 |     | 
 576 |     |     function isFork() internal view virtual returns (bool status) {
 577 |     |         try vm.activeFork() {
 578 |     |             status = true;
 579 |     |         } catch (bytes memory) {}
 580 |     |     }
 581 |     | 
 582 |     |     modifier skipWhenForking() {
 583 |     |         if (!isFork()) {
 584 |     |             _;
 585 |     |         }
 586 |     |     }
 587 |     | 
 588 |     |     modifier skipWhenNotForking() {
 589 |     |         if (isFork()) {
 590 |     |             _;
 591 |     |         }
 592 |     |     }
 593 |     | 
 594 |     |     modifier noGasMetering() {
 595 |     |         vm.pauseGasMetering();
 596 |     |         // To prevent turning gas monitoring back on with nested functions that use this modifier,
 597 |     |         // we check if gasMetering started in the off position. If it did, we don't want to turn
 598 |     |         // it back on until we exit the top level function that used the modifier
 599 |     |         //
 600 |     |         // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.
 601 |     |         // funcA will have `gasStartedOff` as false, funcB will have it as true,
 602 |     |         // so we only turn metering back on at the end of the funcA
 603 |     |         bool gasStartedOff = gasMeteringOff;
 604 |     |         gasMeteringOff = true;
 605 |     | 
 606 |     |         _;
 607 |     | 
 608 |     |         // if gas metering was on when this modifier was called, turn it back on at the end
 609 |     |         if (!gasStartedOff) {
 610 |     |             gasMeteringOff = false;
 611 |     |             vm.resumeGasMetering();
 612 |     |         }
 613 |     |     }
 614 |     | 
 615 |     |     // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no
 616 |     |     // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We
 617 |     |     // can't simply access the chain ID in a normal view or pure function because the solc View Pure
 618 |     |     // Checker changed `chainid` from pure to view in 0.8.0.
 619 |     |     function _viewChainId() private view returns (uint256 chainId) {
 620 |     |         // Assembly required since `block.chainid` was introduced in 0.8.0.
 621 |     |         assembly {
 622 |     |             chainId := chainid()
 623 |     |         }
 624 |     | 
 625 |     |         address(this); // Silence warnings in older Solc versions.
 626 |     |     }
 627 |     | 
 628 |     |     function _pureChainId() private pure returns (uint256 chainId) {
 629 |     |         function() internal view returns (uint256) fnIn = _viewChainId;
 630 |     |         function() internal pure returns (uint256) pureChainId;
 631 |     |         assembly {
 632 |     |             pureChainId := fnIn
 633 |     |         }
 634 |     |         chainId = pureChainId();
 635 |     |     }
 636 |     | }
 637 |     | 
 638 |     | // Wrappers around cheatcodes to avoid footguns
 639 |     | abstract contract StdCheats is StdCheatsSafe {
 640 |     |     using stdStorage for StdStorage;
 641 |     | 
 642 |     |     StdStorage private stdstore;
 643 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
 644 |     |     address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;
 645 |     | 
 646 |     |     // Skip forward or rewind time by the specified number of seconds
 647 |     |     function skip(uint256 time) internal virtual {
 648 |     |         vm.warp(block.timestamp + time);
 649 |     |     }
 650 |     | 
 651 |     |     function rewind(uint256 time) internal virtual {
 652 |     |         vm.warp(block.timestamp - time);
 653 |     |     }
 654 |     | 
 655 |     |     // Setup a prank from an address that has some ether
 656 |     |     function hoax(address msgSender) internal virtual {
 657 |     |         vm.deal(msgSender, 1 << 128);
 658 |     |         vm.prank(msgSender);
 659 |     |     }
 660 |     | 
 661 |     |     function hoax(address msgSender, uint256 give) internal virtual {
 662 |     |         vm.deal(msgSender, give);
 663 |     |         vm.prank(msgSender);
 664 |     |     }
 665 |     | 
 666 |     |     function hoax(address msgSender, address origin) internal virtual {
 667 |     |         vm.deal(msgSender, 1 << 128);
 668 |     |         vm.prank(msgSender, origin);
 669 |     |     }
 670 |     | 
 671 |     |     function hoax(address msgSender, address origin, uint256 give) internal virtual {
 672 |     |         vm.deal(msgSender, give);
 673 |     |         vm.prank(msgSender, origin);
 674 |     |     }
 675 |     | 
 676 |     |     // Start perpetual prank from an address that has some ether
 677 |     |     function startHoax(address msgSender) internal virtual {
 678 |     |         vm.deal(msgSender, 1 << 128);
 679 |     |         vm.startPrank(msgSender);
 680 |     |     }
 681 |     | 
 682 |     |     function startHoax(address msgSender, uint256 give) internal virtual {
 683 |     |         vm.deal(msgSender, give);
 684 |     |         vm.startPrank(msgSender);
 685 |     |     }
 686 |     | 
 687 |     |     // Start perpetual prank from an address that has some ether
 688 |     |     // tx.origin is set to the origin parameter
 689 |     |     function startHoax(address msgSender, address origin) internal virtual {
 690 |     |         vm.deal(msgSender, 1 << 128);
 691 |     |         vm.startPrank(msgSender, origin);
 692 |     |     }
 693 |     | 
 694 |     |     function startHoax(address msgSender, address origin, uint256 give) internal virtual {
 695 |     |         vm.deal(msgSender, give);
 696 |     |         vm.startPrank(msgSender, origin);
 697 |     |     }
 698 |     | 
 699 |     |     function changePrank(address msgSender) internal virtual {
 700 |     |         console2_log_StdCheats("changePrank is deprecated. Please use vm.startPrank instead.");
 701 |     |         vm.stopPrank();
 702 |     |         vm.startPrank(msgSender);
 703 |     |     }
 704 |     | 
 705 |     |     function changePrank(address msgSender, address txOrigin) internal virtual {
 706 |     |         vm.stopPrank();
 707 |     |         vm.startPrank(msgSender, txOrigin);
 708 |     |     }
 709 |     | 
 710 |     |     // The same as Vm's `deal`
 711 |     |     // Use the alternative signature for ERC20 tokens
 712 |     |     function deal(address to, uint256 give) internal virtual {
 713 |     |         vm.deal(to, give);
 714 |     |     }
 715 |     | 
 716 |     |     // Set the balance of an account for any ERC20 token
 717 |     |     // Use the alternative signature to update `totalSupply`
 718 |     |     function deal(address token, address to, uint256 give) internal virtual {
 719 |     |         deal(token, to, give, false);
 720 |     |     }
 721 |     | 
 722 |     |     // Set the balance of an account for any ERC1155 token
 723 |     |     // Use the alternative signature to update `totalSupply`
 724 |     |     function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {
 725 |     |         dealERC1155(token, to, id, give, false);
 726 |     |     }
 727 |     | 
 728 |     |     function deal(address token, address to, uint256 give, bool adjust) internal virtual {
 729 |     |         // get current balance
 730 |     |         (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));
 731 |     |         uint256 prevBal = abi.decode(balData, (uint256));
 732 |     | 
 733 |     |         // update balance
 734 |     |         stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);
 735 |     | 
 736 |     |         // update total supply
 737 |     |         if (adjust) {
 738 |     |             (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));
 739 |     |             uint256 totSup = abi.decode(totSupData, (uint256));
 740 |     |             if (give < prevBal) {
 741 |     |                 totSup -= (prevBal - give);
 742 |     |             } else {
 743 |     |                 totSup += (give - prevBal);
 744 |     |             }
 745 |     |             stdstore.target(token).sig(0x18160ddd).checked_write(totSup);
 746 |     |         }
 747 |     |     }
 748 |     | 
 749 |     |     function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {
 750 |     |         // get current balance
 751 |     |         (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));
 752 |     |         uint256 prevBal = abi.decode(balData, (uint256));
 753 |     | 
 754 |     |         // update balance
 755 |     |         stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);
 756 |     | 
 757 |     |         // update total supply
 758 |     |         if (adjust) {
 759 |     |             (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));
 760 |     |             require(
 761 |     |                 totSupData.length != 0,
 762 |     |                 "StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply."
 763 |     |             );
 764 |     |             uint256 totSup = abi.decode(totSupData, (uint256));
 765 |     |             if (give < prevBal) {
 766 |     |                 totSup -= (prevBal - give);
 767 |     |             } else {
 768 |     |                 totSup += (give - prevBal);
 769 |     |             }
 770 |     |             stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);
 771 |     |         }
 772 |     |     }
 773 |     | 
 774 |     |     function dealERC721(address token, address to, uint256 id) internal virtual {
 775 |     |         // check if token id is already minted and the actual owner.
 776 |     |         (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));
 777 |     |         require(successMinted, "StdCheats deal(address,address,uint,bool): id not minted.");
 778 |     | 
 779 |     |         // get owner current balance
 780 |     |         (, bytes memory fromBalData) =
 781 |     |             token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));
 782 |     |         uint256 fromPrevBal = abi.decode(fromBalData, (uint256));
 783 |     | 
 784 |     |         // get new user current balance
 785 |     |         (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));
 786 |     |         uint256 toPrevBal = abi.decode(toBalData, (uint256));
 787 |     | 
 788 |     |         // update balances
 789 |     |         stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);
 790 |     |         stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);
 791 |     | 
 792 |     |         // update owner
 793 |     |         stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);
 794 |     |     }
 795 |     | 
 796 |     |     function deployCodeTo(string memory what, address where) internal virtual {
 797 |     |         deployCodeTo(what, "", 0, where);
 798 |     |     }
 799 |     | 
 800 |     |     function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {
 801 |     |         deployCodeTo(what, args, 0, where);
 802 |     |     }
 803 |     | 
 804 |     |     function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {
 805 |     |         bytes memory creationCode = vm.getCode(what);
 806 |     |         vm.etch(where, abi.encodePacked(creationCode, args));
 807 |     |         (bool success, bytes memory runtimeBytecode) = where.call{value: value}("");
 808 |     |         require(success, "StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.");
 809 |     |         vm.etch(where, runtimeBytecode);
 810 |     |     }
 811 |     | 
 812 |     |     // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.
 813 |     |     function console2_log_StdCheats(string memory p0) private view {
 814 |     |         (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature("log(string)", p0));
 815 |     |         status;
 816 |     |     }
 817 |     | }
 818 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdError.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test
  3 |     | pragma solidity >=0.6.2 <0.9.0;
  4 |     | 
  5 |     | library stdError {
  6 |     |     bytes public constant assertionError = abi.encodeWithSignature("Panic(uint256)", 0x01);
  7 |     |     bytes public constant arithmeticError = abi.encodeWithSignature("Panic(uint256)", 0x11);
  8 |     |     bytes public constant divisionError = abi.encodeWithSignature("Panic(uint256)", 0x12);
  9 |     |     bytes public constant enumConversionError = abi.encodeWithSignature("Panic(uint256)", 0x21);
 10 |     |     bytes public constant encodeStorageError = abi.encodeWithSignature("Panic(uint256)", 0x22);
 11 |     |     bytes public constant popError = abi.encodeWithSignature("Panic(uint256)", 0x31);
 12 |     |     bytes public constant indexOOBError = abi.encodeWithSignature("Panic(uint256)", 0x32);
 13 |     |     bytes public constant memOverflowError = abi.encodeWithSignature("Panic(uint256)", 0x41);
 14 |     |     bytes public constant zeroVarError = abi.encodeWithSignature("Panic(uint256)", 0x51);
 15 |     | }
 16 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdInvariant.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | abstract contract StdInvariant {
   7 |     |     struct FuzzSelector {
   8 |     |         address addr;
   9 |     |         bytes4[] selectors;
  10 |     |     }
  11 |     | 
  12 |     |     struct FuzzArtifactSelector {
  13 |     |         string artifact;
  14 |     |         bytes4[] selectors;
  15 |     |     }
  16 |     | 
  17 |     |     struct FuzzInterface {
  18 |     |         address addr;
  19 |     |         string[] artifacts;
  20 |     |     }
  21 |     | 
  22 |     |     address[] private _excludedContracts;
  23 |     |     address[] private _excludedSenders;
  24 |     |     address[] private _targetedContracts;
  25 |     |     address[] private _targetedSenders;
  26 |     | 
  27 |     |     string[] private _excludedArtifacts;
  28 |     |     string[] private _targetedArtifacts;
  29 |     | 
  30 |     |     FuzzArtifactSelector[] private _targetedArtifactSelectors;
  31 |     | 
  32 |     |     FuzzSelector[] private _excludedSelectors;
  33 |     |     FuzzSelector[] private _targetedSelectors;
  34 |     | 
  35 |     |     FuzzInterface[] private _targetedInterfaces;
  36 |     | 
  37 |     |     // Functions for users:
  38 |     |     // These are intended to be called in tests.
  39 |     | 
  40 |     |     function excludeContract(address newExcludedContract_) internal {
  41 |     |         _excludedContracts.push(newExcludedContract_);
  42 |     |     }
  43 |     | 
  44 |     |     function excludeSelector(FuzzSelector memory newExcludedSelector_) internal {
  45 |     |         _excludedSelectors.push(newExcludedSelector_);
  46 |     |     }
  47 |     | 
  48 |     |     function excludeSender(address newExcludedSender_) internal {
  49 |     |         _excludedSenders.push(newExcludedSender_);
  50 |     |     }
  51 |     | 
  52 |     |     function excludeArtifact(string memory newExcludedArtifact_) internal {
  53 |     |         _excludedArtifacts.push(newExcludedArtifact_);
  54 |     |     }
  55 |     | 
  56 |     |     function targetArtifact(string memory newTargetedArtifact_) internal {
  57 |     |         _targetedArtifacts.push(newTargetedArtifact_);
  58 |     |     }
  59 |     | 
  60 |     |     function targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_) internal {
  61 |     |         _targetedArtifactSelectors.push(newTargetedArtifactSelector_);
  62 |     |     }
  63 |     | 
  64 |     |     function targetContract(address newTargetedContract_) internal {
  65 |     |         _targetedContracts.push(newTargetedContract_);
  66 |     |     }
  67 |     | 
  68 |     |     function targetSelector(FuzzSelector memory newTargetedSelector_) internal {
  69 |     |         _targetedSelectors.push(newTargetedSelector_);
  70 |     |     }
  71 |     | 
  72 |     |     function targetSender(address newTargetedSender_) internal {
  73 |     |         _targetedSenders.push(newTargetedSender_);
  74 |     |     }
  75 |     | 
  76 |     |     function targetInterface(FuzzInterface memory newTargetedInterface_) internal {
  77 |     |         _targetedInterfaces.push(newTargetedInterface_);
  78 |     |     }
  79 |     | 
  80 |     |     // Functions for forge:
  81 |     |     // These are called by forge to run invariant tests and don't need to be called in tests.
  82 |     | 
  83 |     |     function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {
  84 |     |         excludedArtifacts_ = _excludedArtifacts;
  85 |     |     }
  86 |     | 
  87 |     |     function excludeContracts() public view returns (address[] memory excludedContracts_) {
  88 |     |         excludedContracts_ = _excludedContracts;
  89 |     |     }
  90 |     | 
  91 |     |     function excludeSelectors() public view returns (FuzzSelector[] memory excludedSelectors_) {
  92 |     |         excludedSelectors_ = _excludedSelectors;
  93 |     |     }
  94 |     | 
  95 |     |     function excludeSenders() public view returns (address[] memory excludedSenders_) {
  96 |     |         excludedSenders_ = _excludedSenders;
  97 |     |     }
  98 |     | 
  99 |     |     function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {
 100 |     |         targetedArtifacts_ = _targetedArtifacts;
 101 |     |     }
 102 |     | 
 103 |     |     function targetArtifactSelectors() public view returns (FuzzArtifactSelector[] memory targetedArtifactSelectors_) {
 104 |     |         targetedArtifactSelectors_ = _targetedArtifactSelectors;
 105 |     |     }
 106 |     | 
 107 |     |     function targetContracts() public view returns (address[] memory targetedContracts_) {
 108 |     |         targetedContracts_ = _targetedContracts;
 109 |     |     }
 110 |     | 
 111 |     |     function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {
 112 |     |         targetedSelectors_ = _targetedSelectors;
 113 |     |     }
 114 |     | 
 115 |     |     function targetSenders() public view returns (address[] memory targetedSenders_) {
 116 |     |         targetedSenders_ = _targetedSenders;
 117 |     |     }
 118 |     | 
 119 |     |     function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {
 120 |     |         targetedInterfaces_ = _targetedInterfaces;
 121 |     |     }
 122 |     | }
 123 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdJson.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.0 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {VmSafe} from "./Vm.sol";
   7 |     | 
   8 |     | // Helpers for parsing and writing JSON files
   9 |     | // To parse:
  10 |     | // ```
  11 |     | // using stdJson for string;
  12 |     | // string memory json = vm.readFile("<some_path>");
  13 |     | // json.readUint("<json_path>");
  14 |     | // ```
  15 |     | // To write:
  16 |     | // ```
  17 |     | // using stdJson for string;
  18 |     | // string memory json = "json";
  19 |     | // json.serialize("a", uint256(123));
  20 |     | // string memory semiFinal = json.serialize("b", string("test"));
  21 |     | // string memory finalJson = json.serialize("c", semiFinal);
  22 |     | // finalJson.write("<some_path>");
  23 |     | // ```
  24 |     | 
  25 |     | library stdJson {
  26 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  27 |     | 
  28 |     |     function keyExists(string memory json, string memory key) internal view returns (bool) {
  29 |     |         return vm.keyExistsJson(json, key);
  30 |     |     }
  31 |     | 
  32 |     |     function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {
  33 |     |         return vm.parseJson(json, key);
  34 |     |     }
  35 |     | 
  36 |     |     function readUint(string memory json, string memory key) internal pure returns (uint256) {
  37 |     |         return vm.parseJsonUint(json, key);
  38 |     |     }
  39 |     | 
  40 |     |     function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {
  41 |     |         return vm.parseJsonUintArray(json, key);
  42 |     |     }
  43 |     | 
  44 |     |     function readInt(string memory json, string memory key) internal pure returns (int256) {
  45 |     |         return vm.parseJsonInt(json, key);
  46 |     |     }
  47 |     | 
  48 |     |     function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {
  49 |     |         return vm.parseJsonIntArray(json, key);
  50 |     |     }
  51 |     | 
  52 |     |     function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {
  53 |     |         return vm.parseJsonBytes32(json, key);
  54 |     |     }
  55 |     | 
  56 |     |     function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {
  57 |     |         return vm.parseJsonBytes32Array(json, key);
  58 |     |     }
  59 |     | 
  60 |     |     function readString(string memory json, string memory key) internal pure returns (string memory) {
  61 |     |         return vm.parseJsonString(json, key);
  62 |     |     }
  63 |     | 
  64 |     |     function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {
  65 |     |         return vm.parseJsonStringArray(json, key);
  66 |     |     }
  67 |     | 
  68 |     |     function readAddress(string memory json, string memory key) internal pure returns (address) {
  69 |     |         return vm.parseJsonAddress(json, key);
  70 |     |     }
  71 |     | 
  72 |     |     function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {
  73 |     |         return vm.parseJsonAddressArray(json, key);
  74 |     |     }
  75 |     | 
  76 |     |     function readBool(string memory json, string memory key) internal pure returns (bool) {
  77 |     |         return vm.parseJsonBool(json, key);
  78 |     |     }
  79 |     | 
  80 |     |     function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {
  81 |     |         return vm.parseJsonBoolArray(json, key);
  82 |     |     }
  83 |     | 
  84 |     |     function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {
  85 |     |         return vm.parseJsonBytes(json, key);
  86 |     |     }
  87 |     | 
  88 |     |     function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {
  89 |     |         return vm.parseJsonBytesArray(json, key);
  90 |     |     }
  91 |     | 
  92 |     |     function readUintOr(string memory json, string memory key, uint256 defaultValue) internal view returns (uint256) {
  93 |     |         return keyExists(json, key) ? readUint(json, key) : defaultValue;
  94 |     |     }
  95 |     | 
  96 |     |     function readUintArrayOr(string memory json, string memory key, uint256[] memory defaultValue)
  97 |     |         internal
  98 |     |         view
  99 |     |         returns (uint256[] memory)
 100 |     |     {
 101 |     |         return keyExists(json, key) ? readUintArray(json, key) : defaultValue;
 102 |     |     }
 103 |     | 
 104 |     |     function readIntOr(string memory json, string memory key, int256 defaultValue) internal view returns (int256) {
 105 |     |         return keyExists(json, key) ? readInt(json, key) : defaultValue;
 106 |     |     }
 107 |     | 
 108 |     |     function readIntArrayOr(string memory json, string memory key, int256[] memory defaultValue)
 109 |     |         internal
 110 |     |         view
 111 |     |         returns (int256[] memory)
 112 |     |     {
 113 |     |         return keyExists(json, key) ? readIntArray(json, key) : defaultValue;
 114 |     |     }
 115 |     | 
 116 |     |     function readBytes32Or(string memory json, string memory key, bytes32 defaultValue)
 117 |     |         internal
 118 |     |         view
 119 |     |         returns (bytes32)
 120 |     |     {
 121 |     |         return keyExists(json, key) ? readBytes32(json, key) : defaultValue;
 122 |     |     }
 123 |     | 
 124 |     |     function readBytes32ArrayOr(string memory json, string memory key, bytes32[] memory defaultValue)
 125 |     |         internal
 126 |     |         view
 127 |     |         returns (bytes32[] memory)
 128 |     |     {
 129 |     |         return keyExists(json, key) ? readBytes32Array(json, key) : defaultValue;
 130 |     |     }
 131 |     | 
 132 |     |     function readStringOr(string memory json, string memory key, string memory defaultValue)
 133 |     |         internal
 134 |     |         view
 135 |     |         returns (string memory)
 136 |     |     {
 137 |     |         return keyExists(json, key) ? readString(json, key) : defaultValue;
 138 |     |     }
 139 |     | 
 140 |     |     function readStringArrayOr(string memory json, string memory key, string[] memory defaultValue)
 141 |     |         internal
 142 |     |         view
 143 |     |         returns (string[] memory)
 144 |     |     {
 145 |     |         return keyExists(json, key) ? readStringArray(json, key) : defaultValue;
 146 |     |     }
 147 |     | 
 148 |     |     function readAddressOr(string memory json, string memory key, address defaultValue)
 149 |     |         internal
 150 |     |         view
 151 |     |         returns (address)
 152 |     |     {
 153 |     |         return keyExists(json, key) ? readAddress(json, key) : defaultValue;
 154 |     |     }
 155 |     | 
 156 |     |     function readAddressArrayOr(string memory json, string memory key, address[] memory defaultValue)
 157 |     |         internal
 158 |     |         view
 159 |     |         returns (address[] memory)
 160 |     |     {
 161 |     |         return keyExists(json, key) ? readAddressArray(json, key) : defaultValue;
 162 |     |     }
 163 |     | 
 164 |     |     function readBoolOr(string memory json, string memory key, bool defaultValue) internal view returns (bool) {
 165 |     |         return keyExists(json, key) ? readBool(json, key) : defaultValue;
 166 |     |     }
 167 |     | 
 168 |     |     function readBoolArrayOr(string memory json, string memory key, bool[] memory defaultValue)
 169 |     |         internal
 170 |     |         view
 171 |     |         returns (bool[] memory)
 172 |     |     {
 173 |     |         return keyExists(json, key) ? readBoolArray(json, key) : defaultValue;
 174 |     |     }
 175 |     | 
 176 |     |     function readBytesOr(string memory json, string memory key, bytes memory defaultValue)
 177 |     |         internal
 178 |     |         view
 179 |     |         returns (bytes memory)
 180 |     |     {
 181 |     |         return keyExists(json, key) ? readBytes(json, key) : defaultValue;
 182 |     |     }
 183 |     | 
 184 |     |     function readBytesArrayOr(string memory json, string memory key, bytes[] memory defaultValue)
 185 |     |         internal
 186 |     |         view
 187 |     |         returns (bytes[] memory)
 188 |     |     {
 189 |     |         return keyExists(json, key) ? readBytesArray(json, key) : defaultValue;
 190 |     |     }
 191 |     | 
 192 |     |     function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {
 193 |     |         return vm.serializeJson(jsonKey, rootObject);
 194 |     |     }
 195 |     | 
 196 |     |     function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {
 197 |     |         return vm.serializeBool(jsonKey, key, value);
 198 |     |     }
 199 |     | 
 200 |     |     function serialize(string memory jsonKey, string memory key, bool[] memory value)
 201 |     |         internal
 202 |     |         returns (string memory)
 203 |     |     {
 204 |     |         return vm.serializeBool(jsonKey, key, value);
 205 |     |     }
 206 |     | 
 207 |     |     function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {
 208 |     |         return vm.serializeUint(jsonKey, key, value);
 209 |     |     }
 210 |     | 
 211 |     |     function serialize(string memory jsonKey, string memory key, uint256[] memory value)
 212 |     |         internal
 213 |     |         returns (string memory)
 214 |     |     {
 215 |     |         return vm.serializeUint(jsonKey, key, value);
 216 |     |     }
 217 |     | 
 218 |     |     function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {
 219 |     |         return vm.serializeInt(jsonKey, key, value);
 220 |     |     }
 221 |     | 
 222 |     |     function serialize(string memory jsonKey, string memory key, int256[] memory value)
 223 |     |         internal
 224 |     |         returns (string memory)
 225 |     |     {
 226 |     |         return vm.serializeInt(jsonKey, key, value);
 227 |     |     }
 228 |     | 
 229 |     |     function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {
 230 |     |         return vm.serializeAddress(jsonKey, key, value);
 231 |     |     }
 232 |     | 
 233 |     |     function serialize(string memory jsonKey, string memory key, address[] memory value)
 234 |     |         internal
 235 |     |         returns (string memory)
 236 |     |     {
 237 |     |         return vm.serializeAddress(jsonKey, key, value);
 238 |     |     }
 239 |     | 
 240 |     |     function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {
 241 |     |         return vm.serializeBytes32(jsonKey, key, value);
 242 |     |     }
 243 |     | 
 244 |     |     function serialize(string memory jsonKey, string memory key, bytes32[] memory value)
 245 |     |         internal
 246 |     |         returns (string memory)
 247 |     |     {
 248 |     |         return vm.serializeBytes32(jsonKey, key, value);
 249 |     |     }
 250 |     | 
 251 |     |     function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {
 252 |     |         return vm.serializeBytes(jsonKey, key, value);
 253 |     |     }
 254 |     | 
 255 |     |     function serialize(string memory jsonKey, string memory key, bytes[] memory value)
 256 |     |         internal
 257 |     |         returns (string memory)
 258 |     |     {
 259 |     |         return vm.serializeBytes(jsonKey, key, value);
 260 |     |     }
 261 |     | 
 262 |     |     function serialize(string memory jsonKey, string memory key, string memory value)
 263 |     |         internal
 264 |     |         returns (string memory)
 265 |     |     {
 266 |     |         return vm.serializeString(jsonKey, key, value);
 267 |     |     }
 268 |     | 
 269 |     |     function serialize(string memory jsonKey, string memory key, string[] memory value)
 270 |     |         internal
 271 |     |         returns (string memory)
 272 |     |     {
 273 |     |         return vm.serializeString(jsonKey, key, value);
 274 |     |     }
 275 |     | 
 276 |     |     function write(string memory jsonKey, string memory path) internal {
 277 |     |         vm.writeJson(jsonKey, path);
 278 |     |     }
 279 |     | 
 280 |     |     function write(string memory jsonKey, string memory path, string memory valueKey) internal {
 281 |     |         vm.writeJson(jsonKey, path, valueKey);
 282 |     |     }
 283 |     | }
 284 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdMath.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | library stdMath {
  5 |     |     int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;
  6 |     | 
  7 |     |     function abs(int256 a) internal pure returns (uint256) {
  8 |     |         // Required or it will fail when `a = type(int256).min`
  9 |     |         if (a == INT256_MIN) {
 10 |     |             return 57896044618658097711785492504343953926634992332820282019728792003956564819968;
 11 |     |         }
 12 |     | 
 13 |     |         return uint256(a > 0 ? a : -a);
 14 |     |     }
 15 |     | 
 16 |     |     function delta(uint256 a, uint256 b) internal pure returns (uint256) {
 17 |     |         return a > b ? a - b : b - a;
 18 |     |     }
 19 |     | 
 20 |     |     function delta(int256 a, int256 b) internal pure returns (uint256) {
 21 |     |         // a and b are of the same sign
 22 |     |         // this works thanks to two's complement, the left-most bit is the sign bit
 23 |     |         if ((a ^ b) > -1) {
 24 |     |             return delta(abs(a), abs(b));
 25 |     |         }
 26 |     | 
 27 |     |         // a and b are of opposite signs
 28 |     |         return abs(a) + abs(b);
 29 |     |     }
 30 |     | 
 31 |     |     function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {
 32 |     |         uint256 absDelta = delta(a, b);
 33 |     | 
 34 |     |         return absDelta * 1e18 / b;
 35 |     |     }
 36 |     | 
 37 |     |     function percentDelta(int256 a, int256 b) internal pure returns (uint256) {
 38 |     |         uint256 absDelta = delta(a, b);
 39 |     |         uint256 absB = abs(b);
 40 |     | 
 41 |     |         return absDelta * 1e18 / absB;
 42 |     |     }
 43 |     | }
 44 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdStorage.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {Vm} from "./Vm.sol";
   5 |     | 
   6 |     | struct FindData {
   7 |     |     uint256 slot;
   8 |     |     uint256 offsetLeft;
   9 |     |     uint256 offsetRight;
  10 |     |     bool found;
  11 |     | }
  12 |     | 
  13 |     | struct StdStorage {
  14 |     |     mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;
  15 |     |     bytes32[] _keys;
  16 |     |     bytes4 _sig;
  17 |     |     uint256 _depth;
  18 |     |     address _target;
  19 |     |     bytes32 _set;
  20 |     |     bool _enable_packed_slots;
  21 |     |     bytes _calldata;
  22 |     | }
  23 |     | 
  24 |     | library stdStorageSafe {
  25 |     |     event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);
  26 |     |     event WARNING_UninitedSlot(address who, uint256 slot);
  27 |     | 
  28 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
  29 |     |     uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
  30 |     | 
  31 |     |     function sigs(string memory sigStr) internal pure returns (bytes4) {
  32 |     |         return bytes4(keccak256(bytes(sigStr)));
  33 |     |     }
  34 |     | 
  35 |     |     function getCallParams(StdStorage storage self) internal view returns (bytes memory) {
  36 |     |         if (self._calldata.length == 0) {
  37 |     |             return flatten(self._keys);
  38 |     |         } else {
  39 |     |             return self._calldata;
  40 |     |         }
  41 |     |     }
  42 |     | 
  43 |     |     // Calls target contract with configured parameters
  44 |     |     function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {
  45 |     |         bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));
  46 |     |         (bool success, bytes memory rdat) = self._target.staticcall(cald);
  47 |     |         bytes32 result = bytesToBytes32(rdat, 32 * self._depth);
  48 |     | 
  49 |     |         return (success, result);
  50 |     |     }
  51 |     | 
  52 |     |     // Tries mutating slot value to determine if the targeted value is stored in it.
  53 |     |     // If current value is 0, then we are setting slot value to type(uint256).max
  54 |     |     // Otherwise, we set it to 0. That way, return value should always be affected.
  55 |     |     function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {
  56 |     |         bytes32 prevSlotValue = vm.load(self._target, slot);
  57 |     |         (bool success, bytes32 prevReturnValue) = callTarget(self);
  58 |     | 
  59 |     |         bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);
  60 |     |         vm.store(self._target, slot, testVal);
  61 |     | 
  62 |     |         (, bytes32 newReturnValue) = callTarget(self);
  63 |     | 
  64 |     |         vm.store(self._target, slot, prevSlotValue);
  65 |     | 
  66 |     |         return (success && (prevReturnValue != newReturnValue));
  67 |     |     }
  68 |     | 
  69 |     |     // Tries setting one of the bits in slot to 1 until return value changes.
  70 |     |     // Index of resulted bit is an offset packed slot has from left/right side
  71 |     |     function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {
  72 |     |         for (uint256 offset = 0; offset < 256; offset++) {
  73 |     |             uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);
  74 |     |             vm.store(self._target, slot, bytes32(valueToPut));
  75 |     | 
  76 |     |             (bool success, bytes32 data) = callTarget(self);
  77 |     | 
  78 |     |             if (success && (uint256(data) > 0)) {
  79 |     |                 return (true, offset);
  80 |     |             }
  81 |     |         }
  82 |     |         return (false, 0);
  83 |     |     }
  84 |     | 
  85 |     |     function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {
  86 |     |         bytes32 prevSlotValue = vm.load(self._target, slot);
  87 |     | 
  88 |     |         (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);
  89 |     |         (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);
  90 |     | 
  91 |     |         // `findOffset` may mutate slot value, so we are setting it to initial value
  92 |     |         vm.store(self._target, slot, prevSlotValue);
  93 |     |         return (foundLeft && foundRight, offsetLeft, offsetRight);
  94 |     |     }
  95 |     | 
  96 |     |     function find(StdStorage storage self) internal returns (FindData storage) {
  97 |     |         return find(self, true);
  98 |     |     }
  99 |     | 
 100 |     |     /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against
 101 |     |     // slot complexity:
 102 |     |     //  if flat, will be bytes32(uint256(uint));
 103 |     |     //  if map, will be keccak256(abi.encode(key, uint(slot)));
 104 |     |     //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));
 105 |     |     //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);
 106 |     |     function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {
 107 |     |         address who = self._target;
 108 |     |         bytes4 fsig = self._sig;
 109 |     |         uint256 field_depth = self._depth;
 110 |     |         bytes memory params = getCallParams(self);
 111 |     | 
 112 |     |         // calldata to test against
 113 |     |         if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {
 114 |     |             if (_clear) {
 115 |     |                 clear(self);
 116 |     |             }
 117 |     |             return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
 118 |     |         }
 119 |     |         vm.record();
 120 |     |         (, bytes32 callResult) = callTarget(self);
 121 |     |         (bytes32[] memory reads,) = vm.accesses(address(who));
 122 |     | 
 123 |     |         if (reads.length == 0) {
 124 |     |             revert("stdStorage find(StdStorage): No storage use detected for target.");
 125 |     |         } else {
 126 |     |             for (uint256 i = reads.length; --i >= 0;) {
 127 |     |                 bytes32 prev = vm.load(who, reads[i]);
 128 |     |                 if (prev == bytes32(0)) {
 129 |     |                     emit WARNING_UninitedSlot(who, uint256(reads[i]));
 130 |     |                 }
 131 |     | 
 132 |     |                 if (!checkSlotMutatesCall(self, reads[i])) {
 133 |     |                     continue;
 134 |     |                 }
 135 |     | 
 136 |     |                 (uint256 offsetLeft, uint256 offsetRight) = (0, 0);
 137 |     | 
 138 |     |                 if (self._enable_packed_slots) {
 139 |     |                     bool found;
 140 |     |                     (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);
 141 |     |                     if (!found) {
 142 |     |                         continue;
 143 |     |                     }
 144 |     |                 }
 145 |     | 
 146 |     |                 // Check that value between found offsets is equal to the current call result
 147 |     |                 uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;
 148 |     | 
 149 |     |                 if (uint256(callResult) != curVal) {
 150 |     |                     continue;
 151 |     |                 }
 152 |     | 
 153 |     |                 emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));
 154 |     |                 self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =
 155 |     |                     FindData(uint256(reads[i]), offsetLeft, offsetRight, true);
 156 |     |                 break;
 157 |     |             }
 158 |     |         }
 159 |     | 
 160 |     |         require(
 161 |     |             self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,
 162 |     |             "stdStorage find(StdStorage): Slot(s) not found."
 163 |     |         );
 164 |     | 
 165 |     |         if (_clear) {
 166 |     |             clear(self);
 167 |     |         }
 168 |     |         return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
 169 |     |     }
 170 |     | 
 171 |     |     function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {
 172 |     |         self._target = _target;
 173 |     |         return self;
 174 |     |     }
 175 |     | 
 176 |     |     function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
 177 |     |         self._sig = _sig;
 178 |     |         return self;
 179 |     |     }
 180 |     | 
 181 |     |     function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {
 182 |     |         self._sig = sigs(_sig);
 183 |     |         return self;
 184 |     |     }
 185 |     | 
 186 |     |     function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {
 187 |     |         self._calldata = _calldata;
 188 |     |         return self;
 189 |     |     }
 190 |     | 
 191 |     |     function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {
 192 |     |         self._keys.push(bytes32(uint256(uint160(who))));
 193 |     |         return self;
 194 |     |     }
 195 |     | 
 196 |     |     function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {
 197 |     |         self._keys.push(bytes32(amt));
 198 |     |         return self;
 199 |     |     }
 200 |     | 
 201 |     |     function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {
 202 |     |         self._keys.push(key);
 203 |     |         return self;
 204 |     |     }
 205 |     | 
 206 |     |     function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {
 207 |     |         self._enable_packed_slots = true;
 208 |     |         return self;
 209 |     |     }
 210 |     | 
 211 |     |     function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {
 212 |     |         self._depth = _depth;
 213 |     |         return self;
 214 |     |     }
 215 |     | 
 216 |     |     function read(StdStorage storage self) private returns (bytes memory) {
 217 |     |         FindData storage data = find(self, false);
 218 |     |         uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);
 219 |     |         uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;
 220 |     |         clear(self);
 221 |     |         return abi.encode(value);
 222 |     |     }
 223 |     | 
 224 |     |     function read_bytes32(StdStorage storage self) internal returns (bytes32) {
 225 |     |         return abi.decode(read(self), (bytes32));
 226 |     |     }
 227 |     | 
 228 |     |     function read_bool(StdStorage storage self) internal returns (bool) {
 229 |     |         int256 v = read_int(self);
 230 |     |         if (v == 0) return false;
 231 |     |         if (v == 1) return true;
 232 |     |         revert("stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.");
 233 |     |     }
 234 |     | 
 235 |     |     function read_address(StdStorage storage self) internal returns (address) {
 236 |     |         return abi.decode(read(self), (address));
 237 |     |     }
 238 |     | 
 239 |     |     function read_uint(StdStorage storage self) internal returns (uint256) {
 240 |     |         return abi.decode(read(self), (uint256));
 241 |     |     }
 242 |     | 
 243 |     |     function read_int(StdStorage storage self) internal returns (int256) {
 244 |     |         return abi.decode(read(self), (int256));
 245 |     |     }
 246 |     | 
 247 |     |     function parent(StdStorage storage self) internal returns (uint256, bytes32) {
 248 |     |         address who = self._target;
 249 |     |         uint256 field_depth = self._depth;
 250 |     |         vm.startMappingRecording();
 251 |     |         uint256 child = find(self, true).slot - field_depth;
 252 |     |         (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));
 253 |     |         if (!found) {
 254 |     |             revert(
 255 |     |                 "stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called."
 256 |     |             );
 257 |     |         }
 258 |     |         return (uint256(parent_slot), key);
 259 |     |     }
 260 |     | 
 261 |     |     function root(StdStorage storage self) internal returns (uint256) {
 262 |     |         address who = self._target;
 263 |     |         uint256 field_depth = self._depth;
 264 |     |         vm.startMappingRecording();
 265 |     |         uint256 child = find(self, true).slot - field_depth;
 266 |     |         bool found;
 267 |     |         bytes32 root_slot;
 268 |     |         bytes32 parent_slot;
 269 |     |         (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));
 270 |     |         if (!found) {
 271 |     |             revert(
 272 |     |                 "stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called."
 273 |     |             );
 274 |     |         }
 275 |     |         while (found) {
 276 |     |             root_slot = parent_slot;
 277 |     |             (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));
 278 |     |         }
 279 |     |         return uint256(root_slot);
 280 |     |     }
 281 |     | 
 282 |     |     function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {
 283 |     |         bytes32 out;
 284 |     | 
 285 |     |         uint256 max = b.length > 32 ? 32 : b.length;
 286 |     |         for (uint256 i = 0; i < max; i++) {
 287 |     |             out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);
 288 |     |         }
 289 |     |         return out;
 290 |     |     }
 291 |     | 
 292 |     |     function flatten(bytes32[] memory b) private pure returns (bytes memory) {
 293 |     |         bytes memory result = new bytes(b.length * 32);
 294 |     |         for (uint256 i = 0; i < b.length; i++) {
 295 |     |             bytes32 k = b[i];
 296 |     |             /// @solidity memory-safe-assembly
 297 |     |             assembly {
 298 |     |                 mstore(add(result, add(32, mul(32, i))), k)
 299 |     |             }
 300 |     |         }
 301 |     | 
 302 |     |         return result;
 303 |     |     }
 304 |     | 
 305 |     |     function clear(StdStorage storage self) internal {
 306 |     |         delete self._target;
 307 |     |         delete self._sig;
 308 |     |         delete self._keys;
 309 |     |         delete self._depth;
 310 |     |         delete self._enable_packed_slots;
 311 |     |         delete self._calldata;
 312 |     |     }
 313 |     | 
 314 |     |     // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`
 315 |     |     // (slotValue & mask) >> offsetRight will be the value of the given packed variable
 316 |     |     function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {
 317 |     |         // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;
 318 |     |         // using assembly because (1 << 256) causes overflow
 319 |     |         assembly {
 320 |     |             mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))
 321 |     |         }
 322 |     |     }
 323 |     | 
 324 |     |     // Returns slot value with updated packed variable.
 325 |     |     function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)
 326 |     |         internal
 327 |     |         pure
 328 |     |         returns (bytes32 newValue)
 329 |     |     {
 330 |     |         return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));
 331 |     |     }
 332 |     | }
 333 |     | 
 334 |     | library stdStorage {
 335 |     |     Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));
 336 |     | 
 337 |     |     function sigs(string memory sigStr) internal pure returns (bytes4) {
 338 |     |         return stdStorageSafe.sigs(sigStr);
 339 |     |     }
 340 |     | 
 341 |     |     function find(StdStorage storage self) internal returns (uint256) {
 342 |     |         return find(self, true);
 343 |     |     }
 344 |     | 
 345 |     |     function find(StdStorage storage self, bool _clear) internal returns (uint256) {
 346 |     |         return stdStorageSafe.find(self, _clear).slot;
 347 |     |     }
 348 |     | 
 349 |     |     function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {
 350 |     |         return stdStorageSafe.target(self, _target);
 351 |     |     }
 352 |     | 
 353 |     |     function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
 354 |     |         return stdStorageSafe.sig(self, _sig);
 355 |     |     }
 356 |     | 
 357 |     |     function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {
 358 |     |         return stdStorageSafe.sig(self, _sig);
 359 |     |     }
 360 |     | 
 361 |     |     function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {
 362 |     |         return stdStorageSafe.with_key(self, who);
 363 |     |     }
 364 |     | 
 365 |     |     function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {
 366 |     |         return stdStorageSafe.with_key(self, amt);
 367 |     |     }
 368 |     | 
 369 |     |     function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {
 370 |     |         return stdStorageSafe.with_key(self, key);
 371 |     |     }
 372 |     | 
 373 |     |     function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {
 374 |     |         return stdStorageSafe.with_calldata(self, _calldata);
 375 |     |     }
 376 |     | 
 377 |     |     function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {
 378 |     |         return stdStorageSafe.enable_packed_slots(self);
 379 |     |     }
 380 |     | 
 381 |     |     function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {
 382 |     |         return stdStorageSafe.depth(self, _depth);
 383 |     |     }
 384 |     | 
 385 |     |     function clear(StdStorage storage self) internal {
 386 |     |         stdStorageSafe.clear(self);
 387 |     |     }
 388 |     | 
 389 |     |     function checked_write(StdStorage storage self, address who) internal {
 390 |     |         checked_write(self, bytes32(uint256(uint160(who))));
 391 |     |     }
 392 |     | 
 393 |     |     function checked_write(StdStorage storage self, uint256 amt) internal {
 394 |     |         checked_write(self, bytes32(amt));
 395 |     |     }
 396 |     | 
 397 |     |     function checked_write_int(StdStorage storage self, int256 val) internal {
 398 |     |         checked_write(self, bytes32(uint256(val)));
 399 |     |     }
 400 |     | 
 401 |     |     function checked_write(StdStorage storage self, bool write) internal {
 402 |     |         bytes32 t;
 403 |     |         /// @solidity memory-safe-assembly
 404 |     |         assembly {
 405 |     |             t := write
 406 |     |         }
 407 |     |         checked_write(self, t);
 408 |     |     }
 409 |     | 
 410 |     |     function checked_write(StdStorage storage self, bytes32 set) internal {
 411 |     |         address who = self._target;
 412 |     |         bytes4 fsig = self._sig;
 413 |     |         uint256 field_depth = self._depth;
 414 |     |         bytes memory params = stdStorageSafe.getCallParams(self);
 415 |     | 
 416 |     |         if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {
 417 |     |             find(self, false);
 418 |     |         }
 419 |     |         FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];
 420 |     |         if ((data.offsetLeft + data.offsetRight) > 0) {
 421 |     |             uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));
 422 |     |             require(
 423 |     |                 uint256(set) < maxVal,
 424 |     |                 string(
 425 |     |                     abi.encodePacked(
 426 |     |                         "stdStorage find(StdStorage): Packed slot. We can't fit value greater than ",
 427 |     |                         vm.toString(maxVal)
 428 |     |                     )
 429 |     |                 )
 430 |     |             );
 431 |     |         }
 432 |     |         bytes32 curVal = vm.load(who, bytes32(data.slot));
 433 |     |         bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);
 434 |     | 
 435 |     |         vm.store(who, bytes32(data.slot), valToSet);
 436 |     | 
 437 |     |         (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);
 438 |     | 
 439 |     |         if (!success || callResult != set) {
 440 |     |             vm.store(who, bytes32(data.slot), curVal);
 441 |     |             revert("stdStorage find(StdStorage): Failed to write value.");
 442 |     |         }
 443 |     |         clear(self);
 444 |     |     }
 445 |     | 
 446 |     |     function read_bytes32(StdStorage storage self) internal returns (bytes32) {
 447 |     |         return stdStorageSafe.read_bytes32(self);
 448 |     |     }
 449 |     | 
 450 |     |     function read_bool(StdStorage storage self) internal returns (bool) {
 451 |     |         return stdStorageSafe.read_bool(self);
 452 |     |     }
 453 |     | 
 454 |     |     function read_address(StdStorage storage self) internal returns (address) {
 455 |     |         return stdStorageSafe.read_address(self);
 456 |     |     }
 457 |     | 
 458 |     |     function read_uint(StdStorage storage self) internal returns (uint256) {
 459 |     |         return stdStorageSafe.read_uint(self);
 460 |     |     }
 461 |     | 
 462 |     |     function read_int(StdStorage storage self) internal returns (int256) {
 463 |     |         return stdStorageSafe.read_int(self);
 464 |     |     }
 465 |     | 
 466 |     |     function parent(StdStorage storage self) internal returns (uint256, bytes32) {
 467 |     |         return stdStorageSafe.parent(self);
 468 |     |     }
 469 |     | 
 470 |     |     function root(StdStorage storage self) internal returns (uint256) {
 471 |     |         return stdStorageSafe.root(self);
 472 |     |     }
 473 |     | }
 474 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdStyle.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.4.22 <0.9.0;
   3 |     | 
   4 |     | import {VmSafe} from "./Vm.sol";
   5 |     | 
   6 |     | library StdStyle {
   7 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
   8 |     | 
   9 |     |     string constant RED = "\u001b[91m";
  10 |     |     string constant GREEN = "\u001b[92m";
  11 |     |     string constant YELLOW = "\u001b[93m";
  12 |     |     string constant BLUE = "\u001b[94m";
  13 |     |     string constant MAGENTA = "\u001b[95m";
  14 |     |     string constant CYAN = "\u001b[96m";
  15 |     |     string constant BOLD = "\u001b[1m";
  16 |     |     string constant DIM = "\u001b[2m";
  17 |     |     string constant ITALIC = "\u001b[3m";
  18 |     |     string constant UNDERLINE = "\u001b[4m";
  19 |     |     string constant INVERSE = "\u001b[7m";
  20 |     |     string constant RESET = "\u001b[0m";
  21 |     | 
  22 |     |     function styleConcat(string memory style, string memory self) private pure returns (string memory) {
  23 |     |         return string(abi.encodePacked(style, self, RESET));
  24 |     |     }
  25 |     | 
  26 |     |     function red(string memory self) internal pure returns (string memory) {
  27 |     |         return styleConcat(RED, self);
  28 |     |     }
  29 |     | 
  30 |     |     function red(uint256 self) internal pure returns (string memory) {
  31 |     |         return red(vm.toString(self));
  32 |     |     }
  33 |     | 
  34 |     |     function red(int256 self) internal pure returns (string memory) {
  35 |     |         return red(vm.toString(self));
  36 |     |     }
  37 |     | 
  38 |     |     function red(address self) internal pure returns (string memory) {
  39 |     |         return red(vm.toString(self));
  40 |     |     }
  41 |     | 
  42 |     |     function red(bool self) internal pure returns (string memory) {
  43 |     |         return red(vm.toString(self));
  44 |     |     }
  45 |     | 
  46 |     |     function redBytes(bytes memory self) internal pure returns (string memory) {
  47 |     |         return red(vm.toString(self));
  48 |     |     }
  49 |     | 
  50 |     |     function redBytes32(bytes32 self) internal pure returns (string memory) {
  51 |     |         return red(vm.toString(self));
  52 |     |     }
  53 |     | 
  54 |     |     function green(string memory self) internal pure returns (string memory) {
  55 |     |         return styleConcat(GREEN, self);
  56 |     |     }
  57 |     | 
  58 |     |     function green(uint256 self) internal pure returns (string memory) {
  59 |     |         return green(vm.toString(self));
  60 |     |     }
  61 |     | 
  62 |     |     function green(int256 self) internal pure returns (string memory) {
  63 |     |         return green(vm.toString(self));
  64 |     |     }
  65 |     | 
  66 |     |     function green(address self) internal pure returns (string memory) {
  67 |     |         return green(vm.toString(self));
  68 |     |     }
  69 |     | 
  70 |     |     function green(bool self) internal pure returns (string memory) {
  71 |     |         return green(vm.toString(self));
  72 |     |     }
  73 |     | 
  74 |     |     function greenBytes(bytes memory self) internal pure returns (string memory) {
  75 |     |         return green(vm.toString(self));
  76 |     |     }
  77 |     | 
  78 |     |     function greenBytes32(bytes32 self) internal pure returns (string memory) {
  79 |     |         return green(vm.toString(self));
  80 |     |     }
  81 |     | 
  82 |     |     function yellow(string memory self) internal pure returns (string memory) {
  83 |     |         return styleConcat(YELLOW, self);
  84 |     |     }
  85 |     | 
  86 |     |     function yellow(uint256 self) internal pure returns (string memory) {
  87 |     |         return yellow(vm.toString(self));
  88 |     |     }
  89 |     | 
  90 |     |     function yellow(int256 self) internal pure returns (string memory) {
  91 |     |         return yellow(vm.toString(self));
  92 |     |     }
  93 |     | 
  94 |     |     function yellow(address self) internal pure returns (string memory) {
  95 |     |         return yellow(vm.toString(self));
  96 |     |     }
  97 |     | 
  98 |     |     function yellow(bool self) internal pure returns (string memory) {
  99 |     |         return yellow(vm.toString(self));
 100 |     |     }
 101 |     | 
 102 |     |     function yellowBytes(bytes memory self) internal pure returns (string memory) {
 103 |     |         return yellow(vm.toString(self));
 104 |     |     }
 105 |     | 
 106 |     |     function yellowBytes32(bytes32 self) internal pure returns (string memory) {
 107 |     |         return yellow(vm.toString(self));
 108 |     |     }
 109 |     | 
 110 |     |     function blue(string memory self) internal pure returns (string memory) {
 111 |     |         return styleConcat(BLUE, self);
 112 |     |     }
 113 |     | 
 114 |     |     function blue(uint256 self) internal pure returns (string memory) {
 115 |     |         return blue(vm.toString(self));
 116 |     |     }
 117 |     | 
 118 |     |     function blue(int256 self) internal pure returns (string memory) {
 119 |     |         return blue(vm.toString(self));
 120 |     |     }
 121 |     | 
 122 |     |     function blue(address self) internal pure returns (string memory) {
 123 |     |         return blue(vm.toString(self));
 124 |     |     }
 125 |     | 
 126 |     |     function blue(bool self) internal pure returns (string memory) {
 127 |     |         return blue(vm.toString(self));
 128 |     |     }
 129 |     | 
 130 |     |     function blueBytes(bytes memory self) internal pure returns (string memory) {
 131 |     |         return blue(vm.toString(self));
 132 |     |     }
 133 |     | 
 134 |     |     function blueBytes32(bytes32 self) internal pure returns (string memory) {
 135 |     |         return blue(vm.toString(self));
 136 |     |     }
 137 |     | 
 138 |     |     function magenta(string memory self) internal pure returns (string memory) {
 139 |     |         return styleConcat(MAGENTA, self);
 140 |     |     }
 141 |     | 
 142 |     |     function magenta(uint256 self) internal pure returns (string memory) {
 143 |     |         return magenta(vm.toString(self));
 144 |     |     }
 145 |     | 
 146 |     |     function magenta(int256 self) internal pure returns (string memory) {
 147 |     |         return magenta(vm.toString(self));
 148 |     |     }
 149 |     | 
 150 |     |     function magenta(address self) internal pure returns (string memory) {
 151 |     |         return magenta(vm.toString(self));
 152 |     |     }
 153 |     | 
 154 |     |     function magenta(bool self) internal pure returns (string memory) {
 155 |     |         return magenta(vm.toString(self));
 156 |     |     }
 157 |     | 
 158 |     |     function magentaBytes(bytes memory self) internal pure returns (string memory) {
 159 |     |         return magenta(vm.toString(self));
 160 |     |     }
 161 |     | 
 162 |     |     function magentaBytes32(bytes32 self) internal pure returns (string memory) {
 163 |     |         return magenta(vm.toString(self));
 164 |     |     }
 165 |     | 
 166 |     |     function cyan(string memory self) internal pure returns (string memory) {
 167 |     |         return styleConcat(CYAN, self);
 168 |     |     }
 169 |     | 
 170 |     |     function cyan(uint256 self) internal pure returns (string memory) {
 171 |     |         return cyan(vm.toString(self));
 172 |     |     }
 173 |     | 
 174 |     |     function cyan(int256 self) internal pure returns (string memory) {
 175 |     |         return cyan(vm.toString(self));
 176 |     |     }
 177 |     | 
 178 |     |     function cyan(address self) internal pure returns (string memory) {
 179 |     |         return cyan(vm.toString(self));
 180 |     |     }
 181 |     | 
 182 |     |     function cyan(bool self) internal pure returns (string memory) {
 183 |     |         return cyan(vm.toString(self));
 184 |     |     }
 185 |     | 
 186 |     |     function cyanBytes(bytes memory self) internal pure returns (string memory) {
 187 |     |         return cyan(vm.toString(self));
 188 |     |     }
 189 |     | 
 190 |     |     function cyanBytes32(bytes32 self) internal pure returns (string memory) {
 191 |     |         return cyan(vm.toString(self));
 192 |     |     }
 193 |     | 
 194 |     |     function bold(string memory self) internal pure returns (string memory) {
 195 |     |         return styleConcat(BOLD, self);
 196 |     |     }
 197 |     | 
 198 |     |     function bold(uint256 self) internal pure returns (string memory) {
 199 |     |         return bold(vm.toString(self));
 200 |     |     }
 201 |     | 
 202 |     |     function bold(int256 self) internal pure returns (string memory) {
 203 |     |         return bold(vm.toString(self));
 204 |     |     }
 205 |     | 
 206 |     |     function bold(address self) internal pure returns (string memory) {
 207 |     |         return bold(vm.toString(self));
 208 |     |     }
 209 |     | 
 210 |     |     function bold(bool self) internal pure returns (string memory) {
 211 |     |         return bold(vm.toString(self));
 212 |     |     }
 213 |     | 
 214 |     |     function boldBytes(bytes memory self) internal pure returns (string memory) {
 215 |     |         return bold(vm.toString(self));
 216 |     |     }
 217 |     | 
 218 |     |     function boldBytes32(bytes32 self) internal pure returns (string memory) {
 219 |     |         return bold(vm.toString(self));
 220 |     |     }
 221 |     | 
 222 |     |     function dim(string memory self) internal pure returns (string memory) {
 223 |     |         return styleConcat(DIM, self);
 224 |     |     }
 225 |     | 
 226 |     |     function dim(uint256 self) internal pure returns (string memory) {
 227 |     |         return dim(vm.toString(self));
 228 |     |     }
 229 |     | 
 230 |     |     function dim(int256 self) internal pure returns (string memory) {
 231 |     |         return dim(vm.toString(self));
 232 |     |     }
 233 |     | 
 234 |     |     function dim(address self) internal pure returns (string memory) {
 235 |     |         return dim(vm.toString(self));
 236 |     |     }
 237 |     | 
 238 |     |     function dim(bool self) internal pure returns (string memory) {
 239 |     |         return dim(vm.toString(self));
 240 |     |     }
 241 |     | 
 242 |     |     function dimBytes(bytes memory self) internal pure returns (string memory) {
 243 |     |         return dim(vm.toString(self));
 244 |     |     }
 245 |     | 
 246 |     |     function dimBytes32(bytes32 self) internal pure returns (string memory) {
 247 |     |         return dim(vm.toString(self));
 248 |     |     }
 249 |     | 
 250 |     |     function italic(string memory self) internal pure returns (string memory) {
 251 |     |         return styleConcat(ITALIC, self);
 252 |     |     }
 253 |     | 
 254 |     |     function italic(uint256 self) internal pure returns (string memory) {
 255 |     |         return italic(vm.toString(self));
 256 |     |     }
 257 |     | 
 258 |     |     function italic(int256 self) internal pure returns (string memory) {
 259 |     |         return italic(vm.toString(self));
 260 |     |     }
 261 |     | 
 262 |     |     function italic(address self) internal pure returns (string memory) {
 263 |     |         return italic(vm.toString(self));
 264 |     |     }
 265 |     | 
 266 |     |     function italic(bool self) internal pure returns (string memory) {
 267 |     |         return italic(vm.toString(self));
 268 |     |     }
 269 |     | 
 270 |     |     function italicBytes(bytes memory self) internal pure returns (string memory) {
 271 |     |         return italic(vm.toString(self));
 272 |     |     }
 273 |     | 
 274 |     |     function italicBytes32(bytes32 self) internal pure returns (string memory) {
 275 |     |         return italic(vm.toString(self));
 276 |     |     }
 277 |     | 
 278 |     |     function underline(string memory self) internal pure returns (string memory) {
 279 |     |         return styleConcat(UNDERLINE, self);
 280 |     |     }
 281 |     | 
 282 |     |     function underline(uint256 self) internal pure returns (string memory) {
 283 |     |         return underline(vm.toString(self));
 284 |     |     }
 285 |     | 
 286 |     |     function underline(int256 self) internal pure returns (string memory) {
 287 |     |         return underline(vm.toString(self));
 288 |     |     }
 289 |     | 
 290 |     |     function underline(address self) internal pure returns (string memory) {
 291 |     |         return underline(vm.toString(self));
 292 |     |     }
 293 |     | 
 294 |     |     function underline(bool self) internal pure returns (string memory) {
 295 |     |         return underline(vm.toString(self));
 296 |     |     }
 297 |     | 
 298 |     |     function underlineBytes(bytes memory self) internal pure returns (string memory) {
 299 |     |         return underline(vm.toString(self));
 300 |     |     }
 301 |     | 
 302 |     |     function underlineBytes32(bytes32 self) internal pure returns (string memory) {
 303 |     |         return underline(vm.toString(self));
 304 |     |     }
 305 |     | 
 306 |     |     function inverse(string memory self) internal pure returns (string memory) {
 307 |     |         return styleConcat(INVERSE, self);
 308 |     |     }
 309 |     | 
 310 |     |     function inverse(uint256 self) internal pure returns (string memory) {
 311 |     |         return inverse(vm.toString(self));
 312 |     |     }
 313 |     | 
 314 |     |     function inverse(int256 self) internal pure returns (string memory) {
 315 |     |         return inverse(vm.toString(self));
 316 |     |     }
 317 |     | 
 318 |     |     function inverse(address self) internal pure returns (string memory) {
 319 |     |         return inverse(vm.toString(self));
 320 |     |     }
 321 |     | 
 322 |     |     function inverse(bool self) internal pure returns (string memory) {
 323 |     |         return inverse(vm.toString(self));
 324 |     |     }
 325 |     | 
 326 |     |     function inverseBytes(bytes memory self) internal pure returns (string memory) {
 327 |     |         return inverse(vm.toString(self));
 328 |     |     }
 329 |     | 
 330 |     |     function inverseBytes32(bytes32 self) internal pure returns (string memory) {
 331 |     |         return inverse(vm.toString(self));
 332 |     |     }
 333 |     | }
 334 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdToml.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.0 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {VmSafe} from "./Vm.sol";
   7 |     | 
   8 |     | // Helpers for parsing and writing TOML files
   9 |     | // To parse:
  10 |     | // ```
  11 |     | // using stdToml for string;
  12 |     | // string memory toml = vm.readFile("<some_path>");
  13 |     | // toml.readUint("<json_path>");
  14 |     | // ```
  15 |     | // To write:
  16 |     | // ```
  17 |     | // using stdToml for string;
  18 |     | // string memory json = "json";
  19 |     | // json.serialize("a", uint256(123));
  20 |     | // string memory semiFinal = json.serialize("b", string("test"));
  21 |     | // string memory finalJson = json.serialize("c", semiFinal);
  22 |     | // finalJson.write("<some_path>");
  23 |     | // ```
  24 |     | 
  25 |     | library stdToml {
  26 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  27 |     | 
  28 |     |     function keyExists(string memory toml, string memory key) internal view returns (bool) {
  29 |     |         return vm.keyExistsToml(toml, key);
  30 |     |     }
  31 |     | 
  32 |     |     function parseRaw(string memory toml, string memory key) internal pure returns (bytes memory) {
  33 |     |         return vm.parseToml(toml, key);
  34 |     |     }
  35 |     | 
  36 |     |     function readUint(string memory toml, string memory key) internal pure returns (uint256) {
  37 |     |         return vm.parseTomlUint(toml, key);
  38 |     |     }
  39 |     | 
  40 |     |     function readUintArray(string memory toml, string memory key) internal pure returns (uint256[] memory) {
  41 |     |         return vm.parseTomlUintArray(toml, key);
  42 |     |     }
  43 |     | 
  44 |     |     function readInt(string memory toml, string memory key) internal pure returns (int256) {
  45 |     |         return vm.parseTomlInt(toml, key);
  46 |     |     }
  47 |     | 
  48 |     |     function readIntArray(string memory toml, string memory key) internal pure returns (int256[] memory) {
  49 |     |         return vm.parseTomlIntArray(toml, key);
  50 |     |     }
  51 |     | 
  52 |     |     function readBytes32(string memory toml, string memory key) internal pure returns (bytes32) {
  53 |     |         return vm.parseTomlBytes32(toml, key);
  54 |     |     }
  55 |     | 
  56 |     |     function readBytes32Array(string memory toml, string memory key) internal pure returns (bytes32[] memory) {
  57 |     |         return vm.parseTomlBytes32Array(toml, key);
  58 |     |     }
  59 |     | 
  60 |     |     function readString(string memory toml, string memory key) internal pure returns (string memory) {
  61 |     |         return vm.parseTomlString(toml, key);
  62 |     |     }
  63 |     | 
  64 |     |     function readStringArray(string memory toml, string memory key) internal pure returns (string[] memory) {
  65 |     |         return vm.parseTomlStringArray(toml, key);
  66 |     |     }
  67 |     | 
  68 |     |     function readAddress(string memory toml, string memory key) internal pure returns (address) {
  69 |     |         return vm.parseTomlAddress(toml, key);
  70 |     |     }
  71 |     | 
  72 |     |     function readAddressArray(string memory toml, string memory key) internal pure returns (address[] memory) {
  73 |     |         return vm.parseTomlAddressArray(toml, key);
  74 |     |     }
  75 |     | 
  76 |     |     function readBool(string memory toml, string memory key) internal pure returns (bool) {
  77 |     |         return vm.parseTomlBool(toml, key);
  78 |     |     }
  79 |     | 
  80 |     |     function readBoolArray(string memory toml, string memory key) internal pure returns (bool[] memory) {
  81 |     |         return vm.parseTomlBoolArray(toml, key);
  82 |     |     }
  83 |     | 
  84 |     |     function readBytes(string memory toml, string memory key) internal pure returns (bytes memory) {
  85 |     |         return vm.parseTomlBytes(toml, key);
  86 |     |     }
  87 |     | 
  88 |     |     function readBytesArray(string memory toml, string memory key) internal pure returns (bytes[] memory) {
  89 |     |         return vm.parseTomlBytesArray(toml, key);
  90 |     |     }
  91 |     | 
  92 |     |     function readUintOr(string memory toml, string memory key, uint256 defaultValue) internal view returns (uint256) {
  93 |     |         return keyExists(toml, key) ? readUint(toml, key) : defaultValue;
  94 |     |     }
  95 |     | 
  96 |     |     function readUintArrayOr(string memory toml, string memory key, uint256[] memory defaultValue)
  97 |     |         internal
  98 |     |         view
  99 |     |         returns (uint256[] memory)
 100 |     |     {
 101 |     |         return keyExists(toml, key) ? readUintArray(toml, key) : defaultValue;
 102 |     |     }
 103 |     | 
 104 |     |     function readIntOr(string memory toml, string memory key, int256 defaultValue) internal view returns (int256) {
 105 |     |         return keyExists(toml, key) ? readInt(toml, key) : defaultValue;
 106 |     |     }
 107 |     | 
 108 |     |     function readIntArrayOr(string memory toml, string memory key, int256[] memory defaultValue)
 109 |     |         internal
 110 |     |         view
 111 |     |         returns (int256[] memory)
 112 |     |     {
 113 |     |         return keyExists(toml, key) ? readIntArray(toml, key) : defaultValue;
 114 |     |     }
 115 |     | 
 116 |     |     function readBytes32Or(string memory toml, string memory key, bytes32 defaultValue)
 117 |     |         internal
 118 |     |         view
 119 |     |         returns (bytes32)
 120 |     |     {
 121 |     |         return keyExists(toml, key) ? readBytes32(toml, key) : defaultValue;
 122 |     |     }
 123 |     | 
 124 |     |     function readBytes32ArrayOr(string memory toml, string memory key, bytes32[] memory defaultValue)
 125 |     |         internal
 126 |     |         view
 127 |     |         returns (bytes32[] memory)
 128 |     |     {
 129 |     |         return keyExists(toml, key) ? readBytes32Array(toml, key) : defaultValue;
 130 |     |     }
 131 |     | 
 132 |     |     function readStringOr(string memory toml, string memory key, string memory defaultValue)
 133 |     |         internal
 134 |     |         view
 135 |     |         returns (string memory)
 136 |     |     {
 137 |     |         return keyExists(toml, key) ? readString(toml, key) : defaultValue;
 138 |     |     }
 139 |     | 
 140 |     |     function readStringArrayOr(string memory toml, string memory key, string[] memory defaultValue)
 141 |     |         internal
 142 |     |         view
 143 |     |         returns (string[] memory)
 144 |     |     {
 145 |     |         return keyExists(toml, key) ? readStringArray(toml, key) : defaultValue;
 146 |     |     }
 147 |     | 
 148 |     |     function readAddressOr(string memory toml, string memory key, address defaultValue)
 149 |     |         internal
 150 |     |         view
 151 |     |         returns (address)
 152 |     |     {
 153 |     |         return keyExists(toml, key) ? readAddress(toml, key) : defaultValue;
 154 |     |     }
 155 |     | 
 156 |     |     function readAddressArrayOr(string memory toml, string memory key, address[] memory defaultValue)
 157 |     |         internal
 158 |     |         view
 159 |     |         returns (address[] memory)
 160 |     |     {
 161 |     |         return keyExists(toml, key) ? readAddressArray(toml, key) : defaultValue;
 162 |     |     }
 163 |     | 
 164 |     |     function readBoolOr(string memory toml, string memory key, bool defaultValue) internal view returns (bool) {
 165 |     |         return keyExists(toml, key) ? readBool(toml, key) : defaultValue;
 166 |     |     }
 167 |     | 
 168 |     |     function readBoolArrayOr(string memory toml, string memory key, bool[] memory defaultValue)
 169 |     |         internal
 170 |     |         view
 171 |     |         returns (bool[] memory)
 172 |     |     {
 173 |     |         return keyExists(toml, key) ? readBoolArray(toml, key) : defaultValue;
 174 |     |     }
 175 |     | 
 176 |     |     function readBytesOr(string memory toml, string memory key, bytes memory defaultValue)
 177 |     |         internal
 178 |     |         view
 179 |     |         returns (bytes memory)
 180 |     |     {
 181 |     |         return keyExists(toml, key) ? readBytes(toml, key) : defaultValue;
 182 |     |     }
 183 |     | 
 184 |     |     function readBytesArrayOr(string memory toml, string memory key, bytes[] memory defaultValue)
 185 |     |         internal
 186 |     |         view
 187 |     |         returns (bytes[] memory)
 188 |     |     {
 189 |     |         return keyExists(toml, key) ? readBytesArray(toml, key) : defaultValue;
 190 |     |     }
 191 |     | 
 192 |     |     function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {
 193 |     |         return vm.serializeJson(jsonKey, rootObject);
 194 |     |     }
 195 |     | 
 196 |     |     function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {
 197 |     |         return vm.serializeBool(jsonKey, key, value);
 198 |     |     }
 199 |     | 
 200 |     |     function serialize(string memory jsonKey, string memory key, bool[] memory value)
 201 |     |         internal
 202 |     |         returns (string memory)
 203 |     |     {
 204 |     |         return vm.serializeBool(jsonKey, key, value);
 205 |     |     }
 206 |     | 
 207 |     |     function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {
 208 |     |         return vm.serializeUint(jsonKey, key, value);
 209 |     |     }
 210 |     | 
 211 |     |     function serialize(string memory jsonKey, string memory key, uint256[] memory value)
 212 |     |         internal
 213 |     |         returns (string memory)
 214 |     |     {
 215 |     |         return vm.serializeUint(jsonKey, key, value);
 216 |     |     }
 217 |     | 
 218 |     |     function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {
 219 |     |         return vm.serializeInt(jsonKey, key, value);
 220 |     |     }
 221 |     | 
 222 |     |     function serialize(string memory jsonKey, string memory key, int256[] memory value)
 223 |     |         internal
 224 |     |         returns (string memory)
 225 |     |     {
 226 |     |         return vm.serializeInt(jsonKey, key, value);
 227 |     |     }
 228 |     | 
 229 |     |     function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {
 230 |     |         return vm.serializeAddress(jsonKey, key, value);
 231 |     |     }
 232 |     | 
 233 |     |     function serialize(string memory jsonKey, string memory key, address[] memory value)
 234 |     |         internal
 235 |     |         returns (string memory)
 236 |     |     {
 237 |     |         return vm.serializeAddress(jsonKey, key, value);
 238 |     |     }
 239 |     | 
 240 |     |     function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {
 241 |     |         return vm.serializeBytes32(jsonKey, key, value);
 242 |     |     }
 243 |     | 
 244 |     |     function serialize(string memory jsonKey, string memory key, bytes32[] memory value)
 245 |     |         internal
 246 |     |         returns (string memory)
 247 |     |     {
 248 |     |         return vm.serializeBytes32(jsonKey, key, value);
 249 |     |     }
 250 |     | 
 251 |     |     function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {
 252 |     |         return vm.serializeBytes(jsonKey, key, value);
 253 |     |     }
 254 |     | 
 255 |     |     function serialize(string memory jsonKey, string memory key, bytes[] memory value)
 256 |     |         internal
 257 |     |         returns (string memory)
 258 |     |     {
 259 |     |         return vm.serializeBytes(jsonKey, key, value);
 260 |     |     }
 261 |     | 
 262 |     |     function serialize(string memory jsonKey, string memory key, string memory value)
 263 |     |         internal
 264 |     |         returns (string memory)
 265 |     |     {
 266 |     |         return vm.serializeString(jsonKey, key, value);
 267 |     |     }
 268 |     | 
 269 |     |     function serialize(string memory jsonKey, string memory key, string[] memory value)
 270 |     |         internal
 271 |     |         returns (string memory)
 272 |     |     {
 273 |     |         return vm.serializeString(jsonKey, key, value);
 274 |     |     }
 275 |     | 
 276 |     |     function write(string memory jsonKey, string memory path) internal {
 277 |     |         vm.writeToml(jsonKey, path);
 278 |     |     }
 279 |     | 
 280 |     |     function write(string memory jsonKey, string memory path, string memory valueKey) internal {
 281 |     |         vm.writeToml(jsonKey, path, valueKey);
 282 |     |     }
 283 |     | }
 284 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/StdUtils.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | pragma experimental ABIEncoderV2;
   5 |     | 
   6 |     | import {IMulticall3} from "./interfaces/IMulticall3.sol";
   7 |     | import {MockERC20} from "./mocks/MockERC20.sol";
   8 |     | import {MockERC721} from "./mocks/MockERC721.sol";
   9 |     | import {VmSafe} from "./Vm.sol";
  10 |     | 
  11 |     | abstract contract StdUtils {
  12 |     |     /*//////////////////////////////////////////////////////////////////////////
  13 |     |                                      CONSTANTS
  14 |     |     //////////////////////////////////////////////////////////////////////////*/
  15 |     | 
  16 |     |     IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);
  17 |     |     VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));
  18 |     |     address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;
  19 |     |     uint256 private constant INT256_MIN_ABS =
  20 |     |         57896044618658097711785492504343953926634992332820282019728792003956564819968;
  21 |     |     uint256 private constant SECP256K1_ORDER =
  22 |     |         115792089237316195423570985008687907852837564279074904382605163141518161494337;
  23 |     |     uint256 private constant UINT256_MAX =
  24 |     |         115792089237316195423570985008687907853269984665640564039457584007913129639935;
  25 |     | 
  26 |     |     // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.
  27 |     |     address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;
  28 |     | 
  29 |     |     /*//////////////////////////////////////////////////////////////////////////
  30 |     |                                  INTERNAL FUNCTIONS
  31 |     |     //////////////////////////////////////////////////////////////////////////*/
  32 |     | 
  33 |     |     function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
  34 |     |         require(min <= max, "StdUtils bound(uint256,uint256,uint256): Max is less than min.");
  35 |     |         // If x is between min and max, return x directly. This is to ensure that dictionary values
  36 |     |         // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188
  37 |     |         if (x >= min && x <= max) return x;
  38 |     | 
  39 |     |         uint256 size = max - min + 1;
  40 |     | 
  41 |     |         // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.
  42 |     |         // This helps ensure coverage of the min/max values.
  43 |     |         if (x <= 3 && size > x) return min + x;
  44 |     |         if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);
  45 |     | 
  46 |     |         // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.
  47 |     |         if (x > max) {
  48 |     |             uint256 diff = x - max;
  49 |     |             uint256 rem = diff % size;
  50 |     |             if (rem == 0) return max;
  51 |     |             result = min + rem - 1;
  52 |     |         } else if (x < min) {
  53 |     |             uint256 diff = min - x;
  54 |     |             uint256 rem = diff % size;
  55 |     |             if (rem == 0) return min;
  56 |     |             result = max - rem + 1;
  57 |     |         }
  58 |     |     }
  59 |     | 
  60 |     |     function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {
  61 |     |         result = _bound(x, min, max);
  62 |     |         console2_log_StdUtils("Bound result", result);
  63 |     |     }
  64 |     | 
  65 |     |     function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {
  66 |     |         require(min <= max, "StdUtils bound(int256,int256,int256): Max is less than min.");
  67 |     | 
  68 |     |         // Shifting all int256 values to uint256 to use _bound function. The range of two types are:
  69 |     |         // int256 : -(2**255) ~ (2**255 - 1)
  70 |     |         // uint256:     0     ~ (2**256 - 1)
  71 |     |         // So, add 2**255, INT256_MIN_ABS to the integer values.
  72 |     |         //
  73 |     |         // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.
  74 |     |         // So, use `~uint256(x) + 1` instead.
  75 |     |         uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);
  76 |     |         uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);
  77 |     |         uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);
  78 |     | 
  79 |     |         uint256 y = _bound(_x, _min, _max);
  80 |     | 
  81 |     |         // To move it back to int256 value, subtract INT256_MIN_ABS at here.
  82 |     |         result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);
  83 |     |     }
  84 |     | 
  85 |     |     function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {
  86 |     |         result = _bound(x, min, max);
  87 |     |         console2_log_StdUtils("Bound result", vm.toString(result));
  88 |     |     }
  89 |     | 
  90 |     |     function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {
  91 |     |         result = _bound(privateKey, 1, SECP256K1_ORDER - 1);
  92 |     |     }
  93 |     | 
  94 |     |     function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {
  95 |     |         require(b.length <= 32, "StdUtils bytesToUint(bytes): Bytes length exceeds 32.");
  96 |     |         return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
  97 |     |     }
  98 |     | 
  99 |     |     /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce
 100 |     |     /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)
 101 |     |     function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {
 102 |     |         console2_log_StdUtils("computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.");
 103 |     |         return vm.computeCreateAddress(deployer, nonce);
 104 |     |     }
 105 |     | 
 106 |     |     function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)
 107 |     |         internal
 108 |     |         pure
 109 |     |         virtual
 110 |     |         returns (address)
 111 |     |     {
 112 |     |         console2_log_StdUtils("computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.");
 113 |     |         return vm.computeCreate2Address(salt, initcodeHash, deployer);
 114 |     |     }
 115 |     | 
 116 |     |     /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer
 117 |     |     function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {
 118 |     |         console2_log_StdUtils("computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.");
 119 |     |         return vm.computeCreate2Address(salt, initCodeHash);
 120 |     |     }
 121 |     | 
 122 |     |     /// @dev returns an initialized mock ERC20 contract
 123 |     |     function deployMockERC20(string memory name, string memory symbol, uint8 decimals)
 124 |     |         internal
 125 |     |         returns (MockERC20 mock)
 126 |     |     {
 127 |     |         mock = new MockERC20();
 128 |     |         mock.initialize(name, symbol, decimals);
 129 |     |     }
 130 |     | 
 131 |     |     /// @dev returns an initialized mock ERC721 contract
 132 |     |     function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {
 133 |     |         mock = new MockERC721();
 134 |     |         mock.initialize(name, symbol);
 135 |     |     }
 136 |     | 
 137 |     |     /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments
 138 |     |     /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode
 139 |     |     function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {
 140 |     |         return hashInitCode(creationCode, "");
 141 |     |     }
 142 |     | 
 143 |     |     /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2
 144 |     |     /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode
 145 |     |     /// @param args the ABI-encoded arguments to the constructor of C
 146 |     |     function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {
 147 |     |         return keccak256(abi.encodePacked(creationCode, args));
 148 |     |     }
 149 |     | 
 150 |     |     // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.
 151 |     |     function getTokenBalances(address token, address[] memory addresses)
 152 |     |         internal
 153 |     |         virtual
 154 |     |         returns (uint256[] memory balances)
 155 |     |     {
 156 |     |         uint256 tokenCodeSize;
 157 |     |         assembly {
 158 |     |             tokenCodeSize := extcodesize(token)
 159 |     |         }
 160 |     |         require(tokenCodeSize > 0, "StdUtils getTokenBalances(address,address[]): Token address is not a contract.");
 161 |     | 
 162 |     |         // ABI encode the aggregate call to Multicall3.
 163 |     |         uint256 length = addresses.length;
 164 |     |         IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);
 165 |     |         for (uint256 i = 0; i < length; ++i) {
 166 |     |             // 0x70a08231 = bytes4("balanceOf(address)"))
 167 |     |             calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});
 168 |     |         }
 169 |     | 
 170 |     |         // Make the aggregate call.
 171 |     |         (, bytes[] memory returnData) = multicall.aggregate(calls);
 172 |     | 
 173 |     |         // ABI decode the return data and return the balances.
 174 |     |         balances = new uint256[](length);
 175 |     |         for (uint256 i = 0; i < length; ++i) {
 176 |     |             balances[i] = abi.decode(returnData[i], (uint256));
 177 |     |         }
 178 |     |     }
 179 |     | 
 180 |     |     /*//////////////////////////////////////////////////////////////////////////
 181 |     |                                  PRIVATE FUNCTIONS
 182 |     |     //////////////////////////////////////////////////////////////////////////*/
 183 |     | 
 184 |     |     function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {
 185 |     |         return address(uint160(uint256(bytesValue)));
 186 |     |     }
 187 |     | 
 188 |     |     // This section is used to prevent the compilation of console, which shortens the compilation time when console is
 189 |     |     // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid
 190 |     |     // any breaking changes to function signatures.
 191 |     |     function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)
 192 |     |         internal
 193 |     |         pure
 194 |     |         returns (function(bytes memory) internal pure fnOut)
 195 |     |     {
 196 |     |         assembly {
 197 |     |             fnOut := fnIn
 198 |     |         }
 199 |     |     }
 200 |     | 
 201 |     |     function _sendLogPayload(bytes memory payload) internal pure {
 202 |     |         _castLogPayloadViewToPure(_sendLogPayloadView)(payload);
 203 |     |     }
 204 |     | 
 205 |     |     function _sendLogPayloadView(bytes memory payload) private view {
 206 |     |         uint256 payloadLength = payload.length;
 207 |     |         address consoleAddress = CONSOLE2_ADDRESS;
 208 |     |         /// @solidity memory-safe-assembly
 209 |     |         assembly {
 210 |     |             let payloadStart := add(payload, 32)
 211 |     |             let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
 212 |     |         }
 213 |     |     }
 214 |     | 
 215 |     |     function console2_log_StdUtils(string memory p0) private pure {
 216 |     |         _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
 217 |     |     }
 218 |     | 
 219 |     |     function console2_log_StdUtils(string memory p0, uint256 p1) private pure {
 220 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
 221 |     |     }
 222 |     | 
 223 |     |     function console2_log_StdUtils(string memory p0, string memory p1) private pure {
 224 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
 225 |     |     }
 226 |     | }
 227 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/Test.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | pragma experimental ABIEncoderV2;
  5 |     | 
  6 |     | // 💬 ABOUT
  7 |     | // Forge Std's default Test.
  8 |     | 
  9 |     | // 🧩 MODULES
 10 |     | import {console} from "./console.sol";
 11 |     | import {console2} from "./console2.sol";
 12 |     | import {safeconsole} from "./safeconsole.sol";
 13 |     | import {StdAssertions} from "./StdAssertions.sol";
 14 |     | import {StdChains} from "./StdChains.sol";
 15 |     | import {StdCheats} from "./StdCheats.sol";
 16 |     | import {stdError} from "./StdError.sol";
 17 |     | import {StdInvariant} from "./StdInvariant.sol";
 18 |     | import {stdJson} from "./StdJson.sol";
 19 |     | import {stdMath} from "./StdMath.sol";
 20 |     | import {StdStorage, stdStorage} from "./StdStorage.sol";
 21 |     | import {StdStyle} from "./StdStyle.sol";
 22 |     | import {stdToml} from "./StdToml.sol";
 23 |     | import {StdUtils} from "./StdUtils.sol";
 24 |     | import {Vm} from "./Vm.sol";
 25 |     | 
 26 |     | // 📦 BOILERPLATE
 27 |     | import {TestBase} from "./Base.sol";
 28 |     | 
 29 |     | // ⭐️ TEST
 30 |     | abstract contract Test is TestBase, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils {
 31 |     |     // Note: IS_TEST() must return true.
 32 |     |     bool public IS_TEST = true;
 33 |     | }
 34 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/Vm.sol
    1 |     | // Automatically @generated by scripts/vm.py. Do not modify manually.
    2 |     | 
    3 |     | // SPDX-License-Identifier: MIT OR Apache-2.0
    4 |     | pragma solidity >=0.6.2 <0.9.0;
    5 |     | pragma experimental ABIEncoderV2;
    6 |     | 
    7 |     | /// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may
    8 |     | /// result in Script simulations differing from on-chain execution. It is recommended to only use
    9 |     | /// these cheats in scripts.
   10 |     | interface VmSafe {
   11 |     |     /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.
   12 |     |     enum CallerMode {
   13 |     |         // No caller modification is currently active.
   14 |     |         None,
   15 |     |         // A one time broadcast triggered by a `vm.broadcast()` call is currently active.
   16 |     |         Broadcast,
   17 |     |         // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.
   18 |     |         RecurrentBroadcast,
   19 |     |         // A one time prank triggered by a `vm.prank()` call is currently active.
   20 |     |         Prank,
   21 |     |         // A recurrent prank triggered by a `vm.startPrank()` call is currently active.
   22 |     |         RecurrentPrank
   23 |     |     }
   24 |     | 
   25 |     |     /// The kind of account access that occurred.
   26 |     |     enum AccountAccessKind {
   27 |     |         // The account was called.
   28 |     |         Call,
   29 |     |         // The account was called via delegatecall.
   30 |     |         DelegateCall,
   31 |     |         // The account was called via callcode.
   32 |     |         CallCode,
   33 |     |         // The account was called via staticcall.
   34 |     |         StaticCall,
   35 |     |         // The account was created.
   36 |     |         Create,
   37 |     |         // The account was selfdestructed.
   38 |     |         SelfDestruct,
   39 |     |         // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).
   40 |     |         Resume,
   41 |     |         // The account's balance was read.
   42 |     |         Balance,
   43 |     |         // The account's codesize was read.
   44 |     |         Extcodesize,
   45 |     |         // The account's codehash was read.
   46 |     |         Extcodehash,
   47 |     |         // The account's code was copied.
   48 |     |         Extcodecopy
   49 |     |     }
   50 |     | 
   51 |     |     /// Forge execution contexts.
   52 |     |     enum ForgeContext {
   53 |     |         // Test group execution context (test, coverage or snapshot).
   54 |     |         TestGroup,
   55 |     |         // `forge test` execution context.
   56 |     |         Test,
   57 |     |         // `forge coverage` execution context.
   58 |     |         Coverage,
   59 |     |         // `forge snapshot` execution context.
   60 |     |         Snapshot,
   61 |     |         // Script group execution context (dry run, broadcast or resume).
   62 |     |         ScriptGroup,
   63 |     |         // `forge script` execution context.
   64 |     |         ScriptDryRun,
   65 |     |         // `forge script --broadcast` execution context.
   66 |     |         ScriptBroadcast,
   67 |     |         // `forge script --resume` execution context.
   68 |     |         ScriptResume,
   69 |     |         // Unknown `forge` execution context.
   70 |     |         Unknown
   71 |     |     }
   72 |     | 
   73 |     |     /// An Ethereum log. Returned by `getRecordedLogs`.
   74 |     |     struct Log {
   75 |     |         // The topics of the log, including the signature, if any.
   76 |     |         bytes32[] topics;
   77 |     |         // The raw data of the log.
   78 |     |         bytes data;
   79 |     |         // The address of the log's emitter.
   80 |     |         address emitter;
   81 |     |     }
   82 |     | 
   83 |     |     /// An RPC URL and its alias. Returned by `rpcUrlStructs`.
   84 |     |     struct Rpc {
   85 |     |         // The alias of the RPC URL.
   86 |     |         string key;
   87 |     |         // The RPC URL.
   88 |     |         string url;
   89 |     |     }
   90 |     | 
   91 |     |     /// An RPC log object. Returned by `eth_getLogs`.
   92 |     |     struct EthGetLogs {
   93 |     |         // The address of the log's emitter.
   94 |     |         address emitter;
   95 |     |         // The topics of the log, including the signature, if any.
   96 |     |         bytes32[] topics;
   97 |     |         // The raw data of the log.
   98 |     |         bytes data;
   99 |     |         // The block hash.
  100 |     |         bytes32 blockHash;
  101 |     |         // The block number.
  102 |     |         uint64 blockNumber;
  103 |     |         // The transaction hash.
  104 |     |         bytes32 transactionHash;
  105 |     |         // The transaction index in the block.
  106 |     |         uint64 transactionIndex;
  107 |     |         // The log index.
  108 |     |         uint256 logIndex;
  109 |     |         // Whether the log was removed.
  110 |     |         bool removed;
  111 |     |     }
  112 |     | 
  113 |     |     /// A single entry in a directory listing. Returned by `readDir`.
  114 |     |     struct DirEntry {
  115 |     |         // The error message, if any.
  116 |     |         string errorMessage;
  117 |     |         // The path of the entry.
  118 |     |         string path;
  119 |     |         // The depth of the entry.
  120 |     |         uint64 depth;
  121 |     |         // Whether the entry is a directory.
  122 |     |         bool isDir;
  123 |     |         // Whether the entry is a symlink.
  124 |     |         bool isSymlink;
  125 |     |     }
  126 |     | 
  127 |     |     /// Metadata information about a file.
  128 |     |     /// This structure is returned from the `fsMetadata` function and represents known
  129 |     |     /// metadata about a file such as its permissions, size, modification
  130 |     |     /// times, etc.
  131 |     |     struct FsMetadata {
  132 |     |         // True if this metadata is for a directory.
  133 |     |         bool isDir;
  134 |     |         // True if this metadata is for a symlink.
  135 |     |         bool isSymlink;
  136 |     |         // The size of the file, in bytes, this metadata is for.
  137 |     |         uint256 length;
  138 |     |         // True if this metadata is for a readonly (unwritable) file.
  139 |     |         bool readOnly;
  140 |     |         // The last modification time listed in this metadata.
  141 |     |         uint256 modified;
  142 |     |         // The last access time of this metadata.
  143 |     |         uint256 accessed;
  144 |     |         // The creation time listed in this metadata.
  145 |     |         uint256 created;
  146 |     |     }
  147 |     | 
  148 |     |     /// A wallet with a public and private key.
  149 |     |     struct Wallet {
  150 |     |         // The wallet's address.
  151 |     |         address addr;
  152 |     |         // The wallet's public key `X`.
  153 |     |         uint256 publicKeyX;
  154 |     |         // The wallet's public key `Y`.
  155 |     |         uint256 publicKeyY;
  156 |     |         // The wallet's private key.
  157 |     |         uint256 privateKey;
  158 |     |     }
  159 |     | 
  160 |     |     /// The result of a `tryFfi` call.
  161 |     |     struct FfiResult {
  162 |     |         // The exit code of the call.
  163 |     |         int32 exitCode;
  164 |     |         // The optionally hex-decoded `stdout` data.
  165 |     |         bytes stdout;
  166 |     |         // The `stderr` data.
  167 |     |         bytes stderr;
  168 |     |     }
  169 |     | 
  170 |     |     /// Information on the chain and fork.
  171 |     |     struct ChainInfo {
  172 |     |         // The fork identifier. Set to zero if no fork is active.
  173 |     |         uint256 forkId;
  174 |     |         // The chain ID of the current fork.
  175 |     |         uint256 chainId;
  176 |     |     }
  177 |     | 
  178 |     |     /// The result of a `stopAndReturnStateDiff` call.
  179 |     |     struct AccountAccess {
  180 |     |         // The chain and fork the access occurred.
  181 |     |         ChainInfo chainInfo;
  182 |     |         // The kind of account access that determines what the account is.
  183 |     |         // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.
  184 |     |         // If kind is Create, then the account is the newly created account.
  185 |     |         // If kind is SelfDestruct, then the account is the selfdestruct recipient.
  186 |     |         // If kind is a Resume, then account represents a account context that has resumed.
  187 |     |         AccountAccessKind kind;
  188 |     |         // The account that was accessed.
  189 |     |         // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.
  190 |     |         address account;
  191 |     |         // What accessed the account.
  192 |     |         address accessor;
  193 |     |         // If the account was initialized or empty prior to the access.
  194 |     |         // An account is considered initialized if it has code, a
  195 |     |         // non-zero nonce, or a non-zero balance.
  196 |     |         bool initialized;
  197 |     |         // The previous balance of the accessed account.
  198 |     |         uint256 oldBalance;
  199 |     |         // The potential new balance of the accessed account.
  200 |     |         // That is, all balance changes are recorded here, even if reverts occurred.
  201 |     |         uint256 newBalance;
  202 |     |         // Code of the account deployed by CREATE.
  203 |     |         bytes deployedCode;
  204 |     |         // Value passed along with the account access
  205 |     |         uint256 value;
  206 |     |         // Input data provided to the CREATE or CALL
  207 |     |         bytes data;
  208 |     |         // If this access reverted in either the current or parent context.
  209 |     |         bool reverted;
  210 |     |         // An ordered list of storage accesses made during an account access operation.
  211 |     |         StorageAccess[] storageAccesses;
  212 |     |         // Call depth traversed during the recording of state differences
  213 |     |         uint64 depth;
  214 |     |     }
  215 |     | 
  216 |     |     /// The storage accessed during an `AccountAccess`.
  217 |     |     struct StorageAccess {
  218 |     |         // The account whose storage was accessed.
  219 |     |         address account;
  220 |     |         // The slot that was accessed.
  221 |     |         bytes32 slot;
  222 |     |         // If the access was a write.
  223 |     |         bool isWrite;
  224 |     |         // The previous value of the slot.
  225 |     |         bytes32 previousValue;
  226 |     |         // The new value of the slot.
  227 |     |         bytes32 newValue;
  228 |     |         // If the access was reverted.
  229 |     |         bool reverted;
  230 |     |     }
  231 |     | 
  232 |     |     /// Gas used. Returned by `lastCallGas`.
  233 |     |     struct Gas {
  234 |     |         // The gas limit of the call.
  235 |     |         uint64 gasLimit;
  236 |     |         // The total gas used.
  237 |     |         uint64 gasTotalUsed;
  238 |     |         // DEPRECATED: The amount of gas used for memory expansion. Ref: <https://github.com/foundry-rs/foundry/pull/7934#pullrequestreview-2069236939>
  239 |     |         uint64 gasMemoryUsed;
  240 |     |         // The amount of gas refunded.
  241 |     |         int64 gasRefunded;
  242 |     |         // The amount of gas remaining.
  243 |     |         uint64 gasRemaining;
  244 |     |     }
  245 |     | 
  246 |     |     // ======== Crypto ========
  247 |     | 
  248 |     |     /// Derives a private key from the name, labels the account with that name, and returns the wallet.
  249 |     |     function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);
  250 |     | 
  251 |     |     /// Generates a wallet from the private key and returns the wallet.
  252 |     |     function createWallet(uint256 privateKey) external returns (Wallet memory wallet);
  253 |     | 
  254 |     |     /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.
  255 |     |     function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);
  256 |     | 
  257 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path)
  258 |     |     /// at the derivation path `m/44'/60'/0'/0/{index}`.
  259 |     |     function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);
  260 |     | 
  261 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path)
  262 |     |     /// at `{derivationPath}{index}`.
  263 |     |     function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)
  264 |     |         external
  265 |     |         pure
  266 |     |         returns (uint256 privateKey);
  267 |     | 
  268 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language
  269 |     |     /// at the derivation path `m/44'/60'/0'/0/{index}`.
  270 |     |     function deriveKey(string calldata mnemonic, uint32 index, string calldata language)
  271 |     |         external
  272 |     |         pure
  273 |     |         returns (uint256 privateKey);
  274 |     | 
  275 |     |     /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language
  276 |     |     /// at `{derivationPath}{index}`.
  277 |     |     function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)
  278 |     |         external
  279 |     |         pure
  280 |     |         returns (uint256 privateKey);
  281 |     | 
  282 |     |     /// Derives secp256r1 public key from the provided `privateKey`.
  283 |     |     function publicKeyP256(uint256 privateKey) external pure returns (uint256 publicKeyX, uint256 publicKeyY);
  284 |     | 
  285 |     |     /// Adds a private key to the local forge wallet and returns the address.
  286 |     |     function rememberKey(uint256 privateKey) external returns (address keyAddr);
  287 |     | 
  288 |     |     /// Signs data with a `Wallet`.
  289 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  290 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  291 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  292 |     |     function signCompact(Wallet calldata wallet, bytes32 digest) external returns (bytes32 r, bytes32 vs);
  293 |     | 
  294 |     |     /// Signs `digest` with `privateKey` using the secp256k1 curve.
  295 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  296 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  297 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  298 |     |     function signCompact(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);
  299 |     | 
  300 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  301 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  302 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  303 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  304 |     |     /// If `--sender` is provided, the signer with provided address is used, otherwise,
  305 |     |     /// if exactly one signer is provided to the script, that signer is used.
  306 |     |     /// Raises error if signer passed through `--sender` does not match any unlocked signers or
  307 |     |     /// if `--sender` is not provided and not exactly one signer is passed to the script.
  308 |     |     function signCompact(bytes32 digest) external pure returns (bytes32 r, bytes32 vs);
  309 |     | 
  310 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  311 |     |     /// Returns a compact signature (`r`, `vs`) as per EIP-2098, where `vs` encodes both the
  312 |     |     /// signature's `s` value, and the recovery id `v` in a single bytes32.
  313 |     |     /// This format reduces the signature size from 65 to 64 bytes.
  314 |     |     /// Raises error if none of the signers passed into the script have provided address.
  315 |     |     function signCompact(address signer, bytes32 digest) external pure returns (bytes32 r, bytes32 vs);
  316 |     | 
  317 |     |     /// Signs `digest` with `privateKey` using the secp256r1 curve.
  318 |     |     function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);
  319 |     | 
  320 |     |     /// Signs data with a `Wallet`.
  321 |     |     function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);
  322 |     | 
  323 |     |     /// Signs `digest` with `privateKey` using the secp256k1 curve.
  324 |     |     function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);
  325 |     | 
  326 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  327 |     |     /// If `--sender` is provided, the signer with provided address is used, otherwise,
  328 |     |     /// if exactly one signer is provided to the script, that signer is used.
  329 |     |     /// Raises error if signer passed through `--sender` does not match any unlocked signers or
  330 |     |     /// if `--sender` is not provided and not exactly one signer is passed to the script.
  331 |     |     function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);
  332 |     | 
  333 |     |     /// Signs `digest` with signer provided to script using the secp256k1 curve.
  334 |     |     /// Raises error if none of the signers passed into the script have provided address.
  335 |     |     function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);
  336 |     | 
  337 |     |     // ======== Environment ========
  338 |     | 
  339 |     |     /// Gets the environment variable `name` and parses it as `address`.
  340 |     |     /// Reverts if the variable was not found or could not be parsed.
  341 |     |     function envAddress(string calldata name) external view returns (address value);
  342 |     | 
  343 |     |     /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.
  344 |     |     /// Reverts if the variable was not found or could not be parsed.
  345 |     |     function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);
  346 |     | 
  347 |     |     /// Gets the environment variable `name` and parses it as `bool`.
  348 |     |     /// Reverts if the variable was not found or could not be parsed.
  349 |     |     function envBool(string calldata name) external view returns (bool value);
  350 |     | 
  351 |     |     /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.
  352 |     |     /// Reverts if the variable was not found or could not be parsed.
  353 |     |     function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);
  354 |     | 
  355 |     |     /// Gets the environment variable `name` and parses it as `bytes32`.
  356 |     |     /// Reverts if the variable was not found or could not be parsed.
  357 |     |     function envBytes32(string calldata name) external view returns (bytes32 value);
  358 |     | 
  359 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.
  360 |     |     /// Reverts if the variable was not found or could not be parsed.
  361 |     |     function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);
  362 |     | 
  363 |     |     /// Gets the environment variable `name` and parses it as `bytes`.
  364 |     |     /// Reverts if the variable was not found or could not be parsed.
  365 |     |     function envBytes(string calldata name) external view returns (bytes memory value);
  366 |     | 
  367 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.
  368 |     |     /// Reverts if the variable was not found or could not be parsed.
  369 |     |     function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);
  370 |     | 
  371 |     |     /// Gets the environment variable `name` and returns true if it exists, else returns false.
  372 |     |     function envExists(string calldata name) external view returns (bool result);
  373 |     | 
  374 |     |     /// Gets the environment variable `name` and parses it as `int256`.
  375 |     |     /// Reverts if the variable was not found or could not be parsed.
  376 |     |     function envInt(string calldata name) external view returns (int256 value);
  377 |     | 
  378 |     |     /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.
  379 |     |     /// Reverts if the variable was not found or could not be parsed.
  380 |     |     function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);
  381 |     | 
  382 |     |     /// Gets the environment variable `name` and parses it as `bool`.
  383 |     |     /// Reverts if the variable could not be parsed.
  384 |     |     /// Returns `defaultValue` if the variable was not found.
  385 |     |     function envOr(string calldata name, bool defaultValue) external view returns (bool value);
  386 |     | 
  387 |     |     /// Gets the environment variable `name` and parses it as `uint256`.
  388 |     |     /// Reverts if the variable could not be parsed.
  389 |     |     /// Returns `defaultValue` if the variable was not found.
  390 |     |     function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);
  391 |     | 
  392 |     |     /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.
  393 |     |     /// Reverts if the variable could not be parsed.
  394 |     |     /// Returns `defaultValue` if the variable was not found.
  395 |     |     function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)
  396 |     |         external
  397 |     |         view
  398 |     |         returns (address[] memory value);
  399 |     | 
  400 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.
  401 |     |     /// Reverts if the variable could not be parsed.
  402 |     |     /// Returns `defaultValue` if the variable was not found.
  403 |     |     function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)
  404 |     |         external
  405 |     |         view
  406 |     |         returns (bytes32[] memory value);
  407 |     | 
  408 |     |     /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.
  409 |     |     /// Reverts if the variable could not be parsed.
  410 |     |     /// Returns `defaultValue` if the variable was not found.
  411 |     |     function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)
  412 |     |         external
  413 |     |         view
  414 |     |         returns (string[] memory value);
  415 |     | 
  416 |     |     /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.
  417 |     |     /// Reverts if the variable could not be parsed.
  418 |     |     /// Returns `defaultValue` if the variable was not found.
  419 |     |     function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)
  420 |     |         external
  421 |     |         view
  422 |     |         returns (bytes[] memory value);
  423 |     | 
  424 |     |     /// Gets the environment variable `name` and parses it as `int256`.
  425 |     |     /// Reverts if the variable could not be parsed.
  426 |     |     /// Returns `defaultValue` if the variable was not found.
  427 |     |     function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);
  428 |     | 
  429 |     |     /// Gets the environment variable `name` and parses it as `address`.
  430 |     |     /// Reverts if the variable could not be parsed.
  431 |     |     /// Returns `defaultValue` if the variable was not found.
  432 |     |     function envOr(string calldata name, address defaultValue) external view returns (address value);
  433 |     | 
  434 |     |     /// Gets the environment variable `name` and parses it as `bytes32`.
  435 |     |     /// Reverts if the variable could not be parsed.
  436 |     |     /// Returns `defaultValue` if the variable was not found.
  437 |     |     function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);
  438 |     | 
  439 |     |     /// Gets the environment variable `name` and parses it as `string`.
  440 |     |     /// Reverts if the variable could not be parsed.
  441 |     |     /// Returns `defaultValue` if the variable was not found.
  442 |     |     function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);
  443 |     | 
  444 |     |     /// Gets the environment variable `name` and parses it as `bytes`.
  445 |     |     /// Reverts if the variable could not be parsed.
  446 |     |     /// Returns `defaultValue` if the variable was not found.
  447 |     |     function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);
  448 |     | 
  449 |     |     /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.
  450 |     |     /// Reverts if the variable could not be parsed.
  451 |     |     /// Returns `defaultValue` if the variable was not found.
  452 |     |     function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)
  453 |     |         external
  454 |     |         view
  455 |     |         returns (bool[] memory value);
  456 |     | 
  457 |     |     /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.
  458 |     |     /// Reverts if the variable could not be parsed.
  459 |     |     /// Returns `defaultValue` if the variable was not found.
  460 |     |     function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)
  461 |     |         external
  462 |     |         view
  463 |     |         returns (uint256[] memory value);
  464 |     | 
  465 |     |     /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.
  466 |     |     /// Reverts if the variable could not be parsed.
  467 |     |     /// Returns `defaultValue` if the variable was not found.
  468 |     |     function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)
  469 |     |         external
  470 |     |         view
  471 |     |         returns (int256[] memory value);
  472 |     | 
  473 |     |     /// Gets the environment variable `name` and parses it as `string`.
  474 |     |     /// Reverts if the variable was not found or could not be parsed.
  475 |     |     function envString(string calldata name) external view returns (string memory value);
  476 |     | 
  477 |     |     /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.
  478 |     |     /// Reverts if the variable was not found or could not be parsed.
  479 |     |     function envString(string calldata name, string calldata delim) external view returns (string[] memory value);
  480 |     | 
  481 |     |     /// Gets the environment variable `name` and parses it as `uint256`.
  482 |     |     /// Reverts if the variable was not found or could not be parsed.
  483 |     |     function envUint(string calldata name) external view returns (uint256 value);
  484 |     | 
  485 |     |     /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.
  486 |     |     /// Reverts if the variable was not found or could not be parsed.
  487 |     |     function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);
  488 |     | 
  489 |     |     /// Returns true if `forge` command was executed in given context.
  490 |     |     function isContext(ForgeContext context) external view returns (bool result);
  491 |     | 
  492 |     |     /// Sets environment variables.
  493 |     |     function setEnv(string calldata name, string calldata value) external;
  494 |     | 
  495 |     |     // ======== EVM ========
  496 |     | 
  497 |     |     /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.
  498 |     |     function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);
  499 |     | 
  500 |     |     /// Gets the address for a given private key.
  501 |     |     function addr(uint256 privateKey) external pure returns (address keyAddr);
  502 |     | 
  503 |     |     /// Gets all the logs according to specified filter.
  504 |     |     function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)
  505 |     |         external
  506 |     |         returns (EthGetLogs[] memory logs);
  507 |     | 
  508 |     |     /// Gets the current `block.blobbasefee`.
  509 |     |     /// You should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,
  510 |     |     /// and as a result will get optimized out by the compiler.
  511 |     |     /// See https://github.com/foundry-rs/foundry/issues/6180
  512 |     |     function getBlobBaseFee() external view returns (uint256 blobBaseFee);
  513 |     | 
  514 |     |     /// Gets the current `block.number`.
  515 |     |     /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,
  516 |     |     /// and as a result will get optimized out by the compiler.
  517 |     |     /// See https://github.com/foundry-rs/foundry/issues/6180
  518 |     |     function getBlockNumber() external view returns (uint256 height);
  519 |     | 
  520 |     |     /// Gets the current `block.timestamp`.
  521 |     |     /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,
  522 |     |     /// and as a result will get optimized out by the compiler.
  523 |     |     /// See https://github.com/foundry-rs/foundry/issues/6180
  524 |     |     function getBlockTimestamp() external view returns (uint256 timestamp);
  525 |     | 
  526 |     |     /// Gets the map key and parent of a mapping at a given slot, for a given address.
  527 |     |     function getMappingKeyAndParentOf(address target, bytes32 elementSlot)
  528 |     |         external
  529 |     |         returns (bool found, bytes32 key, bytes32 parent);
  530 |     | 
  531 |     |     /// Gets the number of elements in the mapping at the given slot, for a given address.
  532 |     |     function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);
  533 |     | 
  534 |     |     /// Gets the elements at index idx of the mapping at the given slot, for a given address. The
  535 |     |     /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).
  536 |     |     function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);
  537 |     | 
  538 |     |     /// Gets the nonce of an account.
  539 |     |     function getNonce(address account) external view returns (uint64 nonce);
  540 |     | 
  541 |     |     /// Get the nonce of a `Wallet`.
  542 |     |     function getNonce(Wallet calldata wallet) external returns (uint64 nonce);
  543 |     | 
  544 |     |     /// Gets all the recorded logs.
  545 |     |     function getRecordedLogs() external returns (Log[] memory logs);
  546 |     | 
  547 |     |     /// Gets the gas used in the last call from the callee perspective.
  548 |     |     function lastCallGas() external view returns (Gas memory gas);
  549 |     | 
  550 |     |     /// Loads a storage slot from an address.
  551 |     |     function load(address target, bytes32 slot) external view returns (bytes32 data);
  552 |     | 
  553 |     |     /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.
  554 |     |     function pauseGasMetering() external;
  555 |     | 
  556 |     |     /// Records all storage reads and writes.
  557 |     |     function record() external;
  558 |     | 
  559 |     |     /// Record all the transaction logs.
  560 |     |     function recordLogs() external;
  561 |     | 
  562 |     |     /// Reset gas metering (i.e. gas usage is set to gas limit).
  563 |     |     function resetGasMetering() external;
  564 |     | 
  565 |     |     /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.
  566 |     |     function resumeGasMetering() external;
  567 |     | 
  568 |     |     /// Performs an Ethereum JSON-RPC request to the current fork URL.
  569 |     |     function rpc(string calldata method, string calldata params) external returns (bytes memory data);
  570 |     | 
  571 |     |     /// Performs an Ethereum JSON-RPC request to the given endpoint.
  572 |     |     function rpc(string calldata urlOrAlias, string calldata method, string calldata params)
  573 |     |         external
  574 |     |         returns (bytes memory data);
  575 |     | 
  576 |     |     /// Starts recording all map SSTOREs for later retrieval.
  577 |     |     function startMappingRecording() external;
  578 |     | 
  579 |     |     /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,
  580 |     |     /// along with the context of the calls
  581 |     |     function startStateDiffRecording() external;
  582 |     | 
  583 |     |     /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.
  584 |     |     function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);
  585 |     | 
  586 |     |     /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.
  587 |     |     function stopMappingRecording() external;
  588 |     | 
  589 |     |     // ======== Filesystem ========
  590 |     | 
  591 |     |     /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.
  592 |     |     /// `path` is relative to the project root.
  593 |     |     function closeFile(string calldata path) external;
  594 |     | 
  595 |     |     /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.
  596 |     |     /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.
  597 |     |     /// Both `from` and `to` are relative to the project root.
  598 |     |     function copyFile(string calldata from, string calldata to) external returns (uint64 copied);
  599 |     | 
  600 |     |     /// Creates a new, empty directory at the provided path.
  601 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  602 |     |     /// - User lacks permissions to modify `path`.
  603 |     |     /// - A parent of the given path doesn't exist and `recursive` is false.
  604 |     |     /// - `path` already exists and `recursive` is false.
  605 |     |     /// `path` is relative to the project root.
  606 |     |     function createDir(string calldata path, bool recursive) external;
  607 |     | 
  608 |     |     /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the
  609 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  610 |     |     function deployCode(string calldata artifactPath) external returns (address deployedAddress);
  611 |     | 
  612 |     |     /// Deploys a contract from an artifact file. Takes in the relative path to the json file or the path to the
  613 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  614 |     |     /// Additionally accepts abi-encoded constructor arguments.
  615 |     |     function deployCode(string calldata artifactPath, bytes calldata constructorArgs)
  616 |     |         external
  617 |     |         returns (address deployedAddress);
  618 |     | 
  619 |     |     /// Returns true if the given path points to an existing entity, else returns false.
  620 |     |     function exists(string calldata path) external returns (bool result);
  621 |     | 
  622 |     |     /// Performs a foreign function call via the terminal.
  623 |     |     function ffi(string[] calldata commandInput) external returns (bytes memory result);
  624 |     | 
  625 |     |     /// Given a path, query the file system to get information about a file, directory, etc.
  626 |     |     function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);
  627 |     | 
  628 |     |     /// Gets the artifact path from code (aka. creation code).
  629 |     |     function getArtifactPathByCode(bytes calldata code) external view returns (string memory path);
  630 |     | 
  631 |     |     /// Gets the artifact path from deployed code (aka. runtime code).
  632 |     |     function getArtifactPathByDeployedCode(bytes calldata deployedCode) external view returns (string memory path);
  633 |     | 
  634 |     |     /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the
  635 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  636 |     |     function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);
  637 |     | 
  638 |     |     /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the
  639 |     |     /// artifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.
  640 |     |     function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);
  641 |     | 
  642 |     |     /// Returns true if the path exists on disk and is pointing at a directory, else returns false.
  643 |     |     function isDir(string calldata path) external returns (bool result);
  644 |     | 
  645 |     |     /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.
  646 |     |     function isFile(string calldata path) external returns (bool result);
  647 |     | 
  648 |     |     /// Get the path of the current project root.
  649 |     |     function projectRoot() external view returns (string memory path);
  650 |     | 
  651 |     |     /// Prompts the user for a string value in the terminal.
  652 |     |     function prompt(string calldata promptText) external returns (string memory input);
  653 |     | 
  654 |     |     /// Prompts the user for an address in the terminal.
  655 |     |     function promptAddress(string calldata promptText) external returns (address);
  656 |     | 
  657 |     |     /// Prompts the user for a hidden string value in the terminal.
  658 |     |     function promptSecret(string calldata promptText) external returns (string memory input);
  659 |     | 
  660 |     |     /// Prompts the user for hidden uint256 in the terminal (usually pk).
  661 |     |     function promptSecretUint(string calldata promptText) external returns (uint256);
  662 |     | 
  663 |     |     /// Prompts the user for uint256 in the terminal.
  664 |     |     function promptUint(string calldata promptText) external returns (uint256);
  665 |     | 
  666 |     |     /// Reads the directory at the given path recursively, up to `maxDepth`.
  667 |     |     /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.
  668 |     |     /// Follows symbolic links if `followLinks` is true.
  669 |     |     function readDir(string calldata path) external view returns (DirEntry[] memory entries);
  670 |     | 
  671 |     |     /// See `readDir(string)`.
  672 |     |     function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);
  673 |     | 
  674 |     |     /// See `readDir(string)`.
  675 |     |     function readDir(string calldata path, uint64 maxDepth, bool followLinks)
  676 |     |         external
  677 |     |         view
  678 |     |         returns (DirEntry[] memory entries);
  679 |     | 
  680 |     |     /// Reads the entire content of file to string. `path` is relative to the project root.
  681 |     |     function readFile(string calldata path) external view returns (string memory data);
  682 |     | 
  683 |     |     /// Reads the entire content of file as binary. `path` is relative to the project root.
  684 |     |     function readFileBinary(string calldata path) external view returns (bytes memory data);
  685 |     | 
  686 |     |     /// Reads next line of file to string.
  687 |     |     function readLine(string calldata path) external view returns (string memory line);
  688 |     | 
  689 |     |     /// Reads a symbolic link, returning the path that the link points to.
  690 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  691 |     |     /// - `path` is not a symbolic link.
  692 |     |     /// - `path` does not exist.
  693 |     |     function readLink(string calldata linkPath) external view returns (string memory targetPath);
  694 |     | 
  695 |     |     /// Removes a directory at the provided path.
  696 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  697 |     |     /// - `path` doesn't exist.
  698 |     |     /// - `path` isn't a directory.
  699 |     |     /// - User lacks permissions to modify `path`.
  700 |     |     /// - The directory is not empty and `recursive` is false.
  701 |     |     /// `path` is relative to the project root.
  702 |     |     function removeDir(string calldata path, bool recursive) external;
  703 |     | 
  704 |     |     /// Removes a file from the filesystem.
  705 |     |     /// This cheatcode will revert in the following situations, but is not limited to just these cases:
  706 |     |     /// - `path` points to a directory.
  707 |     |     /// - The file doesn't exist.
  708 |     |     /// - The user lacks permissions to remove the file.
  709 |     |     /// `path` is relative to the project root.
  710 |     |     function removeFile(string calldata path) external;
  711 |     | 
  712 |     |     /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.
  713 |     |     function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);
  714 |     | 
  715 |     |     /// Returns the time since unix epoch in milliseconds.
  716 |     |     function unixTime() external returns (uint256 milliseconds);
  717 |     | 
  718 |     |     /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.
  719 |     |     /// `path` is relative to the project root.
  720 |     |     function writeFile(string calldata path, string calldata data) external;
  721 |     | 
  722 |     |     /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.
  723 |     |     /// `path` is relative to the project root.
  724 |     |     function writeFileBinary(string calldata path, bytes calldata data) external;
  725 |     | 
  726 |     |     /// Writes line to file, creating a file if it does not exist.
  727 |     |     /// `path` is relative to the project root.
  728 |     |     function writeLine(string calldata path, string calldata data) external;
  729 |     | 
  730 |     |     // ======== JSON ========
  731 |     | 
  732 |     |     /// Checks if `key` exists in a JSON object.
  733 |     |     function keyExistsJson(string calldata json, string calldata key) external view returns (bool);
  734 |     | 
  735 |     |     /// Parses a string of JSON data at `key` and coerces it to `address`.
  736 |     |     function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);
  737 |     | 
  738 |     |     /// Parses a string of JSON data at `key` and coerces it to `address[]`.
  739 |     |     function parseJsonAddressArray(string calldata json, string calldata key)
  740 |     |         external
  741 |     |         pure
  742 |     |         returns (address[] memory);
  743 |     | 
  744 |     |     /// Parses a string of JSON data at `key` and coerces it to `bool`.
  745 |     |     function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);
  746 |     | 
  747 |     |     /// Parses a string of JSON data at `key` and coerces it to `bool[]`.
  748 |     |     function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);
  749 |     | 
  750 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes`.
  751 |     |     function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);
  752 |     | 
  753 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes32`.
  754 |     |     function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);
  755 |     | 
  756 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.
  757 |     |     function parseJsonBytes32Array(string calldata json, string calldata key)
  758 |     |         external
  759 |     |         pure
  760 |     |         returns (bytes32[] memory);
  761 |     | 
  762 |     |     /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.
  763 |     |     function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);
  764 |     | 
  765 |     |     /// Parses a string of JSON data at `key` and coerces it to `int256`.
  766 |     |     function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);
  767 |     | 
  768 |     |     /// Parses a string of JSON data at `key` and coerces it to `int256[]`.
  769 |     |     function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);
  770 |     | 
  771 |     |     /// Returns an array of all the keys in a JSON object.
  772 |     |     function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);
  773 |     | 
  774 |     |     /// Parses a string of JSON data at `key` and coerces it to `string`.
  775 |     |     function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);
  776 |     | 
  777 |     |     /// Parses a string of JSON data at `key` and coerces it to `string[]`.
  778 |     |     function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);
  779 |     | 
  780 |     |     /// Parses a string of JSON data at `key` and coerces it to type array corresponding to `typeDescription`.
  781 |     |     function parseJsonTypeArray(string calldata json, string calldata key, string calldata typeDescription)
  782 |     |         external
  783 |     |         pure
  784 |     |         returns (bytes memory);
  785 |     | 
  786 |     |     /// Parses a string of JSON data and coerces it to type corresponding to `typeDescription`.
  787 |     |     function parseJsonType(string calldata json, string calldata typeDescription)
  788 |     |         external
  789 |     |         pure
  790 |     |         returns (bytes memory);
  791 |     | 
  792 |     |     /// Parses a string of JSON data at `key` and coerces it to type corresponding to `typeDescription`.
  793 |     |     function parseJsonType(string calldata json, string calldata key, string calldata typeDescription)
  794 |     |         external
  795 |     |         pure
  796 |     |         returns (bytes memory);
  797 |     | 
  798 |     |     /// Parses a string of JSON data at `key` and coerces it to `uint256`.
  799 |     |     function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);
  800 |     | 
  801 |     |     /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.
  802 |     |     function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);
  803 |     | 
  804 |     |     /// ABI-encodes a JSON object.
  805 |     |     function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);
  806 |     | 
  807 |     |     /// ABI-encodes a JSON object at `key`.
  808 |     |     function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);
  809 |     | 
  810 |     |     /// See `serializeJson`.
  811 |     |     function serializeAddress(string calldata objectKey, string calldata valueKey, address value)
  812 |     |         external
  813 |     |         returns (string memory json);
  814 |     | 
  815 |     |     /// See `serializeJson`.
  816 |     |     function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)
  817 |     |         external
  818 |     |         returns (string memory json);
  819 |     | 
  820 |     |     /// See `serializeJson`.
  821 |     |     function serializeBool(string calldata objectKey, string calldata valueKey, bool value)
  822 |     |         external
  823 |     |         returns (string memory json);
  824 |     | 
  825 |     |     /// See `serializeJson`.
  826 |     |     function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)
  827 |     |         external
  828 |     |         returns (string memory json);
  829 |     | 
  830 |     |     /// See `serializeJson`.
  831 |     |     function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)
  832 |     |         external
  833 |     |         returns (string memory json);
  834 |     | 
  835 |     |     /// See `serializeJson`.
  836 |     |     function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)
  837 |     |         external
  838 |     |         returns (string memory json);
  839 |     | 
  840 |     |     /// See `serializeJson`.
  841 |     |     function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)
  842 |     |         external
  843 |     |         returns (string memory json);
  844 |     | 
  845 |     |     /// See `serializeJson`.
  846 |     |     function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)
  847 |     |         external
  848 |     |         returns (string memory json);
  849 |     | 
  850 |     |     /// See `serializeJson`.
  851 |     |     function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)
  852 |     |         external
  853 |     |         returns (string memory json);
  854 |     | 
  855 |     |     /// See `serializeJson`.
  856 |     |     function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)
  857 |     |         external
  858 |     |         returns (string memory json);
  859 |     | 
  860 |     |     /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.
  861 |     |     /// Returns the stringified version of the specific JSON file up to that moment.
  862 |     |     function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);
  863 |     | 
  864 |     |     /// See `serializeJson`.
  865 |     |     function serializeJsonType(string calldata typeDescription, bytes calldata value)
  866 |     |         external
  867 |     |         pure
  868 |     |         returns (string memory json);
  869 |     | 
  870 |     |     /// See `serializeJson`.
  871 |     |     function serializeJsonType(
  872 |     |         string calldata objectKey,
  873 |     |         string calldata valueKey,
  874 |     |         string calldata typeDescription,
  875 |     |         bytes calldata value
  876 |     |     ) external returns (string memory json);
  877 |     | 
  878 |     |     /// See `serializeJson`.
  879 |     |     function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)
  880 |     |         external
  881 |     |         returns (string memory json);
  882 |     | 
  883 |     |     /// See `serializeJson`.
  884 |     |     function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)
  885 |     |         external
  886 |     |         returns (string memory json);
  887 |     | 
  888 |     |     /// See `serializeJson`.
  889 |     |     function serializeUintToHex(string calldata objectKey, string calldata valueKey, uint256 value)
  890 |     |         external
  891 |     |         returns (string memory json);
  892 |     | 
  893 |     |     /// See `serializeJson`.
  894 |     |     function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)
  895 |     |         external
  896 |     |         returns (string memory json);
  897 |     | 
  898 |     |     /// See `serializeJson`.
  899 |     |     function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)
  900 |     |         external
  901 |     |         returns (string memory json);
  902 |     | 
  903 |     |     /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.
  904 |     |     function writeJson(string calldata json, string calldata path) external;
  905 |     | 
  906 |     |     /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>
  907 |     |     /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.
  908 |     |     function writeJson(string calldata json, string calldata path, string calldata valueKey) external;
  909 |     | 
  910 |     |     /// Checks if `key` exists in a JSON object
  911 |     |     /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.
  912 |     |     function keyExists(string calldata json, string calldata key) external view returns (bool);
  913 |     | 
  914 |     |     // ======== Scripting ========
  915 |     | 
  916 |     |     /// Takes a signed transaction and broadcasts it to the network.
  917 |     |     function broadcastRawTransaction(bytes calldata data) external;
  918 |     | 
  919 |     |     /// Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.
  920 |     |     /// Broadcasting address is determined by checking the following in order:
  921 |     |     /// 1. If `--sender` argument was provided, that address is used.
  922 |     |     /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.
  923 |     |     /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.
  924 |     |     function broadcast() external;
  925 |     | 
  926 |     |     /// Has the next call (at this call depth only) create a transaction with the address provided
  927 |     |     /// as the sender that can later be signed and sent onchain.
  928 |     |     function broadcast(address signer) external;
  929 |     | 
  930 |     |     /// Has the next call (at this call depth only) create a transaction with the private key
  931 |     |     /// provided as the sender that can later be signed and sent onchain.
  932 |     |     function broadcast(uint256 privateKey) external;
  933 |     | 
  934 |     |     /// Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.
  935 |     |     /// Broadcasting address is determined by checking the following in order:
  936 |     |     /// 1. If `--sender` argument was provided, that address is used.
  937 |     |     /// 2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.
  938 |     |     /// 3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.
  939 |     |     function startBroadcast() external;
  940 |     | 
  941 |     |     /// Has all subsequent calls (at this call depth only) create transactions with the address
  942 |     |     /// provided that can later be signed and sent onchain.
  943 |     |     function startBroadcast(address signer) external;
  944 |     | 
  945 |     |     /// Has all subsequent calls (at this call depth only) create transactions with the private key
  946 |     |     /// provided that can later be signed and sent onchain.
  947 |     |     function startBroadcast(uint256 privateKey) external;
  948 |     | 
  949 |     |     /// Stops collecting onchain transactions.
  950 |     |     function stopBroadcast() external;
  951 |     | 
  952 |     |     // ======== String ========
  953 |     | 
  954 |     |     /// Returns the index of the first occurrence of a `key` in an `input` string.
  955 |     |     /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.
  956 |     |     /// Returns 0 in case of an empty `key`.
  957 |     |     function indexOf(string calldata input, string calldata key) external pure returns (uint256);
  958 |     | 
  959 |     |     /// Parses the given `string` into an `address`.
  960 |     |     function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);
  961 |     | 
  962 |     |     /// Parses the given `string` into a `bool`.
  963 |     |     function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);
  964 |     | 
  965 |     |     /// Parses the given `string` into `bytes`.
  966 |     |     function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);
  967 |     | 
  968 |     |     /// Parses the given `string` into a `bytes32`.
  969 |     |     function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);
  970 |     | 
  971 |     |     /// Parses the given `string` into a `int256`.
  972 |     |     function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);
  973 |     | 
  974 |     |     /// Parses the given `string` into a `uint256`.
  975 |     |     function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);
  976 |     | 
  977 |     |     /// Replaces occurrences of `from` in the given `string` with `to`.
  978 |     |     function replace(string calldata input, string calldata from, string calldata to)
  979 |     |         external
  980 |     |         pure
  981 |     |         returns (string memory output);
  982 |     | 
  983 |     |     /// Splits the given `string` into an array of strings divided by the `delimiter`.
  984 |     |     function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);
  985 |     | 
  986 |     |     /// Converts the given `string` value to Lowercase.
  987 |     |     function toLowercase(string calldata input) external pure returns (string memory output);
  988 |     | 
  989 |     |     /// Converts the given value to a `string`.
  990 |     |     function toString(address value) external pure returns (string memory stringifiedValue);
  991 |     | 
  992 |     |     /// Converts the given value to a `string`.
  993 |     |     function toString(bytes calldata value) external pure returns (string memory stringifiedValue);
  994 |     | 
  995 |     |     /// Converts the given value to a `string`.
  996 |     |     function toString(bytes32 value) external pure returns (string memory stringifiedValue);
  997 |     | 
  998 |     |     /// Converts the given value to a `string`.
  999 |     |     function toString(bool value) external pure returns (string memory stringifiedValue);
 1000 |     | 
 1001 |     |     /// Converts the given value to a `string`.
 1002 |     |     function toString(uint256 value) external pure returns (string memory stringifiedValue);
 1003 |     | 
 1004 |     |     /// Converts the given value to a `string`.
 1005 |     |     function toString(int256 value) external pure returns (string memory stringifiedValue);
 1006 |     | 
 1007 |     |     /// Converts the given `string` value to Uppercase.
 1008 |     |     function toUppercase(string calldata input) external pure returns (string memory output);
 1009 |     | 
 1010 |     |     /// Trims leading and trailing whitespace from the given `string` value.
 1011 |     |     function trim(string calldata input) external pure returns (string memory output);
 1012 |     | 
 1013 |     |     // ======== Testing ========
 1014 |     | 
 1015 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1016 |     |     /// Formats values with decimals in failure message.
 1017 |     |     function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;
 1018 |     | 
 1019 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1020 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1021 |     |     function assertApproxEqAbsDecimal(
 1022 |     |         uint256 left,
 1023 |     |         uint256 right,
 1024 |     |         uint256 maxDelta,
 1025 |     |         uint256 decimals,
 1026 |     |         string calldata error
 1027 |     |     ) external pure;
 1028 |     | 
 1029 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1030 |     |     /// Formats values with decimals in failure message.
 1031 |     |     function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;
 1032 |     | 
 1033 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1034 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1035 |     |     function assertApproxEqAbsDecimal(
 1036 |     |         int256 left,
 1037 |     |         int256 right,
 1038 |     |         uint256 maxDelta,
 1039 |     |         uint256 decimals,
 1040 |     |         string calldata error
 1041 |     |     ) external pure;
 1042 |     | 
 1043 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1044 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;
 1045 |     | 
 1046 |     |     /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.
 1047 |     |     /// Includes error message into revert string on failure.
 1048 |     |     function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;
 1049 |     | 
 1050 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1051 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;
 1052 |     | 
 1053 |     |     /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.
 1054 |     |     /// Includes error message into revert string on failure.
 1055 |     |     function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;
 1056 |     | 
 1057 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1058 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1059 |     |     /// Formats values with decimals in failure message.
 1060 |     |     function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)
 1061 |     |         external
 1062 |     |         pure;
 1063 |     | 
 1064 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1065 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1066 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1067 |     |     function assertApproxEqRelDecimal(
 1068 |     |         uint256 left,
 1069 |     |         uint256 right,
 1070 |     |         uint256 maxPercentDelta,
 1071 |     |         uint256 decimals,
 1072 |     |         string calldata error
 1073 |     |     ) external pure;
 1074 |     | 
 1075 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1076 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1077 |     |     /// Formats values with decimals in failure message.
 1078 |     |     function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)
 1079 |     |         external
 1080 |     |         pure;
 1081 |     | 
 1082 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1083 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1084 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1085 |     |     function assertApproxEqRelDecimal(
 1086 |     |         int256 left,
 1087 |     |         int256 right,
 1088 |     |         uint256 maxPercentDelta,
 1089 |     |         uint256 decimals,
 1090 |     |         string calldata error
 1091 |     |     ) external pure;
 1092 |     | 
 1093 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1094 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1095 |     |     function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;
 1096 |     | 
 1097 |     |     /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1098 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1099 |     |     /// Includes error message into revert string on failure.
 1100 |     |     function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)
 1101 |     |         external
 1102 |     |         pure;
 1103 |     | 
 1104 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1105 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1106 |     |     function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;
 1107 |     | 
 1108 |     |     /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.
 1109 |     |     /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%
 1110 |     |     /// Includes error message into revert string on failure.
 1111 |     |     function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)
 1112 |     |         external
 1113 |     |         pure;
 1114 |     | 
 1115 |     |     /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.
 1116 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1117 |     | 
 1118 |     |     /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.
 1119 |     |     /// Includes error message into revert string on failure.
 1120 |     |     function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1121 |     | 
 1122 |     |     /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.
 1123 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1124 |     | 
 1125 |     |     /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.
 1126 |     |     /// Includes error message into revert string on failure.
 1127 |     |     function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1128 |     | 
 1129 |     |     /// Asserts that two `bool` values are equal.
 1130 |     |     function assertEq(bool left, bool right) external pure;
 1131 |     | 
 1132 |     |     /// Asserts that two `bool` values are equal and includes error message into revert string on failure.
 1133 |     |     function assertEq(bool left, bool right, string calldata error) external pure;
 1134 |     | 
 1135 |     |     /// Asserts that two `string` values are equal.
 1136 |     |     function assertEq(string calldata left, string calldata right) external pure;
 1137 |     | 
 1138 |     |     /// Asserts that two `string` values are equal and includes error message into revert string on failure.
 1139 |     |     function assertEq(string calldata left, string calldata right, string calldata error) external pure;
 1140 |     | 
 1141 |     |     /// Asserts that two `bytes` values are equal.
 1142 |     |     function assertEq(bytes calldata left, bytes calldata right) external pure;
 1143 |     | 
 1144 |     |     /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.
 1145 |     |     function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;
 1146 |     | 
 1147 |     |     /// Asserts that two arrays of `bool` values are equal.
 1148 |     |     function assertEq(bool[] calldata left, bool[] calldata right) external pure;
 1149 |     | 
 1150 |     |     /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.
 1151 |     |     function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;
 1152 |     | 
 1153 |     |     /// Asserts that two arrays of `uint256 values are equal.
 1154 |     |     function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;
 1155 |     | 
 1156 |     |     /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.
 1157 |     |     function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;
 1158 |     | 
 1159 |     |     /// Asserts that two arrays of `int256` values are equal.
 1160 |     |     function assertEq(int256[] calldata left, int256[] calldata right) external pure;
 1161 |     | 
 1162 |     |     /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.
 1163 |     |     function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;
 1164 |     | 
 1165 |     |     /// Asserts that two `uint256` values are equal.
 1166 |     |     function assertEq(uint256 left, uint256 right) external pure;
 1167 |     | 
 1168 |     |     /// Asserts that two arrays of `address` values are equal.
 1169 |     |     function assertEq(address[] calldata left, address[] calldata right) external pure;
 1170 |     | 
 1171 |     |     /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.
 1172 |     |     function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;
 1173 |     | 
 1174 |     |     /// Asserts that two arrays of `bytes32` values are equal.
 1175 |     |     function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;
 1176 |     | 
 1177 |     |     /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.
 1178 |     |     function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;
 1179 |     | 
 1180 |     |     /// Asserts that two arrays of `string` values are equal.
 1181 |     |     function assertEq(string[] calldata left, string[] calldata right) external pure;
 1182 |     | 
 1183 |     |     /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.
 1184 |     |     function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;
 1185 |     | 
 1186 |     |     /// Asserts that two arrays of `bytes` values are equal.
 1187 |     |     function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;
 1188 |     | 
 1189 |     |     /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.
 1190 |     |     function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;
 1191 |     | 
 1192 |     |     /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.
 1193 |     |     function assertEq(uint256 left, uint256 right, string calldata error) external pure;
 1194 |     | 
 1195 |     |     /// Asserts that two `int256` values are equal.
 1196 |     |     function assertEq(int256 left, int256 right) external pure;
 1197 |     | 
 1198 |     |     /// Asserts that two `int256` values are equal and includes error message into revert string on failure.
 1199 |     |     function assertEq(int256 left, int256 right, string calldata error) external pure;
 1200 |     | 
 1201 |     |     /// Asserts that two `address` values are equal.
 1202 |     |     function assertEq(address left, address right) external pure;
 1203 |     | 
 1204 |     |     /// Asserts that two `address` values are equal and includes error message into revert string on failure.
 1205 |     |     function assertEq(address left, address right, string calldata error) external pure;
 1206 |     | 
 1207 |     |     /// Asserts that two `bytes32` values are equal.
 1208 |     |     function assertEq(bytes32 left, bytes32 right) external pure;
 1209 |     | 
 1210 |     |     /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.
 1211 |     |     function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;
 1212 |     | 
 1213 |     |     /// Asserts that the given condition is false.
 1214 |     |     function assertFalse(bool condition) external pure;
 1215 |     | 
 1216 |     |     /// Asserts that the given condition is false and includes error message into revert string on failure.
 1217 |     |     function assertFalse(bool condition, string calldata error) external pure;
 1218 |     | 
 1219 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1220 |     |     /// Formats values with decimals in failure message.
 1221 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1222 |     | 
 1223 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1224 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1225 |     |     function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1226 |     | 
 1227 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1228 |     |     /// Formats values with decimals in failure message.
 1229 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1230 |     | 
 1231 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1232 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1233 |     |     function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1234 |     | 
 1235 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1236 |     |     function assertGe(uint256 left, uint256 right) external pure;
 1237 |     | 
 1238 |     |     /// Compares two `uint256` values. Expects first value to be greater than or equal to second.
 1239 |     |     /// Includes error message into revert string on failure.
 1240 |     |     function assertGe(uint256 left, uint256 right, string calldata error) external pure;
 1241 |     | 
 1242 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1243 |     |     function assertGe(int256 left, int256 right) external pure;
 1244 |     | 
 1245 |     |     /// Compares two `int256` values. Expects first value to be greater than or equal to second.
 1246 |     |     /// Includes error message into revert string on failure.
 1247 |     |     function assertGe(int256 left, int256 right, string calldata error) external pure;
 1248 |     | 
 1249 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1250 |     |     /// Formats values with decimals in failure message.
 1251 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1252 |     | 
 1253 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1254 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1255 |     |     function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1256 |     | 
 1257 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1258 |     |     /// Formats values with decimals in failure message.
 1259 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1260 |     | 
 1261 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1262 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1263 |     |     function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1264 |     | 
 1265 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1266 |     |     function assertGt(uint256 left, uint256 right) external pure;
 1267 |     | 
 1268 |     |     /// Compares two `uint256` values. Expects first value to be greater than second.
 1269 |     |     /// Includes error message into revert string on failure.
 1270 |     |     function assertGt(uint256 left, uint256 right, string calldata error) external pure;
 1271 |     | 
 1272 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1273 |     |     function assertGt(int256 left, int256 right) external pure;
 1274 |     | 
 1275 |     |     /// Compares two `int256` values. Expects first value to be greater than second.
 1276 |     |     /// Includes error message into revert string on failure.
 1277 |     |     function assertGt(int256 left, int256 right, string calldata error) external pure;
 1278 |     | 
 1279 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1280 |     |     /// Formats values with decimals in failure message.
 1281 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1282 |     | 
 1283 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1284 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1285 |     |     function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1286 |     | 
 1287 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1288 |     |     /// Formats values with decimals in failure message.
 1289 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1290 |     | 
 1291 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1292 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1293 |     |     function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1294 |     | 
 1295 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1296 |     |     function assertLe(uint256 left, uint256 right) external pure;
 1297 |     | 
 1298 |     |     /// Compares two `uint256` values. Expects first value to be less than or equal to second.
 1299 |     |     /// Includes error message into revert string on failure.
 1300 |     |     function assertLe(uint256 left, uint256 right, string calldata error) external pure;
 1301 |     | 
 1302 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1303 |     |     function assertLe(int256 left, int256 right) external pure;
 1304 |     | 
 1305 |     |     /// Compares two `int256` values. Expects first value to be less than or equal to second.
 1306 |     |     /// Includes error message into revert string on failure.
 1307 |     |     function assertLe(int256 left, int256 right, string calldata error) external pure;
 1308 |     | 
 1309 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1310 |     |     /// Formats values with decimals in failure message.
 1311 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1312 |     | 
 1313 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1314 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1315 |     |     function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1316 |     | 
 1317 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1318 |     |     /// Formats values with decimals in failure message.
 1319 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1320 |     | 
 1321 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1322 |     |     /// Formats values with decimals in failure message. Includes error message into revert string on failure.
 1323 |     |     function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1324 |     | 
 1325 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1326 |     |     function assertLt(uint256 left, uint256 right) external pure;
 1327 |     | 
 1328 |     |     /// Compares two `uint256` values. Expects first value to be less than second.
 1329 |     |     /// Includes error message into revert string on failure.
 1330 |     |     function assertLt(uint256 left, uint256 right, string calldata error) external pure;
 1331 |     | 
 1332 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1333 |     |     function assertLt(int256 left, int256 right) external pure;
 1334 |     | 
 1335 |     |     /// Compares two `int256` values. Expects first value to be less than second.
 1336 |     |     /// Includes error message into revert string on failure.
 1337 |     |     function assertLt(int256 left, int256 right, string calldata error) external pure;
 1338 |     | 
 1339 |     |     /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.
 1340 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;
 1341 |     | 
 1342 |     |     /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.
 1343 |     |     /// Includes error message into revert string on failure.
 1344 |     |     function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;
 1345 |     | 
 1346 |     |     /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.
 1347 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;
 1348 |     | 
 1349 |     |     /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.
 1350 |     |     /// Includes error message into revert string on failure.
 1351 |     |     function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;
 1352 |     | 
 1353 |     |     /// Asserts that two `bool` values are not equal.
 1354 |     |     function assertNotEq(bool left, bool right) external pure;
 1355 |     | 
 1356 |     |     /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.
 1357 |     |     function assertNotEq(bool left, bool right, string calldata error) external pure;
 1358 |     | 
 1359 |     |     /// Asserts that two `string` values are not equal.
 1360 |     |     function assertNotEq(string calldata left, string calldata right) external pure;
 1361 |     | 
 1362 |     |     /// Asserts that two `string` values are not equal and includes error message into revert string on failure.
 1363 |     |     function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;
 1364 |     | 
 1365 |     |     /// Asserts that two `bytes` values are not equal.
 1366 |     |     function assertNotEq(bytes calldata left, bytes calldata right) external pure;
 1367 |     | 
 1368 |     |     /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.
 1369 |     |     function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;
 1370 |     | 
 1371 |     |     /// Asserts that two arrays of `bool` values are not equal.
 1372 |     |     function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;
 1373 |     | 
 1374 |     |     /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.
 1375 |     |     function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;
 1376 |     | 
 1377 |     |     /// Asserts that two arrays of `uint256` values are not equal.
 1378 |     |     function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;
 1379 |     | 
 1380 |     |     /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.
 1381 |     |     function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;
 1382 |     | 
 1383 |     |     /// Asserts that two arrays of `int256` values are not equal.
 1384 |     |     function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;
 1385 |     | 
 1386 |     |     /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.
 1387 |     |     function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;
 1388 |     | 
 1389 |     |     /// Asserts that two `uint256` values are not equal.
 1390 |     |     function assertNotEq(uint256 left, uint256 right) external pure;
 1391 |     | 
 1392 |     |     /// Asserts that two arrays of `address` values are not equal.
 1393 |     |     function assertNotEq(address[] calldata left, address[] calldata right) external pure;
 1394 |     | 
 1395 |     |     /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.
 1396 |     |     function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;
 1397 |     | 
 1398 |     |     /// Asserts that two arrays of `bytes32` values are not equal.
 1399 |     |     function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;
 1400 |     | 
 1401 |     |     /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.
 1402 |     |     function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;
 1403 |     | 
 1404 |     |     /// Asserts that two arrays of `string` values are not equal.
 1405 |     |     function assertNotEq(string[] calldata left, string[] calldata right) external pure;
 1406 |     | 
 1407 |     |     /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.
 1408 |     |     function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;
 1409 |     | 
 1410 |     |     /// Asserts that two arrays of `bytes` values are not equal.
 1411 |     |     function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;
 1412 |     | 
 1413 |     |     /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.
 1414 |     |     function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;
 1415 |     | 
 1416 |     |     /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.
 1417 |     |     function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;
 1418 |     | 
 1419 |     |     /// Asserts that two `int256` values are not equal.
 1420 |     |     function assertNotEq(int256 left, int256 right) external pure;
 1421 |     | 
 1422 |     |     /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.
 1423 |     |     function assertNotEq(int256 left, int256 right, string calldata error) external pure;
 1424 |     | 
 1425 |     |     /// Asserts that two `address` values are not equal.
 1426 |     |     function assertNotEq(address left, address right) external pure;
 1427 |     | 
 1428 |     |     /// Asserts that two `address` values are not equal and includes error message into revert string on failure.
 1429 |     |     function assertNotEq(address left, address right, string calldata error) external pure;
 1430 |     | 
 1431 |     |     /// Asserts that two `bytes32` values are not equal.
 1432 |     |     function assertNotEq(bytes32 left, bytes32 right) external pure;
 1433 |     | 
 1434 |     |     /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.
 1435 |     |     function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;
 1436 |     | 
 1437 |     |     /// Asserts that the given condition is true.
 1438 |     |     function assertTrue(bool condition) external pure;
 1439 |     | 
 1440 |     |     /// Asserts that the given condition is true and includes error message into revert string on failure.
 1441 |     |     function assertTrue(bool condition, string calldata error) external pure;
 1442 |     | 
 1443 |     |     /// If the condition is false, discard this run's fuzz inputs and generate new ones.
 1444 |     |     function assume(bool condition) external pure;
 1445 |     | 
 1446 |     |     /// Discard this run's fuzz inputs and generate new ones if next call reverted.
 1447 |     |     function assumeNoRevert() external pure;
 1448 |     | 
 1449 |     |     /// Writes a breakpoint to jump to in the debugger.
 1450 |     |     function breakpoint(string calldata char) external;
 1451 |     | 
 1452 |     |     /// Writes a conditional breakpoint to jump to in the debugger.
 1453 |     |     function breakpoint(string calldata char, bool value) external;
 1454 |     | 
 1455 |     |     /// Returns the Foundry version.
 1456 |     |     /// Format: <cargo_version>+<git_sha>+<build_timestamp>
 1457 |     |     /// Sample output: 0.2.0+faa94c384+202407110019
 1458 |     |     /// Note: Build timestamps may vary slightly across platforms due to separate CI jobs.
 1459 |     |     /// For reliable version comparisons, use YYYYMMDD0000 format (e.g., >= 202407110000)
 1460 |     |     /// to compare timestamps while ignoring minor time differences.
 1461 |     |     function getFoundryVersion() external view returns (string memory version);
 1462 |     | 
 1463 |     |     /// Returns the RPC url for the given alias.
 1464 |     |     function rpcUrl(string calldata rpcAlias) external view returns (string memory json);
 1465 |     | 
 1466 |     |     /// Returns all rpc urls and their aliases as structs.
 1467 |     |     function rpcUrlStructs() external view returns (Rpc[] memory urls);
 1468 |     | 
 1469 |     |     /// Returns all rpc urls and their aliases `[alias, url][]`.
 1470 |     |     function rpcUrls() external view returns (string[2][] memory urls);
 1471 |     | 
 1472 |     |     /// Suspends execution of the main thread for `duration` milliseconds.
 1473 |     |     function sleep(uint256 duration) external;
 1474 |     | 
 1475 |     |     // ======== Toml ========
 1476 |     | 
 1477 |     |     /// Checks if `key` exists in a TOML table.
 1478 |     |     function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);
 1479 |     | 
 1480 |     |     /// Parses a string of TOML data at `key` and coerces it to `address`.
 1481 |     |     function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);
 1482 |     | 
 1483 |     |     /// Parses a string of TOML data at `key` and coerces it to `address[]`.
 1484 |     |     function parseTomlAddressArray(string calldata toml, string calldata key)
 1485 |     |         external
 1486 |     |         pure
 1487 |     |         returns (address[] memory);
 1488 |     | 
 1489 |     |     /// Parses a string of TOML data at `key` and coerces it to `bool`.
 1490 |     |     function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);
 1491 |     | 
 1492 |     |     /// Parses a string of TOML data at `key` and coerces it to `bool[]`.
 1493 |     |     function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);
 1494 |     | 
 1495 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes`.
 1496 |     |     function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);
 1497 |     | 
 1498 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes32`.
 1499 |     |     function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);
 1500 |     | 
 1501 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.
 1502 |     |     function parseTomlBytes32Array(string calldata toml, string calldata key)
 1503 |     |         external
 1504 |     |         pure
 1505 |     |         returns (bytes32[] memory);
 1506 |     | 
 1507 |     |     /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.
 1508 |     |     function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);
 1509 |     | 
 1510 |     |     /// Parses a string of TOML data at `key` and coerces it to `int256`.
 1511 |     |     function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);
 1512 |     | 
 1513 |     |     /// Parses a string of TOML data at `key` and coerces it to `int256[]`.
 1514 |     |     function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);
 1515 |     | 
 1516 |     |     /// Returns an array of all the keys in a TOML table.
 1517 |     |     function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);
 1518 |     | 
 1519 |     |     /// Parses a string of TOML data at `key` and coerces it to `string`.
 1520 |     |     function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);
 1521 |     | 
 1522 |     |     /// Parses a string of TOML data at `key` and coerces it to `string[]`.
 1523 |     |     function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);
 1524 |     | 
 1525 |     |     /// Parses a string of TOML data at `key` and coerces it to type array corresponding to `typeDescription`.
 1526 |     |     function parseTomlTypeArray(string calldata toml, string calldata key, string calldata typeDescription)
 1527 |     |         external
 1528 |     |         pure
 1529 |     |         returns (bytes memory);
 1530 |     | 
 1531 |     |     /// Parses a string of TOML data and coerces it to type corresponding to `typeDescription`.
 1532 |     |     function parseTomlType(string calldata toml, string calldata typeDescription)
 1533 |     |         external
 1534 |     |         pure
 1535 |     |         returns (bytes memory);
 1536 |     | 
 1537 |     |     /// Parses a string of TOML data at `key` and coerces it to type corresponding to `typeDescription`.
 1538 |     |     function parseTomlType(string calldata toml, string calldata key, string calldata typeDescription)
 1539 |     |         external
 1540 |     |         pure
 1541 |     |         returns (bytes memory);
 1542 |     | 
 1543 |     |     /// Parses a string of TOML data at `key` and coerces it to `uint256`.
 1544 |     |     function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);
 1545 |     | 
 1546 |     |     /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.
 1547 |     |     function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);
 1548 |     | 
 1549 |     |     /// ABI-encodes a TOML table.
 1550 |     |     function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);
 1551 |     | 
 1552 |     |     /// ABI-encodes a TOML table at `key`.
 1553 |     |     function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);
 1554 |     | 
 1555 |     |     /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.
 1556 |     |     function writeToml(string calldata json, string calldata path) external;
 1557 |     | 
 1558 |     |     /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>
 1559 |     |     /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.
 1560 |     |     function writeToml(string calldata json, string calldata path, string calldata valueKey) external;
 1561 |     | 
 1562 |     |     // ======== Utilities ========
 1563 |     | 
 1564 |     |     /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.
 1565 |     |     function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)
 1566 |     |         external
 1567 |     |         pure
 1568 |     |         returns (address);
 1569 |     | 
 1570 |     |     /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.
 1571 |     |     function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);
 1572 |     | 
 1573 |     |     /// Compute the address a contract will be deployed at for a given deployer address and nonce.
 1574 |     |     function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);
 1575 |     | 
 1576 |     |     /// Utility cheatcode to copy storage of `from` contract to another `to` contract.
 1577 |     |     function copyStorage(address from, address to) external;
 1578 |     | 
 1579 |     |     /// Returns ENS namehash for provided string.
 1580 |     |     function ensNamehash(string calldata name) external pure returns (bytes32);
 1581 |     | 
 1582 |     |     /// Gets the label for the specified address.
 1583 |     |     function getLabel(address account) external view returns (string memory currentLabel);
 1584 |     | 
 1585 |     |     /// Labels an address in call traces.
 1586 |     |     function label(address account, string calldata newLabel) external;
 1587 |     | 
 1588 |     |     /// Pauses collection of call traces. Useful in cases when you want to skip tracing of
 1589 |     |     /// complex calls which are not useful for debugging.
 1590 |     |     function pauseTracing() external view;
 1591 |     | 
 1592 |     |     /// Returns a random `address`.
 1593 |     |     function randomAddress() external returns (address);
 1594 |     | 
 1595 |     |     /// Returns an random `bool`.
 1596 |     |     function randomBool() external view returns (bool);
 1597 |     | 
 1598 |     |     /// Returns an random byte array value of the given length.
 1599 |     |     function randomBytes(uint256 len) external view returns (bytes memory);
 1600 |     | 
 1601 |     |     /// Returns an random `int256` value.
 1602 |     |     function randomInt() external view returns (int256);
 1603 |     | 
 1604 |     |     /// Returns an random `int256` value of given bits.
 1605 |     |     function randomInt(uint256 bits) external view returns (int256);
 1606 |     | 
 1607 |     |     /// Returns a random uint256 value.
 1608 |     |     function randomUint() external returns (uint256);
 1609 |     | 
 1610 |     |     /// Returns random uint256 value between the provided range (=min..=max).
 1611 |     |     function randomUint(uint256 min, uint256 max) external returns (uint256);
 1612 |     | 
 1613 |     |     /// Returns an random `uint256` value of given bits.
 1614 |     |     function randomUint(uint256 bits) external view returns (uint256);
 1615 |     | 
 1616 |     |     /// Unpauses collection of call traces.
 1617 |     |     function resumeTracing() external view;
 1618 |     | 
 1619 |     |     /// Utility cheatcode to set arbitrary storage for given target address.
 1620 |     |     function setArbitraryStorage(address target) external;
 1621 |     | 
 1622 |     |     /// Encodes a `bytes` value to a base64url string.
 1623 |     |     function toBase64URL(bytes calldata data) external pure returns (string memory);
 1624 |     | 
 1625 |     |     /// Encodes a `string` value to a base64url string.
 1626 |     |     function toBase64URL(string calldata data) external pure returns (string memory);
 1627 |     | 
 1628 |     |     /// Encodes a `bytes` value to a base64 string.
 1629 |     |     function toBase64(bytes calldata data) external pure returns (string memory);
 1630 |     | 
 1631 |     |     /// Encodes a `string` value to a base64 string.
 1632 |     |     function toBase64(string calldata data) external pure returns (string memory);
 1633 |     | }
 1634 |     | 
 1635 |     | /// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used
 1636 |     | /// in tests, but it is not recommended to use these cheats in scripts.
 1637 |     | interface Vm is VmSafe {
 1638 |     |     // ======== EVM ========
 1639 |     | 
 1640 |     |     /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.
 1641 |     |     function activeFork() external view returns (uint256 forkId);
 1642 |     | 
 1643 |     |     /// In forking mode, explicitly grant the given address cheatcode access.
 1644 |     |     function allowCheatcodes(address account) external;
 1645 |     | 
 1646 |     |     /// Sets `block.blobbasefee`
 1647 |     |     function blobBaseFee(uint256 newBlobBaseFee) external;
 1648 |     | 
 1649 |     |     /// Sets the blobhashes in the transaction.
 1650 |     |     /// Not available on EVM versions before Cancun.
 1651 |     |     /// If used on unsupported EVM versions it will revert.
 1652 |     |     function blobhashes(bytes32[] calldata hashes) external;
 1653 |     | 
 1654 |     |     /// Sets `block.chainid`.
 1655 |     |     function chainId(uint256 newChainId) external;
 1656 |     | 
 1657 |     |     /// Clears all mocked calls.
 1658 |     |     function clearMockedCalls() external;
 1659 |     | 
 1660 |     |     /// Sets `block.coinbase`.
 1661 |     |     function coinbase(address newCoinbase) external;
 1662 |     | 
 1663 |     |     /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.
 1664 |     |     function createFork(string calldata urlOrAlias) external returns (uint256 forkId);
 1665 |     | 
 1666 |     |     /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.
 1667 |     |     function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);
 1668 |     | 
 1669 |     |     /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,
 1670 |     |     /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.
 1671 |     |     function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);
 1672 |     | 
 1673 |     |     /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.
 1674 |     |     function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);
 1675 |     | 
 1676 |     |     /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.
 1677 |     |     function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);
 1678 |     | 
 1679 |     |     /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,
 1680 |     |     /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.
 1681 |     |     function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);
 1682 |     | 
 1683 |     |     /// Sets an address' balance.
 1684 |     |     function deal(address account, uint256 newBalance) external;
 1685 |     | 
 1686 |     |     /// Removes the snapshot with the given ID created by `snapshot`.
 1687 |     |     /// Takes the snapshot ID to delete.
 1688 |     |     /// Returns `true` if the snapshot was successfully deleted.
 1689 |     |     /// Returns `false` if the snapshot does not exist.
 1690 |     |     function deleteStateSnapshot(uint256 snapshotId) external returns (bool success);
 1691 |     | 
 1692 |     |     /// Removes _all_ snapshots previously created by `snapshot`.
 1693 |     |     function deleteStateSnapshots() external;
 1694 |     | 
 1695 |     |     /// Sets `block.difficulty`.
 1696 |     |     /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.
 1697 |     |     /// Reverts if used on unsupported EVM versions.
 1698 |     |     function difficulty(uint256 newDifficulty) external;
 1699 |     | 
 1700 |     |     /// Dump a genesis JSON file's `allocs` to disk.
 1701 |     |     function dumpState(string calldata pathToStateJson) external;
 1702 |     | 
 1703 |     |     /// Sets an address' code.
 1704 |     |     function etch(address target, bytes calldata newRuntimeBytecode) external;
 1705 |     | 
 1706 |     |     /// Sets `block.basefee`.
 1707 |     |     function fee(uint256 newBasefee) external;
 1708 |     | 
 1709 |     |     /// Gets the blockhashes from the current transaction.
 1710 |     |     /// Not available on EVM versions before Cancun.
 1711 |     |     /// If used on unsupported EVM versions it will revert.
 1712 |     |     function getBlobhashes() external view returns (bytes32[] memory hashes);
 1713 |     | 
 1714 |     |     /// Returns true if the account is marked as persistent.
 1715 |     |     function isPersistent(address account) external view returns (bool persistent);
 1716 |     | 
 1717 |     |     /// Load a genesis JSON file's `allocs` into the in-memory revm state.
 1718 |     |     function loadAllocs(string calldata pathToAllocsJson) external;
 1719 |     | 
 1720 |     |     /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup
 1721 |     |     /// Meaning, changes made to the state of this account will be kept when switching forks.
 1722 |     |     function makePersistent(address account) external;
 1723 |     | 
 1724 |     |     /// See `makePersistent(address)`.
 1725 |     |     function makePersistent(address account0, address account1) external;
 1726 |     | 
 1727 |     |     /// See `makePersistent(address)`.
 1728 |     |     function makePersistent(address account0, address account1, address account2) external;
 1729 |     | 
 1730 |     |     /// See `makePersistent(address)`.
 1731 |     |     function makePersistent(address[] calldata accounts) external;
 1732 |     | 
 1733 |     |     /// Reverts a call to an address with specified revert data.
 1734 |     |     function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;
 1735 |     | 
 1736 |     |     /// Reverts a call to an address with a specific `msg.value`, with specified revert data.
 1737 |     |     function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)
 1738 |     |         external;
 1739 |     | 
 1740 |     |     /// Mocks a call to an address, returning specified data.
 1741 |     |     /// Calldata can either be strict or a partial match, e.g. if you only
 1742 |     |     /// pass a Solidity selector to the expected calldata, then the entire Solidity
 1743 |     |     /// function will be mocked.
 1744 |     |     function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;
 1745 |     | 
 1746 |     |     /// Mocks a call to an address with a specific `msg.value`, returning specified data.
 1747 |     |     /// Calldata match takes precedence over `msg.value` in case of ambiguity.
 1748 |     |     function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;
 1749 |     | 
 1750 |     |     /// Whenever a call is made to `callee` with calldata `data`, this cheatcode instead calls
 1751 |     |     /// `target` with the same calldata. This functionality is similar to a delegate call made to
 1752 |     |     /// `target` contract from `callee`.
 1753 |     |     /// Can be used to substitute a call to a function with another implementation that captures
 1754 |     |     /// the primary logic of the original function but is easier to reason about.
 1755 |     |     /// If calldata is not a strict match then partial match by selector is attempted.
 1756 |     |     function mockFunction(address callee, address target, bytes calldata data) external;
 1757 |     | 
 1758 |     |     /// Sets the *next* call's `msg.sender` to be the input address.
 1759 |     |     function prank(address msgSender) external;
 1760 |     | 
 1761 |     |     /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.
 1762 |     |     function prank(address msgSender, address txOrigin) external;
 1763 |     | 
 1764 |     |     /// Sets `block.prevrandao`.
 1765 |     |     /// Not available on EVM versions before Paris. Use `difficulty` instead.
 1766 |     |     /// If used on unsupported EVM versions it will revert.
 1767 |     |     function prevrandao(bytes32 newPrevrandao) external;
 1768 |     | 
 1769 |     |     /// Sets `block.prevrandao`.
 1770 |     |     /// Not available on EVM versions before Paris. Use `difficulty` instead.
 1771 |     |     /// If used on unsupported EVM versions it will revert.
 1772 |     |     function prevrandao(uint256 newPrevrandao) external;
 1773 |     | 
 1774 |     |     /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.
 1775 |     |     function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);
 1776 |     | 
 1777 |     |     /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.
 1778 |     |     function resetNonce(address account) external;
 1779 |     | 
 1780 |     |     /// Revert the state of the EVM to a previous snapshot
 1781 |     |     /// Takes the snapshot ID to revert to.
 1782 |     |     /// Returns `true` if the snapshot was successfully reverted.
 1783 |     |     /// Returns `false` if the snapshot does not exist.
 1784 |     |     /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.
 1785 |     |     function revertToState(uint256 snapshotId) external returns (bool success);
 1786 |     | 
 1787 |     |     /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots
 1788 |     |     /// Takes the snapshot ID to revert to.
 1789 |     |     /// Returns `true` if the snapshot was successfully reverted and deleted.
 1790 |     |     /// Returns `false` if the snapshot does not exist.
 1791 |     |     function revertToStateAndDelete(uint256 snapshotId) external returns (bool success);
 1792 |     | 
 1793 |     |     /// Revokes persistent status from the address, previously added via `makePersistent`.
 1794 |     |     function revokePersistent(address account) external;
 1795 |     | 
 1796 |     |     /// See `revokePersistent(address)`.
 1797 |     |     function revokePersistent(address[] calldata accounts) external;
 1798 |     | 
 1799 |     |     /// Sets `block.height`.
 1800 |     |     function roll(uint256 newHeight) external;
 1801 |     | 
 1802 |     |     /// Updates the currently active fork to given block number
 1803 |     |     /// This is similar to `roll` but for the currently active fork.
 1804 |     |     function rollFork(uint256 blockNumber) external;
 1805 |     | 
 1806 |     |     /// Updates the currently active fork to given transaction. This will `rollFork` with the number
 1807 |     |     /// of the block the transaction was mined in and replays all transaction mined before it in the block.
 1808 |     |     function rollFork(bytes32 txHash) external;
 1809 |     | 
 1810 |     |     /// Updates the given fork to given block number.
 1811 |     |     function rollFork(uint256 forkId, uint256 blockNumber) external;
 1812 |     | 
 1813 |     |     /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.
 1814 |     |     function rollFork(uint256 forkId, bytes32 txHash) external;
 1815 |     | 
 1816 |     |     /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.
 1817 |     |     function selectFork(uint256 forkId) external;
 1818 |     | 
 1819 |     |     /// Set blockhash for the current block.
 1820 |     |     /// It only sets the blockhash for blocks where `block.number - 256 <= number < block.number`.
 1821 |     |     function setBlockhash(uint256 blockNumber, bytes32 blockHash) external;
 1822 |     | 
 1823 |     |     /// Sets the nonce of an account. Must be higher than the current nonce of the account.
 1824 |     |     function setNonce(address account, uint64 newNonce) external;
 1825 |     | 
 1826 |     |     /// Sets the nonce of an account to an arbitrary value.
 1827 |     |     function setNonceUnsafe(address account, uint64 newNonce) external;
 1828 |     | 
 1829 |     |     /// Snapshot capture the gas usage of the last call by name from the callee perspective.
 1830 |     |     function snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);
 1831 |     | 
 1832 |     |     /// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.
 1833 |     |     function snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);
 1834 |     | 
 1835 |     |     /// Snapshot the current state of the evm.
 1836 |     |     /// Returns the ID of the snapshot that was created.
 1837 |     |     /// To revert a snapshot use `revertToState`.
 1838 |     |     function snapshotState() external returns (uint256 snapshotId);
 1839 |     | 
 1840 |     |     /// Snapshot capture an arbitrary numerical value by name.
 1841 |     |     /// The group name is derived from the contract name.
 1842 |     |     function snapshotValue(string calldata name, uint256 value) external;
 1843 |     | 
 1844 |     |     /// Snapshot capture an arbitrary numerical value by name in a group.
 1845 |     |     function snapshotValue(string calldata group, string calldata name, uint256 value) external;
 1846 |     | 
 1847 |     |     /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.
 1848 |     |     function startPrank(address msgSender) external;
 1849 |     | 
 1850 |     |     /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.
 1851 |     |     function startPrank(address msgSender, address txOrigin) external;
 1852 |     | 
 1853 |     |     /// Start a snapshot capture of the current gas usage by name.
 1854 |     |     /// The group name is derived from the contract name.
 1855 |     |     function startSnapshotGas(string calldata name) external;
 1856 |     | 
 1857 |     |     /// Start a snapshot capture of the current gas usage by name in a group.
 1858 |     |     function startSnapshotGas(string calldata group, string calldata name) external;
 1859 |     | 
 1860 |     |     /// Resets subsequent calls' `msg.sender` to be `address(this)`.
 1861 |     |     function stopPrank() external;
 1862 |     | 
 1863 |     |     /// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.
 1864 |     |     function stopSnapshotGas() external returns (uint256 gasUsed);
 1865 |     | 
 1866 |     |     /// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.
 1867 |     |     /// The group name is derived from the contract name.
 1868 |     |     function stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);
 1869 |     | 
 1870 |     |     /// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.
 1871 |     |     function stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);
 1872 |     | 
 1873 |     |     /// Stores a value to an address' storage slot.
 1874 |     |     function store(address target, bytes32 slot, bytes32 value) external;
 1875 |     | 
 1876 |     |     /// Fetches the given transaction from the active fork and executes it on the current state.
 1877 |     |     function transact(bytes32 txHash) external;
 1878 |     | 
 1879 |     |     /// Fetches the given transaction from the given fork and executes it on the current state.
 1880 |     |     function transact(uint256 forkId, bytes32 txHash) external;
 1881 |     | 
 1882 |     |     /// Sets `tx.gasprice`.
 1883 |     |     function txGasPrice(uint256 newGasPrice) external;
 1884 |     | 
 1885 |     |     /// Sets `block.timestamp`.
 1886 |     |     function warp(uint256 newTimestamp) external;
 1887 |     | 
 1888 |     |     /// `deleteSnapshot` is being deprecated in favor of `deleteStateSnapshot`. It will be removed in future versions.
 1889 |     |     function deleteSnapshot(uint256 snapshotId) external returns (bool success);
 1890 |     | 
 1891 |     |     /// `deleteSnapshots` is being deprecated in favor of `deleteStateSnapshots`. It will be removed in future versions.
 1892 |     |     function deleteSnapshots() external;
 1893 |     | 
 1894 |     |     /// `revertToAndDelete` is being deprecated in favor of `revertToStateAndDelete`. It will be removed in future versions.
 1895 |     |     function revertToAndDelete(uint256 snapshotId) external returns (bool success);
 1896 |     | 
 1897 |     |     /// `revertTo` is being deprecated in favor of `revertToState`. It will be removed in future versions.
 1898 |     |     function revertTo(uint256 snapshotId) external returns (bool success);
 1899 |     | 
 1900 |     |     /// `snapshot` is being deprecated in favor of `snapshotState`. It will be removed in future versions.
 1901 |     |     function snapshot() external returns (uint256 snapshotId);
 1902 |     | 
 1903 |     |     // ======== Testing ========
 1904 |     | 
 1905 |     |     /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.
 1906 |     |     function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;
 1907 |     | 
 1908 |     |     /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.
 1909 |     |     function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)
 1910 |     |         external;
 1911 |     | 
 1912 |     |     /// Expects a call to an address with the specified calldata.
 1913 |     |     /// Calldata can either be a strict or a partial match.
 1914 |     |     function expectCall(address callee, bytes calldata data) external;
 1915 |     | 
 1916 |     |     /// Expects given number of calls to an address with the specified calldata.
 1917 |     |     function expectCall(address callee, bytes calldata data, uint64 count) external;
 1918 |     | 
 1919 |     |     /// Expects a call to an address with the specified `msg.value` and calldata.
 1920 |     |     function expectCall(address callee, uint256 msgValue, bytes calldata data) external;
 1921 |     | 
 1922 |     |     /// Expects given number of calls to an address with the specified `msg.value` and calldata.
 1923 |     |     function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;
 1924 |     | 
 1925 |     |     /// Expect a call to an address with the specified `msg.value`, gas, and calldata.
 1926 |     |     function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;
 1927 |     | 
 1928 |     |     /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.
 1929 |     |     function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;
 1930 |     | 
 1931 |     |     /// Prepare an expected anonymous log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).
 1932 |     |     /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if
 1933 |     |     /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).
 1934 |     |     function expectEmitAnonymous(bool checkTopic0, bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData)
 1935 |     |         external;
 1936 |     | 
 1937 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1938 |     |     function expectEmitAnonymous(
 1939 |     |         bool checkTopic0,
 1940 |     |         bool checkTopic1,
 1941 |     |         bool checkTopic2,
 1942 |     |         bool checkTopic3,
 1943 |     |         bool checkData,
 1944 |     |         address emitter
 1945 |     |     ) external;
 1946 |     | 
 1947 |     |     /// Prepare an expected anonymous log with all topic and data checks enabled.
 1948 |     |     /// Call this function, then emit an anonymous event, then call a function. Internally after the call, we check if
 1949 |     |     /// logs were emitted in the expected order with the expected topics and data.
 1950 |     |     function expectEmitAnonymous() external;
 1951 |     | 
 1952 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1953 |     |     function expectEmitAnonymous(address emitter) external;
 1954 |     | 
 1955 |     |     /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).
 1956 |     |     /// Call this function, then emit an event, then call a function. Internally after the call, we check if
 1957 |     |     /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).
 1958 |     |     function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;
 1959 |     | 
 1960 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1961 |     |     function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)
 1962 |     |         external;
 1963 |     | 
 1964 |     |     /// Prepare an expected log with all topic and data checks enabled.
 1965 |     |     /// Call this function, then emit an event, then call a function. Internally after the call, we check if
 1966 |     |     /// logs were emitted in the expected order with the expected topics and data.
 1967 |     |     function expectEmit() external;
 1968 |     | 
 1969 |     |     /// Same as the previous method, but also checks supplied address against emitting contract.
 1970 |     |     function expectEmit(address emitter) external;
 1971 |     | 
 1972 |     |     /// Expects an error on next call that starts with the revert data.
 1973 |     |     function expectPartialRevert(bytes4 revertData) external;
 1974 |     | 
 1975 |     |     /// Expects an error on next call to reverter address, that starts with the revert data.
 1976 |     |     function expectPartialRevert(bytes4 revertData, address reverter) external;
 1977 |     | 
 1978 |     |     /// Expects an error on next call with any revert data.
 1979 |     |     function expectRevert() external;
 1980 |     | 
 1981 |     |     /// Expects an error on next call that exactly matches the revert data.
 1982 |     |     function expectRevert(bytes4 revertData) external;
 1983 |     | 
 1984 |     |     /// Expects an error on next call that exactly matches the revert data.
 1985 |     |     function expectRevert(bytes calldata revertData) external;
 1986 |     | 
 1987 |     |     /// Expects an error with any revert data on next call to reverter address.
 1988 |     |     function expectRevert(address reverter) external;
 1989 |     | 
 1990 |     |     /// Expects an error from reverter address on next call, with any revert data.
 1991 |     |     function expectRevert(bytes4 revertData, address reverter) external;
 1992 |     | 
 1993 |     |     /// Expects an error from reverter address on next call, that exactly matches the revert data.
 1994 |     |     function expectRevert(bytes calldata revertData, address reverter) external;
 1995 |     | 
 1996 |     |     /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other
 1997 |     |     /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.
 1998 |     |     function expectSafeMemory(uint64 min, uint64 max) external;
 1999 |     | 
 2000 |     |     /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.
 2001 |     |     /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges
 2002 |     |     /// to the set.
 2003 |     |     function expectSafeMemoryCall(uint64 min, uint64 max) external;
 2004 |     | 
 2005 |     |     /// Marks a test as skipped. Must be called at the top level of a test.
 2006 |     |     function skip(bool skipTest) external;
 2007 |     | 
 2008 |     |     /// Marks a test as skipped with a reason. Must be called at the top level of a test.
 2009 |     |     function skip(bool skipTest, string calldata reason) external;
 2010 |     | 
 2011 |     |     /// Stops all safe memory expectation in the current subcontext.
 2012 |     |     function stopExpectSafeMemory() external;
 2013 |     | }
 2014 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/console.sol
    1 |     | // SPDX-License-Identifier: MIT
    2 |     | pragma solidity >=0.4.22 <0.9.0;
    3 |     | 
    4 |     | library console {
    5 |     |     address constant CONSOLE_ADDRESS =
    6 |     |         0x000000000000000000636F6e736F6c652e6c6f67;
    7 |     | 
    8 |     |     function _sendLogPayloadImplementation(bytes memory payload) internal view {
    9 |     |         address consoleAddress = CONSOLE_ADDRESS;
   10 |     |         /// @solidity memory-safe-assembly
   11 |     |         assembly {
   12 |     |             pop(
   13 |     |                 staticcall(
   14 |     |                     gas(),
   15 |     |                     consoleAddress,
   16 |     |                     add(payload, 32),
   17 |     |                     mload(payload),
   18 |     |                     0,
   19 |     |                     0
   20 |     |                 )
   21 |     |             )
   22 |     |         }
   23 |     |     }
   24 |     | 
   25 |     |     function _castToPure(
   26 |     |       function(bytes memory) internal view fnIn
   27 |     |     ) internal pure returns (function(bytes memory) pure fnOut) {
   28 |     |         assembly {
   29 |     |             fnOut := fnIn
   30 |     |         }
   31 |     |     }
   32 |     | 
   33 |     |     function _sendLogPayload(bytes memory payload) internal pure {
   34 |     |         _castToPure(_sendLogPayloadImplementation)(payload);
   35 |     |     }
   36 |     | 
   37 |     |     function log() internal pure {
   38 |     |         _sendLogPayload(abi.encodeWithSignature("log()"));
   39 |     |     }
   40 |     | 
   41 |     |     function logInt(int256 p0) internal pure {
   42 |     |         _sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
   43 |     |     }
   44 |     | 
   45 |     |     function logUint(uint256 p0) internal pure {
   46 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
   47 |     |     }
   48 |     | 
   49 |     |     function logString(string memory p0) internal pure {
   50 |     |         _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
   51 |     |     }
   52 |     | 
   53 |     |     function logBool(bool p0) internal pure {
   54 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
   55 |     |     }
   56 |     | 
   57 |     |     function logAddress(address p0) internal pure {
   58 |     |         _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
   59 |     |     }
   60 |     | 
   61 |     |     function logBytes(bytes memory p0) internal pure {
   62 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
   63 |     |     }
   64 |     | 
   65 |     |     function logBytes1(bytes1 p0) internal pure {
   66 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
   67 |     |     }
   68 |     | 
   69 |     |     function logBytes2(bytes2 p0) internal pure {
   70 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
   71 |     |     }
   72 |     | 
   73 |     |     function logBytes3(bytes3 p0) internal pure {
   74 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
   75 |     |     }
   76 |     | 
   77 |     |     function logBytes4(bytes4 p0) internal pure {
   78 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
   79 |     |     }
   80 |     | 
   81 |     |     function logBytes5(bytes5 p0) internal pure {
   82 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
   83 |     |     }
   84 |     | 
   85 |     |     function logBytes6(bytes6 p0) internal pure {
   86 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
   87 |     |     }
   88 |     | 
   89 |     |     function logBytes7(bytes7 p0) internal pure {
   90 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
   91 |     |     }
   92 |     | 
   93 |     |     function logBytes8(bytes8 p0) internal pure {
   94 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
   95 |     |     }
   96 |     | 
   97 |     |     function logBytes9(bytes9 p0) internal pure {
   98 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
   99 |     |     }
  100 |     | 
  101 |     |     function logBytes10(bytes10 p0) internal pure {
  102 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
  103 |     |     }
  104 |     | 
  105 |     |     function logBytes11(bytes11 p0) internal pure {
  106 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
  107 |     |     }
  108 |     | 
  109 |     |     function logBytes12(bytes12 p0) internal pure {
  110 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
  111 |     |     }
  112 |     | 
  113 |     |     function logBytes13(bytes13 p0) internal pure {
  114 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
  115 |     |     }
  116 |     | 
  117 |     |     function logBytes14(bytes14 p0) internal pure {
  118 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
  119 |     |     }
  120 |     | 
  121 |     |     function logBytes15(bytes15 p0) internal pure {
  122 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
  123 |     |     }
  124 |     | 
  125 |     |     function logBytes16(bytes16 p0) internal pure {
  126 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
  127 |     |     }
  128 |     | 
  129 |     |     function logBytes17(bytes17 p0) internal pure {
  130 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
  131 |     |     }
  132 |     | 
  133 |     |     function logBytes18(bytes18 p0) internal pure {
  134 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
  135 |     |     }
  136 |     | 
  137 |     |     function logBytes19(bytes19 p0) internal pure {
  138 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
  139 |     |     }
  140 |     | 
  141 |     |     function logBytes20(bytes20 p0) internal pure {
  142 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
  143 |     |     }
  144 |     | 
  145 |     |     function logBytes21(bytes21 p0) internal pure {
  146 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
  147 |     |     }
  148 |     | 
  149 |     |     function logBytes22(bytes22 p0) internal pure {
  150 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
  151 |     |     }
  152 |     | 
  153 |     |     function logBytes23(bytes23 p0) internal pure {
  154 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
  155 |     |     }
  156 |     | 
  157 |     |     function logBytes24(bytes24 p0) internal pure {
  158 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
  159 |     |     }
  160 |     | 
  161 |     |     function logBytes25(bytes25 p0) internal pure {
  162 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
  163 |     |     }
  164 |     | 
  165 |     |     function logBytes26(bytes26 p0) internal pure {
  166 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
  167 |     |     }
  168 |     | 
  169 |     |     function logBytes27(bytes27 p0) internal pure {
  170 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
  171 |     |     }
  172 |     | 
  173 |     |     function logBytes28(bytes28 p0) internal pure {
  174 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
  175 |     |     }
  176 |     | 
  177 |     |     function logBytes29(bytes29 p0) internal pure {
  178 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
  179 |     |     }
  180 |     | 
  181 |     |     function logBytes30(bytes30 p0) internal pure {
  182 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
  183 |     |     }
  184 |     | 
  185 |     |     function logBytes31(bytes31 p0) internal pure {
  186 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
  187 |     |     }
  188 |     | 
  189 |     |     function logBytes32(bytes32 p0) internal pure {
  190 |     |         _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
  191 |     |     }
  192 |     | 
  193 |     |     function log(uint256 p0) internal pure {
  194 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
  195 |     |     }
  196 |     | 
  197 |     |     function log(int256 p0) internal pure {
  198 |     |         _sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
  199 |     |     }
  200 |     | 
  201 |     |     function log(string memory p0) internal pure {
  202 |     |         _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
  203 |     |     }
  204 |     | 
  205 |     |     function log(bool p0) internal pure {
  206 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
  207 |     |     }
  208 |     | 
  209 |     |     function log(address p0) internal pure {
  210 |     |         _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
  211 |     |     }
  212 |     | 
  213 |     |     function log(uint256 p0, uint256 p1) internal pure {
  214 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256)", p0, p1));
  215 |     |     }
  216 |     | 
  217 |     |     function log(uint256 p0, string memory p1) internal pure {
  218 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string)", p0, p1));
  219 |     |     }
  220 |     | 
  221 |     |     function log(uint256 p0, bool p1) internal pure {
  222 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool)", p0, p1));
  223 |     |     }
  224 |     | 
  225 |     |     function log(uint256 p0, address p1) internal pure {
  226 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address)", p0, p1));
  227 |     |     }
  228 |     | 
  229 |     |     function log(string memory p0, uint256 p1) internal pure {
  230 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
  231 |     |     }
  232 |     | 
  233 |     |     function log(string memory p0, int256 p1) internal pure {
  234 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,int256)", p0, p1));
  235 |     |     }
  236 |     | 
  237 |     |     function log(string memory p0, string memory p1) internal pure {
  238 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
  239 |     |     }
  240 |     | 
  241 |     |     function log(string memory p0, bool p1) internal pure {
  242 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
  243 |     |     }
  244 |     | 
  245 |     |     function log(string memory p0, address p1) internal pure {
  246 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
  247 |     |     }
  248 |     | 
  249 |     |     function log(bool p0, uint256 p1) internal pure {
  250 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256)", p0, p1));
  251 |     |     }
  252 |     | 
  253 |     |     function log(bool p0, string memory p1) internal pure {
  254 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
  255 |     |     }
  256 |     | 
  257 |     |     function log(bool p0, bool p1) internal pure {
  258 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
  259 |     |     }
  260 |     | 
  261 |     |     function log(bool p0, address p1) internal pure {
  262 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
  263 |     |     }
  264 |     | 
  265 |     |     function log(address p0, uint256 p1) internal pure {
  266 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256)", p0, p1));
  267 |     |     }
  268 |     | 
  269 |     |     function log(address p0, string memory p1) internal pure {
  270 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
  271 |     |     }
  272 |     | 
  273 |     |     function log(address p0, bool p1) internal pure {
  274 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
  275 |     |     }
  276 |     | 
  277 |     |     function log(address p0, address p1) internal pure {
  278 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
  279 |     |     }
  280 |     | 
  281 |     |     function log(uint256 p0, uint256 p1, uint256 p2) internal pure {
  282 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256)", p0, p1, p2));
  283 |     |     }
  284 |     | 
  285 |     |     function log(uint256 p0, uint256 p1, string memory p2) internal pure {
  286 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string)", p0, p1, p2));
  287 |     |     }
  288 |     | 
  289 |     |     function log(uint256 p0, uint256 p1, bool p2) internal pure {
  290 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool)", p0, p1, p2));
  291 |     |     }
  292 |     | 
  293 |     |     function log(uint256 p0, uint256 p1, address p2) internal pure {
  294 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address)", p0, p1, p2));
  295 |     |     }
  296 |     | 
  297 |     |     function log(uint256 p0, string memory p1, uint256 p2) internal pure {
  298 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256)", p0, p1, p2));
  299 |     |     }
  300 |     | 
  301 |     |     function log(uint256 p0, string memory p1, string memory p2) internal pure {
  302 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string)", p0, p1, p2));
  303 |     |     }
  304 |     | 
  305 |     |     function log(uint256 p0, string memory p1, bool p2) internal pure {
  306 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool)", p0, p1, p2));
  307 |     |     }
  308 |     | 
  309 |     |     function log(uint256 p0, string memory p1, address p2) internal pure {
  310 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address)", p0, p1, p2));
  311 |     |     }
  312 |     | 
  313 |     |     function log(uint256 p0, bool p1, uint256 p2) internal pure {
  314 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256)", p0, p1, p2));
  315 |     |     }
  316 |     | 
  317 |     |     function log(uint256 p0, bool p1, string memory p2) internal pure {
  318 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string)", p0, p1, p2));
  319 |     |     }
  320 |     | 
  321 |     |     function log(uint256 p0, bool p1, bool p2) internal pure {
  322 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool)", p0, p1, p2));
  323 |     |     }
  324 |     | 
  325 |     |     function log(uint256 p0, bool p1, address p2) internal pure {
  326 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address)", p0, p1, p2));
  327 |     |     }
  328 |     | 
  329 |     |     function log(uint256 p0, address p1, uint256 p2) internal pure {
  330 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256)", p0, p1, p2));
  331 |     |     }
  332 |     | 
  333 |     |     function log(uint256 p0, address p1, string memory p2) internal pure {
  334 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string)", p0, p1, p2));
  335 |     |     }
  336 |     | 
  337 |     |     function log(uint256 p0, address p1, bool p2) internal pure {
  338 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool)", p0, p1, p2));
  339 |     |     }
  340 |     | 
  341 |     |     function log(uint256 p0, address p1, address p2) internal pure {
  342 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address)", p0, p1, p2));
  343 |     |     }
  344 |     | 
  345 |     |     function log(string memory p0, uint256 p1, uint256 p2) internal pure {
  346 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256)", p0, p1, p2));
  347 |     |     }
  348 |     | 
  349 |     |     function log(string memory p0, uint256 p1, string memory p2) internal pure {
  350 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string)", p0, p1, p2));
  351 |     |     }
  352 |     | 
  353 |     |     function log(string memory p0, uint256 p1, bool p2) internal pure {
  354 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool)", p0, p1, p2));
  355 |     |     }
  356 |     | 
  357 |     |     function log(string memory p0, uint256 p1, address p2) internal pure {
  358 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address)", p0, p1, p2));
  359 |     |     }
  360 |     | 
  361 |     |     function log(string memory p0, string memory p1, uint256 p2) internal pure {
  362 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256)", p0, p1, p2));
  363 |     |     }
  364 |     | 
  365 |     |     function log(string memory p0, string memory p1, string memory p2) internal pure {
  366 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
  367 |     |     }
  368 |     | 
  369 |     |     function log(string memory p0, string memory p1, bool p2) internal pure {
  370 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
  371 |     |     }
  372 |     | 
  373 |     |     function log(string memory p0, string memory p1, address p2) internal pure {
  374 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
  375 |     |     }
  376 |     | 
  377 |     |     function log(string memory p0, bool p1, uint256 p2) internal pure {
  378 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256)", p0, p1, p2));
  379 |     |     }
  380 |     | 
  381 |     |     function log(string memory p0, bool p1, string memory p2) internal pure {
  382 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
  383 |     |     }
  384 |     | 
  385 |     |     function log(string memory p0, bool p1, bool p2) internal pure {
  386 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
  387 |     |     }
  388 |     | 
  389 |     |     function log(string memory p0, bool p1, address p2) internal pure {
  390 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
  391 |     |     }
  392 |     | 
  393 |     |     function log(string memory p0, address p1, uint256 p2) internal pure {
  394 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256)", p0, p1, p2));
  395 |     |     }
  396 |     | 
  397 |     |     function log(string memory p0, address p1, string memory p2) internal pure {
  398 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
  399 |     |     }
  400 |     | 
  401 |     |     function log(string memory p0, address p1, bool p2) internal pure {
  402 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
  403 |     |     }
  404 |     | 
  405 |     |     function log(string memory p0, address p1, address p2) internal pure {
  406 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
  407 |     |     }
  408 |     | 
  409 |     |     function log(bool p0, uint256 p1, uint256 p2) internal pure {
  410 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256)", p0, p1, p2));
  411 |     |     }
  412 |     | 
  413 |     |     function log(bool p0, uint256 p1, string memory p2) internal pure {
  414 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string)", p0, p1, p2));
  415 |     |     }
  416 |     | 
  417 |     |     function log(bool p0, uint256 p1, bool p2) internal pure {
  418 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool)", p0, p1, p2));
  419 |     |     }
  420 |     | 
  421 |     |     function log(bool p0, uint256 p1, address p2) internal pure {
  422 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address)", p0, p1, p2));
  423 |     |     }
  424 |     | 
  425 |     |     function log(bool p0, string memory p1, uint256 p2) internal pure {
  426 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256)", p0, p1, p2));
  427 |     |     }
  428 |     | 
  429 |     |     function log(bool p0, string memory p1, string memory p2) internal pure {
  430 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
  431 |     |     }
  432 |     | 
  433 |     |     function log(bool p0, string memory p1, bool p2) internal pure {
  434 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
  435 |     |     }
  436 |     | 
  437 |     |     function log(bool p0, string memory p1, address p2) internal pure {
  438 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
  439 |     |     }
  440 |     | 
  441 |     |     function log(bool p0, bool p1, uint256 p2) internal pure {
  442 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256)", p0, p1, p2));
  443 |     |     }
  444 |     | 
  445 |     |     function log(bool p0, bool p1, string memory p2) internal pure {
  446 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
  447 |     |     }
  448 |     | 
  449 |     |     function log(bool p0, bool p1, bool p2) internal pure {
  450 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
  451 |     |     }
  452 |     | 
  453 |     |     function log(bool p0, bool p1, address p2) internal pure {
  454 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
  455 |     |     }
  456 |     | 
  457 |     |     function log(bool p0, address p1, uint256 p2) internal pure {
  458 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256)", p0, p1, p2));
  459 |     |     }
  460 |     | 
  461 |     |     function log(bool p0, address p1, string memory p2) internal pure {
  462 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
  463 |     |     }
  464 |     | 
  465 |     |     function log(bool p0, address p1, bool p2) internal pure {
  466 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
  467 |     |     }
  468 |     | 
  469 |     |     function log(bool p0, address p1, address p2) internal pure {
  470 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
  471 |     |     }
  472 |     | 
  473 |     |     function log(address p0, uint256 p1, uint256 p2) internal pure {
  474 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256)", p0, p1, p2));
  475 |     |     }
  476 |     | 
  477 |     |     function log(address p0, uint256 p1, string memory p2) internal pure {
  478 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string)", p0, p1, p2));
  479 |     |     }
  480 |     | 
  481 |     |     function log(address p0, uint256 p1, bool p2) internal pure {
  482 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool)", p0, p1, p2));
  483 |     |     }
  484 |     | 
  485 |     |     function log(address p0, uint256 p1, address p2) internal pure {
  486 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address)", p0, p1, p2));
  487 |     |     }
  488 |     | 
  489 |     |     function log(address p0, string memory p1, uint256 p2) internal pure {
  490 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256)", p0, p1, p2));
  491 |     |     }
  492 |     | 
  493 |     |     function log(address p0, string memory p1, string memory p2) internal pure {
  494 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
  495 |     |     }
  496 |     | 
  497 |     |     function log(address p0, string memory p1, bool p2) internal pure {
  498 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
  499 |     |     }
  500 |     | 
  501 |     |     function log(address p0, string memory p1, address p2) internal pure {
  502 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
  503 |     |     }
  504 |     | 
  505 |     |     function log(address p0, bool p1, uint256 p2) internal pure {
  506 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256)", p0, p1, p2));
  507 |     |     }
  508 |     | 
  509 |     |     function log(address p0, bool p1, string memory p2) internal pure {
  510 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
  511 |     |     }
  512 |     | 
  513 |     |     function log(address p0, bool p1, bool p2) internal pure {
  514 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
  515 |     |     }
  516 |     | 
  517 |     |     function log(address p0, bool p1, address p2) internal pure {
  518 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
  519 |     |     }
  520 |     | 
  521 |     |     function log(address p0, address p1, uint256 p2) internal pure {
  522 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256)", p0, p1, p2));
  523 |     |     }
  524 |     | 
  525 |     |     function log(address p0, address p1, string memory p2) internal pure {
  526 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
  527 |     |     }
  528 |     | 
  529 |     |     function log(address p0, address p1, bool p2) internal pure {
  530 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
  531 |     |     }
  532 |     | 
  533 |     |     function log(address p0, address p1, address p2) internal pure {
  534 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
  535 |     |     }
  536 |     | 
  537 |     |     function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  538 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,uint256)", p0, p1, p2, p3));
  539 |     |     }
  540 |     | 
  541 |     |     function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {
  542 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,string)", p0, p1, p2, p3));
  543 |     |     }
  544 |     | 
  545 |     |     function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {
  546 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,bool)", p0, p1, p2, p3));
  547 |     |     }
  548 |     | 
  549 |     |     function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {
  550 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,uint256,address)", p0, p1, p2, p3));
  551 |     |     }
  552 |     | 
  553 |     |     function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {
  554 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,uint256)", p0, p1, p2, p3));
  555 |     |     }
  556 |     | 
  557 |     |     function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {
  558 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,string)", p0, p1, p2, p3));
  559 |     |     }
  560 |     | 
  561 |     |     function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {
  562 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,bool)", p0, p1, p2, p3));
  563 |     |     }
  564 |     | 
  565 |     |     function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {
  566 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string,address)", p0, p1, p2, p3));
  567 |     |     }
  568 |     | 
  569 |     |     function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {
  570 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,uint256)", p0, p1, p2, p3));
  571 |     |     }
  572 |     | 
  573 |     |     function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {
  574 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,string)", p0, p1, p2, p3));
  575 |     |     }
  576 |     | 
  577 |     |     function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {
  578 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,bool)", p0, p1, p2, p3));
  579 |     |     }
  580 |     | 
  581 |     |     function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {
  582 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool,address)", p0, p1, p2, p3));
  583 |     |     }
  584 |     | 
  585 |     |     function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {
  586 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,uint256)", p0, p1, p2, p3));
  587 |     |     }
  588 |     | 
  589 |     |     function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {
  590 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,string)", p0, p1, p2, p3));
  591 |     |     }
  592 |     | 
  593 |     |     function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {
  594 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,bool)", p0, p1, p2, p3));
  595 |     |     }
  596 |     | 
  597 |     |     function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {
  598 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,address,address)", p0, p1, p2, p3));
  599 |     |     }
  600 |     | 
  601 |     |     function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {
  602 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,uint256)", p0, p1, p2, p3));
  603 |     |     }
  604 |     | 
  605 |     |     function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {
  606 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,string)", p0, p1, p2, p3));
  607 |     |     }
  608 |     | 
  609 |     |     function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {
  610 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,bool)", p0, p1, p2, p3));
  611 |     |     }
  612 |     | 
  613 |     |     function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {
  614 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256,address)", p0, p1, p2, p3));
  615 |     |     }
  616 |     | 
  617 |     |     function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {
  618 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,uint256)", p0, p1, p2, p3));
  619 |     |     }
  620 |     | 
  621 |     |     function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {
  622 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,string)", p0, p1, p2, p3));
  623 |     |     }
  624 |     | 
  625 |     |     function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {
  626 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,bool)", p0, p1, p2, p3));
  627 |     |     }
  628 |     | 
  629 |     |     function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {
  630 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,string,address)", p0, p1, p2, p3));
  631 |     |     }
  632 |     | 
  633 |     |     function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {
  634 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,uint256)", p0, p1, p2, p3));
  635 |     |     }
  636 |     | 
  637 |     |     function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {
  638 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,string)", p0, p1, p2, p3));
  639 |     |     }
  640 |     | 
  641 |     |     function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {
  642 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,bool)", p0, p1, p2, p3));
  643 |     |     }
  644 |     | 
  645 |     |     function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {
  646 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool,address)", p0, p1, p2, p3));
  647 |     |     }
  648 |     | 
  649 |     |     function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {
  650 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,uint256)", p0, p1, p2, p3));
  651 |     |     }
  652 |     | 
  653 |     |     function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {
  654 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,string)", p0, p1, p2, p3));
  655 |     |     }
  656 |     | 
  657 |     |     function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {
  658 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,bool)", p0, p1, p2, p3));
  659 |     |     }
  660 |     | 
  661 |     |     function log(uint256 p0, string memory p1, address p2, address p3) internal pure {
  662 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,string,address,address)", p0, p1, p2, p3));
  663 |     |     }
  664 |     | 
  665 |     |     function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {
  666 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,uint256)", p0, p1, p2, p3));
  667 |     |     }
  668 |     | 
  669 |     |     function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {
  670 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,string)", p0, p1, p2, p3));
  671 |     |     }
  672 |     | 
  673 |     |     function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {
  674 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,bool)", p0, p1, p2, p3));
  675 |     |     }
  676 |     | 
  677 |     |     function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {
  678 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256,address)", p0, p1, p2, p3));
  679 |     |     }
  680 |     | 
  681 |     |     function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {
  682 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,uint256)", p0, p1, p2, p3));
  683 |     |     }
  684 |     | 
  685 |     |     function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {
  686 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,string)", p0, p1, p2, p3));
  687 |     |     }
  688 |     | 
  689 |     |     function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {
  690 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,bool)", p0, p1, p2, p3));
  691 |     |     }
  692 |     | 
  693 |     |     function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {
  694 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string,address)", p0, p1, p2, p3));
  695 |     |     }
  696 |     | 
  697 |     |     function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {
  698 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,uint256)", p0, p1, p2, p3));
  699 |     |     }
  700 |     | 
  701 |     |     function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {
  702 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,string)", p0, p1, p2, p3));
  703 |     |     }
  704 |     | 
  705 |     |     function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {
  706 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,bool)", p0, p1, p2, p3));
  707 |     |     }
  708 |     | 
  709 |     |     function log(uint256 p0, bool p1, bool p2, address p3) internal pure {
  710 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool,address)", p0, p1, p2, p3));
  711 |     |     }
  712 |     | 
  713 |     |     function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {
  714 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,uint256)", p0, p1, p2, p3));
  715 |     |     }
  716 |     | 
  717 |     |     function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {
  718 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,string)", p0, p1, p2, p3));
  719 |     |     }
  720 |     | 
  721 |     |     function log(uint256 p0, bool p1, address p2, bool p3) internal pure {
  722 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,bool)", p0, p1, p2, p3));
  723 |     |     }
  724 |     | 
  725 |     |     function log(uint256 p0, bool p1, address p2, address p3) internal pure {
  726 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address,address)", p0, p1, p2, p3));
  727 |     |     }
  728 |     | 
  729 |     |     function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {
  730 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,uint256)", p0, p1, p2, p3));
  731 |     |     }
  732 |     | 
  733 |     |     function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {
  734 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,string)", p0, p1, p2, p3));
  735 |     |     }
  736 |     | 
  737 |     |     function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {
  738 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,bool)", p0, p1, p2, p3));
  739 |     |     }
  740 |     | 
  741 |     |     function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {
  742 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,uint256,address)", p0, p1, p2, p3));
  743 |     |     }
  744 |     | 
  745 |     |     function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {
  746 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,uint256)", p0, p1, p2, p3));
  747 |     |     }
  748 |     | 
  749 |     |     function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {
  750 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,string)", p0, p1, p2, p3));
  751 |     |     }
  752 |     | 
  753 |     |     function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {
  754 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,bool)", p0, p1, p2, p3));
  755 |     |     }
  756 |     | 
  757 |     |     function log(uint256 p0, address p1, string memory p2, address p3) internal pure {
  758 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,string,address)", p0, p1, p2, p3));
  759 |     |     }
  760 |     | 
  761 |     |     function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {
  762 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,uint256)", p0, p1, p2, p3));
  763 |     |     }
  764 |     | 
  765 |     |     function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {
  766 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,string)", p0, p1, p2, p3));
  767 |     |     }
  768 |     | 
  769 |     |     function log(uint256 p0, address p1, bool p2, bool p3) internal pure {
  770 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,bool)", p0, p1, p2, p3));
  771 |     |     }
  772 |     | 
  773 |     |     function log(uint256 p0, address p1, bool p2, address p3) internal pure {
  774 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool,address)", p0, p1, p2, p3));
  775 |     |     }
  776 |     | 
  777 |     |     function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {
  778 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,uint256)", p0, p1, p2, p3));
  779 |     |     }
  780 |     | 
  781 |     |     function log(uint256 p0, address p1, address p2, string memory p3) internal pure {
  782 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,string)", p0, p1, p2, p3));
  783 |     |     }
  784 |     | 
  785 |     |     function log(uint256 p0, address p1, address p2, bool p3) internal pure {
  786 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,bool)", p0, p1, p2, p3));
  787 |     |     }
  788 |     | 
  789 |     |     function log(uint256 p0, address p1, address p2, address p3) internal pure {
  790 |     |         _sendLogPayload(abi.encodeWithSignature("log(uint256,address,address,address)", p0, p1, p2, p3));
  791 |     |     }
  792 |     | 
  793 |     |     function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  794 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,uint256)", p0, p1, p2, p3));
  795 |     |     }
  796 |     | 
  797 |     |     function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {
  798 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,string)", p0, p1, p2, p3));
  799 |     |     }
  800 |     | 
  801 |     |     function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {
  802 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,bool)", p0, p1, p2, p3));
  803 |     |     }
  804 |     | 
  805 |     |     function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {
  806 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256,address)", p0, p1, p2, p3));
  807 |     |     }
  808 |     | 
  809 |     |     function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {
  810 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,uint256)", p0, p1, p2, p3));
  811 |     |     }
  812 |     | 
  813 |     |     function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {
  814 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,string)", p0, p1, p2, p3));
  815 |     |     }
  816 |     | 
  817 |     |     function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {
  818 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,bool)", p0, p1, p2, p3));
  819 |     |     }
  820 |     | 
  821 |     |     function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {
  822 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,string,address)", p0, p1, p2, p3));
  823 |     |     }
  824 |     | 
  825 |     |     function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {
  826 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,uint256)", p0, p1, p2, p3));
  827 |     |     }
  828 |     | 
  829 |     |     function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {
  830 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,string)", p0, p1, p2, p3));
  831 |     |     }
  832 |     | 
  833 |     |     function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {
  834 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,bool)", p0, p1, p2, p3));
  835 |     |     }
  836 |     | 
  837 |     |     function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {
  838 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool,address)", p0, p1, p2, p3));
  839 |     |     }
  840 |     | 
  841 |     |     function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {
  842 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,uint256)", p0, p1, p2, p3));
  843 |     |     }
  844 |     | 
  845 |     |     function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {
  846 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,string)", p0, p1, p2, p3));
  847 |     |     }
  848 |     | 
  849 |     |     function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {
  850 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,bool)", p0, p1, p2, p3));
  851 |     |     }
  852 |     | 
  853 |     |     function log(string memory p0, uint256 p1, address p2, address p3) internal pure {
  854 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,uint256,address,address)", p0, p1, p2, p3));
  855 |     |     }
  856 |     | 
  857 |     |     function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {
  858 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,uint256)", p0, p1, p2, p3));
  859 |     |     }
  860 |     | 
  861 |     |     function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {
  862 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,string)", p0, p1, p2, p3));
  863 |     |     }
  864 |     | 
  865 |     |     function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {
  866 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,bool)", p0, p1, p2, p3));
  867 |     |     }
  868 |     | 
  869 |     |     function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {
  870 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,uint256,address)", p0, p1, p2, p3));
  871 |     |     }
  872 |     | 
  873 |     |     function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {
  874 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint256)", p0, p1, p2, p3));
  875 |     |     }
  876 |     | 
  877 |     |     function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {
  878 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
  879 |     |     }
  880 |     | 
  881 |     |     function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {
  882 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
  883 |     |     }
  884 |     | 
  885 |     |     function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {
  886 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
  887 |     |     }
  888 |     | 
  889 |     |     function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {
  890 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint256)", p0, p1, p2, p3));
  891 |     |     }
  892 |     | 
  893 |     |     function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {
  894 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
  895 |     |     }
  896 |     | 
  897 |     |     function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {
  898 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
  899 |     |     }
  900 |     | 
  901 |     |     function log(string memory p0, string memory p1, bool p2, address p3) internal pure {
  902 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
  903 |     |     }
  904 |     | 
  905 |     |     function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {
  906 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint256)", p0, p1, p2, p3));
  907 |     |     }
  908 |     | 
  909 |     |     function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {
  910 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
  911 |     |     }
  912 |     | 
  913 |     |     function log(string memory p0, string memory p1, address p2, bool p3) internal pure {
  914 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
  915 |     |     }
  916 |     | 
  917 |     |     function log(string memory p0, string memory p1, address p2, address p3) internal pure {
  918 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
  919 |     |     }
  920 |     | 
  921 |     |     function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {
  922 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,uint256)", p0, p1, p2, p3));
  923 |     |     }
  924 |     | 
  925 |     |     function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {
  926 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,string)", p0, p1, p2, p3));
  927 |     |     }
  928 |     | 
  929 |     |     function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {
  930 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,bool)", p0, p1, p2, p3));
  931 |     |     }
  932 |     | 
  933 |     |     function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {
  934 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256,address)", p0, p1, p2, p3));
  935 |     |     }
  936 |     | 
  937 |     |     function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {
  938 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint256)", p0, p1, p2, p3));
  939 |     |     }
  940 |     | 
  941 |     |     function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {
  942 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
  943 |     |     }
  944 |     | 
  945 |     |     function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {
  946 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
  947 |     |     }
  948 |     | 
  949 |     |     function log(string memory p0, bool p1, string memory p2, address p3) internal pure {
  950 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
  951 |     |     }
  952 |     | 
  953 |     |     function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {
  954 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint256)", p0, p1, p2, p3));
  955 |     |     }
  956 |     | 
  957 |     |     function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {
  958 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
  959 |     |     }
  960 |     | 
  961 |     |     function log(string memory p0, bool p1, bool p2, bool p3) internal pure {
  962 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
  963 |     |     }
  964 |     | 
  965 |     |     function log(string memory p0, bool p1, bool p2, address p3) internal pure {
  966 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
  967 |     |     }
  968 |     | 
  969 |     |     function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {
  970 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint256)", p0, p1, p2, p3));
  971 |     |     }
  972 |     | 
  973 |     |     function log(string memory p0, bool p1, address p2, string memory p3) internal pure {
  974 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
  975 |     |     }
  976 |     | 
  977 |     |     function log(string memory p0, bool p1, address p2, bool p3) internal pure {
  978 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
  979 |     |     }
  980 |     | 
  981 |     |     function log(string memory p0, bool p1, address p2, address p3) internal pure {
  982 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
  983 |     |     }
  984 |     | 
  985 |     |     function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {
  986 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,uint256)", p0, p1, p2, p3));
  987 |     |     }
  988 |     | 
  989 |     |     function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {
  990 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,string)", p0, p1, p2, p3));
  991 |     |     }
  992 |     | 
  993 |     |     function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {
  994 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,bool)", p0, p1, p2, p3));
  995 |     |     }
  996 |     | 
  997 |     |     function log(string memory p0, address p1, uint256 p2, address p3) internal pure {
  998 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,uint256,address)", p0, p1, p2, p3));
  999 |     |     }
 1000 |     | 
 1001 |     |     function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {
 1002 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint256)", p0, p1, p2, p3));
 1003 |     |     }
 1004 |     | 
 1005 |     |     function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {
 1006 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
 1007 |     |     }
 1008 |     | 
 1009 |     |     function log(string memory p0, address p1, string memory p2, bool p3) internal pure {
 1010 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
 1011 |     |     }
 1012 |     | 
 1013 |     |     function log(string memory p0, address p1, string memory p2, address p3) internal pure {
 1014 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
 1015 |     |     }
 1016 |     | 
 1017 |     |     function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {
 1018 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint256)", p0, p1, p2, p3));
 1019 |     |     }
 1020 |     | 
 1021 |     |     function log(string memory p0, address p1, bool p2, string memory p3) internal pure {
 1022 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
 1023 |     |     }
 1024 |     | 
 1025 |     |     function log(string memory p0, address p1, bool p2, bool p3) internal pure {
 1026 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
 1027 |     |     }
 1028 |     | 
 1029 |     |     function log(string memory p0, address p1, bool p2, address p3) internal pure {
 1030 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
 1031 |     |     }
 1032 |     | 
 1033 |     |     function log(string memory p0, address p1, address p2, uint256 p3) internal pure {
 1034 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint256)", p0, p1, p2, p3));
 1035 |     |     }
 1036 |     | 
 1037 |     |     function log(string memory p0, address p1, address p2, string memory p3) internal pure {
 1038 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
 1039 |     |     }
 1040 |     | 
 1041 |     |     function log(string memory p0, address p1, address p2, bool p3) internal pure {
 1042 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
 1043 |     |     }
 1044 |     | 
 1045 |     |     function log(string memory p0, address p1, address p2, address p3) internal pure {
 1046 |     |         _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
 1047 |     |     }
 1048 |     | 
 1049 |     |     function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
 1050 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,uint256)", p0, p1, p2, p3));
 1051 |     |     }
 1052 |     | 
 1053 |     |     function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {
 1054 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,string)", p0, p1, p2, p3));
 1055 |     |     }
 1056 |     | 
 1057 |     |     function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {
 1058 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,bool)", p0, p1, p2, p3));
 1059 |     |     }
 1060 |     | 
 1061 |     |     function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {
 1062 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256,address)", p0, p1, p2, p3));
 1063 |     |     }
 1064 |     | 
 1065 |     |     function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {
 1066 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,uint256)", p0, p1, p2, p3));
 1067 |     |     }
 1068 |     | 
 1069 |     |     function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {
 1070 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,string)", p0, p1, p2, p3));
 1071 |     |     }
 1072 |     | 
 1073 |     |     function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {
 1074 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,bool)", p0, p1, p2, p3));
 1075 |     |     }
 1076 |     | 
 1077 |     |     function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {
 1078 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string,address)", p0, p1, p2, p3));
 1079 |     |     }
 1080 |     | 
 1081 |     |     function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {
 1082 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,uint256)", p0, p1, p2, p3));
 1083 |     |     }
 1084 |     | 
 1085 |     |     function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {
 1086 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,string)", p0, p1, p2, p3));
 1087 |     |     }
 1088 |     | 
 1089 |     |     function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {
 1090 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,bool)", p0, p1, p2, p3));
 1091 |     |     }
 1092 |     | 
 1093 |     |     function log(bool p0, uint256 p1, bool p2, address p3) internal pure {
 1094 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool,address)", p0, p1, p2, p3));
 1095 |     |     }
 1096 |     | 
 1097 |     |     function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {
 1098 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,uint256)", p0, p1, p2, p3));
 1099 |     |     }
 1100 |     | 
 1101 |     |     function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {
 1102 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,string)", p0, p1, p2, p3));
 1103 |     |     }
 1104 |     | 
 1105 |     |     function log(bool p0, uint256 p1, address p2, bool p3) internal pure {
 1106 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,bool)", p0, p1, p2, p3));
 1107 |     |     }
 1108 |     | 
 1109 |     |     function log(bool p0, uint256 p1, address p2, address p3) internal pure {
 1110 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address,address)", p0, p1, p2, p3));
 1111 |     |     }
 1112 |     | 
 1113 |     |     function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {
 1114 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,uint256)", p0, p1, p2, p3));
 1115 |     |     }
 1116 |     | 
 1117 |     |     function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {
 1118 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,string)", p0, p1, p2, p3));
 1119 |     |     }
 1120 |     | 
 1121 |     |     function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {
 1122 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,bool)", p0, p1, p2, p3));
 1123 |     |     }
 1124 |     | 
 1125 |     |     function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {
 1126 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256,address)", p0, p1, p2, p3));
 1127 |     |     }
 1128 |     | 
 1129 |     |     function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {
 1130 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint256)", p0, p1, p2, p3));
 1131 |     |     }
 1132 |     | 
 1133 |     |     function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {
 1134 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
 1135 |     |     }
 1136 |     | 
 1137 |     |     function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {
 1138 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
 1139 |     |     }
 1140 |     | 
 1141 |     |     function log(bool p0, string memory p1, string memory p2, address p3) internal pure {
 1142 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
 1143 |     |     }
 1144 |     | 
 1145 |     |     function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {
 1146 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint256)", p0, p1, p2, p3));
 1147 |     |     }
 1148 |     | 
 1149 |     |     function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {
 1150 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
 1151 |     |     }
 1152 |     | 
 1153 |     |     function log(bool p0, string memory p1, bool p2, bool p3) internal pure {
 1154 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
 1155 |     |     }
 1156 |     | 
 1157 |     |     function log(bool p0, string memory p1, bool p2, address p3) internal pure {
 1158 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
 1159 |     |     }
 1160 |     | 
 1161 |     |     function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {
 1162 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint256)", p0, p1, p2, p3));
 1163 |     |     }
 1164 |     | 
 1165 |     |     function log(bool p0, string memory p1, address p2, string memory p3) internal pure {
 1166 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
 1167 |     |     }
 1168 |     | 
 1169 |     |     function log(bool p0, string memory p1, address p2, bool p3) internal pure {
 1170 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
 1171 |     |     }
 1172 |     | 
 1173 |     |     function log(bool p0, string memory p1, address p2, address p3) internal pure {
 1174 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
 1175 |     |     }
 1176 |     | 
 1177 |     |     function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {
 1178 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,uint256)", p0, p1, p2, p3));
 1179 |     |     }
 1180 |     | 
 1181 |     |     function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {
 1182 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,string)", p0, p1, p2, p3));
 1183 |     |     }
 1184 |     | 
 1185 |     |     function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {
 1186 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,bool)", p0, p1, p2, p3));
 1187 |     |     }
 1188 |     | 
 1189 |     |     function log(bool p0, bool p1, uint256 p2, address p3) internal pure {
 1190 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256,address)", p0, p1, p2, p3));
 1191 |     |     }
 1192 |     | 
 1193 |     |     function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {
 1194 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint256)", p0, p1, p2, p3));
 1195 |     |     }
 1196 |     | 
 1197 |     |     function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {
 1198 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
 1199 |     |     }
 1200 |     | 
 1201 |     |     function log(bool p0, bool p1, string memory p2, bool p3) internal pure {
 1202 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
 1203 |     |     }
 1204 |     | 
 1205 |     |     function log(bool p0, bool p1, string memory p2, address p3) internal pure {
 1206 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
 1207 |     |     }
 1208 |     | 
 1209 |     |     function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {
 1210 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint256)", p0, p1, p2, p3));
 1211 |     |     }
 1212 |     | 
 1213 |     |     function log(bool p0, bool p1, bool p2, string memory p3) internal pure {
 1214 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
 1215 |     |     }
 1216 |     | 
 1217 |     |     function log(bool p0, bool p1, bool p2, bool p3) internal pure {
 1218 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
 1219 |     |     }
 1220 |     | 
 1221 |     |     function log(bool p0, bool p1, bool p2, address p3) internal pure {
 1222 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
 1223 |     |     }
 1224 |     | 
 1225 |     |     function log(bool p0, bool p1, address p2, uint256 p3) internal pure {
 1226 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint256)", p0, p1, p2, p3));
 1227 |     |     }
 1228 |     | 
 1229 |     |     function log(bool p0, bool p1, address p2, string memory p3) internal pure {
 1230 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
 1231 |     |     }
 1232 |     | 
 1233 |     |     function log(bool p0, bool p1, address p2, bool p3) internal pure {
 1234 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
 1235 |     |     }
 1236 |     | 
 1237 |     |     function log(bool p0, bool p1, address p2, address p3) internal pure {
 1238 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
 1239 |     |     }
 1240 |     | 
 1241 |     |     function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {
 1242 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,uint256)", p0, p1, p2, p3));
 1243 |     |     }
 1244 |     | 
 1245 |     |     function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {
 1246 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,string)", p0, p1, p2, p3));
 1247 |     |     }
 1248 |     | 
 1249 |     |     function log(bool p0, address p1, uint256 p2, bool p3) internal pure {
 1250 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,bool)", p0, p1, p2, p3));
 1251 |     |     }
 1252 |     | 
 1253 |     |     function log(bool p0, address p1, uint256 p2, address p3) internal pure {
 1254 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256,address)", p0, p1, p2, p3));
 1255 |     |     }
 1256 |     | 
 1257 |     |     function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {
 1258 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint256)", p0, p1, p2, p3));
 1259 |     |     }
 1260 |     | 
 1261 |     |     function log(bool p0, address p1, string memory p2, string memory p3) internal pure {
 1262 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
 1263 |     |     }
 1264 |     | 
 1265 |     |     function log(bool p0, address p1, string memory p2, bool p3) internal pure {
 1266 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
 1267 |     |     }
 1268 |     | 
 1269 |     |     function log(bool p0, address p1, string memory p2, address p3) internal pure {
 1270 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
 1271 |     |     }
 1272 |     | 
 1273 |     |     function log(bool p0, address p1, bool p2, uint256 p3) internal pure {
 1274 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint256)", p0, p1, p2, p3));
 1275 |     |     }
 1276 |     | 
 1277 |     |     function log(bool p0, address p1, bool p2, string memory p3) internal pure {
 1278 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
 1279 |     |     }
 1280 |     | 
 1281 |     |     function log(bool p0, address p1, bool p2, bool p3) internal pure {
 1282 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
 1283 |     |     }
 1284 |     | 
 1285 |     |     function log(bool p0, address p1, bool p2, address p3) internal pure {
 1286 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
 1287 |     |     }
 1288 |     | 
 1289 |     |     function log(bool p0, address p1, address p2, uint256 p3) internal pure {
 1290 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint256)", p0, p1, p2, p3));
 1291 |     |     }
 1292 |     | 
 1293 |     |     function log(bool p0, address p1, address p2, string memory p3) internal pure {
 1294 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
 1295 |     |     }
 1296 |     | 
 1297 |     |     function log(bool p0, address p1, address p2, bool p3) internal pure {
 1298 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
 1299 |     |     }
 1300 |     | 
 1301 |     |     function log(bool p0, address p1, address p2, address p3) internal pure {
 1302 |     |         _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
 1303 |     |     }
 1304 |     | 
 1305 |     |     function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
 1306 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,uint256)", p0, p1, p2, p3));
 1307 |     |     }
 1308 |     | 
 1309 |     |     function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {
 1310 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,string)", p0, p1, p2, p3));
 1311 |     |     }
 1312 |     | 
 1313 |     |     function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {
 1314 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,bool)", p0, p1, p2, p3));
 1315 |     |     }
 1316 |     | 
 1317 |     |     function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {
 1318 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,uint256,address)", p0, p1, p2, p3));
 1319 |     |     }
 1320 |     | 
 1321 |     |     function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {
 1322 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,uint256)", p0, p1, p2, p3));
 1323 |     |     }
 1324 |     | 
 1325 |     |     function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {
 1326 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,string)", p0, p1, p2, p3));
 1327 |     |     }
 1328 |     | 
 1329 |     |     function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {
 1330 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,bool)", p0, p1, p2, p3));
 1331 |     |     }
 1332 |     | 
 1333 |     |     function log(address p0, uint256 p1, string memory p2, address p3) internal pure {
 1334 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,string,address)", p0, p1, p2, p3));
 1335 |     |     }
 1336 |     | 
 1337 |     |     function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {
 1338 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,uint256)", p0, p1, p2, p3));
 1339 |     |     }
 1340 |     | 
 1341 |     |     function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {
 1342 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,string)", p0, p1, p2, p3));
 1343 |     |     }
 1344 |     | 
 1345 |     |     function log(address p0, uint256 p1, bool p2, bool p3) internal pure {
 1346 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,bool)", p0, p1, p2, p3));
 1347 |     |     }
 1348 |     | 
 1349 |     |     function log(address p0, uint256 p1, bool p2, address p3) internal pure {
 1350 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool,address)", p0, p1, p2, p3));
 1351 |     |     }
 1352 |     | 
 1353 |     |     function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {
 1354 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,uint256)", p0, p1, p2, p3));
 1355 |     |     }
 1356 |     | 
 1357 |     |     function log(address p0, uint256 p1, address p2, string memory p3) internal pure {
 1358 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,string)", p0, p1, p2, p3));
 1359 |     |     }
 1360 |     | 
 1361 |     |     function log(address p0, uint256 p1, address p2, bool p3) internal pure {
 1362 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,bool)", p0, p1, p2, p3));
 1363 |     |     }
 1364 |     | 
 1365 |     |     function log(address p0, uint256 p1, address p2, address p3) internal pure {
 1366 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,uint256,address,address)", p0, p1, p2, p3));
 1367 |     |     }
 1368 |     | 
 1369 |     |     function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {
 1370 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,uint256)", p0, p1, p2, p3));
 1371 |     |     }
 1372 |     | 
 1373 |     |     function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {
 1374 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,string)", p0, p1, p2, p3));
 1375 |     |     }
 1376 |     | 
 1377 |     |     function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {
 1378 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,bool)", p0, p1, p2, p3));
 1379 |     |     }
 1380 |     | 
 1381 |     |     function log(address p0, string memory p1, uint256 p2, address p3) internal pure {
 1382 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,uint256,address)", p0, p1, p2, p3));
 1383 |     |     }
 1384 |     | 
 1385 |     |     function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {
 1386 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint256)", p0, p1, p2, p3));
 1387 |     |     }
 1388 |     | 
 1389 |     |     function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {
 1390 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
 1391 |     |     }
 1392 |     | 
 1393 |     |     function log(address p0, string memory p1, string memory p2, bool p3) internal pure {
 1394 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
 1395 |     |     }
 1396 |     | 
 1397 |     |     function log(address p0, string memory p1, string memory p2, address p3) internal pure {
 1398 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
 1399 |     |     }
 1400 |     | 
 1401 |     |     function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {
 1402 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint256)", p0, p1, p2, p3));
 1403 |     |     }
 1404 |     | 
 1405 |     |     function log(address p0, string memory p1, bool p2, string memory p3) internal pure {
 1406 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
 1407 |     |     }
 1408 |     | 
 1409 |     |     function log(address p0, string memory p1, bool p2, bool p3) internal pure {
 1410 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
 1411 |     |     }
 1412 |     | 
 1413 |     |     function log(address p0, string memory p1, bool p2, address p3) internal pure {
 1414 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
 1415 |     |     }
 1416 |     | 
 1417 |     |     function log(address p0, string memory p1, address p2, uint256 p3) internal pure {
 1418 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint256)", p0, p1, p2, p3));
 1419 |     |     }
 1420 |     | 
 1421 |     |     function log(address p0, string memory p1, address p2, string memory p3) internal pure {
 1422 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
 1423 |     |     }
 1424 |     | 
 1425 |     |     function log(address p0, string memory p1, address p2, bool p3) internal pure {
 1426 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
 1427 |     |     }
 1428 |     | 
 1429 |     |     function log(address p0, string memory p1, address p2, address p3) internal pure {
 1430 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
 1431 |     |     }
 1432 |     | 
 1433 |     |     function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {
 1434 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,uint256)", p0, p1, p2, p3));
 1435 |     |     }
 1436 |     | 
 1437 |     |     function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {
 1438 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,string)", p0, p1, p2, p3));
 1439 |     |     }
 1440 |     | 
 1441 |     |     function log(address p0, bool p1, uint256 p2, bool p3) internal pure {
 1442 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,bool)", p0, p1, p2, p3));
 1443 |     |     }
 1444 |     | 
 1445 |     |     function log(address p0, bool p1, uint256 p2, address p3) internal pure {
 1446 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256,address)", p0, p1, p2, p3));
 1447 |     |     }
 1448 |     | 
 1449 |     |     function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {
 1450 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint256)", p0, p1, p2, p3));
 1451 |     |     }
 1452 |     | 
 1453 |     |     function log(address p0, bool p1, string memory p2, string memory p3) internal pure {
 1454 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
 1455 |     |     }
 1456 |     | 
 1457 |     |     function log(address p0, bool p1, string memory p2, bool p3) internal pure {
 1458 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
 1459 |     |     }
 1460 |     | 
 1461 |     |     function log(address p0, bool p1, string memory p2, address p3) internal pure {
 1462 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
 1463 |     |     }
 1464 |     | 
 1465 |     |     function log(address p0, bool p1, bool p2, uint256 p3) internal pure {
 1466 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint256)", p0, p1, p2, p3));
 1467 |     |     }
 1468 |     | 
 1469 |     |     function log(address p0, bool p1, bool p2, string memory p3) internal pure {
 1470 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
 1471 |     |     }
 1472 |     | 
 1473 |     |     function log(address p0, bool p1, bool p2, bool p3) internal pure {
 1474 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
 1475 |     |     }
 1476 |     | 
 1477 |     |     function log(address p0, bool p1, bool p2, address p3) internal pure {
 1478 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
 1479 |     |     }
 1480 |     | 
 1481 |     |     function log(address p0, bool p1, address p2, uint256 p3) internal pure {
 1482 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint256)", p0, p1, p2, p3));
 1483 |     |     }
 1484 |     | 
 1485 |     |     function log(address p0, bool p1, address p2, string memory p3) internal pure {
 1486 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
 1487 |     |     }
 1488 |     | 
 1489 |     |     function log(address p0, bool p1, address p2, bool p3) internal pure {
 1490 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
 1491 |     |     }
 1492 |     | 
 1493 |     |     function log(address p0, bool p1, address p2, address p3) internal pure {
 1494 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
 1495 |     |     }
 1496 |     | 
 1497 |     |     function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {
 1498 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,uint256)", p0, p1, p2, p3));
 1499 |     |     }
 1500 |     | 
 1501 |     |     function log(address p0, address p1, uint256 p2, string memory p3) internal pure {
 1502 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,string)", p0, p1, p2, p3));
 1503 |     |     }
 1504 |     | 
 1505 |     |     function log(address p0, address p1, uint256 p2, bool p3) internal pure {
 1506 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,bool)", p0, p1, p2, p3));
 1507 |     |     }
 1508 |     | 
 1509 |     |     function log(address p0, address p1, uint256 p2, address p3) internal pure {
 1510 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,uint256,address)", p0, p1, p2, p3));
 1511 |     |     }
 1512 |     | 
 1513 |     |     function log(address p0, address p1, string memory p2, uint256 p3) internal pure {
 1514 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint256)", p0, p1, p2, p3));
 1515 |     |     }
 1516 |     | 
 1517 |     |     function log(address p0, address p1, string memory p2, string memory p3) internal pure {
 1518 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
 1519 |     |     }
 1520 |     | 
 1521 |     |     function log(address p0, address p1, string memory p2, bool p3) internal pure {
 1522 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
 1523 |     |     }
 1524 |     | 
 1525 |     |     function log(address p0, address p1, string memory p2, address p3) internal pure {
 1526 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
 1527 |     |     }
 1528 |     | 
 1529 |     |     function log(address p0, address p1, bool p2, uint256 p3) internal pure {
 1530 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint256)", p0, p1, p2, p3));
 1531 |     |     }
 1532 |     | 
 1533 |     |     function log(address p0, address p1, bool p2, string memory p3) internal pure {
 1534 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
 1535 |     |     }
 1536 |     | 
 1537 |     |     function log(address p0, address p1, bool p2, bool p3) internal pure {
 1538 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
 1539 |     |     }
 1540 |     | 
 1541 |     |     function log(address p0, address p1, bool p2, address p3) internal pure {
 1542 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
 1543 |     |     }
 1544 |     | 
 1545 |     |     function log(address p0, address p1, address p2, uint256 p3) internal pure {
 1546 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint256)", p0, p1, p2, p3));
 1547 |     |     }
 1548 |     | 
 1549 |     |     function log(address p0, address p1, address p2, string memory p3) internal pure {
 1550 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
 1551 |     |     }
 1552 |     | 
 1553 |     |     function log(address p0, address p1, address p2, bool p3) internal pure {
 1554 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
 1555 |     |     }
 1556 |     | 
 1557 |     |     function log(address p0, address p1, address p2, address p3) internal pure {
 1558 |     |         _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
 1559 |     |     }
 1560 |     | }
 1561 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/console2.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity >=0.4.22 <0.9.0;
 3 |     | 
 4 |     | import {console as console2} from "./console.sol";
 5 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/interfaces/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2;
  3 |     | 
  4 |     | interface IERC165 {
  5 |     |     /// @notice Query if a contract implements an interface
  6 |     |     /// @param interfaceID The interface identifier, as specified in ERC-165
  7 |     |     /// @dev Interface identification is specified in ERC-165. This function
  8 |     |     /// uses less than 30,000 gas.
  9 |     |     /// @return `true` if the contract implements `interfaceID` and
 10 |     |     /// `interfaceID` is not 0xffffffff, `false` otherwise
 11 |     |     function supportsInterface(bytes4 interfaceID) external view returns (bool);
 12 |     | }
 13 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/interfaces/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2;
  3 |     | 
  4 |     | /// @dev Interface of the ERC20 standard as defined in the EIP.
  5 |     | /// @dev This includes the optional name, symbol, and decimals metadata.
  6 |     | interface IERC20 {
  7 |     |     /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).
  8 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
  9 |     | 
 10 |     |     /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`
 11 |     |     /// is the new allowance.
 12 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 13 |     | 
 14 |     |     /// @notice Returns the amount of tokens in existence.
 15 |     |     function totalSupply() external view returns (uint256);
 16 |     | 
 17 |     |     /// @notice Returns the amount of tokens owned by `account`.
 18 |     |     function balanceOf(address account) external view returns (uint256);
 19 |     | 
 20 |     |     /// @notice Moves `amount` tokens from the caller's account to `to`.
 21 |     |     function transfer(address to, uint256 amount) external returns (bool);
 22 |     | 
 23 |     |     /// @notice Returns the remaining number of tokens that `spender` is allowed
 24 |     |     /// to spend on behalf of `owner`
 25 |     |     function allowance(address owner, address spender) external view returns (uint256);
 26 |     | 
 27 |     |     /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.
 28 |     |     /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 29 |     |     function approve(address spender, uint256 amount) external returns (bool);
 30 |     | 
 31 |     |     /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.
 32 |     |     /// `amount` is then deducted from the caller's allowance.
 33 |     |     function transferFrom(address from, address to, uint256 amount) external returns (bool);
 34 |     | 
 35 |     |     /// @notice Returns the name of the token.
 36 |     |     function name() external view returns (string memory);
 37 |     | 
 38 |     |     /// @notice Returns the symbol of the token.
 39 |     |     function symbol() external view returns (string memory);
 40 |     | 
 41 |     |     /// @notice Returns the decimals places of the token.
 42 |     |     function decimals() external view returns (uint8);
 43 |     | }
 44 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/interfaces/IERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2;
   3 |     | 
   4 |     | import "./IERC165.sol";
   5 |     | 
   6 |     | /// @title ERC-721 Non-Fungible Token Standard
   7 |     | /// @dev See https://eips.ethereum.org/EIPS/eip-721
   8 |     | /// Note: the ERC-165 identifier for this interface is 0x80ac58cd.
   9 |     | interface IERC721 is IERC165 {
  10 |     |     /// @dev This emits when ownership of any NFT changes by any mechanism.
  11 |     |     /// This event emits when NFTs are created (`from` == 0) and destroyed
  12 |     |     /// (`to` == 0). Exception: during contract creation, any number of NFTs
  13 |     |     /// may be created and assigned without emitting Transfer. At the time of
  14 |     |     /// any transfer, the approved address for that NFT (if any) is reset to none.
  15 |     |     event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
  16 |     | 
  17 |     |     /// @dev This emits when the approved address for an NFT is changed or
  18 |     |     /// reaffirmed. The zero address indicates there is no approved address.
  19 |     |     /// When a Transfer event emits, this also indicates that the approved
  20 |     |     /// address for that NFT (if any) is reset to none.
  21 |     |     event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
  22 |     | 
  23 |     |     /// @dev This emits when an operator is enabled or disabled for an owner.
  24 |     |     /// The operator can manage all NFTs of the owner.
  25 |     |     event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
  26 |     | 
  27 |     |     /// @notice Count all NFTs assigned to an owner
  28 |     |     /// @dev NFTs assigned to the zero address are considered invalid, and this
  29 |     |     /// function throws for queries about the zero address.
  30 |     |     /// @param _owner An address for whom to query the balance
  31 |     |     /// @return The number of NFTs owned by `_owner`, possibly zero
  32 |     |     function balanceOf(address _owner) external view returns (uint256);
  33 |     | 
  34 |     |     /// @notice Find the owner of an NFT
  35 |     |     /// @dev NFTs assigned to zero address are considered invalid, and queries
  36 |     |     /// about them do throw.
  37 |     |     /// @param _tokenId The identifier for an NFT
  38 |     |     /// @return The address of the owner of the NFT
  39 |     |     function ownerOf(uint256 _tokenId) external view returns (address);
  40 |     | 
  41 |     |     /// @notice Transfers the ownership of an NFT from one address to another address
  42 |     |     /// @dev Throws unless `msg.sender` is the current owner, an authorized
  43 |     |     /// operator, or the approved address for this NFT. Throws if `_from` is
  44 |     |     /// not the current owner. Throws if `_to` is the zero address. Throws if
  45 |     |     /// `_tokenId` is not a valid NFT. When transfer is complete, this function
  46 |     |     /// checks if `_to` is a smart contract (code size > 0). If so, it calls
  47 |     |     /// `onERC721Received` on `_to` and throws if the return value is not
  48 |     |     /// `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
  49 |     |     /// @param _from The current owner of the NFT
  50 |     |     /// @param _to The new owner
  51 |     |     /// @param _tokenId The NFT to transfer
  52 |     |     /// @param data Additional data with no specified format, sent in call to `_to`
  53 |     |     function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;
  54 |     | 
  55 |     |     /// @notice Transfers the ownership of an NFT from one address to another address
  56 |     |     /// @dev This works identically to the other function with an extra data parameter,
  57 |     |     /// except this function just sets data to "".
  58 |     |     /// @param _from The current owner of the NFT
  59 |     |     /// @param _to The new owner
  60 |     |     /// @param _tokenId The NFT to transfer
  61 |     |     function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;
  62 |     | 
  63 |     |     /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
  64 |     |     /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
  65 |     |     /// THEY MAY BE PERMANENTLY LOST
  66 |     |     /// @dev Throws unless `msg.sender` is the current owner, an authorized
  67 |     |     /// operator, or the approved address for this NFT. Throws if `_from` is
  68 |     |     /// not the current owner. Throws if `_to` is the zero address. Throws if
  69 |     |     /// `_tokenId` is not a valid NFT.
  70 |     |     /// @param _from The current owner of the NFT
  71 |     |     /// @param _to The new owner
  72 |     |     /// @param _tokenId The NFT to transfer
  73 |     |     function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
  74 |     | 
  75 |     |     /// @notice Change or reaffirm the approved address for an NFT
  76 |     |     /// @dev The zero address indicates there is no approved address.
  77 |     |     /// Throws unless `msg.sender` is the current NFT owner, or an authorized
  78 |     |     /// operator of the current owner.
  79 |     |     /// @param _approved The new approved NFT controller
  80 |     |     /// @param _tokenId The NFT to approve
  81 |     |     function approve(address _approved, uint256 _tokenId) external payable;
  82 |     | 
  83 |     |     /// @notice Enable or disable approval for a third party ("operator") to manage
  84 |     |     /// all of `msg.sender`'s assets
  85 |     |     /// @dev Emits the ApprovalForAll event. The contract MUST allow
  86 |     |     /// multiple operators per owner.
  87 |     |     /// @param _operator Address to add to the set of authorized operators
  88 |     |     /// @param _approved True if the operator is approved, false to revoke approval
  89 |     |     function setApprovalForAll(address _operator, bool _approved) external;
  90 |     | 
  91 |     |     /// @notice Get the approved address for a single NFT
  92 |     |     /// @dev Throws if `_tokenId` is not a valid NFT.
  93 |     |     /// @param _tokenId The NFT to find the approved address for
  94 |     |     /// @return The approved address for this NFT, or the zero address if there is none
  95 |     |     function getApproved(uint256 _tokenId) external view returns (address);
  96 |     | 
  97 |     |     /// @notice Query if an address is an authorized operator for another address
  98 |     |     /// @param _owner The address that owns the NFTs
  99 |     |     /// @param _operator The address that acts on behalf of the owner
 100 |     |     /// @return True if `_operator` is an approved operator for `_owner`, false otherwise
 101 |     |     function isApprovedForAll(address _owner, address _operator) external view returns (bool);
 102 |     | }
 103 |     | 
 104 |     | /// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.
 105 |     | interface IERC721TokenReceiver {
 106 |     |     /// @notice Handle the receipt of an NFT
 107 |     |     /// @dev The ERC721 smart contract calls this function on the recipient
 108 |     |     /// after a `transfer`. This function MAY throw to revert and reject the
 109 |     |     /// transfer. Return of other than the magic value MUST result in the
 110 |     |     /// transaction being reverted.
 111 |     |     /// Note: the contract address is always the message sender.
 112 |     |     /// @param _operator The address which called `safeTransferFrom` function
 113 |     |     /// @param _from The address which previously owned the token
 114 |     |     /// @param _tokenId The NFT identifier which is being transferred
 115 |     |     /// @param _data Additional data with no specified format
 116 |     |     /// @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
 117 |     |     ///  unless throwing
 118 |     |     function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)
 119 |     |         external
 120 |     |         returns (bytes4);
 121 |     | }
 122 |     | 
 123 |     | /// @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 124 |     | /// @dev See https://eips.ethereum.org/EIPS/eip-721
 125 |     | /// Note: the ERC-165 identifier for this interface is 0x5b5e139f.
 126 |     | interface IERC721Metadata is IERC721 {
 127 |     |     /// @notice A descriptive name for a collection of NFTs in this contract
 128 |     |     function name() external view returns (string memory _name);
 129 |     | 
 130 |     |     /// @notice An abbreviated name for NFTs in this contract
 131 |     |     function symbol() external view returns (string memory _symbol);
 132 |     | 
 133 |     |     /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
 134 |     |     /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC
 135 |     |     /// 3986. The URI may point to a JSON file that conforms to the "ERC721
 136 |     |     /// Metadata JSON Schema".
 137 |     |     function tokenURI(uint256 _tokenId) external view returns (string memory);
 138 |     | }
 139 |     | 
 140 |     | /// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 141 |     | /// @dev See https://eips.ethereum.org/EIPS/eip-721
 142 |     | /// Note: the ERC-165 identifier for this interface is 0x780e9d63.
 143 |     | interface IERC721Enumerable is IERC721 {
 144 |     |     /// @notice Count NFTs tracked by this contract
 145 |     |     /// @return A count of valid NFTs tracked by this contract, where each one of
 146 |     |     /// them has an assigned and queryable owner not equal to the zero address
 147 |     |     function totalSupply() external view returns (uint256);
 148 |     | 
 149 |     |     /// @notice Enumerate valid NFTs
 150 |     |     /// @dev Throws if `_index` >= `totalSupply()`.
 151 |     |     /// @param _index A counter less than `totalSupply()`
 152 |     |     /// @return The token identifier for the `_index`th NFT,
 153 |     |     /// (sort order not specified)
 154 |     |     function tokenByIndex(uint256 _index) external view returns (uint256);
 155 |     | 
 156 |     |     /// @notice Enumerate NFTs assigned to an owner
 157 |     |     /// @dev Throws if `_index` >= `balanceOf(_owner)` or if
 158 |     |     /// `_owner` is the zero address, representing invalid NFTs.
 159 |     |     /// @param _owner An address where we are interested in NFTs owned by them
 160 |     |     /// @param _index A counter less than `balanceOf(_owner)`
 161 |     |     /// @return The token identifier for the `_index`th NFT assigned to `_owner`,
 162 |     |     /// (sort order not specified)
 163 |     |     function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);
 164 |     | }
 165 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/interfaces/IMulticall3.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity >=0.6.2 <0.9.0;
  3 |     | 
  4 |     | pragma experimental ABIEncoderV2;
  5 |     | 
  6 |     | interface IMulticall3 {
  7 |     |     struct Call {
  8 |     |         address target;
  9 |     |         bytes callData;
 10 |     |     }
 11 |     | 
 12 |     |     struct Call3 {
 13 |     |         address target;
 14 |     |         bool allowFailure;
 15 |     |         bytes callData;
 16 |     |     }
 17 |     | 
 18 |     |     struct Call3Value {
 19 |     |         address target;
 20 |     |         bool allowFailure;
 21 |     |         uint256 value;
 22 |     |         bytes callData;
 23 |     |     }
 24 |     | 
 25 |     |     struct Result {
 26 |     |         bool success;
 27 |     |         bytes returnData;
 28 |     |     }
 29 |     | 
 30 |     |     function aggregate(Call[] calldata calls)
 31 |     |         external
 32 |     |         payable
 33 |     |         returns (uint256 blockNumber, bytes[] memory returnData);
 34 |     | 
 35 |     |     function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);
 36 |     | 
 37 |     |     function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);
 38 |     | 
 39 |     |     function blockAndAggregate(Call[] calldata calls)
 40 |     |         external
 41 |     |         payable
 42 |     |         returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
 43 |     | 
 44 |     |     function getBasefee() external view returns (uint256 basefee);
 45 |     | 
 46 |     |     function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);
 47 |     | 
 48 |     |     function getBlockNumber() external view returns (uint256 blockNumber);
 49 |     | 
 50 |     |     function getChainId() external view returns (uint256 chainid);
 51 |     | 
 52 |     |     function getCurrentBlockCoinbase() external view returns (address coinbase);
 53 |     | 
 54 |     |     function getCurrentBlockDifficulty() external view returns (uint256 difficulty);
 55 |     | 
 56 |     |     function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);
 57 |     | 
 58 |     |     function getCurrentBlockTimestamp() external view returns (uint256 timestamp);
 59 |     | 
 60 |     |     function getEthBalance(address addr) external view returns (uint256 balance);
 61 |     | 
 62 |     |     function getLastBlockHash() external view returns (bytes32 blockHash);
 63 |     | 
 64 |     |     function tryAggregate(bool requireSuccess, Call[] calldata calls)
 65 |     |         external
 66 |     |         payable
 67 |     |         returns (Result[] memory returnData);
 68 |     | 
 69 |     |     function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)
 70 |     |         external
 71 |     |         payable
 72 |     |         returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);
 73 |     | }
 74 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/mocks/MockERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {IERC20} from "../interfaces/IERC20.sol";
   5 |     | 
   6 |     | /// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.
   7 |     | /// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol
   8 |     | contract MockERC20 is IERC20 {
   9 |     |     /*//////////////////////////////////////////////////////////////
  10 |     |                             METADATA STORAGE
  11 |     |     //////////////////////////////////////////////////////////////*/
  12 |     | 
  13 |     |     string internal _name;
  14 |     | 
  15 |     |     string internal _symbol;
  16 |     | 
  17 |     |     uint8 internal _decimals;
  18 |     | 
  19 |     |     function name() external view override returns (string memory) {
  20 |     |         return _name;
  21 |     |     }
  22 |     | 
  23 |     |     function symbol() external view override returns (string memory) {
  24 |     |         return _symbol;
  25 |     |     }
  26 |     | 
  27 |     |     function decimals() external view override returns (uint8) {
  28 |     |         return _decimals;
  29 |     |     }
  30 |     | 
  31 |     |     /*//////////////////////////////////////////////////////////////
  32 |     |                               ERC20 STORAGE
  33 |     |     //////////////////////////////////////////////////////////////*/
  34 |     | 
  35 |     |     uint256 internal _totalSupply;
  36 |     | 
  37 |     |     mapping(address => uint256) internal _balanceOf;
  38 |     | 
  39 |     |     mapping(address => mapping(address => uint256)) internal _allowance;
  40 |     | 
  41 |     |     function totalSupply() external view override returns (uint256) {
  42 |     |         return _totalSupply;
  43 |     |     }
  44 |     | 
  45 |     |     function balanceOf(address owner) external view override returns (uint256) {
  46 |     |         return _balanceOf[owner];
  47 |     |     }
  48 |     | 
  49 |     |     function allowance(address owner, address spender) external view override returns (uint256) {
  50 |     |         return _allowance[owner][spender];
  51 |     |     }
  52 |     | 
  53 |     |     /*//////////////////////////////////////////////////////////////
  54 |     |                             EIP-2612 STORAGE
  55 |     |     //////////////////////////////////////////////////////////////*/
  56 |     | 
  57 |     |     uint256 internal INITIAL_CHAIN_ID;
  58 |     | 
  59 |     |     bytes32 internal INITIAL_DOMAIN_SEPARATOR;
  60 |     | 
  61 |     |     mapping(address => uint256) public nonces;
  62 |     | 
  63 |     |     /*//////////////////////////////////////////////////////////////
  64 |     |                                INITIALIZE
  65 |     |     //////////////////////////////////////////////////////////////*/
  66 |     | 
  67 |     |     /// @dev A bool to track whether the contract has been initialized.
  68 |     |     bool private initialized;
  69 |     | 
  70 |     |     /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and
  71 |     |     /// syntaxes, we add an initialization function that can be called only once.
  72 |     |     function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {
  73 |     |         require(!initialized, "ALREADY_INITIALIZED");
  74 |     | 
  75 |     |         _name = name_;
  76 |     |         _symbol = symbol_;
  77 |     |         _decimals = decimals_;
  78 |     | 
  79 |     |         INITIAL_CHAIN_ID = _pureChainId();
  80 |     |         INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
  81 |     | 
  82 |     |         initialized = true;
  83 |     |     }
  84 |     | 
  85 |     |     /*//////////////////////////////////////////////////////////////
  86 |     |                                ERC20 LOGIC
  87 |     |     //////////////////////////////////////////////////////////////*/
  88 |     | 
  89 |     |     function approve(address spender, uint256 amount) public virtual override returns (bool) {
  90 |     |         _allowance[msg.sender][spender] = amount;
  91 |     | 
  92 |     |         emit Approval(msg.sender, spender, amount);
  93 |     | 
  94 |     |         return true;
  95 |     |     }
  96 |     | 
  97 |     |     function transfer(address to, uint256 amount) public virtual override returns (bool) {
  98 |     |         _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);
  99 |     |         _balanceOf[to] = _add(_balanceOf[to], amount);
 100 |     | 
 101 |     |         emit Transfer(msg.sender, to, amount);
 102 |     | 
 103 |     |         return true;
 104 |     |     }
 105 |     | 
 106 |     |     function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
 107 |     |         uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.
 108 |     | 
 109 |     |         if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);
 110 |     | 
 111 |     |         _balanceOf[from] = _sub(_balanceOf[from], amount);
 112 |     |         _balanceOf[to] = _add(_balanceOf[to], amount);
 113 |     | 
 114 |     |         emit Transfer(from, to, amount);
 115 |     | 
 116 |     |         return true;
 117 |     |     }
 118 |     | 
 119 |     |     /*//////////////////////////////////////////////////////////////
 120 |     |                              EIP-2612 LOGIC
 121 |     |     //////////////////////////////////////////////////////////////*/
 122 |     | 
 123 |     |     function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
 124 |     |         public
 125 |     |         virtual
 126 |     |     {
 127 |     |         require(deadline >= block.timestamp, "PERMIT_DEADLINE_EXPIRED");
 128 |     | 
 129 |     |         address recoveredAddress = ecrecover(
 130 |     |             keccak256(
 131 |     |                 abi.encodePacked(
 132 |     |                     "\x19\x01",
 133 |     |                     DOMAIN_SEPARATOR(),
 134 |     |                     keccak256(
 135 |     |                         abi.encode(
 136 |     |                             keccak256(
 137 |     |                                 "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
 138 |     |                             ),
 139 |     |                             owner,
 140 |     |                             spender,
 141 |     |                             value,
 142 |     |                             nonces[owner]++,
 143 |     |                             deadline
 144 |     |                         )
 145 |     |                     )
 146 |     |                 )
 147 |     |             ),
 148 |     |             v,
 149 |     |             r,
 150 |     |             s
 151 |     |         );
 152 |     | 
 153 |     |         require(recoveredAddress != address(0) && recoveredAddress == owner, "INVALID_SIGNER");
 154 |     | 
 155 |     |         _allowance[recoveredAddress][spender] = value;
 156 |     | 
 157 |     |         emit Approval(owner, spender, value);
 158 |     |     }
 159 |     | 
 160 |     |     function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {
 161 |     |         return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();
 162 |     |     }
 163 |     | 
 164 |     |     function computeDomainSeparator() internal view virtual returns (bytes32) {
 165 |     |         return keccak256(
 166 |     |             abi.encode(
 167 |     |                 keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
 168 |     |                 keccak256(bytes(_name)),
 169 |     |                 keccak256("1"),
 170 |     |                 _pureChainId(),
 171 |     |                 address(this)
 172 |     |             )
 173 |     |         );
 174 |     |     }
 175 |     | 
 176 |     |     /*//////////////////////////////////////////////////////////////
 177 |     |                         INTERNAL MINT/BURN LOGIC
 178 |     |     //////////////////////////////////////////////////////////////*/
 179 |     | 
 180 |     |     function _mint(address to, uint256 amount) internal virtual {
 181 |     |         _totalSupply = _add(_totalSupply, amount);
 182 |     |         _balanceOf[to] = _add(_balanceOf[to], amount);
 183 |     | 
 184 |     |         emit Transfer(address(0), to, amount);
 185 |     |     }
 186 |     | 
 187 |     |     function _burn(address from, uint256 amount) internal virtual {
 188 |     |         _balanceOf[from] = _sub(_balanceOf[from], amount);
 189 |     |         _totalSupply = _sub(_totalSupply, amount);
 190 |     | 
 191 |     |         emit Transfer(from, address(0), amount);
 192 |     |     }
 193 |     | 
 194 |     |     /*//////////////////////////////////////////////////////////////
 195 |     |                         INTERNAL SAFE MATH LOGIC
 196 |     |     //////////////////////////////////////////////////////////////*/
 197 |     | 
 198 |     |     function _add(uint256 a, uint256 b) internal pure returns (uint256) {
 199 |     |         uint256 c = a + b;
 200 |     |         require(c >= a, "ERC20: addition overflow");
 201 |     |         return c;
 202 |     |     }
 203 |     | 
 204 |     |     function _sub(uint256 a, uint256 b) internal pure returns (uint256) {
 205 |     |         require(a >= b, "ERC20: subtraction underflow");
 206 |     |         return a - b;
 207 |     |     }
 208 |     | 
 209 |     |     /*//////////////////////////////////////////////////////////////
 210 |     |                                 HELPERS
 211 |     |     //////////////////////////////////////////////////////////////*/
 212 |     | 
 213 |     |     // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no
 214 |     |     // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We
 215 |     |     // can't simply access the chain ID in a normal view or pure function because the solc View Pure
 216 |     |     // Checker changed `chainid` from pure to view in 0.8.0.
 217 |     |     function _viewChainId() private view returns (uint256 chainId) {
 218 |     |         // Assembly required since `block.chainid` was introduced in 0.8.0.
 219 |     |         assembly {
 220 |     |             chainId := chainid()
 221 |     |         }
 222 |     | 
 223 |     |         address(this); // Silence warnings in older Solc versions.
 224 |     |     }
 225 |     | 
 226 |     |     function _pureChainId() private pure returns (uint256 chainId) {
 227 |     |         function() internal view returns (uint256) fnIn = _viewChainId;
 228 |     |         function() internal pure returns (uint256) pureChainId;
 229 |     |         assembly {
 230 |     |             pureChainId := fnIn
 231 |     |         }
 232 |     |         chainId = pureChainId();
 233 |     |     }
 234 |     | }
 235 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/mocks/MockERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity >=0.6.2 <0.9.0;
   3 |     | 
   4 |     | import {IERC721Metadata, IERC721TokenReceiver} from "../interfaces/IERC721.sol";
   5 |     | 
   6 |     | /// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.
   7 |     | /// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol
   8 |     | contract MockERC721 is IERC721Metadata {
   9 |     |     /*//////////////////////////////////////////////////////////////
  10 |     |                          METADATA STORAGE/LOGIC
  11 |     |     //////////////////////////////////////////////////////////////*/
  12 |     | 
  13 |     |     string internal _name;
  14 |     | 
  15 |     |     string internal _symbol;
  16 |     | 
  17 |     |     function name() external view override returns (string memory) {
  18 |     |         return _name;
  19 |     |     }
  20 |     | 
  21 |     |     function symbol() external view override returns (string memory) {
  22 |     |         return _symbol;
  23 |     |     }
  24 |     | 
  25 |     |     function tokenURI(uint256 id) public view virtual override returns (string memory) {}
  26 |     | 
  27 |     |     /*//////////////////////////////////////////////////////////////
  28 |     |                       ERC721 BALANCE/OWNER STORAGE
  29 |     |     //////////////////////////////////////////////////////////////*/
  30 |     | 
  31 |     |     mapping(uint256 => address) internal _ownerOf;
  32 |     | 
  33 |     |     mapping(address => uint256) internal _balanceOf;
  34 |     | 
  35 |     |     function ownerOf(uint256 id) public view virtual override returns (address owner) {
  36 |     |         require((owner = _ownerOf[id]) != address(0), "NOT_MINTED");
  37 |     |     }
  38 |     | 
  39 |     |     function balanceOf(address owner) public view virtual override returns (uint256) {
  40 |     |         require(owner != address(0), "ZERO_ADDRESS");
  41 |     | 
  42 |     |         return _balanceOf[owner];
  43 |     |     }
  44 |     | 
  45 |     |     /*//////////////////////////////////////////////////////////////
  46 |     |                          ERC721 APPROVAL STORAGE
  47 |     |     //////////////////////////////////////////////////////////////*/
  48 |     | 
  49 |     |     mapping(uint256 => address) internal _getApproved;
  50 |     | 
  51 |     |     mapping(address => mapping(address => bool)) internal _isApprovedForAll;
  52 |     | 
  53 |     |     function getApproved(uint256 id) public view virtual override returns (address) {
  54 |     |         return _getApproved[id];
  55 |     |     }
  56 |     | 
  57 |     |     function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
  58 |     |         return _isApprovedForAll[owner][operator];
  59 |     |     }
  60 |     | 
  61 |     |     /*//////////////////////////////////////////////////////////////
  62 |     |                                INITIALIZE
  63 |     |     //////////////////////////////////////////////////////////////*/
  64 |     | 
  65 |     |     /// @dev A bool to track whether the contract has been initialized.
  66 |     |     bool private initialized;
  67 |     | 
  68 |     |     /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and
  69 |     |     /// syntaxes, we add an initialization function that can be called only once.
  70 |     |     function initialize(string memory name_, string memory symbol_) public {
  71 |     |         require(!initialized, "ALREADY_INITIALIZED");
  72 |     | 
  73 |     |         _name = name_;
  74 |     |         _symbol = symbol_;
  75 |     | 
  76 |     |         initialized = true;
  77 |     |     }
  78 |     | 
  79 |     |     /*//////////////////////////////////////////////////////////////
  80 |     |                               ERC721 LOGIC
  81 |     |     //////////////////////////////////////////////////////////////*/
  82 |     | 
  83 |     |     function approve(address spender, uint256 id) public payable virtual override {
  84 |     |         address owner = _ownerOf[id];
  85 |     | 
  86 |     |         require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], "NOT_AUTHORIZED");
  87 |     | 
  88 |     |         _getApproved[id] = spender;
  89 |     | 
  90 |     |         emit Approval(owner, spender, id);
  91 |     |     }
  92 |     | 
  93 |     |     function setApprovalForAll(address operator, bool approved) public virtual override {
  94 |     |         _isApprovedForAll[msg.sender][operator] = approved;
  95 |     | 
  96 |     |         emit ApprovalForAll(msg.sender, operator, approved);
  97 |     |     }
  98 |     | 
  99 |     |     function transferFrom(address from, address to, uint256 id) public payable virtual override {
 100 |     |         require(from == _ownerOf[id], "WRONG_FROM");
 101 |     | 
 102 |     |         require(to != address(0), "INVALID_RECIPIENT");
 103 |     | 
 104 |     |         require(
 105 |     |             msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id],
 106 |     |             "NOT_AUTHORIZED"
 107 |     |         );
 108 |     | 
 109 |     |         // Underflow of the sender's balance is impossible because we check for
 110 |     |         // ownership above and the recipient's balance can't realistically overflow.
 111 |     |         _balanceOf[from]--;
 112 |     | 
 113 |     |         _balanceOf[to]++;
 114 |     | 
 115 |     |         _ownerOf[id] = to;
 116 |     | 
 117 |     |         delete _getApproved[id];
 118 |     | 
 119 |     |         emit Transfer(from, to, id);
 120 |     |     }
 121 |     | 
 122 |     |     function safeTransferFrom(address from, address to, uint256 id) public payable virtual override {
 123 |     |         transferFrom(from, to, id);
 124 |     | 
 125 |     |         require(
 126 |     |             !_isContract(to)
 127 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, "")
 128 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 129 |     |             "UNSAFE_RECIPIENT"
 130 |     |         );
 131 |     |     }
 132 |     | 
 133 |     |     function safeTransferFrom(address from, address to, uint256 id, bytes memory data)
 134 |     |         public
 135 |     |         payable
 136 |     |         virtual
 137 |     |         override
 138 |     |     {
 139 |     |         transferFrom(from, to, id);
 140 |     | 
 141 |     |         require(
 142 |     |             !_isContract(to)
 143 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)
 144 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 145 |     |             "UNSAFE_RECIPIENT"
 146 |     |         );
 147 |     |     }
 148 |     | 
 149 |     |     /*//////////////////////////////////////////////////////////////
 150 |     |                               ERC165 LOGIC
 151 |     |     //////////////////////////////////////////////////////////////*/
 152 |     | 
 153 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 154 |     |         return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165
 155 |     |             || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721
 156 |     |             || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata
 157 |     |     }
 158 |     | 
 159 |     |     /*//////////////////////////////////////////////////////////////
 160 |     |                         INTERNAL MINT/BURN LOGIC
 161 |     |     //////////////////////////////////////////////////////////////*/
 162 |     | 
 163 |     |     function _mint(address to, uint256 id) internal virtual {
 164 |     |         require(to != address(0), "INVALID_RECIPIENT");
 165 |     | 
 166 |     |         require(_ownerOf[id] == address(0), "ALREADY_MINTED");
 167 |     | 
 168 |     |         // Counter overflow is incredibly unrealistic.
 169 |     | 
 170 |     |         _balanceOf[to]++;
 171 |     | 
 172 |     |         _ownerOf[id] = to;
 173 |     | 
 174 |     |         emit Transfer(address(0), to, id);
 175 |     |     }
 176 |     | 
 177 |     |     function _burn(uint256 id) internal virtual {
 178 |     |         address owner = _ownerOf[id];
 179 |     | 
 180 |     |         require(owner != address(0), "NOT_MINTED");
 181 |     | 
 182 |     |         _balanceOf[owner]--;
 183 |     | 
 184 |     |         delete _ownerOf[id];
 185 |     | 
 186 |     |         delete _getApproved[id];
 187 |     | 
 188 |     |         emit Transfer(owner, address(0), id);
 189 |     |     }
 190 |     | 
 191 |     |     /*//////////////////////////////////////////////////////////////
 192 |     |                         INTERNAL SAFE MINT LOGIC
 193 |     |     //////////////////////////////////////////////////////////////*/
 194 |     | 
 195 |     |     function _safeMint(address to, uint256 id) internal virtual {
 196 |     |         _mint(to, id);
 197 |     | 
 198 |     |         require(
 199 |     |             !_isContract(to)
 200 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, "")
 201 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 202 |     |             "UNSAFE_RECIPIENT"
 203 |     |         );
 204 |     |     }
 205 |     | 
 206 |     |     function _safeMint(address to, uint256 id, bytes memory data) internal virtual {
 207 |     |         _mint(to, id);
 208 |     | 
 209 |     |         require(
 210 |     |             !_isContract(to)
 211 |     |                 || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)
 212 |     |                     == IERC721TokenReceiver.onERC721Received.selector,
 213 |     |             "UNSAFE_RECIPIENT"
 214 |     |         );
 215 |     |     }
 216 |     | 
 217 |     |     /*//////////////////////////////////////////////////////////////
 218 |     |                                 HELPERS
 219 |     |     //////////////////////////////////////////////////////////////*/
 220 |     | 
 221 |     |     function _isContract(address _addr) private view returns (bool) {
 222 |     |         uint256 codeLength;
 223 |     | 
 224 |     |         // Assembly required for versions < 0.8.0 to check extcodesize.
 225 |     |         assembly {
 226 |     |             codeLength := extcodesize(_addr)
 227 |     |         }
 228 |     | 
 229 |     |         return codeLength > 0;
 230 |     |     }
 231 |     | }
 232 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/forge-std/src/safeconsole.sol
     1 |     | // SPDX-License-Identifier: MIT
     2 |     | pragma solidity >=0.6.2 <0.9.0;
     3 |     | 
     4 |     | /// @author philogy <https://github.com/philogy>
     5 |     | /// @dev Code generated automatically by script.
     6 |     | library safeconsole {
     7 |     |     uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;
     8 |     | 
     9 |     |     // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)
    10 |     |     // for the view-to-pure log trick.
    11 |     |     function _sendLogPayload(uint256 offset, uint256 size) private pure {
    12 |     |         function(uint256, uint256) internal view fnIn = _sendLogPayloadView;
    13 |     |         function(uint256, uint256) internal pure pureSendLogPayload;
    14 |     |         /// @solidity memory-safe-assembly
    15 |     |         assembly {
    16 |     |             pureSendLogPayload := fnIn
    17 |     |         }
    18 |     |         pureSendLogPayload(offset, size);
    19 |     |     }
    20 |     | 
    21 |     |     function _sendLogPayloadView(uint256 offset, uint256 size) private view {
    22 |     |         /// @solidity memory-safe-assembly
    23 |     |         assembly {
    24 |     |             pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))
    25 |     |         }
    26 |     |     }
    27 |     | 
    28 |     |     function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {
    29 |     |         function(uint256, uint256, uint256) internal view fnIn = _memcopyView;
    30 |     |         function(uint256, uint256, uint256) internal pure pureMemcopy;
    31 |     |         /// @solidity memory-safe-assembly
    32 |     |         assembly {
    33 |     |             pureMemcopy := fnIn
    34 |     |         }
    35 |     |         pureMemcopy(fromOffset, toOffset, length);
    36 |     |     }
    37 |     | 
    38 |     |     function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {
    39 |     |         /// @solidity memory-safe-assembly
    40 |     |         assembly {
    41 |     |             pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))
    42 |     |         }
    43 |     |     }
    44 |     | 
    45 |     |     function logMemory(uint256 offset, uint256 length) internal pure {
    46 |     |         if (offset >= 0x60) {
    47 |     |             // Sufficient memory before slice to prepare call header.
    48 |     |             bytes32 m0;
    49 |     |             bytes32 m1;
    50 |     |             bytes32 m2;
    51 |     |             /// @solidity memory-safe-assembly
    52 |     |             assembly {
    53 |     |                 m0 := mload(sub(offset, 0x60))
    54 |     |                 m1 := mload(sub(offset, 0x40))
    55 |     |                 m2 := mload(sub(offset, 0x20))
    56 |     |                 // Selector of `log(bytes)`.
    57 |     |                 mstore(sub(offset, 0x60), 0x0be77f56)
    58 |     |                 mstore(sub(offset, 0x40), 0x20)
    59 |     |                 mstore(sub(offset, 0x20), length)
    60 |     |             }
    61 |     |             _sendLogPayload(offset - 0x44, length + 0x44);
    62 |     |             /// @solidity memory-safe-assembly
    63 |     |             assembly {
    64 |     |                 mstore(sub(offset, 0x60), m0)
    65 |     |                 mstore(sub(offset, 0x40), m1)
    66 |     |                 mstore(sub(offset, 0x20), m2)
    67 |     |             }
    68 |     |         } else {
    69 |     |             // Insufficient space, so copy slice forward, add header and reverse.
    70 |     |             bytes32 m0;
    71 |     |             bytes32 m1;
    72 |     |             bytes32 m2;
    73 |     |             uint256 endOffset = offset + length;
    74 |     |             /// @solidity memory-safe-assembly
    75 |     |             assembly {
    76 |     |                 m0 := mload(add(endOffset, 0x00))
    77 |     |                 m1 := mload(add(endOffset, 0x20))
    78 |     |                 m2 := mload(add(endOffset, 0x40))
    79 |     |             }
    80 |     |             _memcopy(offset, offset + 0x60, length);
    81 |     |             /// @solidity memory-safe-assembly
    82 |     |             assembly {
    83 |     |                 // Selector of `log(bytes)`.
    84 |     |                 mstore(add(offset, 0x00), 0x0be77f56)
    85 |     |                 mstore(add(offset, 0x20), 0x20)
    86 |     |                 mstore(add(offset, 0x40), length)
    87 |     |             }
    88 |     |             _sendLogPayload(offset + 0x1c, length + 0x44);
    89 |     |             _memcopy(offset + 0x60, offset, length);
    90 |     |             /// @solidity memory-safe-assembly
    91 |     |             assembly {
    92 |     |                 mstore(add(endOffset, 0x00), m0)
    93 |     |                 mstore(add(endOffset, 0x20), m1)
    94 |     |                 mstore(add(endOffset, 0x40), m2)
    95 |     |             }
    96 |     |         }
    97 |     |     }
    98 |     | 
    99 |     |     function log(address p0) internal pure {
   100 |     |         bytes32 m0;
   101 |     |         bytes32 m1;
   102 |     |         /// @solidity memory-safe-assembly
   103 |     |         assembly {
   104 |     |             m0 := mload(0x00)
   105 |     |             m1 := mload(0x20)
   106 |     |             // Selector of `log(address)`.
   107 |     |             mstore(0x00, 0x2c2ecbc2)
   108 |     |             mstore(0x20, p0)
   109 |     |         }
   110 |     |         _sendLogPayload(0x1c, 0x24);
   111 |     |         /// @solidity memory-safe-assembly
   112 |     |         assembly {
   113 |     |             mstore(0x00, m0)
   114 |     |             mstore(0x20, m1)
   115 |     |         }
   116 |     |     }
   117 |     | 
   118 |     |     function log(bool p0) internal pure {
   119 |     |         bytes32 m0;
   120 |     |         bytes32 m1;
   121 |     |         /// @solidity memory-safe-assembly
   122 |     |         assembly {
   123 |     |             m0 := mload(0x00)
   124 |     |             m1 := mload(0x20)
   125 |     |             // Selector of `log(bool)`.
   126 |     |             mstore(0x00, 0x32458eed)
   127 |     |             mstore(0x20, p0)
   128 |     |         }
   129 |     |         _sendLogPayload(0x1c, 0x24);
   130 |     |         /// @solidity memory-safe-assembly
   131 |     |         assembly {
   132 |     |             mstore(0x00, m0)
   133 |     |             mstore(0x20, m1)
   134 |     |         }
   135 |     |     }
   136 |     | 
   137 |     |     function log(uint256 p0) internal pure {
   138 |     |         bytes32 m0;
   139 |     |         bytes32 m1;
   140 |     |         /// @solidity memory-safe-assembly
   141 |     |         assembly {
   142 |     |             m0 := mload(0x00)
   143 |     |             m1 := mload(0x20)
   144 |     |             // Selector of `log(uint256)`.
   145 |     |             mstore(0x00, 0xf82c50f1)
   146 |     |             mstore(0x20, p0)
   147 |     |         }
   148 |     |         _sendLogPayload(0x1c, 0x24);
   149 |     |         /// @solidity memory-safe-assembly
   150 |     |         assembly {
   151 |     |             mstore(0x00, m0)
   152 |     |             mstore(0x20, m1)
   153 |     |         }
   154 |     |     }
   155 |     | 
   156 |     |     function log(bytes32 p0) internal pure {
   157 |     |         bytes32 m0;
   158 |     |         bytes32 m1;
   159 |     |         bytes32 m2;
   160 |     |         bytes32 m3;
   161 |     |         /// @solidity memory-safe-assembly
   162 |     |         assembly {
   163 |     |             function writeString(pos, w) {
   164 |     |                 let length := 0
   165 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   166 |     |                 mstore(pos, length)
   167 |     |                 let shift := sub(256, shl(3, length))
   168 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   169 |     |             }
   170 |     |             m0 := mload(0x00)
   171 |     |             m1 := mload(0x20)
   172 |     |             m2 := mload(0x40)
   173 |     |             m3 := mload(0x60)
   174 |     |             // Selector of `log(string)`.
   175 |     |             mstore(0x00, 0x41304fac)
   176 |     |             mstore(0x20, 0x20)
   177 |     |             writeString(0x40, p0)
   178 |     |         }
   179 |     |         _sendLogPayload(0x1c, 0x64);
   180 |     |         /// @solidity memory-safe-assembly
   181 |     |         assembly {
   182 |     |             mstore(0x00, m0)
   183 |     |             mstore(0x20, m1)
   184 |     |             mstore(0x40, m2)
   185 |     |             mstore(0x60, m3)
   186 |     |         }
   187 |     |     }
   188 |     | 
   189 |     |     function log(address p0, address p1) internal pure {
   190 |     |         bytes32 m0;
   191 |     |         bytes32 m1;
   192 |     |         bytes32 m2;
   193 |     |         /// @solidity memory-safe-assembly
   194 |     |         assembly {
   195 |     |             m0 := mload(0x00)
   196 |     |             m1 := mload(0x20)
   197 |     |             m2 := mload(0x40)
   198 |     |             // Selector of `log(address,address)`.
   199 |     |             mstore(0x00, 0xdaf0d4aa)
   200 |     |             mstore(0x20, p0)
   201 |     |             mstore(0x40, p1)
   202 |     |         }
   203 |     |         _sendLogPayload(0x1c, 0x44);
   204 |     |         /// @solidity memory-safe-assembly
   205 |     |         assembly {
   206 |     |             mstore(0x00, m0)
   207 |     |             mstore(0x20, m1)
   208 |     |             mstore(0x40, m2)
   209 |     |         }
   210 |     |     }
   211 |     | 
   212 |     |     function log(address p0, bool p1) internal pure {
   213 |     |         bytes32 m0;
   214 |     |         bytes32 m1;
   215 |     |         bytes32 m2;
   216 |     |         /// @solidity memory-safe-assembly
   217 |     |         assembly {
   218 |     |             m0 := mload(0x00)
   219 |     |             m1 := mload(0x20)
   220 |     |             m2 := mload(0x40)
   221 |     |             // Selector of `log(address,bool)`.
   222 |     |             mstore(0x00, 0x75b605d3)
   223 |     |             mstore(0x20, p0)
   224 |     |             mstore(0x40, p1)
   225 |     |         }
   226 |     |         _sendLogPayload(0x1c, 0x44);
   227 |     |         /// @solidity memory-safe-assembly
   228 |     |         assembly {
   229 |     |             mstore(0x00, m0)
   230 |     |             mstore(0x20, m1)
   231 |     |             mstore(0x40, m2)
   232 |     |         }
   233 |     |     }
   234 |     | 
   235 |     |     function log(address p0, uint256 p1) internal pure {
   236 |     |         bytes32 m0;
   237 |     |         bytes32 m1;
   238 |     |         bytes32 m2;
   239 |     |         /// @solidity memory-safe-assembly
   240 |     |         assembly {
   241 |     |             m0 := mload(0x00)
   242 |     |             m1 := mload(0x20)
   243 |     |             m2 := mload(0x40)
   244 |     |             // Selector of `log(address,uint256)`.
   245 |     |             mstore(0x00, 0x8309e8a8)
   246 |     |             mstore(0x20, p0)
   247 |     |             mstore(0x40, p1)
   248 |     |         }
   249 |     |         _sendLogPayload(0x1c, 0x44);
   250 |     |         /// @solidity memory-safe-assembly
   251 |     |         assembly {
   252 |     |             mstore(0x00, m0)
   253 |     |             mstore(0x20, m1)
   254 |     |             mstore(0x40, m2)
   255 |     |         }
   256 |     |     }
   257 |     | 
   258 |     |     function log(address p0, bytes32 p1) internal pure {
   259 |     |         bytes32 m0;
   260 |     |         bytes32 m1;
   261 |     |         bytes32 m2;
   262 |     |         bytes32 m3;
   263 |     |         bytes32 m4;
   264 |     |         /// @solidity memory-safe-assembly
   265 |     |         assembly {
   266 |     |             function writeString(pos, w) {
   267 |     |                 let length := 0
   268 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   269 |     |                 mstore(pos, length)
   270 |     |                 let shift := sub(256, shl(3, length))
   271 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   272 |     |             }
   273 |     |             m0 := mload(0x00)
   274 |     |             m1 := mload(0x20)
   275 |     |             m2 := mload(0x40)
   276 |     |             m3 := mload(0x60)
   277 |     |             m4 := mload(0x80)
   278 |     |             // Selector of `log(address,string)`.
   279 |     |             mstore(0x00, 0x759f86bb)
   280 |     |             mstore(0x20, p0)
   281 |     |             mstore(0x40, 0x40)
   282 |     |             writeString(0x60, p1)
   283 |     |         }
   284 |     |         _sendLogPayload(0x1c, 0x84);
   285 |     |         /// @solidity memory-safe-assembly
   286 |     |         assembly {
   287 |     |             mstore(0x00, m0)
   288 |     |             mstore(0x20, m1)
   289 |     |             mstore(0x40, m2)
   290 |     |             mstore(0x60, m3)
   291 |     |             mstore(0x80, m4)
   292 |     |         }
   293 |     |     }
   294 |     | 
   295 |     |     function log(bool p0, address p1) internal pure {
   296 |     |         bytes32 m0;
   297 |     |         bytes32 m1;
   298 |     |         bytes32 m2;
   299 |     |         /// @solidity memory-safe-assembly
   300 |     |         assembly {
   301 |     |             m0 := mload(0x00)
   302 |     |             m1 := mload(0x20)
   303 |     |             m2 := mload(0x40)
   304 |     |             // Selector of `log(bool,address)`.
   305 |     |             mstore(0x00, 0x853c4849)
   306 |     |             mstore(0x20, p0)
   307 |     |             mstore(0x40, p1)
   308 |     |         }
   309 |     |         _sendLogPayload(0x1c, 0x44);
   310 |     |         /// @solidity memory-safe-assembly
   311 |     |         assembly {
   312 |     |             mstore(0x00, m0)
   313 |     |             mstore(0x20, m1)
   314 |     |             mstore(0x40, m2)
   315 |     |         }
   316 |     |     }
   317 |     | 
   318 |     |     function log(bool p0, bool p1) internal pure {
   319 |     |         bytes32 m0;
   320 |     |         bytes32 m1;
   321 |     |         bytes32 m2;
   322 |     |         /// @solidity memory-safe-assembly
   323 |     |         assembly {
   324 |     |             m0 := mload(0x00)
   325 |     |             m1 := mload(0x20)
   326 |     |             m2 := mload(0x40)
   327 |     |             // Selector of `log(bool,bool)`.
   328 |     |             mstore(0x00, 0x2a110e83)
   329 |     |             mstore(0x20, p0)
   330 |     |             mstore(0x40, p1)
   331 |     |         }
   332 |     |         _sendLogPayload(0x1c, 0x44);
   333 |     |         /// @solidity memory-safe-assembly
   334 |     |         assembly {
   335 |     |             mstore(0x00, m0)
   336 |     |             mstore(0x20, m1)
   337 |     |             mstore(0x40, m2)
   338 |     |         }
   339 |     |     }
   340 |     | 
   341 |     |     function log(bool p0, uint256 p1) internal pure {
   342 |     |         bytes32 m0;
   343 |     |         bytes32 m1;
   344 |     |         bytes32 m2;
   345 |     |         /// @solidity memory-safe-assembly
   346 |     |         assembly {
   347 |     |             m0 := mload(0x00)
   348 |     |             m1 := mload(0x20)
   349 |     |             m2 := mload(0x40)
   350 |     |             // Selector of `log(bool,uint256)`.
   351 |     |             mstore(0x00, 0x399174d3)
   352 |     |             mstore(0x20, p0)
   353 |     |             mstore(0x40, p1)
   354 |     |         }
   355 |     |         _sendLogPayload(0x1c, 0x44);
   356 |     |         /// @solidity memory-safe-assembly
   357 |     |         assembly {
   358 |     |             mstore(0x00, m0)
   359 |     |             mstore(0x20, m1)
   360 |     |             mstore(0x40, m2)
   361 |     |         }
   362 |     |     }
   363 |     | 
   364 |     |     function log(bool p0, bytes32 p1) internal pure {
   365 |     |         bytes32 m0;
   366 |     |         bytes32 m1;
   367 |     |         bytes32 m2;
   368 |     |         bytes32 m3;
   369 |     |         bytes32 m4;
   370 |     |         /// @solidity memory-safe-assembly
   371 |     |         assembly {
   372 |     |             function writeString(pos, w) {
   373 |     |                 let length := 0
   374 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   375 |     |                 mstore(pos, length)
   376 |     |                 let shift := sub(256, shl(3, length))
   377 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   378 |     |             }
   379 |     |             m0 := mload(0x00)
   380 |     |             m1 := mload(0x20)
   381 |     |             m2 := mload(0x40)
   382 |     |             m3 := mload(0x60)
   383 |     |             m4 := mload(0x80)
   384 |     |             // Selector of `log(bool,string)`.
   385 |     |             mstore(0x00, 0x8feac525)
   386 |     |             mstore(0x20, p0)
   387 |     |             mstore(0x40, 0x40)
   388 |     |             writeString(0x60, p1)
   389 |     |         }
   390 |     |         _sendLogPayload(0x1c, 0x84);
   391 |     |         /// @solidity memory-safe-assembly
   392 |     |         assembly {
   393 |     |             mstore(0x00, m0)
   394 |     |             mstore(0x20, m1)
   395 |     |             mstore(0x40, m2)
   396 |     |             mstore(0x60, m3)
   397 |     |             mstore(0x80, m4)
   398 |     |         }
   399 |     |     }
   400 |     | 
   401 |     |     function log(uint256 p0, address p1) internal pure {
   402 |     |         bytes32 m0;
   403 |     |         bytes32 m1;
   404 |     |         bytes32 m2;
   405 |     |         /// @solidity memory-safe-assembly
   406 |     |         assembly {
   407 |     |             m0 := mload(0x00)
   408 |     |             m1 := mload(0x20)
   409 |     |             m2 := mload(0x40)
   410 |     |             // Selector of `log(uint256,address)`.
   411 |     |             mstore(0x00, 0x69276c86)
   412 |     |             mstore(0x20, p0)
   413 |     |             mstore(0x40, p1)
   414 |     |         }
   415 |     |         _sendLogPayload(0x1c, 0x44);
   416 |     |         /// @solidity memory-safe-assembly
   417 |     |         assembly {
   418 |     |             mstore(0x00, m0)
   419 |     |             mstore(0x20, m1)
   420 |     |             mstore(0x40, m2)
   421 |     |         }
   422 |     |     }
   423 |     | 
   424 |     |     function log(uint256 p0, bool p1) internal pure {
   425 |     |         bytes32 m0;
   426 |     |         bytes32 m1;
   427 |     |         bytes32 m2;
   428 |     |         /// @solidity memory-safe-assembly
   429 |     |         assembly {
   430 |     |             m0 := mload(0x00)
   431 |     |             m1 := mload(0x20)
   432 |     |             m2 := mload(0x40)
   433 |     |             // Selector of `log(uint256,bool)`.
   434 |     |             mstore(0x00, 0x1c9d7eb3)
   435 |     |             mstore(0x20, p0)
   436 |     |             mstore(0x40, p1)
   437 |     |         }
   438 |     |         _sendLogPayload(0x1c, 0x44);
   439 |     |         /// @solidity memory-safe-assembly
   440 |     |         assembly {
   441 |     |             mstore(0x00, m0)
   442 |     |             mstore(0x20, m1)
   443 |     |             mstore(0x40, m2)
   444 |     |         }
   445 |     |     }
   446 |     | 
   447 |     |     function log(uint256 p0, uint256 p1) internal pure {
   448 |     |         bytes32 m0;
   449 |     |         bytes32 m1;
   450 |     |         bytes32 m2;
   451 |     |         /// @solidity memory-safe-assembly
   452 |     |         assembly {
   453 |     |             m0 := mload(0x00)
   454 |     |             m1 := mload(0x20)
   455 |     |             m2 := mload(0x40)
   456 |     |             // Selector of `log(uint256,uint256)`.
   457 |     |             mstore(0x00, 0xf666715a)
   458 |     |             mstore(0x20, p0)
   459 |     |             mstore(0x40, p1)
   460 |     |         }
   461 |     |         _sendLogPayload(0x1c, 0x44);
   462 |     |         /// @solidity memory-safe-assembly
   463 |     |         assembly {
   464 |     |             mstore(0x00, m0)
   465 |     |             mstore(0x20, m1)
   466 |     |             mstore(0x40, m2)
   467 |     |         }
   468 |     |     }
   469 |     | 
   470 |     |     function log(uint256 p0, bytes32 p1) internal pure {
   471 |     |         bytes32 m0;
   472 |     |         bytes32 m1;
   473 |     |         bytes32 m2;
   474 |     |         bytes32 m3;
   475 |     |         bytes32 m4;
   476 |     |         /// @solidity memory-safe-assembly
   477 |     |         assembly {
   478 |     |             function writeString(pos, w) {
   479 |     |                 let length := 0
   480 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   481 |     |                 mstore(pos, length)
   482 |     |                 let shift := sub(256, shl(3, length))
   483 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   484 |     |             }
   485 |     |             m0 := mload(0x00)
   486 |     |             m1 := mload(0x20)
   487 |     |             m2 := mload(0x40)
   488 |     |             m3 := mload(0x60)
   489 |     |             m4 := mload(0x80)
   490 |     |             // Selector of `log(uint256,string)`.
   491 |     |             mstore(0x00, 0x643fd0df)
   492 |     |             mstore(0x20, p0)
   493 |     |             mstore(0x40, 0x40)
   494 |     |             writeString(0x60, p1)
   495 |     |         }
   496 |     |         _sendLogPayload(0x1c, 0x84);
   497 |     |         /// @solidity memory-safe-assembly
   498 |     |         assembly {
   499 |     |             mstore(0x00, m0)
   500 |     |             mstore(0x20, m1)
   501 |     |             mstore(0x40, m2)
   502 |     |             mstore(0x60, m3)
   503 |     |             mstore(0x80, m4)
   504 |     |         }
   505 |     |     }
   506 |     | 
   507 |     |     function log(bytes32 p0, address p1) internal pure {
   508 |     |         bytes32 m0;
   509 |     |         bytes32 m1;
   510 |     |         bytes32 m2;
   511 |     |         bytes32 m3;
   512 |     |         bytes32 m4;
   513 |     |         /// @solidity memory-safe-assembly
   514 |     |         assembly {
   515 |     |             function writeString(pos, w) {
   516 |     |                 let length := 0
   517 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   518 |     |                 mstore(pos, length)
   519 |     |                 let shift := sub(256, shl(3, length))
   520 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   521 |     |             }
   522 |     |             m0 := mload(0x00)
   523 |     |             m1 := mload(0x20)
   524 |     |             m2 := mload(0x40)
   525 |     |             m3 := mload(0x60)
   526 |     |             m4 := mload(0x80)
   527 |     |             // Selector of `log(string,address)`.
   528 |     |             mstore(0x00, 0x319af333)
   529 |     |             mstore(0x20, 0x40)
   530 |     |             mstore(0x40, p1)
   531 |     |             writeString(0x60, p0)
   532 |     |         }
   533 |     |         _sendLogPayload(0x1c, 0x84);
   534 |     |         /// @solidity memory-safe-assembly
   535 |     |         assembly {
   536 |     |             mstore(0x00, m0)
   537 |     |             mstore(0x20, m1)
   538 |     |             mstore(0x40, m2)
   539 |     |             mstore(0x60, m3)
   540 |     |             mstore(0x80, m4)
   541 |     |         }
   542 |     |     }
   543 |     | 
   544 |     |     function log(bytes32 p0, bool p1) internal pure {
   545 |     |         bytes32 m0;
   546 |     |         bytes32 m1;
   547 |     |         bytes32 m2;
   548 |     |         bytes32 m3;
   549 |     |         bytes32 m4;
   550 |     |         /// @solidity memory-safe-assembly
   551 |     |         assembly {
   552 |     |             function writeString(pos, w) {
   553 |     |                 let length := 0
   554 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   555 |     |                 mstore(pos, length)
   556 |     |                 let shift := sub(256, shl(3, length))
   557 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   558 |     |             }
   559 |     |             m0 := mload(0x00)
   560 |     |             m1 := mload(0x20)
   561 |     |             m2 := mload(0x40)
   562 |     |             m3 := mload(0x60)
   563 |     |             m4 := mload(0x80)
   564 |     |             // Selector of `log(string,bool)`.
   565 |     |             mstore(0x00, 0xc3b55635)
   566 |     |             mstore(0x20, 0x40)
   567 |     |             mstore(0x40, p1)
   568 |     |             writeString(0x60, p0)
   569 |     |         }
   570 |     |         _sendLogPayload(0x1c, 0x84);
   571 |     |         /// @solidity memory-safe-assembly
   572 |     |         assembly {
   573 |     |             mstore(0x00, m0)
   574 |     |             mstore(0x20, m1)
   575 |     |             mstore(0x40, m2)
   576 |     |             mstore(0x60, m3)
   577 |     |             mstore(0x80, m4)
   578 |     |         }
   579 |     |     }
   580 |     | 
   581 |     |     function log(bytes32 p0, uint256 p1) internal pure {
   582 |     |         bytes32 m0;
   583 |     |         bytes32 m1;
   584 |     |         bytes32 m2;
   585 |     |         bytes32 m3;
   586 |     |         bytes32 m4;
   587 |     |         /// @solidity memory-safe-assembly
   588 |     |         assembly {
   589 |     |             function writeString(pos, w) {
   590 |     |                 let length := 0
   591 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   592 |     |                 mstore(pos, length)
   593 |     |                 let shift := sub(256, shl(3, length))
   594 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   595 |     |             }
   596 |     |             m0 := mload(0x00)
   597 |     |             m1 := mload(0x20)
   598 |     |             m2 := mload(0x40)
   599 |     |             m3 := mload(0x60)
   600 |     |             m4 := mload(0x80)
   601 |     |             // Selector of `log(string,uint256)`.
   602 |     |             mstore(0x00, 0xb60e72cc)
   603 |     |             mstore(0x20, 0x40)
   604 |     |             mstore(0x40, p1)
   605 |     |             writeString(0x60, p0)
   606 |     |         }
   607 |     |         _sendLogPayload(0x1c, 0x84);
   608 |     |         /// @solidity memory-safe-assembly
   609 |     |         assembly {
   610 |     |             mstore(0x00, m0)
   611 |     |             mstore(0x20, m1)
   612 |     |             mstore(0x40, m2)
   613 |     |             mstore(0x60, m3)
   614 |     |             mstore(0x80, m4)
   615 |     |         }
   616 |     |     }
   617 |     | 
   618 |     |     function log(bytes32 p0, bytes32 p1) internal pure {
   619 |     |         bytes32 m0;
   620 |     |         bytes32 m1;
   621 |     |         bytes32 m2;
   622 |     |         bytes32 m3;
   623 |     |         bytes32 m4;
   624 |     |         bytes32 m5;
   625 |     |         bytes32 m6;
   626 |     |         /// @solidity memory-safe-assembly
   627 |     |         assembly {
   628 |     |             function writeString(pos, w) {
   629 |     |                 let length := 0
   630 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   631 |     |                 mstore(pos, length)
   632 |     |                 let shift := sub(256, shl(3, length))
   633 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   634 |     |             }
   635 |     |             m0 := mload(0x00)
   636 |     |             m1 := mload(0x20)
   637 |     |             m2 := mload(0x40)
   638 |     |             m3 := mload(0x60)
   639 |     |             m4 := mload(0x80)
   640 |     |             m5 := mload(0xa0)
   641 |     |             m6 := mload(0xc0)
   642 |     |             // Selector of `log(string,string)`.
   643 |     |             mstore(0x00, 0x4b5c4277)
   644 |     |             mstore(0x20, 0x40)
   645 |     |             mstore(0x40, 0x80)
   646 |     |             writeString(0x60, p0)
   647 |     |             writeString(0xa0, p1)
   648 |     |         }
   649 |     |         _sendLogPayload(0x1c, 0xc4);
   650 |     |         /// @solidity memory-safe-assembly
   651 |     |         assembly {
   652 |     |             mstore(0x00, m0)
   653 |     |             mstore(0x20, m1)
   654 |     |             mstore(0x40, m2)
   655 |     |             mstore(0x60, m3)
   656 |     |             mstore(0x80, m4)
   657 |     |             mstore(0xa0, m5)
   658 |     |             mstore(0xc0, m6)
   659 |     |         }
   660 |     |     }
   661 |     | 
   662 |     |     function log(address p0, address p1, address p2) internal pure {
   663 |     |         bytes32 m0;
   664 |     |         bytes32 m1;
   665 |     |         bytes32 m2;
   666 |     |         bytes32 m3;
   667 |     |         /// @solidity memory-safe-assembly
   668 |     |         assembly {
   669 |     |             m0 := mload(0x00)
   670 |     |             m1 := mload(0x20)
   671 |     |             m2 := mload(0x40)
   672 |     |             m3 := mload(0x60)
   673 |     |             // Selector of `log(address,address,address)`.
   674 |     |             mstore(0x00, 0x018c84c2)
   675 |     |             mstore(0x20, p0)
   676 |     |             mstore(0x40, p1)
   677 |     |             mstore(0x60, p2)
   678 |     |         }
   679 |     |         _sendLogPayload(0x1c, 0x64);
   680 |     |         /// @solidity memory-safe-assembly
   681 |     |         assembly {
   682 |     |             mstore(0x00, m0)
   683 |     |             mstore(0x20, m1)
   684 |     |             mstore(0x40, m2)
   685 |     |             mstore(0x60, m3)
   686 |     |         }
   687 |     |     }
   688 |     | 
   689 |     |     function log(address p0, address p1, bool p2) internal pure {
   690 |     |         bytes32 m0;
   691 |     |         bytes32 m1;
   692 |     |         bytes32 m2;
   693 |     |         bytes32 m3;
   694 |     |         /// @solidity memory-safe-assembly
   695 |     |         assembly {
   696 |     |             m0 := mload(0x00)
   697 |     |             m1 := mload(0x20)
   698 |     |             m2 := mload(0x40)
   699 |     |             m3 := mload(0x60)
   700 |     |             // Selector of `log(address,address,bool)`.
   701 |     |             mstore(0x00, 0xf2a66286)
   702 |     |             mstore(0x20, p0)
   703 |     |             mstore(0x40, p1)
   704 |     |             mstore(0x60, p2)
   705 |     |         }
   706 |     |         _sendLogPayload(0x1c, 0x64);
   707 |     |         /// @solidity memory-safe-assembly
   708 |     |         assembly {
   709 |     |             mstore(0x00, m0)
   710 |     |             mstore(0x20, m1)
   711 |     |             mstore(0x40, m2)
   712 |     |             mstore(0x60, m3)
   713 |     |         }
   714 |     |     }
   715 |     | 
   716 |     |     function log(address p0, address p1, uint256 p2) internal pure {
   717 |     |         bytes32 m0;
   718 |     |         bytes32 m1;
   719 |     |         bytes32 m2;
   720 |     |         bytes32 m3;
   721 |     |         /// @solidity memory-safe-assembly
   722 |     |         assembly {
   723 |     |             m0 := mload(0x00)
   724 |     |             m1 := mload(0x20)
   725 |     |             m2 := mload(0x40)
   726 |     |             m3 := mload(0x60)
   727 |     |             // Selector of `log(address,address,uint256)`.
   728 |     |             mstore(0x00, 0x17fe6185)
   729 |     |             mstore(0x20, p0)
   730 |     |             mstore(0x40, p1)
   731 |     |             mstore(0x60, p2)
   732 |     |         }
   733 |     |         _sendLogPayload(0x1c, 0x64);
   734 |     |         /// @solidity memory-safe-assembly
   735 |     |         assembly {
   736 |     |             mstore(0x00, m0)
   737 |     |             mstore(0x20, m1)
   738 |     |             mstore(0x40, m2)
   739 |     |             mstore(0x60, m3)
   740 |     |         }
   741 |     |     }
   742 |     | 
   743 |     |     function log(address p0, address p1, bytes32 p2) internal pure {
   744 |     |         bytes32 m0;
   745 |     |         bytes32 m1;
   746 |     |         bytes32 m2;
   747 |     |         bytes32 m3;
   748 |     |         bytes32 m4;
   749 |     |         bytes32 m5;
   750 |     |         /// @solidity memory-safe-assembly
   751 |     |         assembly {
   752 |     |             function writeString(pos, w) {
   753 |     |                 let length := 0
   754 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   755 |     |                 mstore(pos, length)
   756 |     |                 let shift := sub(256, shl(3, length))
   757 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   758 |     |             }
   759 |     |             m0 := mload(0x00)
   760 |     |             m1 := mload(0x20)
   761 |     |             m2 := mload(0x40)
   762 |     |             m3 := mload(0x60)
   763 |     |             m4 := mload(0x80)
   764 |     |             m5 := mload(0xa0)
   765 |     |             // Selector of `log(address,address,string)`.
   766 |     |             mstore(0x00, 0x007150be)
   767 |     |             mstore(0x20, p0)
   768 |     |             mstore(0x40, p1)
   769 |     |             mstore(0x60, 0x60)
   770 |     |             writeString(0x80, p2)
   771 |     |         }
   772 |     |         _sendLogPayload(0x1c, 0xa4);
   773 |     |         /// @solidity memory-safe-assembly
   774 |     |         assembly {
   775 |     |             mstore(0x00, m0)
   776 |     |             mstore(0x20, m1)
   777 |     |             mstore(0x40, m2)
   778 |     |             mstore(0x60, m3)
   779 |     |             mstore(0x80, m4)
   780 |     |             mstore(0xa0, m5)
   781 |     |         }
   782 |     |     }
   783 |     | 
   784 |     |     function log(address p0, bool p1, address p2) internal pure {
   785 |     |         bytes32 m0;
   786 |     |         bytes32 m1;
   787 |     |         bytes32 m2;
   788 |     |         bytes32 m3;
   789 |     |         /// @solidity memory-safe-assembly
   790 |     |         assembly {
   791 |     |             m0 := mload(0x00)
   792 |     |             m1 := mload(0x20)
   793 |     |             m2 := mload(0x40)
   794 |     |             m3 := mload(0x60)
   795 |     |             // Selector of `log(address,bool,address)`.
   796 |     |             mstore(0x00, 0xf11699ed)
   797 |     |             mstore(0x20, p0)
   798 |     |             mstore(0x40, p1)
   799 |     |             mstore(0x60, p2)
   800 |     |         }
   801 |     |         _sendLogPayload(0x1c, 0x64);
   802 |     |         /// @solidity memory-safe-assembly
   803 |     |         assembly {
   804 |     |             mstore(0x00, m0)
   805 |     |             mstore(0x20, m1)
   806 |     |             mstore(0x40, m2)
   807 |     |             mstore(0x60, m3)
   808 |     |         }
   809 |     |     }
   810 |     | 
   811 |     |     function log(address p0, bool p1, bool p2) internal pure {
   812 |     |         bytes32 m0;
   813 |     |         bytes32 m1;
   814 |     |         bytes32 m2;
   815 |     |         bytes32 m3;
   816 |     |         /// @solidity memory-safe-assembly
   817 |     |         assembly {
   818 |     |             m0 := mload(0x00)
   819 |     |             m1 := mload(0x20)
   820 |     |             m2 := mload(0x40)
   821 |     |             m3 := mload(0x60)
   822 |     |             // Selector of `log(address,bool,bool)`.
   823 |     |             mstore(0x00, 0xeb830c92)
   824 |     |             mstore(0x20, p0)
   825 |     |             mstore(0x40, p1)
   826 |     |             mstore(0x60, p2)
   827 |     |         }
   828 |     |         _sendLogPayload(0x1c, 0x64);
   829 |     |         /// @solidity memory-safe-assembly
   830 |     |         assembly {
   831 |     |             mstore(0x00, m0)
   832 |     |             mstore(0x20, m1)
   833 |     |             mstore(0x40, m2)
   834 |     |             mstore(0x60, m3)
   835 |     |         }
   836 |     |     }
   837 |     | 
   838 |     |     function log(address p0, bool p1, uint256 p2) internal pure {
   839 |     |         bytes32 m0;
   840 |     |         bytes32 m1;
   841 |     |         bytes32 m2;
   842 |     |         bytes32 m3;
   843 |     |         /// @solidity memory-safe-assembly
   844 |     |         assembly {
   845 |     |             m0 := mload(0x00)
   846 |     |             m1 := mload(0x20)
   847 |     |             m2 := mload(0x40)
   848 |     |             m3 := mload(0x60)
   849 |     |             // Selector of `log(address,bool,uint256)`.
   850 |     |             mstore(0x00, 0x9c4f99fb)
   851 |     |             mstore(0x20, p0)
   852 |     |             mstore(0x40, p1)
   853 |     |             mstore(0x60, p2)
   854 |     |         }
   855 |     |         _sendLogPayload(0x1c, 0x64);
   856 |     |         /// @solidity memory-safe-assembly
   857 |     |         assembly {
   858 |     |             mstore(0x00, m0)
   859 |     |             mstore(0x20, m1)
   860 |     |             mstore(0x40, m2)
   861 |     |             mstore(0x60, m3)
   862 |     |         }
   863 |     |     }
   864 |     | 
   865 |     |     function log(address p0, bool p1, bytes32 p2) internal pure {
   866 |     |         bytes32 m0;
   867 |     |         bytes32 m1;
   868 |     |         bytes32 m2;
   869 |     |         bytes32 m3;
   870 |     |         bytes32 m4;
   871 |     |         bytes32 m5;
   872 |     |         /// @solidity memory-safe-assembly
   873 |     |         assembly {
   874 |     |             function writeString(pos, w) {
   875 |     |                 let length := 0
   876 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   877 |     |                 mstore(pos, length)
   878 |     |                 let shift := sub(256, shl(3, length))
   879 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
   880 |     |             }
   881 |     |             m0 := mload(0x00)
   882 |     |             m1 := mload(0x20)
   883 |     |             m2 := mload(0x40)
   884 |     |             m3 := mload(0x60)
   885 |     |             m4 := mload(0x80)
   886 |     |             m5 := mload(0xa0)
   887 |     |             // Selector of `log(address,bool,string)`.
   888 |     |             mstore(0x00, 0x212255cc)
   889 |     |             mstore(0x20, p0)
   890 |     |             mstore(0x40, p1)
   891 |     |             mstore(0x60, 0x60)
   892 |     |             writeString(0x80, p2)
   893 |     |         }
   894 |     |         _sendLogPayload(0x1c, 0xa4);
   895 |     |         /// @solidity memory-safe-assembly
   896 |     |         assembly {
   897 |     |             mstore(0x00, m0)
   898 |     |             mstore(0x20, m1)
   899 |     |             mstore(0x40, m2)
   900 |     |             mstore(0x60, m3)
   901 |     |             mstore(0x80, m4)
   902 |     |             mstore(0xa0, m5)
   903 |     |         }
   904 |     |     }
   905 |     | 
   906 |     |     function log(address p0, uint256 p1, address p2) internal pure {
   907 |     |         bytes32 m0;
   908 |     |         bytes32 m1;
   909 |     |         bytes32 m2;
   910 |     |         bytes32 m3;
   911 |     |         /// @solidity memory-safe-assembly
   912 |     |         assembly {
   913 |     |             m0 := mload(0x00)
   914 |     |             m1 := mload(0x20)
   915 |     |             m2 := mload(0x40)
   916 |     |             m3 := mload(0x60)
   917 |     |             // Selector of `log(address,uint256,address)`.
   918 |     |             mstore(0x00, 0x7bc0d848)
   919 |     |             mstore(0x20, p0)
   920 |     |             mstore(0x40, p1)
   921 |     |             mstore(0x60, p2)
   922 |     |         }
   923 |     |         _sendLogPayload(0x1c, 0x64);
   924 |     |         /// @solidity memory-safe-assembly
   925 |     |         assembly {
   926 |     |             mstore(0x00, m0)
   927 |     |             mstore(0x20, m1)
   928 |     |             mstore(0x40, m2)
   929 |     |             mstore(0x60, m3)
   930 |     |         }
   931 |     |     }
   932 |     | 
   933 |     |     function log(address p0, uint256 p1, bool p2) internal pure {
   934 |     |         bytes32 m0;
   935 |     |         bytes32 m1;
   936 |     |         bytes32 m2;
   937 |     |         bytes32 m3;
   938 |     |         /// @solidity memory-safe-assembly
   939 |     |         assembly {
   940 |     |             m0 := mload(0x00)
   941 |     |             m1 := mload(0x20)
   942 |     |             m2 := mload(0x40)
   943 |     |             m3 := mload(0x60)
   944 |     |             // Selector of `log(address,uint256,bool)`.
   945 |     |             mstore(0x00, 0x678209a8)
   946 |     |             mstore(0x20, p0)
   947 |     |             mstore(0x40, p1)
   948 |     |             mstore(0x60, p2)
   949 |     |         }
   950 |     |         _sendLogPayload(0x1c, 0x64);
   951 |     |         /// @solidity memory-safe-assembly
   952 |     |         assembly {
   953 |     |             mstore(0x00, m0)
   954 |     |             mstore(0x20, m1)
   955 |     |             mstore(0x40, m2)
   956 |     |             mstore(0x60, m3)
   957 |     |         }
   958 |     |     }
   959 |     | 
   960 |     |     function log(address p0, uint256 p1, uint256 p2) internal pure {
   961 |     |         bytes32 m0;
   962 |     |         bytes32 m1;
   963 |     |         bytes32 m2;
   964 |     |         bytes32 m3;
   965 |     |         /// @solidity memory-safe-assembly
   966 |     |         assembly {
   967 |     |             m0 := mload(0x00)
   968 |     |             m1 := mload(0x20)
   969 |     |             m2 := mload(0x40)
   970 |     |             m3 := mload(0x60)
   971 |     |             // Selector of `log(address,uint256,uint256)`.
   972 |     |             mstore(0x00, 0xb69bcaf6)
   973 |     |             mstore(0x20, p0)
   974 |     |             mstore(0x40, p1)
   975 |     |             mstore(0x60, p2)
   976 |     |         }
   977 |     |         _sendLogPayload(0x1c, 0x64);
   978 |     |         /// @solidity memory-safe-assembly
   979 |     |         assembly {
   980 |     |             mstore(0x00, m0)
   981 |     |             mstore(0x20, m1)
   982 |     |             mstore(0x40, m2)
   983 |     |             mstore(0x60, m3)
   984 |     |         }
   985 |     |     }
   986 |     | 
   987 |     |     function log(address p0, uint256 p1, bytes32 p2) internal pure {
   988 |     |         bytes32 m0;
   989 |     |         bytes32 m1;
   990 |     |         bytes32 m2;
   991 |     |         bytes32 m3;
   992 |     |         bytes32 m4;
   993 |     |         bytes32 m5;
   994 |     |         /// @solidity memory-safe-assembly
   995 |     |         assembly {
   996 |     |             function writeString(pos, w) {
   997 |     |                 let length := 0
   998 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
   999 |     |                 mstore(pos, length)
  1000 |     |                 let shift := sub(256, shl(3, length))
  1001 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1002 |     |             }
  1003 |     |             m0 := mload(0x00)
  1004 |     |             m1 := mload(0x20)
  1005 |     |             m2 := mload(0x40)
  1006 |     |             m3 := mload(0x60)
  1007 |     |             m4 := mload(0x80)
  1008 |     |             m5 := mload(0xa0)
  1009 |     |             // Selector of `log(address,uint256,string)`.
  1010 |     |             mstore(0x00, 0xa1f2e8aa)
  1011 |     |             mstore(0x20, p0)
  1012 |     |             mstore(0x40, p1)
  1013 |     |             mstore(0x60, 0x60)
  1014 |     |             writeString(0x80, p2)
  1015 |     |         }
  1016 |     |         _sendLogPayload(0x1c, 0xa4);
  1017 |     |         /// @solidity memory-safe-assembly
  1018 |     |         assembly {
  1019 |     |             mstore(0x00, m0)
  1020 |     |             mstore(0x20, m1)
  1021 |     |             mstore(0x40, m2)
  1022 |     |             mstore(0x60, m3)
  1023 |     |             mstore(0x80, m4)
  1024 |     |             mstore(0xa0, m5)
  1025 |     |         }
  1026 |     |     }
  1027 |     | 
  1028 |     |     function log(address p0, bytes32 p1, address p2) internal pure {
  1029 |     |         bytes32 m0;
  1030 |     |         bytes32 m1;
  1031 |     |         bytes32 m2;
  1032 |     |         bytes32 m3;
  1033 |     |         bytes32 m4;
  1034 |     |         bytes32 m5;
  1035 |     |         /// @solidity memory-safe-assembly
  1036 |     |         assembly {
  1037 |     |             function writeString(pos, w) {
  1038 |     |                 let length := 0
  1039 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1040 |     |                 mstore(pos, length)
  1041 |     |                 let shift := sub(256, shl(3, length))
  1042 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1043 |     |             }
  1044 |     |             m0 := mload(0x00)
  1045 |     |             m1 := mload(0x20)
  1046 |     |             m2 := mload(0x40)
  1047 |     |             m3 := mload(0x60)
  1048 |     |             m4 := mload(0x80)
  1049 |     |             m5 := mload(0xa0)
  1050 |     |             // Selector of `log(address,string,address)`.
  1051 |     |             mstore(0x00, 0xf08744e8)
  1052 |     |             mstore(0x20, p0)
  1053 |     |             mstore(0x40, 0x60)
  1054 |     |             mstore(0x60, p2)
  1055 |     |             writeString(0x80, p1)
  1056 |     |         }
  1057 |     |         _sendLogPayload(0x1c, 0xa4);
  1058 |     |         /// @solidity memory-safe-assembly
  1059 |     |         assembly {
  1060 |     |             mstore(0x00, m0)
  1061 |     |             mstore(0x20, m1)
  1062 |     |             mstore(0x40, m2)
  1063 |     |             mstore(0x60, m3)
  1064 |     |             mstore(0x80, m4)
  1065 |     |             mstore(0xa0, m5)
  1066 |     |         }
  1067 |     |     }
  1068 |     | 
  1069 |     |     function log(address p0, bytes32 p1, bool p2) internal pure {
  1070 |     |         bytes32 m0;
  1071 |     |         bytes32 m1;
  1072 |     |         bytes32 m2;
  1073 |     |         bytes32 m3;
  1074 |     |         bytes32 m4;
  1075 |     |         bytes32 m5;
  1076 |     |         /// @solidity memory-safe-assembly
  1077 |     |         assembly {
  1078 |     |             function writeString(pos, w) {
  1079 |     |                 let length := 0
  1080 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1081 |     |                 mstore(pos, length)
  1082 |     |                 let shift := sub(256, shl(3, length))
  1083 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1084 |     |             }
  1085 |     |             m0 := mload(0x00)
  1086 |     |             m1 := mload(0x20)
  1087 |     |             m2 := mload(0x40)
  1088 |     |             m3 := mload(0x60)
  1089 |     |             m4 := mload(0x80)
  1090 |     |             m5 := mload(0xa0)
  1091 |     |             // Selector of `log(address,string,bool)`.
  1092 |     |             mstore(0x00, 0xcf020fb1)
  1093 |     |             mstore(0x20, p0)
  1094 |     |             mstore(0x40, 0x60)
  1095 |     |             mstore(0x60, p2)
  1096 |     |             writeString(0x80, p1)
  1097 |     |         }
  1098 |     |         _sendLogPayload(0x1c, 0xa4);
  1099 |     |         /// @solidity memory-safe-assembly
  1100 |     |         assembly {
  1101 |     |             mstore(0x00, m0)
  1102 |     |             mstore(0x20, m1)
  1103 |     |             mstore(0x40, m2)
  1104 |     |             mstore(0x60, m3)
  1105 |     |             mstore(0x80, m4)
  1106 |     |             mstore(0xa0, m5)
  1107 |     |         }
  1108 |     |     }
  1109 |     | 
  1110 |     |     function log(address p0, bytes32 p1, uint256 p2) internal pure {
  1111 |     |         bytes32 m0;
  1112 |     |         bytes32 m1;
  1113 |     |         bytes32 m2;
  1114 |     |         bytes32 m3;
  1115 |     |         bytes32 m4;
  1116 |     |         bytes32 m5;
  1117 |     |         /// @solidity memory-safe-assembly
  1118 |     |         assembly {
  1119 |     |             function writeString(pos, w) {
  1120 |     |                 let length := 0
  1121 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1122 |     |                 mstore(pos, length)
  1123 |     |                 let shift := sub(256, shl(3, length))
  1124 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1125 |     |             }
  1126 |     |             m0 := mload(0x00)
  1127 |     |             m1 := mload(0x20)
  1128 |     |             m2 := mload(0x40)
  1129 |     |             m3 := mload(0x60)
  1130 |     |             m4 := mload(0x80)
  1131 |     |             m5 := mload(0xa0)
  1132 |     |             // Selector of `log(address,string,uint256)`.
  1133 |     |             mstore(0x00, 0x67dd6ff1)
  1134 |     |             mstore(0x20, p0)
  1135 |     |             mstore(0x40, 0x60)
  1136 |     |             mstore(0x60, p2)
  1137 |     |             writeString(0x80, p1)
  1138 |     |         }
  1139 |     |         _sendLogPayload(0x1c, 0xa4);
  1140 |     |         /// @solidity memory-safe-assembly
  1141 |     |         assembly {
  1142 |     |             mstore(0x00, m0)
  1143 |     |             mstore(0x20, m1)
  1144 |     |             mstore(0x40, m2)
  1145 |     |             mstore(0x60, m3)
  1146 |     |             mstore(0x80, m4)
  1147 |     |             mstore(0xa0, m5)
  1148 |     |         }
  1149 |     |     }
  1150 |     | 
  1151 |     |     function log(address p0, bytes32 p1, bytes32 p2) internal pure {
  1152 |     |         bytes32 m0;
  1153 |     |         bytes32 m1;
  1154 |     |         bytes32 m2;
  1155 |     |         bytes32 m3;
  1156 |     |         bytes32 m4;
  1157 |     |         bytes32 m5;
  1158 |     |         bytes32 m6;
  1159 |     |         bytes32 m7;
  1160 |     |         /// @solidity memory-safe-assembly
  1161 |     |         assembly {
  1162 |     |             function writeString(pos, w) {
  1163 |     |                 let length := 0
  1164 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1165 |     |                 mstore(pos, length)
  1166 |     |                 let shift := sub(256, shl(3, length))
  1167 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1168 |     |             }
  1169 |     |             m0 := mload(0x00)
  1170 |     |             m1 := mload(0x20)
  1171 |     |             m2 := mload(0x40)
  1172 |     |             m3 := mload(0x60)
  1173 |     |             m4 := mload(0x80)
  1174 |     |             m5 := mload(0xa0)
  1175 |     |             m6 := mload(0xc0)
  1176 |     |             m7 := mload(0xe0)
  1177 |     |             // Selector of `log(address,string,string)`.
  1178 |     |             mstore(0x00, 0xfb772265)
  1179 |     |             mstore(0x20, p0)
  1180 |     |             mstore(0x40, 0x60)
  1181 |     |             mstore(0x60, 0xa0)
  1182 |     |             writeString(0x80, p1)
  1183 |     |             writeString(0xc0, p2)
  1184 |     |         }
  1185 |     |         _sendLogPayload(0x1c, 0xe4);
  1186 |     |         /// @solidity memory-safe-assembly
  1187 |     |         assembly {
  1188 |     |             mstore(0x00, m0)
  1189 |     |             mstore(0x20, m1)
  1190 |     |             mstore(0x40, m2)
  1191 |     |             mstore(0x60, m3)
  1192 |     |             mstore(0x80, m4)
  1193 |     |             mstore(0xa0, m5)
  1194 |     |             mstore(0xc0, m6)
  1195 |     |             mstore(0xe0, m7)
  1196 |     |         }
  1197 |     |     }
  1198 |     | 
  1199 |     |     function log(bool p0, address p1, address p2) internal pure {
  1200 |     |         bytes32 m0;
  1201 |     |         bytes32 m1;
  1202 |     |         bytes32 m2;
  1203 |     |         bytes32 m3;
  1204 |     |         /// @solidity memory-safe-assembly
  1205 |     |         assembly {
  1206 |     |             m0 := mload(0x00)
  1207 |     |             m1 := mload(0x20)
  1208 |     |             m2 := mload(0x40)
  1209 |     |             m3 := mload(0x60)
  1210 |     |             // Selector of `log(bool,address,address)`.
  1211 |     |             mstore(0x00, 0xd2763667)
  1212 |     |             mstore(0x20, p0)
  1213 |     |             mstore(0x40, p1)
  1214 |     |             mstore(0x60, p2)
  1215 |     |         }
  1216 |     |         _sendLogPayload(0x1c, 0x64);
  1217 |     |         /// @solidity memory-safe-assembly
  1218 |     |         assembly {
  1219 |     |             mstore(0x00, m0)
  1220 |     |             mstore(0x20, m1)
  1221 |     |             mstore(0x40, m2)
  1222 |     |             mstore(0x60, m3)
  1223 |     |         }
  1224 |     |     }
  1225 |     | 
  1226 |     |     function log(bool p0, address p1, bool p2) internal pure {
  1227 |     |         bytes32 m0;
  1228 |     |         bytes32 m1;
  1229 |     |         bytes32 m2;
  1230 |     |         bytes32 m3;
  1231 |     |         /// @solidity memory-safe-assembly
  1232 |     |         assembly {
  1233 |     |             m0 := mload(0x00)
  1234 |     |             m1 := mload(0x20)
  1235 |     |             m2 := mload(0x40)
  1236 |     |             m3 := mload(0x60)
  1237 |     |             // Selector of `log(bool,address,bool)`.
  1238 |     |             mstore(0x00, 0x18c9c746)
  1239 |     |             mstore(0x20, p0)
  1240 |     |             mstore(0x40, p1)
  1241 |     |             mstore(0x60, p2)
  1242 |     |         }
  1243 |     |         _sendLogPayload(0x1c, 0x64);
  1244 |     |         /// @solidity memory-safe-assembly
  1245 |     |         assembly {
  1246 |     |             mstore(0x00, m0)
  1247 |     |             mstore(0x20, m1)
  1248 |     |             mstore(0x40, m2)
  1249 |     |             mstore(0x60, m3)
  1250 |     |         }
  1251 |     |     }
  1252 |     | 
  1253 |     |     function log(bool p0, address p1, uint256 p2) internal pure {
  1254 |     |         bytes32 m0;
  1255 |     |         bytes32 m1;
  1256 |     |         bytes32 m2;
  1257 |     |         bytes32 m3;
  1258 |     |         /// @solidity memory-safe-assembly
  1259 |     |         assembly {
  1260 |     |             m0 := mload(0x00)
  1261 |     |             m1 := mload(0x20)
  1262 |     |             m2 := mload(0x40)
  1263 |     |             m3 := mload(0x60)
  1264 |     |             // Selector of `log(bool,address,uint256)`.
  1265 |     |             mstore(0x00, 0x5f7b9afb)
  1266 |     |             mstore(0x20, p0)
  1267 |     |             mstore(0x40, p1)
  1268 |     |             mstore(0x60, p2)
  1269 |     |         }
  1270 |     |         _sendLogPayload(0x1c, 0x64);
  1271 |     |         /// @solidity memory-safe-assembly
  1272 |     |         assembly {
  1273 |     |             mstore(0x00, m0)
  1274 |     |             mstore(0x20, m1)
  1275 |     |             mstore(0x40, m2)
  1276 |     |             mstore(0x60, m3)
  1277 |     |         }
  1278 |     |     }
  1279 |     | 
  1280 |     |     function log(bool p0, address p1, bytes32 p2) internal pure {
  1281 |     |         bytes32 m0;
  1282 |     |         bytes32 m1;
  1283 |     |         bytes32 m2;
  1284 |     |         bytes32 m3;
  1285 |     |         bytes32 m4;
  1286 |     |         bytes32 m5;
  1287 |     |         /// @solidity memory-safe-assembly
  1288 |     |         assembly {
  1289 |     |             function writeString(pos, w) {
  1290 |     |                 let length := 0
  1291 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1292 |     |                 mstore(pos, length)
  1293 |     |                 let shift := sub(256, shl(3, length))
  1294 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1295 |     |             }
  1296 |     |             m0 := mload(0x00)
  1297 |     |             m1 := mload(0x20)
  1298 |     |             m2 := mload(0x40)
  1299 |     |             m3 := mload(0x60)
  1300 |     |             m4 := mload(0x80)
  1301 |     |             m5 := mload(0xa0)
  1302 |     |             // Selector of `log(bool,address,string)`.
  1303 |     |             mstore(0x00, 0xde9a9270)
  1304 |     |             mstore(0x20, p0)
  1305 |     |             mstore(0x40, p1)
  1306 |     |             mstore(0x60, 0x60)
  1307 |     |             writeString(0x80, p2)
  1308 |     |         }
  1309 |     |         _sendLogPayload(0x1c, 0xa4);
  1310 |     |         /// @solidity memory-safe-assembly
  1311 |     |         assembly {
  1312 |     |             mstore(0x00, m0)
  1313 |     |             mstore(0x20, m1)
  1314 |     |             mstore(0x40, m2)
  1315 |     |             mstore(0x60, m3)
  1316 |     |             mstore(0x80, m4)
  1317 |     |             mstore(0xa0, m5)
  1318 |     |         }
  1319 |     |     }
  1320 |     | 
  1321 |     |     function log(bool p0, bool p1, address p2) internal pure {
  1322 |     |         bytes32 m0;
  1323 |     |         bytes32 m1;
  1324 |     |         bytes32 m2;
  1325 |     |         bytes32 m3;
  1326 |     |         /// @solidity memory-safe-assembly
  1327 |     |         assembly {
  1328 |     |             m0 := mload(0x00)
  1329 |     |             m1 := mload(0x20)
  1330 |     |             m2 := mload(0x40)
  1331 |     |             m3 := mload(0x60)
  1332 |     |             // Selector of `log(bool,bool,address)`.
  1333 |     |             mstore(0x00, 0x1078f68d)
  1334 |     |             mstore(0x20, p0)
  1335 |     |             mstore(0x40, p1)
  1336 |     |             mstore(0x60, p2)
  1337 |     |         }
  1338 |     |         _sendLogPayload(0x1c, 0x64);
  1339 |     |         /// @solidity memory-safe-assembly
  1340 |     |         assembly {
  1341 |     |             mstore(0x00, m0)
  1342 |     |             mstore(0x20, m1)
  1343 |     |             mstore(0x40, m2)
  1344 |     |             mstore(0x60, m3)
  1345 |     |         }
  1346 |     |     }
  1347 |     | 
  1348 |     |     function log(bool p0, bool p1, bool p2) internal pure {
  1349 |     |         bytes32 m0;
  1350 |     |         bytes32 m1;
  1351 |     |         bytes32 m2;
  1352 |     |         bytes32 m3;
  1353 |     |         /// @solidity memory-safe-assembly
  1354 |     |         assembly {
  1355 |     |             m0 := mload(0x00)
  1356 |     |             m1 := mload(0x20)
  1357 |     |             m2 := mload(0x40)
  1358 |     |             m3 := mload(0x60)
  1359 |     |             // Selector of `log(bool,bool,bool)`.
  1360 |     |             mstore(0x00, 0x50709698)
  1361 |     |             mstore(0x20, p0)
  1362 |     |             mstore(0x40, p1)
  1363 |     |             mstore(0x60, p2)
  1364 |     |         }
  1365 |     |         _sendLogPayload(0x1c, 0x64);
  1366 |     |         /// @solidity memory-safe-assembly
  1367 |     |         assembly {
  1368 |     |             mstore(0x00, m0)
  1369 |     |             mstore(0x20, m1)
  1370 |     |             mstore(0x40, m2)
  1371 |     |             mstore(0x60, m3)
  1372 |     |         }
  1373 |     |     }
  1374 |     | 
  1375 |     |     function log(bool p0, bool p1, uint256 p2) internal pure {
  1376 |     |         bytes32 m0;
  1377 |     |         bytes32 m1;
  1378 |     |         bytes32 m2;
  1379 |     |         bytes32 m3;
  1380 |     |         /// @solidity memory-safe-assembly
  1381 |     |         assembly {
  1382 |     |             m0 := mload(0x00)
  1383 |     |             m1 := mload(0x20)
  1384 |     |             m2 := mload(0x40)
  1385 |     |             m3 := mload(0x60)
  1386 |     |             // Selector of `log(bool,bool,uint256)`.
  1387 |     |             mstore(0x00, 0x12f21602)
  1388 |     |             mstore(0x20, p0)
  1389 |     |             mstore(0x40, p1)
  1390 |     |             mstore(0x60, p2)
  1391 |     |         }
  1392 |     |         _sendLogPayload(0x1c, 0x64);
  1393 |     |         /// @solidity memory-safe-assembly
  1394 |     |         assembly {
  1395 |     |             mstore(0x00, m0)
  1396 |     |             mstore(0x20, m1)
  1397 |     |             mstore(0x40, m2)
  1398 |     |             mstore(0x60, m3)
  1399 |     |         }
  1400 |     |     }
  1401 |     | 
  1402 |     |     function log(bool p0, bool p1, bytes32 p2) internal pure {
  1403 |     |         bytes32 m0;
  1404 |     |         bytes32 m1;
  1405 |     |         bytes32 m2;
  1406 |     |         bytes32 m3;
  1407 |     |         bytes32 m4;
  1408 |     |         bytes32 m5;
  1409 |     |         /// @solidity memory-safe-assembly
  1410 |     |         assembly {
  1411 |     |             function writeString(pos, w) {
  1412 |     |                 let length := 0
  1413 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1414 |     |                 mstore(pos, length)
  1415 |     |                 let shift := sub(256, shl(3, length))
  1416 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1417 |     |             }
  1418 |     |             m0 := mload(0x00)
  1419 |     |             m1 := mload(0x20)
  1420 |     |             m2 := mload(0x40)
  1421 |     |             m3 := mload(0x60)
  1422 |     |             m4 := mload(0x80)
  1423 |     |             m5 := mload(0xa0)
  1424 |     |             // Selector of `log(bool,bool,string)`.
  1425 |     |             mstore(0x00, 0x2555fa46)
  1426 |     |             mstore(0x20, p0)
  1427 |     |             mstore(0x40, p1)
  1428 |     |             mstore(0x60, 0x60)
  1429 |     |             writeString(0x80, p2)
  1430 |     |         }
  1431 |     |         _sendLogPayload(0x1c, 0xa4);
  1432 |     |         /// @solidity memory-safe-assembly
  1433 |     |         assembly {
  1434 |     |             mstore(0x00, m0)
  1435 |     |             mstore(0x20, m1)
  1436 |     |             mstore(0x40, m2)
  1437 |     |             mstore(0x60, m3)
  1438 |     |             mstore(0x80, m4)
  1439 |     |             mstore(0xa0, m5)
  1440 |     |         }
  1441 |     |     }
  1442 |     | 
  1443 |     |     function log(bool p0, uint256 p1, address p2) internal pure {
  1444 |     |         bytes32 m0;
  1445 |     |         bytes32 m1;
  1446 |     |         bytes32 m2;
  1447 |     |         bytes32 m3;
  1448 |     |         /// @solidity memory-safe-assembly
  1449 |     |         assembly {
  1450 |     |             m0 := mload(0x00)
  1451 |     |             m1 := mload(0x20)
  1452 |     |             m2 := mload(0x40)
  1453 |     |             m3 := mload(0x60)
  1454 |     |             // Selector of `log(bool,uint256,address)`.
  1455 |     |             mstore(0x00, 0x088ef9d2)
  1456 |     |             mstore(0x20, p0)
  1457 |     |             mstore(0x40, p1)
  1458 |     |             mstore(0x60, p2)
  1459 |     |         }
  1460 |     |         _sendLogPayload(0x1c, 0x64);
  1461 |     |         /// @solidity memory-safe-assembly
  1462 |     |         assembly {
  1463 |     |             mstore(0x00, m0)
  1464 |     |             mstore(0x20, m1)
  1465 |     |             mstore(0x40, m2)
  1466 |     |             mstore(0x60, m3)
  1467 |     |         }
  1468 |     |     }
  1469 |     | 
  1470 |     |     function log(bool p0, uint256 p1, bool p2) internal pure {
  1471 |     |         bytes32 m0;
  1472 |     |         bytes32 m1;
  1473 |     |         bytes32 m2;
  1474 |     |         bytes32 m3;
  1475 |     |         /// @solidity memory-safe-assembly
  1476 |     |         assembly {
  1477 |     |             m0 := mload(0x00)
  1478 |     |             m1 := mload(0x20)
  1479 |     |             m2 := mload(0x40)
  1480 |     |             m3 := mload(0x60)
  1481 |     |             // Selector of `log(bool,uint256,bool)`.
  1482 |     |             mstore(0x00, 0xe8defba9)
  1483 |     |             mstore(0x20, p0)
  1484 |     |             mstore(0x40, p1)
  1485 |     |             mstore(0x60, p2)
  1486 |     |         }
  1487 |     |         _sendLogPayload(0x1c, 0x64);
  1488 |     |         /// @solidity memory-safe-assembly
  1489 |     |         assembly {
  1490 |     |             mstore(0x00, m0)
  1491 |     |             mstore(0x20, m1)
  1492 |     |             mstore(0x40, m2)
  1493 |     |             mstore(0x60, m3)
  1494 |     |         }
  1495 |     |     }
  1496 |     | 
  1497 |     |     function log(bool p0, uint256 p1, uint256 p2) internal pure {
  1498 |     |         bytes32 m0;
  1499 |     |         bytes32 m1;
  1500 |     |         bytes32 m2;
  1501 |     |         bytes32 m3;
  1502 |     |         /// @solidity memory-safe-assembly
  1503 |     |         assembly {
  1504 |     |             m0 := mload(0x00)
  1505 |     |             m1 := mload(0x20)
  1506 |     |             m2 := mload(0x40)
  1507 |     |             m3 := mload(0x60)
  1508 |     |             // Selector of `log(bool,uint256,uint256)`.
  1509 |     |             mstore(0x00, 0x37103367)
  1510 |     |             mstore(0x20, p0)
  1511 |     |             mstore(0x40, p1)
  1512 |     |             mstore(0x60, p2)
  1513 |     |         }
  1514 |     |         _sendLogPayload(0x1c, 0x64);
  1515 |     |         /// @solidity memory-safe-assembly
  1516 |     |         assembly {
  1517 |     |             mstore(0x00, m0)
  1518 |     |             mstore(0x20, m1)
  1519 |     |             mstore(0x40, m2)
  1520 |     |             mstore(0x60, m3)
  1521 |     |         }
  1522 |     |     }
  1523 |     | 
  1524 |     |     function log(bool p0, uint256 p1, bytes32 p2) internal pure {
  1525 |     |         bytes32 m0;
  1526 |     |         bytes32 m1;
  1527 |     |         bytes32 m2;
  1528 |     |         bytes32 m3;
  1529 |     |         bytes32 m4;
  1530 |     |         bytes32 m5;
  1531 |     |         /// @solidity memory-safe-assembly
  1532 |     |         assembly {
  1533 |     |             function writeString(pos, w) {
  1534 |     |                 let length := 0
  1535 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1536 |     |                 mstore(pos, length)
  1537 |     |                 let shift := sub(256, shl(3, length))
  1538 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1539 |     |             }
  1540 |     |             m0 := mload(0x00)
  1541 |     |             m1 := mload(0x20)
  1542 |     |             m2 := mload(0x40)
  1543 |     |             m3 := mload(0x60)
  1544 |     |             m4 := mload(0x80)
  1545 |     |             m5 := mload(0xa0)
  1546 |     |             // Selector of `log(bool,uint256,string)`.
  1547 |     |             mstore(0x00, 0xc3fc3970)
  1548 |     |             mstore(0x20, p0)
  1549 |     |             mstore(0x40, p1)
  1550 |     |             mstore(0x60, 0x60)
  1551 |     |             writeString(0x80, p2)
  1552 |     |         }
  1553 |     |         _sendLogPayload(0x1c, 0xa4);
  1554 |     |         /// @solidity memory-safe-assembly
  1555 |     |         assembly {
  1556 |     |             mstore(0x00, m0)
  1557 |     |             mstore(0x20, m1)
  1558 |     |             mstore(0x40, m2)
  1559 |     |             mstore(0x60, m3)
  1560 |     |             mstore(0x80, m4)
  1561 |     |             mstore(0xa0, m5)
  1562 |     |         }
  1563 |     |     }
  1564 |     | 
  1565 |     |     function log(bool p0, bytes32 p1, address p2) internal pure {
  1566 |     |         bytes32 m0;
  1567 |     |         bytes32 m1;
  1568 |     |         bytes32 m2;
  1569 |     |         bytes32 m3;
  1570 |     |         bytes32 m4;
  1571 |     |         bytes32 m5;
  1572 |     |         /// @solidity memory-safe-assembly
  1573 |     |         assembly {
  1574 |     |             function writeString(pos, w) {
  1575 |     |                 let length := 0
  1576 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1577 |     |                 mstore(pos, length)
  1578 |     |                 let shift := sub(256, shl(3, length))
  1579 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1580 |     |             }
  1581 |     |             m0 := mload(0x00)
  1582 |     |             m1 := mload(0x20)
  1583 |     |             m2 := mload(0x40)
  1584 |     |             m3 := mload(0x60)
  1585 |     |             m4 := mload(0x80)
  1586 |     |             m5 := mload(0xa0)
  1587 |     |             // Selector of `log(bool,string,address)`.
  1588 |     |             mstore(0x00, 0x9591b953)
  1589 |     |             mstore(0x20, p0)
  1590 |     |             mstore(0x40, 0x60)
  1591 |     |             mstore(0x60, p2)
  1592 |     |             writeString(0x80, p1)
  1593 |     |         }
  1594 |     |         _sendLogPayload(0x1c, 0xa4);
  1595 |     |         /// @solidity memory-safe-assembly
  1596 |     |         assembly {
  1597 |     |             mstore(0x00, m0)
  1598 |     |             mstore(0x20, m1)
  1599 |     |             mstore(0x40, m2)
  1600 |     |             mstore(0x60, m3)
  1601 |     |             mstore(0x80, m4)
  1602 |     |             mstore(0xa0, m5)
  1603 |     |         }
  1604 |     |     }
  1605 |     | 
  1606 |     |     function log(bool p0, bytes32 p1, bool p2) internal pure {
  1607 |     |         bytes32 m0;
  1608 |     |         bytes32 m1;
  1609 |     |         bytes32 m2;
  1610 |     |         bytes32 m3;
  1611 |     |         bytes32 m4;
  1612 |     |         bytes32 m5;
  1613 |     |         /// @solidity memory-safe-assembly
  1614 |     |         assembly {
  1615 |     |             function writeString(pos, w) {
  1616 |     |                 let length := 0
  1617 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1618 |     |                 mstore(pos, length)
  1619 |     |                 let shift := sub(256, shl(3, length))
  1620 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1621 |     |             }
  1622 |     |             m0 := mload(0x00)
  1623 |     |             m1 := mload(0x20)
  1624 |     |             m2 := mload(0x40)
  1625 |     |             m3 := mload(0x60)
  1626 |     |             m4 := mload(0x80)
  1627 |     |             m5 := mload(0xa0)
  1628 |     |             // Selector of `log(bool,string,bool)`.
  1629 |     |             mstore(0x00, 0xdbb4c247)
  1630 |     |             mstore(0x20, p0)
  1631 |     |             mstore(0x40, 0x60)
  1632 |     |             mstore(0x60, p2)
  1633 |     |             writeString(0x80, p1)
  1634 |     |         }
  1635 |     |         _sendLogPayload(0x1c, 0xa4);
  1636 |     |         /// @solidity memory-safe-assembly
  1637 |     |         assembly {
  1638 |     |             mstore(0x00, m0)
  1639 |     |             mstore(0x20, m1)
  1640 |     |             mstore(0x40, m2)
  1641 |     |             mstore(0x60, m3)
  1642 |     |             mstore(0x80, m4)
  1643 |     |             mstore(0xa0, m5)
  1644 |     |         }
  1645 |     |     }
  1646 |     | 
  1647 |     |     function log(bool p0, bytes32 p1, uint256 p2) internal pure {
  1648 |     |         bytes32 m0;
  1649 |     |         bytes32 m1;
  1650 |     |         bytes32 m2;
  1651 |     |         bytes32 m3;
  1652 |     |         bytes32 m4;
  1653 |     |         bytes32 m5;
  1654 |     |         /// @solidity memory-safe-assembly
  1655 |     |         assembly {
  1656 |     |             function writeString(pos, w) {
  1657 |     |                 let length := 0
  1658 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1659 |     |                 mstore(pos, length)
  1660 |     |                 let shift := sub(256, shl(3, length))
  1661 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1662 |     |             }
  1663 |     |             m0 := mload(0x00)
  1664 |     |             m1 := mload(0x20)
  1665 |     |             m2 := mload(0x40)
  1666 |     |             m3 := mload(0x60)
  1667 |     |             m4 := mload(0x80)
  1668 |     |             m5 := mload(0xa0)
  1669 |     |             // Selector of `log(bool,string,uint256)`.
  1670 |     |             mstore(0x00, 0x1093ee11)
  1671 |     |             mstore(0x20, p0)
  1672 |     |             mstore(0x40, 0x60)
  1673 |     |             mstore(0x60, p2)
  1674 |     |             writeString(0x80, p1)
  1675 |     |         }
  1676 |     |         _sendLogPayload(0x1c, 0xa4);
  1677 |     |         /// @solidity memory-safe-assembly
  1678 |     |         assembly {
  1679 |     |             mstore(0x00, m0)
  1680 |     |             mstore(0x20, m1)
  1681 |     |             mstore(0x40, m2)
  1682 |     |             mstore(0x60, m3)
  1683 |     |             mstore(0x80, m4)
  1684 |     |             mstore(0xa0, m5)
  1685 |     |         }
  1686 |     |     }
  1687 |     | 
  1688 |     |     function log(bool p0, bytes32 p1, bytes32 p2) internal pure {
  1689 |     |         bytes32 m0;
  1690 |     |         bytes32 m1;
  1691 |     |         bytes32 m2;
  1692 |     |         bytes32 m3;
  1693 |     |         bytes32 m4;
  1694 |     |         bytes32 m5;
  1695 |     |         bytes32 m6;
  1696 |     |         bytes32 m7;
  1697 |     |         /// @solidity memory-safe-assembly
  1698 |     |         assembly {
  1699 |     |             function writeString(pos, w) {
  1700 |     |                 let length := 0
  1701 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1702 |     |                 mstore(pos, length)
  1703 |     |                 let shift := sub(256, shl(3, length))
  1704 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1705 |     |             }
  1706 |     |             m0 := mload(0x00)
  1707 |     |             m1 := mload(0x20)
  1708 |     |             m2 := mload(0x40)
  1709 |     |             m3 := mload(0x60)
  1710 |     |             m4 := mload(0x80)
  1711 |     |             m5 := mload(0xa0)
  1712 |     |             m6 := mload(0xc0)
  1713 |     |             m7 := mload(0xe0)
  1714 |     |             // Selector of `log(bool,string,string)`.
  1715 |     |             mstore(0x00, 0xb076847f)
  1716 |     |             mstore(0x20, p0)
  1717 |     |             mstore(0x40, 0x60)
  1718 |     |             mstore(0x60, 0xa0)
  1719 |     |             writeString(0x80, p1)
  1720 |     |             writeString(0xc0, p2)
  1721 |     |         }
  1722 |     |         _sendLogPayload(0x1c, 0xe4);
  1723 |     |         /// @solidity memory-safe-assembly
  1724 |     |         assembly {
  1725 |     |             mstore(0x00, m0)
  1726 |     |             mstore(0x20, m1)
  1727 |     |             mstore(0x40, m2)
  1728 |     |             mstore(0x60, m3)
  1729 |     |             mstore(0x80, m4)
  1730 |     |             mstore(0xa0, m5)
  1731 |     |             mstore(0xc0, m6)
  1732 |     |             mstore(0xe0, m7)
  1733 |     |         }
  1734 |     |     }
  1735 |     | 
  1736 |     |     function log(uint256 p0, address p1, address p2) internal pure {
  1737 |     |         bytes32 m0;
  1738 |     |         bytes32 m1;
  1739 |     |         bytes32 m2;
  1740 |     |         bytes32 m3;
  1741 |     |         /// @solidity memory-safe-assembly
  1742 |     |         assembly {
  1743 |     |             m0 := mload(0x00)
  1744 |     |             m1 := mload(0x20)
  1745 |     |             m2 := mload(0x40)
  1746 |     |             m3 := mload(0x60)
  1747 |     |             // Selector of `log(uint256,address,address)`.
  1748 |     |             mstore(0x00, 0xbcfd9be0)
  1749 |     |             mstore(0x20, p0)
  1750 |     |             mstore(0x40, p1)
  1751 |     |             mstore(0x60, p2)
  1752 |     |         }
  1753 |     |         _sendLogPayload(0x1c, 0x64);
  1754 |     |         /// @solidity memory-safe-assembly
  1755 |     |         assembly {
  1756 |     |             mstore(0x00, m0)
  1757 |     |             mstore(0x20, m1)
  1758 |     |             mstore(0x40, m2)
  1759 |     |             mstore(0x60, m3)
  1760 |     |         }
  1761 |     |     }
  1762 |     | 
  1763 |     |     function log(uint256 p0, address p1, bool p2) internal pure {
  1764 |     |         bytes32 m0;
  1765 |     |         bytes32 m1;
  1766 |     |         bytes32 m2;
  1767 |     |         bytes32 m3;
  1768 |     |         /// @solidity memory-safe-assembly
  1769 |     |         assembly {
  1770 |     |             m0 := mload(0x00)
  1771 |     |             m1 := mload(0x20)
  1772 |     |             m2 := mload(0x40)
  1773 |     |             m3 := mload(0x60)
  1774 |     |             // Selector of `log(uint256,address,bool)`.
  1775 |     |             mstore(0x00, 0x9b6ec042)
  1776 |     |             mstore(0x20, p0)
  1777 |     |             mstore(0x40, p1)
  1778 |     |             mstore(0x60, p2)
  1779 |     |         }
  1780 |     |         _sendLogPayload(0x1c, 0x64);
  1781 |     |         /// @solidity memory-safe-assembly
  1782 |     |         assembly {
  1783 |     |             mstore(0x00, m0)
  1784 |     |             mstore(0x20, m1)
  1785 |     |             mstore(0x40, m2)
  1786 |     |             mstore(0x60, m3)
  1787 |     |         }
  1788 |     |     }
  1789 |     | 
  1790 |     |     function log(uint256 p0, address p1, uint256 p2) internal pure {
  1791 |     |         bytes32 m0;
  1792 |     |         bytes32 m1;
  1793 |     |         bytes32 m2;
  1794 |     |         bytes32 m3;
  1795 |     |         /// @solidity memory-safe-assembly
  1796 |     |         assembly {
  1797 |     |             m0 := mload(0x00)
  1798 |     |             m1 := mload(0x20)
  1799 |     |             m2 := mload(0x40)
  1800 |     |             m3 := mload(0x60)
  1801 |     |             // Selector of `log(uint256,address,uint256)`.
  1802 |     |             mstore(0x00, 0x5a9b5ed5)
  1803 |     |             mstore(0x20, p0)
  1804 |     |             mstore(0x40, p1)
  1805 |     |             mstore(0x60, p2)
  1806 |     |         }
  1807 |     |         _sendLogPayload(0x1c, 0x64);
  1808 |     |         /// @solidity memory-safe-assembly
  1809 |     |         assembly {
  1810 |     |             mstore(0x00, m0)
  1811 |     |             mstore(0x20, m1)
  1812 |     |             mstore(0x40, m2)
  1813 |     |             mstore(0x60, m3)
  1814 |     |         }
  1815 |     |     }
  1816 |     | 
  1817 |     |     function log(uint256 p0, address p1, bytes32 p2) internal pure {
  1818 |     |         bytes32 m0;
  1819 |     |         bytes32 m1;
  1820 |     |         bytes32 m2;
  1821 |     |         bytes32 m3;
  1822 |     |         bytes32 m4;
  1823 |     |         bytes32 m5;
  1824 |     |         /// @solidity memory-safe-assembly
  1825 |     |         assembly {
  1826 |     |             function writeString(pos, w) {
  1827 |     |                 let length := 0
  1828 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1829 |     |                 mstore(pos, length)
  1830 |     |                 let shift := sub(256, shl(3, length))
  1831 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1832 |     |             }
  1833 |     |             m0 := mload(0x00)
  1834 |     |             m1 := mload(0x20)
  1835 |     |             m2 := mload(0x40)
  1836 |     |             m3 := mload(0x60)
  1837 |     |             m4 := mload(0x80)
  1838 |     |             m5 := mload(0xa0)
  1839 |     |             // Selector of `log(uint256,address,string)`.
  1840 |     |             mstore(0x00, 0x63cb41f9)
  1841 |     |             mstore(0x20, p0)
  1842 |     |             mstore(0x40, p1)
  1843 |     |             mstore(0x60, 0x60)
  1844 |     |             writeString(0x80, p2)
  1845 |     |         }
  1846 |     |         _sendLogPayload(0x1c, 0xa4);
  1847 |     |         /// @solidity memory-safe-assembly
  1848 |     |         assembly {
  1849 |     |             mstore(0x00, m0)
  1850 |     |             mstore(0x20, m1)
  1851 |     |             mstore(0x40, m2)
  1852 |     |             mstore(0x60, m3)
  1853 |     |             mstore(0x80, m4)
  1854 |     |             mstore(0xa0, m5)
  1855 |     |         }
  1856 |     |     }
  1857 |     | 
  1858 |     |     function log(uint256 p0, bool p1, address p2) internal pure {
  1859 |     |         bytes32 m0;
  1860 |     |         bytes32 m1;
  1861 |     |         bytes32 m2;
  1862 |     |         bytes32 m3;
  1863 |     |         /// @solidity memory-safe-assembly
  1864 |     |         assembly {
  1865 |     |             m0 := mload(0x00)
  1866 |     |             m1 := mload(0x20)
  1867 |     |             m2 := mload(0x40)
  1868 |     |             m3 := mload(0x60)
  1869 |     |             // Selector of `log(uint256,bool,address)`.
  1870 |     |             mstore(0x00, 0x35085f7b)
  1871 |     |             mstore(0x20, p0)
  1872 |     |             mstore(0x40, p1)
  1873 |     |             mstore(0x60, p2)
  1874 |     |         }
  1875 |     |         _sendLogPayload(0x1c, 0x64);
  1876 |     |         /// @solidity memory-safe-assembly
  1877 |     |         assembly {
  1878 |     |             mstore(0x00, m0)
  1879 |     |             mstore(0x20, m1)
  1880 |     |             mstore(0x40, m2)
  1881 |     |             mstore(0x60, m3)
  1882 |     |         }
  1883 |     |     }
  1884 |     | 
  1885 |     |     function log(uint256 p0, bool p1, bool p2) internal pure {
  1886 |     |         bytes32 m0;
  1887 |     |         bytes32 m1;
  1888 |     |         bytes32 m2;
  1889 |     |         bytes32 m3;
  1890 |     |         /// @solidity memory-safe-assembly
  1891 |     |         assembly {
  1892 |     |             m0 := mload(0x00)
  1893 |     |             m1 := mload(0x20)
  1894 |     |             m2 := mload(0x40)
  1895 |     |             m3 := mload(0x60)
  1896 |     |             // Selector of `log(uint256,bool,bool)`.
  1897 |     |             mstore(0x00, 0x20718650)
  1898 |     |             mstore(0x20, p0)
  1899 |     |             mstore(0x40, p1)
  1900 |     |             mstore(0x60, p2)
  1901 |     |         }
  1902 |     |         _sendLogPayload(0x1c, 0x64);
  1903 |     |         /// @solidity memory-safe-assembly
  1904 |     |         assembly {
  1905 |     |             mstore(0x00, m0)
  1906 |     |             mstore(0x20, m1)
  1907 |     |             mstore(0x40, m2)
  1908 |     |             mstore(0x60, m3)
  1909 |     |         }
  1910 |     |     }
  1911 |     | 
  1912 |     |     function log(uint256 p0, bool p1, uint256 p2) internal pure {
  1913 |     |         bytes32 m0;
  1914 |     |         bytes32 m1;
  1915 |     |         bytes32 m2;
  1916 |     |         bytes32 m3;
  1917 |     |         /// @solidity memory-safe-assembly
  1918 |     |         assembly {
  1919 |     |             m0 := mload(0x00)
  1920 |     |             m1 := mload(0x20)
  1921 |     |             m2 := mload(0x40)
  1922 |     |             m3 := mload(0x60)
  1923 |     |             // Selector of `log(uint256,bool,uint256)`.
  1924 |     |             mstore(0x00, 0x20098014)
  1925 |     |             mstore(0x20, p0)
  1926 |     |             mstore(0x40, p1)
  1927 |     |             mstore(0x60, p2)
  1928 |     |         }
  1929 |     |         _sendLogPayload(0x1c, 0x64);
  1930 |     |         /// @solidity memory-safe-assembly
  1931 |     |         assembly {
  1932 |     |             mstore(0x00, m0)
  1933 |     |             mstore(0x20, m1)
  1934 |     |             mstore(0x40, m2)
  1935 |     |             mstore(0x60, m3)
  1936 |     |         }
  1937 |     |     }
  1938 |     | 
  1939 |     |     function log(uint256 p0, bool p1, bytes32 p2) internal pure {
  1940 |     |         bytes32 m0;
  1941 |     |         bytes32 m1;
  1942 |     |         bytes32 m2;
  1943 |     |         bytes32 m3;
  1944 |     |         bytes32 m4;
  1945 |     |         bytes32 m5;
  1946 |     |         /// @solidity memory-safe-assembly
  1947 |     |         assembly {
  1948 |     |             function writeString(pos, w) {
  1949 |     |                 let length := 0
  1950 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  1951 |     |                 mstore(pos, length)
  1952 |     |                 let shift := sub(256, shl(3, length))
  1953 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  1954 |     |             }
  1955 |     |             m0 := mload(0x00)
  1956 |     |             m1 := mload(0x20)
  1957 |     |             m2 := mload(0x40)
  1958 |     |             m3 := mload(0x60)
  1959 |     |             m4 := mload(0x80)
  1960 |     |             m5 := mload(0xa0)
  1961 |     |             // Selector of `log(uint256,bool,string)`.
  1962 |     |             mstore(0x00, 0x85775021)
  1963 |     |             mstore(0x20, p0)
  1964 |     |             mstore(0x40, p1)
  1965 |     |             mstore(0x60, 0x60)
  1966 |     |             writeString(0x80, p2)
  1967 |     |         }
  1968 |     |         _sendLogPayload(0x1c, 0xa4);
  1969 |     |         /// @solidity memory-safe-assembly
  1970 |     |         assembly {
  1971 |     |             mstore(0x00, m0)
  1972 |     |             mstore(0x20, m1)
  1973 |     |             mstore(0x40, m2)
  1974 |     |             mstore(0x60, m3)
  1975 |     |             mstore(0x80, m4)
  1976 |     |             mstore(0xa0, m5)
  1977 |     |         }
  1978 |     |     }
  1979 |     | 
  1980 |     |     function log(uint256 p0, uint256 p1, address p2) internal pure {
  1981 |     |         bytes32 m0;
  1982 |     |         bytes32 m1;
  1983 |     |         bytes32 m2;
  1984 |     |         bytes32 m3;
  1985 |     |         /// @solidity memory-safe-assembly
  1986 |     |         assembly {
  1987 |     |             m0 := mload(0x00)
  1988 |     |             m1 := mload(0x20)
  1989 |     |             m2 := mload(0x40)
  1990 |     |             m3 := mload(0x60)
  1991 |     |             // Selector of `log(uint256,uint256,address)`.
  1992 |     |             mstore(0x00, 0x5c96b331)
  1993 |     |             mstore(0x20, p0)
  1994 |     |             mstore(0x40, p1)
  1995 |     |             mstore(0x60, p2)
  1996 |     |         }
  1997 |     |         _sendLogPayload(0x1c, 0x64);
  1998 |     |         /// @solidity memory-safe-assembly
  1999 |     |         assembly {
  2000 |     |             mstore(0x00, m0)
  2001 |     |             mstore(0x20, m1)
  2002 |     |             mstore(0x40, m2)
  2003 |     |             mstore(0x60, m3)
  2004 |     |         }
  2005 |     |     }
  2006 |     | 
  2007 |     |     function log(uint256 p0, uint256 p1, bool p2) internal pure {
  2008 |     |         bytes32 m0;
  2009 |     |         bytes32 m1;
  2010 |     |         bytes32 m2;
  2011 |     |         bytes32 m3;
  2012 |     |         /// @solidity memory-safe-assembly
  2013 |     |         assembly {
  2014 |     |             m0 := mload(0x00)
  2015 |     |             m1 := mload(0x20)
  2016 |     |             m2 := mload(0x40)
  2017 |     |             m3 := mload(0x60)
  2018 |     |             // Selector of `log(uint256,uint256,bool)`.
  2019 |     |             mstore(0x00, 0x4766da72)
  2020 |     |             mstore(0x20, p0)
  2021 |     |             mstore(0x40, p1)
  2022 |     |             mstore(0x60, p2)
  2023 |     |         }
  2024 |     |         _sendLogPayload(0x1c, 0x64);
  2025 |     |         /// @solidity memory-safe-assembly
  2026 |     |         assembly {
  2027 |     |             mstore(0x00, m0)
  2028 |     |             mstore(0x20, m1)
  2029 |     |             mstore(0x40, m2)
  2030 |     |             mstore(0x60, m3)
  2031 |     |         }
  2032 |     |     }
  2033 |     | 
  2034 |     |     function log(uint256 p0, uint256 p1, uint256 p2) internal pure {
  2035 |     |         bytes32 m0;
  2036 |     |         bytes32 m1;
  2037 |     |         bytes32 m2;
  2038 |     |         bytes32 m3;
  2039 |     |         /// @solidity memory-safe-assembly
  2040 |     |         assembly {
  2041 |     |             m0 := mload(0x00)
  2042 |     |             m1 := mload(0x20)
  2043 |     |             m2 := mload(0x40)
  2044 |     |             m3 := mload(0x60)
  2045 |     |             // Selector of `log(uint256,uint256,uint256)`.
  2046 |     |             mstore(0x00, 0xd1ed7a3c)
  2047 |     |             mstore(0x20, p0)
  2048 |     |             mstore(0x40, p1)
  2049 |     |             mstore(0x60, p2)
  2050 |     |         }
  2051 |     |         _sendLogPayload(0x1c, 0x64);
  2052 |     |         /// @solidity memory-safe-assembly
  2053 |     |         assembly {
  2054 |     |             mstore(0x00, m0)
  2055 |     |             mstore(0x20, m1)
  2056 |     |             mstore(0x40, m2)
  2057 |     |             mstore(0x60, m3)
  2058 |     |         }
  2059 |     |     }
  2060 |     | 
  2061 |     |     function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {
  2062 |     |         bytes32 m0;
  2063 |     |         bytes32 m1;
  2064 |     |         bytes32 m2;
  2065 |     |         bytes32 m3;
  2066 |     |         bytes32 m4;
  2067 |     |         bytes32 m5;
  2068 |     |         /// @solidity memory-safe-assembly
  2069 |     |         assembly {
  2070 |     |             function writeString(pos, w) {
  2071 |     |                 let length := 0
  2072 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2073 |     |                 mstore(pos, length)
  2074 |     |                 let shift := sub(256, shl(3, length))
  2075 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2076 |     |             }
  2077 |     |             m0 := mload(0x00)
  2078 |     |             m1 := mload(0x20)
  2079 |     |             m2 := mload(0x40)
  2080 |     |             m3 := mload(0x60)
  2081 |     |             m4 := mload(0x80)
  2082 |     |             m5 := mload(0xa0)
  2083 |     |             // Selector of `log(uint256,uint256,string)`.
  2084 |     |             mstore(0x00, 0x71d04af2)
  2085 |     |             mstore(0x20, p0)
  2086 |     |             mstore(0x40, p1)
  2087 |     |             mstore(0x60, 0x60)
  2088 |     |             writeString(0x80, p2)
  2089 |     |         }
  2090 |     |         _sendLogPayload(0x1c, 0xa4);
  2091 |     |         /// @solidity memory-safe-assembly
  2092 |     |         assembly {
  2093 |     |             mstore(0x00, m0)
  2094 |     |             mstore(0x20, m1)
  2095 |     |             mstore(0x40, m2)
  2096 |     |             mstore(0x60, m3)
  2097 |     |             mstore(0x80, m4)
  2098 |     |             mstore(0xa0, m5)
  2099 |     |         }
  2100 |     |     }
  2101 |     | 
  2102 |     |     function log(uint256 p0, bytes32 p1, address p2) internal pure {
  2103 |     |         bytes32 m0;
  2104 |     |         bytes32 m1;
  2105 |     |         bytes32 m2;
  2106 |     |         bytes32 m3;
  2107 |     |         bytes32 m4;
  2108 |     |         bytes32 m5;
  2109 |     |         /// @solidity memory-safe-assembly
  2110 |     |         assembly {
  2111 |     |             function writeString(pos, w) {
  2112 |     |                 let length := 0
  2113 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2114 |     |                 mstore(pos, length)
  2115 |     |                 let shift := sub(256, shl(3, length))
  2116 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2117 |     |             }
  2118 |     |             m0 := mload(0x00)
  2119 |     |             m1 := mload(0x20)
  2120 |     |             m2 := mload(0x40)
  2121 |     |             m3 := mload(0x60)
  2122 |     |             m4 := mload(0x80)
  2123 |     |             m5 := mload(0xa0)
  2124 |     |             // Selector of `log(uint256,string,address)`.
  2125 |     |             mstore(0x00, 0x7afac959)
  2126 |     |             mstore(0x20, p0)
  2127 |     |             mstore(0x40, 0x60)
  2128 |     |             mstore(0x60, p2)
  2129 |     |             writeString(0x80, p1)
  2130 |     |         }
  2131 |     |         _sendLogPayload(0x1c, 0xa4);
  2132 |     |         /// @solidity memory-safe-assembly
  2133 |     |         assembly {
  2134 |     |             mstore(0x00, m0)
  2135 |     |             mstore(0x20, m1)
  2136 |     |             mstore(0x40, m2)
  2137 |     |             mstore(0x60, m3)
  2138 |     |             mstore(0x80, m4)
  2139 |     |             mstore(0xa0, m5)
  2140 |     |         }
  2141 |     |     }
  2142 |     | 
  2143 |     |     function log(uint256 p0, bytes32 p1, bool p2) internal pure {
  2144 |     |         bytes32 m0;
  2145 |     |         bytes32 m1;
  2146 |     |         bytes32 m2;
  2147 |     |         bytes32 m3;
  2148 |     |         bytes32 m4;
  2149 |     |         bytes32 m5;
  2150 |     |         /// @solidity memory-safe-assembly
  2151 |     |         assembly {
  2152 |     |             function writeString(pos, w) {
  2153 |     |                 let length := 0
  2154 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2155 |     |                 mstore(pos, length)
  2156 |     |                 let shift := sub(256, shl(3, length))
  2157 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2158 |     |             }
  2159 |     |             m0 := mload(0x00)
  2160 |     |             m1 := mload(0x20)
  2161 |     |             m2 := mload(0x40)
  2162 |     |             m3 := mload(0x60)
  2163 |     |             m4 := mload(0x80)
  2164 |     |             m5 := mload(0xa0)
  2165 |     |             // Selector of `log(uint256,string,bool)`.
  2166 |     |             mstore(0x00, 0x4ceda75a)
  2167 |     |             mstore(0x20, p0)
  2168 |     |             mstore(0x40, 0x60)
  2169 |     |             mstore(0x60, p2)
  2170 |     |             writeString(0x80, p1)
  2171 |     |         }
  2172 |     |         _sendLogPayload(0x1c, 0xa4);
  2173 |     |         /// @solidity memory-safe-assembly
  2174 |     |         assembly {
  2175 |     |             mstore(0x00, m0)
  2176 |     |             mstore(0x20, m1)
  2177 |     |             mstore(0x40, m2)
  2178 |     |             mstore(0x60, m3)
  2179 |     |             mstore(0x80, m4)
  2180 |     |             mstore(0xa0, m5)
  2181 |     |         }
  2182 |     |     }
  2183 |     | 
  2184 |     |     function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {
  2185 |     |         bytes32 m0;
  2186 |     |         bytes32 m1;
  2187 |     |         bytes32 m2;
  2188 |     |         bytes32 m3;
  2189 |     |         bytes32 m4;
  2190 |     |         bytes32 m5;
  2191 |     |         /// @solidity memory-safe-assembly
  2192 |     |         assembly {
  2193 |     |             function writeString(pos, w) {
  2194 |     |                 let length := 0
  2195 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2196 |     |                 mstore(pos, length)
  2197 |     |                 let shift := sub(256, shl(3, length))
  2198 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2199 |     |             }
  2200 |     |             m0 := mload(0x00)
  2201 |     |             m1 := mload(0x20)
  2202 |     |             m2 := mload(0x40)
  2203 |     |             m3 := mload(0x60)
  2204 |     |             m4 := mload(0x80)
  2205 |     |             m5 := mload(0xa0)
  2206 |     |             // Selector of `log(uint256,string,uint256)`.
  2207 |     |             mstore(0x00, 0x37aa7d4c)
  2208 |     |             mstore(0x20, p0)
  2209 |     |             mstore(0x40, 0x60)
  2210 |     |             mstore(0x60, p2)
  2211 |     |             writeString(0x80, p1)
  2212 |     |         }
  2213 |     |         _sendLogPayload(0x1c, 0xa4);
  2214 |     |         /// @solidity memory-safe-assembly
  2215 |     |         assembly {
  2216 |     |             mstore(0x00, m0)
  2217 |     |             mstore(0x20, m1)
  2218 |     |             mstore(0x40, m2)
  2219 |     |             mstore(0x60, m3)
  2220 |     |             mstore(0x80, m4)
  2221 |     |             mstore(0xa0, m5)
  2222 |     |         }
  2223 |     |     }
  2224 |     | 
  2225 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {
  2226 |     |         bytes32 m0;
  2227 |     |         bytes32 m1;
  2228 |     |         bytes32 m2;
  2229 |     |         bytes32 m3;
  2230 |     |         bytes32 m4;
  2231 |     |         bytes32 m5;
  2232 |     |         bytes32 m6;
  2233 |     |         bytes32 m7;
  2234 |     |         /// @solidity memory-safe-assembly
  2235 |     |         assembly {
  2236 |     |             function writeString(pos, w) {
  2237 |     |                 let length := 0
  2238 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2239 |     |                 mstore(pos, length)
  2240 |     |                 let shift := sub(256, shl(3, length))
  2241 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2242 |     |             }
  2243 |     |             m0 := mload(0x00)
  2244 |     |             m1 := mload(0x20)
  2245 |     |             m2 := mload(0x40)
  2246 |     |             m3 := mload(0x60)
  2247 |     |             m4 := mload(0x80)
  2248 |     |             m5 := mload(0xa0)
  2249 |     |             m6 := mload(0xc0)
  2250 |     |             m7 := mload(0xe0)
  2251 |     |             // Selector of `log(uint256,string,string)`.
  2252 |     |             mstore(0x00, 0xb115611f)
  2253 |     |             mstore(0x20, p0)
  2254 |     |             mstore(0x40, 0x60)
  2255 |     |             mstore(0x60, 0xa0)
  2256 |     |             writeString(0x80, p1)
  2257 |     |             writeString(0xc0, p2)
  2258 |     |         }
  2259 |     |         _sendLogPayload(0x1c, 0xe4);
  2260 |     |         /// @solidity memory-safe-assembly
  2261 |     |         assembly {
  2262 |     |             mstore(0x00, m0)
  2263 |     |             mstore(0x20, m1)
  2264 |     |             mstore(0x40, m2)
  2265 |     |             mstore(0x60, m3)
  2266 |     |             mstore(0x80, m4)
  2267 |     |             mstore(0xa0, m5)
  2268 |     |             mstore(0xc0, m6)
  2269 |     |             mstore(0xe0, m7)
  2270 |     |         }
  2271 |     |     }
  2272 |     | 
  2273 |     |     function log(bytes32 p0, address p1, address p2) internal pure {
  2274 |     |         bytes32 m0;
  2275 |     |         bytes32 m1;
  2276 |     |         bytes32 m2;
  2277 |     |         bytes32 m3;
  2278 |     |         bytes32 m4;
  2279 |     |         bytes32 m5;
  2280 |     |         /// @solidity memory-safe-assembly
  2281 |     |         assembly {
  2282 |     |             function writeString(pos, w) {
  2283 |     |                 let length := 0
  2284 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2285 |     |                 mstore(pos, length)
  2286 |     |                 let shift := sub(256, shl(3, length))
  2287 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2288 |     |             }
  2289 |     |             m0 := mload(0x00)
  2290 |     |             m1 := mload(0x20)
  2291 |     |             m2 := mload(0x40)
  2292 |     |             m3 := mload(0x60)
  2293 |     |             m4 := mload(0x80)
  2294 |     |             m5 := mload(0xa0)
  2295 |     |             // Selector of `log(string,address,address)`.
  2296 |     |             mstore(0x00, 0xfcec75e0)
  2297 |     |             mstore(0x20, 0x60)
  2298 |     |             mstore(0x40, p1)
  2299 |     |             mstore(0x60, p2)
  2300 |     |             writeString(0x80, p0)
  2301 |     |         }
  2302 |     |         _sendLogPayload(0x1c, 0xa4);
  2303 |     |         /// @solidity memory-safe-assembly
  2304 |     |         assembly {
  2305 |     |             mstore(0x00, m0)
  2306 |     |             mstore(0x20, m1)
  2307 |     |             mstore(0x40, m2)
  2308 |     |             mstore(0x60, m3)
  2309 |     |             mstore(0x80, m4)
  2310 |     |             mstore(0xa0, m5)
  2311 |     |         }
  2312 |     |     }
  2313 |     | 
  2314 |     |     function log(bytes32 p0, address p1, bool p2) internal pure {
  2315 |     |         bytes32 m0;
  2316 |     |         bytes32 m1;
  2317 |     |         bytes32 m2;
  2318 |     |         bytes32 m3;
  2319 |     |         bytes32 m4;
  2320 |     |         bytes32 m5;
  2321 |     |         /// @solidity memory-safe-assembly
  2322 |     |         assembly {
  2323 |     |             function writeString(pos, w) {
  2324 |     |                 let length := 0
  2325 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2326 |     |                 mstore(pos, length)
  2327 |     |                 let shift := sub(256, shl(3, length))
  2328 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2329 |     |             }
  2330 |     |             m0 := mload(0x00)
  2331 |     |             m1 := mload(0x20)
  2332 |     |             m2 := mload(0x40)
  2333 |     |             m3 := mload(0x60)
  2334 |     |             m4 := mload(0x80)
  2335 |     |             m5 := mload(0xa0)
  2336 |     |             // Selector of `log(string,address,bool)`.
  2337 |     |             mstore(0x00, 0xc91d5ed4)
  2338 |     |             mstore(0x20, 0x60)
  2339 |     |             mstore(0x40, p1)
  2340 |     |             mstore(0x60, p2)
  2341 |     |             writeString(0x80, p0)
  2342 |     |         }
  2343 |     |         _sendLogPayload(0x1c, 0xa4);
  2344 |     |         /// @solidity memory-safe-assembly
  2345 |     |         assembly {
  2346 |     |             mstore(0x00, m0)
  2347 |     |             mstore(0x20, m1)
  2348 |     |             mstore(0x40, m2)
  2349 |     |             mstore(0x60, m3)
  2350 |     |             mstore(0x80, m4)
  2351 |     |             mstore(0xa0, m5)
  2352 |     |         }
  2353 |     |     }
  2354 |     | 
  2355 |     |     function log(bytes32 p0, address p1, uint256 p2) internal pure {
  2356 |     |         bytes32 m0;
  2357 |     |         bytes32 m1;
  2358 |     |         bytes32 m2;
  2359 |     |         bytes32 m3;
  2360 |     |         bytes32 m4;
  2361 |     |         bytes32 m5;
  2362 |     |         /// @solidity memory-safe-assembly
  2363 |     |         assembly {
  2364 |     |             function writeString(pos, w) {
  2365 |     |                 let length := 0
  2366 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2367 |     |                 mstore(pos, length)
  2368 |     |                 let shift := sub(256, shl(3, length))
  2369 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2370 |     |             }
  2371 |     |             m0 := mload(0x00)
  2372 |     |             m1 := mload(0x20)
  2373 |     |             m2 := mload(0x40)
  2374 |     |             m3 := mload(0x60)
  2375 |     |             m4 := mload(0x80)
  2376 |     |             m5 := mload(0xa0)
  2377 |     |             // Selector of `log(string,address,uint256)`.
  2378 |     |             mstore(0x00, 0x0d26b925)
  2379 |     |             mstore(0x20, 0x60)
  2380 |     |             mstore(0x40, p1)
  2381 |     |             mstore(0x60, p2)
  2382 |     |             writeString(0x80, p0)
  2383 |     |         }
  2384 |     |         _sendLogPayload(0x1c, 0xa4);
  2385 |     |         /// @solidity memory-safe-assembly
  2386 |     |         assembly {
  2387 |     |             mstore(0x00, m0)
  2388 |     |             mstore(0x20, m1)
  2389 |     |             mstore(0x40, m2)
  2390 |     |             mstore(0x60, m3)
  2391 |     |             mstore(0x80, m4)
  2392 |     |             mstore(0xa0, m5)
  2393 |     |         }
  2394 |     |     }
  2395 |     | 
  2396 |     |     function log(bytes32 p0, address p1, bytes32 p2) internal pure {
  2397 |     |         bytes32 m0;
  2398 |     |         bytes32 m1;
  2399 |     |         bytes32 m2;
  2400 |     |         bytes32 m3;
  2401 |     |         bytes32 m4;
  2402 |     |         bytes32 m5;
  2403 |     |         bytes32 m6;
  2404 |     |         bytes32 m7;
  2405 |     |         /// @solidity memory-safe-assembly
  2406 |     |         assembly {
  2407 |     |             function writeString(pos, w) {
  2408 |     |                 let length := 0
  2409 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2410 |     |                 mstore(pos, length)
  2411 |     |                 let shift := sub(256, shl(3, length))
  2412 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2413 |     |             }
  2414 |     |             m0 := mload(0x00)
  2415 |     |             m1 := mload(0x20)
  2416 |     |             m2 := mload(0x40)
  2417 |     |             m3 := mload(0x60)
  2418 |     |             m4 := mload(0x80)
  2419 |     |             m5 := mload(0xa0)
  2420 |     |             m6 := mload(0xc0)
  2421 |     |             m7 := mload(0xe0)
  2422 |     |             // Selector of `log(string,address,string)`.
  2423 |     |             mstore(0x00, 0xe0e9ad4f)
  2424 |     |             mstore(0x20, 0x60)
  2425 |     |             mstore(0x40, p1)
  2426 |     |             mstore(0x60, 0xa0)
  2427 |     |             writeString(0x80, p0)
  2428 |     |             writeString(0xc0, p2)
  2429 |     |         }
  2430 |     |         _sendLogPayload(0x1c, 0xe4);
  2431 |     |         /// @solidity memory-safe-assembly
  2432 |     |         assembly {
  2433 |     |             mstore(0x00, m0)
  2434 |     |             mstore(0x20, m1)
  2435 |     |             mstore(0x40, m2)
  2436 |     |             mstore(0x60, m3)
  2437 |     |             mstore(0x80, m4)
  2438 |     |             mstore(0xa0, m5)
  2439 |     |             mstore(0xc0, m6)
  2440 |     |             mstore(0xe0, m7)
  2441 |     |         }
  2442 |     |     }
  2443 |     | 
  2444 |     |     function log(bytes32 p0, bool p1, address p2) internal pure {
  2445 |     |         bytes32 m0;
  2446 |     |         bytes32 m1;
  2447 |     |         bytes32 m2;
  2448 |     |         bytes32 m3;
  2449 |     |         bytes32 m4;
  2450 |     |         bytes32 m5;
  2451 |     |         /// @solidity memory-safe-assembly
  2452 |     |         assembly {
  2453 |     |             function writeString(pos, w) {
  2454 |     |                 let length := 0
  2455 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2456 |     |                 mstore(pos, length)
  2457 |     |                 let shift := sub(256, shl(3, length))
  2458 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2459 |     |             }
  2460 |     |             m0 := mload(0x00)
  2461 |     |             m1 := mload(0x20)
  2462 |     |             m2 := mload(0x40)
  2463 |     |             m3 := mload(0x60)
  2464 |     |             m4 := mload(0x80)
  2465 |     |             m5 := mload(0xa0)
  2466 |     |             // Selector of `log(string,bool,address)`.
  2467 |     |             mstore(0x00, 0x932bbb38)
  2468 |     |             mstore(0x20, 0x60)
  2469 |     |             mstore(0x40, p1)
  2470 |     |             mstore(0x60, p2)
  2471 |     |             writeString(0x80, p0)
  2472 |     |         }
  2473 |     |         _sendLogPayload(0x1c, 0xa4);
  2474 |     |         /// @solidity memory-safe-assembly
  2475 |     |         assembly {
  2476 |     |             mstore(0x00, m0)
  2477 |     |             mstore(0x20, m1)
  2478 |     |             mstore(0x40, m2)
  2479 |     |             mstore(0x60, m3)
  2480 |     |             mstore(0x80, m4)
  2481 |     |             mstore(0xa0, m5)
  2482 |     |         }
  2483 |     |     }
  2484 |     | 
  2485 |     |     function log(bytes32 p0, bool p1, bool p2) internal pure {
  2486 |     |         bytes32 m0;
  2487 |     |         bytes32 m1;
  2488 |     |         bytes32 m2;
  2489 |     |         bytes32 m3;
  2490 |     |         bytes32 m4;
  2491 |     |         bytes32 m5;
  2492 |     |         /// @solidity memory-safe-assembly
  2493 |     |         assembly {
  2494 |     |             function writeString(pos, w) {
  2495 |     |                 let length := 0
  2496 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2497 |     |                 mstore(pos, length)
  2498 |     |                 let shift := sub(256, shl(3, length))
  2499 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2500 |     |             }
  2501 |     |             m0 := mload(0x00)
  2502 |     |             m1 := mload(0x20)
  2503 |     |             m2 := mload(0x40)
  2504 |     |             m3 := mload(0x60)
  2505 |     |             m4 := mload(0x80)
  2506 |     |             m5 := mload(0xa0)
  2507 |     |             // Selector of `log(string,bool,bool)`.
  2508 |     |             mstore(0x00, 0x850b7ad6)
  2509 |     |             mstore(0x20, 0x60)
  2510 |     |             mstore(0x40, p1)
  2511 |     |             mstore(0x60, p2)
  2512 |     |             writeString(0x80, p0)
  2513 |     |         }
  2514 |     |         _sendLogPayload(0x1c, 0xa4);
  2515 |     |         /// @solidity memory-safe-assembly
  2516 |     |         assembly {
  2517 |     |             mstore(0x00, m0)
  2518 |     |             mstore(0x20, m1)
  2519 |     |             mstore(0x40, m2)
  2520 |     |             mstore(0x60, m3)
  2521 |     |             mstore(0x80, m4)
  2522 |     |             mstore(0xa0, m5)
  2523 |     |         }
  2524 |     |     }
  2525 |     | 
  2526 |     |     function log(bytes32 p0, bool p1, uint256 p2) internal pure {
  2527 |     |         bytes32 m0;
  2528 |     |         bytes32 m1;
  2529 |     |         bytes32 m2;
  2530 |     |         bytes32 m3;
  2531 |     |         bytes32 m4;
  2532 |     |         bytes32 m5;
  2533 |     |         /// @solidity memory-safe-assembly
  2534 |     |         assembly {
  2535 |     |             function writeString(pos, w) {
  2536 |     |                 let length := 0
  2537 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2538 |     |                 mstore(pos, length)
  2539 |     |                 let shift := sub(256, shl(3, length))
  2540 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2541 |     |             }
  2542 |     |             m0 := mload(0x00)
  2543 |     |             m1 := mload(0x20)
  2544 |     |             m2 := mload(0x40)
  2545 |     |             m3 := mload(0x60)
  2546 |     |             m4 := mload(0x80)
  2547 |     |             m5 := mload(0xa0)
  2548 |     |             // Selector of `log(string,bool,uint256)`.
  2549 |     |             mstore(0x00, 0xc95958d6)
  2550 |     |             mstore(0x20, 0x60)
  2551 |     |             mstore(0x40, p1)
  2552 |     |             mstore(0x60, p2)
  2553 |     |             writeString(0x80, p0)
  2554 |     |         }
  2555 |     |         _sendLogPayload(0x1c, 0xa4);
  2556 |     |         /// @solidity memory-safe-assembly
  2557 |     |         assembly {
  2558 |     |             mstore(0x00, m0)
  2559 |     |             mstore(0x20, m1)
  2560 |     |             mstore(0x40, m2)
  2561 |     |             mstore(0x60, m3)
  2562 |     |             mstore(0x80, m4)
  2563 |     |             mstore(0xa0, m5)
  2564 |     |         }
  2565 |     |     }
  2566 |     | 
  2567 |     |     function log(bytes32 p0, bool p1, bytes32 p2) internal pure {
  2568 |     |         bytes32 m0;
  2569 |     |         bytes32 m1;
  2570 |     |         bytes32 m2;
  2571 |     |         bytes32 m3;
  2572 |     |         bytes32 m4;
  2573 |     |         bytes32 m5;
  2574 |     |         bytes32 m6;
  2575 |     |         bytes32 m7;
  2576 |     |         /// @solidity memory-safe-assembly
  2577 |     |         assembly {
  2578 |     |             function writeString(pos, w) {
  2579 |     |                 let length := 0
  2580 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2581 |     |                 mstore(pos, length)
  2582 |     |                 let shift := sub(256, shl(3, length))
  2583 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2584 |     |             }
  2585 |     |             m0 := mload(0x00)
  2586 |     |             m1 := mload(0x20)
  2587 |     |             m2 := mload(0x40)
  2588 |     |             m3 := mload(0x60)
  2589 |     |             m4 := mload(0x80)
  2590 |     |             m5 := mload(0xa0)
  2591 |     |             m6 := mload(0xc0)
  2592 |     |             m7 := mload(0xe0)
  2593 |     |             // Selector of `log(string,bool,string)`.
  2594 |     |             mstore(0x00, 0xe298f47d)
  2595 |     |             mstore(0x20, 0x60)
  2596 |     |             mstore(0x40, p1)
  2597 |     |             mstore(0x60, 0xa0)
  2598 |     |             writeString(0x80, p0)
  2599 |     |             writeString(0xc0, p2)
  2600 |     |         }
  2601 |     |         _sendLogPayload(0x1c, 0xe4);
  2602 |     |         /// @solidity memory-safe-assembly
  2603 |     |         assembly {
  2604 |     |             mstore(0x00, m0)
  2605 |     |             mstore(0x20, m1)
  2606 |     |             mstore(0x40, m2)
  2607 |     |             mstore(0x60, m3)
  2608 |     |             mstore(0x80, m4)
  2609 |     |             mstore(0xa0, m5)
  2610 |     |             mstore(0xc0, m6)
  2611 |     |             mstore(0xe0, m7)
  2612 |     |         }
  2613 |     |     }
  2614 |     | 
  2615 |     |     function log(bytes32 p0, uint256 p1, address p2) internal pure {
  2616 |     |         bytes32 m0;
  2617 |     |         bytes32 m1;
  2618 |     |         bytes32 m2;
  2619 |     |         bytes32 m3;
  2620 |     |         bytes32 m4;
  2621 |     |         bytes32 m5;
  2622 |     |         /// @solidity memory-safe-assembly
  2623 |     |         assembly {
  2624 |     |             function writeString(pos, w) {
  2625 |     |                 let length := 0
  2626 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2627 |     |                 mstore(pos, length)
  2628 |     |                 let shift := sub(256, shl(3, length))
  2629 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2630 |     |             }
  2631 |     |             m0 := mload(0x00)
  2632 |     |             m1 := mload(0x20)
  2633 |     |             m2 := mload(0x40)
  2634 |     |             m3 := mload(0x60)
  2635 |     |             m4 := mload(0x80)
  2636 |     |             m5 := mload(0xa0)
  2637 |     |             // Selector of `log(string,uint256,address)`.
  2638 |     |             mstore(0x00, 0x1c7ec448)
  2639 |     |             mstore(0x20, 0x60)
  2640 |     |             mstore(0x40, p1)
  2641 |     |             mstore(0x60, p2)
  2642 |     |             writeString(0x80, p0)
  2643 |     |         }
  2644 |     |         _sendLogPayload(0x1c, 0xa4);
  2645 |     |         /// @solidity memory-safe-assembly
  2646 |     |         assembly {
  2647 |     |             mstore(0x00, m0)
  2648 |     |             mstore(0x20, m1)
  2649 |     |             mstore(0x40, m2)
  2650 |     |             mstore(0x60, m3)
  2651 |     |             mstore(0x80, m4)
  2652 |     |             mstore(0xa0, m5)
  2653 |     |         }
  2654 |     |     }
  2655 |     | 
  2656 |     |     function log(bytes32 p0, uint256 p1, bool p2) internal pure {
  2657 |     |         bytes32 m0;
  2658 |     |         bytes32 m1;
  2659 |     |         bytes32 m2;
  2660 |     |         bytes32 m3;
  2661 |     |         bytes32 m4;
  2662 |     |         bytes32 m5;
  2663 |     |         /// @solidity memory-safe-assembly
  2664 |     |         assembly {
  2665 |     |             function writeString(pos, w) {
  2666 |     |                 let length := 0
  2667 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2668 |     |                 mstore(pos, length)
  2669 |     |                 let shift := sub(256, shl(3, length))
  2670 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2671 |     |             }
  2672 |     |             m0 := mload(0x00)
  2673 |     |             m1 := mload(0x20)
  2674 |     |             m2 := mload(0x40)
  2675 |     |             m3 := mload(0x60)
  2676 |     |             m4 := mload(0x80)
  2677 |     |             m5 := mload(0xa0)
  2678 |     |             // Selector of `log(string,uint256,bool)`.
  2679 |     |             mstore(0x00, 0xca7733b1)
  2680 |     |             mstore(0x20, 0x60)
  2681 |     |             mstore(0x40, p1)
  2682 |     |             mstore(0x60, p2)
  2683 |     |             writeString(0x80, p0)
  2684 |     |         }
  2685 |     |         _sendLogPayload(0x1c, 0xa4);
  2686 |     |         /// @solidity memory-safe-assembly
  2687 |     |         assembly {
  2688 |     |             mstore(0x00, m0)
  2689 |     |             mstore(0x20, m1)
  2690 |     |             mstore(0x40, m2)
  2691 |     |             mstore(0x60, m3)
  2692 |     |             mstore(0x80, m4)
  2693 |     |             mstore(0xa0, m5)
  2694 |     |         }
  2695 |     |     }
  2696 |     | 
  2697 |     |     function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {
  2698 |     |         bytes32 m0;
  2699 |     |         bytes32 m1;
  2700 |     |         bytes32 m2;
  2701 |     |         bytes32 m3;
  2702 |     |         bytes32 m4;
  2703 |     |         bytes32 m5;
  2704 |     |         /// @solidity memory-safe-assembly
  2705 |     |         assembly {
  2706 |     |             function writeString(pos, w) {
  2707 |     |                 let length := 0
  2708 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2709 |     |                 mstore(pos, length)
  2710 |     |                 let shift := sub(256, shl(3, length))
  2711 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2712 |     |             }
  2713 |     |             m0 := mload(0x00)
  2714 |     |             m1 := mload(0x20)
  2715 |     |             m2 := mload(0x40)
  2716 |     |             m3 := mload(0x60)
  2717 |     |             m4 := mload(0x80)
  2718 |     |             m5 := mload(0xa0)
  2719 |     |             // Selector of `log(string,uint256,uint256)`.
  2720 |     |             mstore(0x00, 0xca47c4eb)
  2721 |     |             mstore(0x20, 0x60)
  2722 |     |             mstore(0x40, p1)
  2723 |     |             mstore(0x60, p2)
  2724 |     |             writeString(0x80, p0)
  2725 |     |         }
  2726 |     |         _sendLogPayload(0x1c, 0xa4);
  2727 |     |         /// @solidity memory-safe-assembly
  2728 |     |         assembly {
  2729 |     |             mstore(0x00, m0)
  2730 |     |             mstore(0x20, m1)
  2731 |     |             mstore(0x40, m2)
  2732 |     |             mstore(0x60, m3)
  2733 |     |             mstore(0x80, m4)
  2734 |     |             mstore(0xa0, m5)
  2735 |     |         }
  2736 |     |     }
  2737 |     | 
  2738 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {
  2739 |     |         bytes32 m0;
  2740 |     |         bytes32 m1;
  2741 |     |         bytes32 m2;
  2742 |     |         bytes32 m3;
  2743 |     |         bytes32 m4;
  2744 |     |         bytes32 m5;
  2745 |     |         bytes32 m6;
  2746 |     |         bytes32 m7;
  2747 |     |         /// @solidity memory-safe-assembly
  2748 |     |         assembly {
  2749 |     |             function writeString(pos, w) {
  2750 |     |                 let length := 0
  2751 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2752 |     |                 mstore(pos, length)
  2753 |     |                 let shift := sub(256, shl(3, length))
  2754 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2755 |     |             }
  2756 |     |             m0 := mload(0x00)
  2757 |     |             m1 := mload(0x20)
  2758 |     |             m2 := mload(0x40)
  2759 |     |             m3 := mload(0x60)
  2760 |     |             m4 := mload(0x80)
  2761 |     |             m5 := mload(0xa0)
  2762 |     |             m6 := mload(0xc0)
  2763 |     |             m7 := mload(0xe0)
  2764 |     |             // Selector of `log(string,uint256,string)`.
  2765 |     |             mstore(0x00, 0x5970e089)
  2766 |     |             mstore(0x20, 0x60)
  2767 |     |             mstore(0x40, p1)
  2768 |     |             mstore(0x60, 0xa0)
  2769 |     |             writeString(0x80, p0)
  2770 |     |             writeString(0xc0, p2)
  2771 |     |         }
  2772 |     |         _sendLogPayload(0x1c, 0xe4);
  2773 |     |         /// @solidity memory-safe-assembly
  2774 |     |         assembly {
  2775 |     |             mstore(0x00, m0)
  2776 |     |             mstore(0x20, m1)
  2777 |     |             mstore(0x40, m2)
  2778 |     |             mstore(0x60, m3)
  2779 |     |             mstore(0x80, m4)
  2780 |     |             mstore(0xa0, m5)
  2781 |     |             mstore(0xc0, m6)
  2782 |     |             mstore(0xe0, m7)
  2783 |     |         }
  2784 |     |     }
  2785 |     | 
  2786 |     |     function log(bytes32 p0, bytes32 p1, address p2) internal pure {
  2787 |     |         bytes32 m0;
  2788 |     |         bytes32 m1;
  2789 |     |         bytes32 m2;
  2790 |     |         bytes32 m3;
  2791 |     |         bytes32 m4;
  2792 |     |         bytes32 m5;
  2793 |     |         bytes32 m6;
  2794 |     |         bytes32 m7;
  2795 |     |         /// @solidity memory-safe-assembly
  2796 |     |         assembly {
  2797 |     |             function writeString(pos, w) {
  2798 |     |                 let length := 0
  2799 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2800 |     |                 mstore(pos, length)
  2801 |     |                 let shift := sub(256, shl(3, length))
  2802 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2803 |     |             }
  2804 |     |             m0 := mload(0x00)
  2805 |     |             m1 := mload(0x20)
  2806 |     |             m2 := mload(0x40)
  2807 |     |             m3 := mload(0x60)
  2808 |     |             m4 := mload(0x80)
  2809 |     |             m5 := mload(0xa0)
  2810 |     |             m6 := mload(0xc0)
  2811 |     |             m7 := mload(0xe0)
  2812 |     |             // Selector of `log(string,string,address)`.
  2813 |     |             mstore(0x00, 0x95ed0195)
  2814 |     |             mstore(0x20, 0x60)
  2815 |     |             mstore(0x40, 0xa0)
  2816 |     |             mstore(0x60, p2)
  2817 |     |             writeString(0x80, p0)
  2818 |     |             writeString(0xc0, p1)
  2819 |     |         }
  2820 |     |         _sendLogPayload(0x1c, 0xe4);
  2821 |     |         /// @solidity memory-safe-assembly
  2822 |     |         assembly {
  2823 |     |             mstore(0x00, m0)
  2824 |     |             mstore(0x20, m1)
  2825 |     |             mstore(0x40, m2)
  2826 |     |             mstore(0x60, m3)
  2827 |     |             mstore(0x80, m4)
  2828 |     |             mstore(0xa0, m5)
  2829 |     |             mstore(0xc0, m6)
  2830 |     |             mstore(0xe0, m7)
  2831 |     |         }
  2832 |     |     }
  2833 |     | 
  2834 |     |     function log(bytes32 p0, bytes32 p1, bool p2) internal pure {
  2835 |     |         bytes32 m0;
  2836 |     |         bytes32 m1;
  2837 |     |         bytes32 m2;
  2838 |     |         bytes32 m3;
  2839 |     |         bytes32 m4;
  2840 |     |         bytes32 m5;
  2841 |     |         bytes32 m6;
  2842 |     |         bytes32 m7;
  2843 |     |         /// @solidity memory-safe-assembly
  2844 |     |         assembly {
  2845 |     |             function writeString(pos, w) {
  2846 |     |                 let length := 0
  2847 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2848 |     |                 mstore(pos, length)
  2849 |     |                 let shift := sub(256, shl(3, length))
  2850 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2851 |     |             }
  2852 |     |             m0 := mload(0x00)
  2853 |     |             m1 := mload(0x20)
  2854 |     |             m2 := mload(0x40)
  2855 |     |             m3 := mload(0x60)
  2856 |     |             m4 := mload(0x80)
  2857 |     |             m5 := mload(0xa0)
  2858 |     |             m6 := mload(0xc0)
  2859 |     |             m7 := mload(0xe0)
  2860 |     |             // Selector of `log(string,string,bool)`.
  2861 |     |             mstore(0x00, 0xb0e0f9b5)
  2862 |     |             mstore(0x20, 0x60)
  2863 |     |             mstore(0x40, 0xa0)
  2864 |     |             mstore(0x60, p2)
  2865 |     |             writeString(0x80, p0)
  2866 |     |             writeString(0xc0, p1)
  2867 |     |         }
  2868 |     |         _sendLogPayload(0x1c, 0xe4);
  2869 |     |         /// @solidity memory-safe-assembly
  2870 |     |         assembly {
  2871 |     |             mstore(0x00, m0)
  2872 |     |             mstore(0x20, m1)
  2873 |     |             mstore(0x40, m2)
  2874 |     |             mstore(0x60, m3)
  2875 |     |             mstore(0x80, m4)
  2876 |     |             mstore(0xa0, m5)
  2877 |     |             mstore(0xc0, m6)
  2878 |     |             mstore(0xe0, m7)
  2879 |     |         }
  2880 |     |     }
  2881 |     | 
  2882 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {
  2883 |     |         bytes32 m0;
  2884 |     |         bytes32 m1;
  2885 |     |         bytes32 m2;
  2886 |     |         bytes32 m3;
  2887 |     |         bytes32 m4;
  2888 |     |         bytes32 m5;
  2889 |     |         bytes32 m6;
  2890 |     |         bytes32 m7;
  2891 |     |         /// @solidity memory-safe-assembly
  2892 |     |         assembly {
  2893 |     |             function writeString(pos, w) {
  2894 |     |                 let length := 0
  2895 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2896 |     |                 mstore(pos, length)
  2897 |     |                 let shift := sub(256, shl(3, length))
  2898 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2899 |     |             }
  2900 |     |             m0 := mload(0x00)
  2901 |     |             m1 := mload(0x20)
  2902 |     |             m2 := mload(0x40)
  2903 |     |             m3 := mload(0x60)
  2904 |     |             m4 := mload(0x80)
  2905 |     |             m5 := mload(0xa0)
  2906 |     |             m6 := mload(0xc0)
  2907 |     |             m7 := mload(0xe0)
  2908 |     |             // Selector of `log(string,string,uint256)`.
  2909 |     |             mstore(0x00, 0x5821efa1)
  2910 |     |             mstore(0x20, 0x60)
  2911 |     |             mstore(0x40, 0xa0)
  2912 |     |             mstore(0x60, p2)
  2913 |     |             writeString(0x80, p0)
  2914 |     |             writeString(0xc0, p1)
  2915 |     |         }
  2916 |     |         _sendLogPayload(0x1c, 0xe4);
  2917 |     |         /// @solidity memory-safe-assembly
  2918 |     |         assembly {
  2919 |     |             mstore(0x00, m0)
  2920 |     |             mstore(0x20, m1)
  2921 |     |             mstore(0x40, m2)
  2922 |     |             mstore(0x60, m3)
  2923 |     |             mstore(0x80, m4)
  2924 |     |             mstore(0xa0, m5)
  2925 |     |             mstore(0xc0, m6)
  2926 |     |             mstore(0xe0, m7)
  2927 |     |         }
  2928 |     |     }
  2929 |     | 
  2930 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {
  2931 |     |         bytes32 m0;
  2932 |     |         bytes32 m1;
  2933 |     |         bytes32 m2;
  2934 |     |         bytes32 m3;
  2935 |     |         bytes32 m4;
  2936 |     |         bytes32 m5;
  2937 |     |         bytes32 m6;
  2938 |     |         bytes32 m7;
  2939 |     |         bytes32 m8;
  2940 |     |         bytes32 m9;
  2941 |     |         /// @solidity memory-safe-assembly
  2942 |     |         assembly {
  2943 |     |             function writeString(pos, w) {
  2944 |     |                 let length := 0
  2945 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  2946 |     |                 mstore(pos, length)
  2947 |     |                 let shift := sub(256, shl(3, length))
  2948 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  2949 |     |             }
  2950 |     |             m0 := mload(0x00)
  2951 |     |             m1 := mload(0x20)
  2952 |     |             m2 := mload(0x40)
  2953 |     |             m3 := mload(0x60)
  2954 |     |             m4 := mload(0x80)
  2955 |     |             m5 := mload(0xa0)
  2956 |     |             m6 := mload(0xc0)
  2957 |     |             m7 := mload(0xe0)
  2958 |     |             m8 := mload(0x100)
  2959 |     |             m9 := mload(0x120)
  2960 |     |             // Selector of `log(string,string,string)`.
  2961 |     |             mstore(0x00, 0x2ced7cef)
  2962 |     |             mstore(0x20, 0x60)
  2963 |     |             mstore(0x40, 0xa0)
  2964 |     |             mstore(0x60, 0xe0)
  2965 |     |             writeString(0x80, p0)
  2966 |     |             writeString(0xc0, p1)
  2967 |     |             writeString(0x100, p2)
  2968 |     |         }
  2969 |     |         _sendLogPayload(0x1c, 0x124);
  2970 |     |         /// @solidity memory-safe-assembly
  2971 |     |         assembly {
  2972 |     |             mstore(0x00, m0)
  2973 |     |             mstore(0x20, m1)
  2974 |     |             mstore(0x40, m2)
  2975 |     |             mstore(0x60, m3)
  2976 |     |             mstore(0x80, m4)
  2977 |     |             mstore(0xa0, m5)
  2978 |     |             mstore(0xc0, m6)
  2979 |     |             mstore(0xe0, m7)
  2980 |     |             mstore(0x100, m8)
  2981 |     |             mstore(0x120, m9)
  2982 |     |         }
  2983 |     |     }
  2984 |     | 
  2985 |     |     function log(address p0, address p1, address p2, address p3) internal pure {
  2986 |     |         bytes32 m0;
  2987 |     |         bytes32 m1;
  2988 |     |         bytes32 m2;
  2989 |     |         bytes32 m3;
  2990 |     |         bytes32 m4;
  2991 |     |         /// @solidity memory-safe-assembly
  2992 |     |         assembly {
  2993 |     |             m0 := mload(0x00)
  2994 |     |             m1 := mload(0x20)
  2995 |     |             m2 := mload(0x40)
  2996 |     |             m3 := mload(0x60)
  2997 |     |             m4 := mload(0x80)
  2998 |     |             // Selector of `log(address,address,address,address)`.
  2999 |     |             mstore(0x00, 0x665bf134)
  3000 |     |             mstore(0x20, p0)
  3001 |     |             mstore(0x40, p1)
  3002 |     |             mstore(0x60, p2)
  3003 |     |             mstore(0x80, p3)
  3004 |     |         }
  3005 |     |         _sendLogPayload(0x1c, 0x84);
  3006 |     |         /// @solidity memory-safe-assembly
  3007 |     |         assembly {
  3008 |     |             mstore(0x00, m0)
  3009 |     |             mstore(0x20, m1)
  3010 |     |             mstore(0x40, m2)
  3011 |     |             mstore(0x60, m3)
  3012 |     |             mstore(0x80, m4)
  3013 |     |         }
  3014 |     |     }
  3015 |     | 
  3016 |     |     function log(address p0, address p1, address p2, bool p3) internal pure {
  3017 |     |         bytes32 m0;
  3018 |     |         bytes32 m1;
  3019 |     |         bytes32 m2;
  3020 |     |         bytes32 m3;
  3021 |     |         bytes32 m4;
  3022 |     |         /// @solidity memory-safe-assembly
  3023 |     |         assembly {
  3024 |     |             m0 := mload(0x00)
  3025 |     |             m1 := mload(0x20)
  3026 |     |             m2 := mload(0x40)
  3027 |     |             m3 := mload(0x60)
  3028 |     |             m4 := mload(0x80)
  3029 |     |             // Selector of `log(address,address,address,bool)`.
  3030 |     |             mstore(0x00, 0x0e378994)
  3031 |     |             mstore(0x20, p0)
  3032 |     |             mstore(0x40, p1)
  3033 |     |             mstore(0x60, p2)
  3034 |     |             mstore(0x80, p3)
  3035 |     |         }
  3036 |     |         _sendLogPayload(0x1c, 0x84);
  3037 |     |         /// @solidity memory-safe-assembly
  3038 |     |         assembly {
  3039 |     |             mstore(0x00, m0)
  3040 |     |             mstore(0x20, m1)
  3041 |     |             mstore(0x40, m2)
  3042 |     |             mstore(0x60, m3)
  3043 |     |             mstore(0x80, m4)
  3044 |     |         }
  3045 |     |     }
  3046 |     | 
  3047 |     |     function log(address p0, address p1, address p2, uint256 p3) internal pure {
  3048 |     |         bytes32 m0;
  3049 |     |         bytes32 m1;
  3050 |     |         bytes32 m2;
  3051 |     |         bytes32 m3;
  3052 |     |         bytes32 m4;
  3053 |     |         /// @solidity memory-safe-assembly
  3054 |     |         assembly {
  3055 |     |             m0 := mload(0x00)
  3056 |     |             m1 := mload(0x20)
  3057 |     |             m2 := mload(0x40)
  3058 |     |             m3 := mload(0x60)
  3059 |     |             m4 := mload(0x80)
  3060 |     |             // Selector of `log(address,address,address,uint256)`.
  3061 |     |             mstore(0x00, 0x94250d77)
  3062 |     |             mstore(0x20, p0)
  3063 |     |             mstore(0x40, p1)
  3064 |     |             mstore(0x60, p2)
  3065 |     |             mstore(0x80, p3)
  3066 |     |         }
  3067 |     |         _sendLogPayload(0x1c, 0x84);
  3068 |     |         /// @solidity memory-safe-assembly
  3069 |     |         assembly {
  3070 |     |             mstore(0x00, m0)
  3071 |     |             mstore(0x20, m1)
  3072 |     |             mstore(0x40, m2)
  3073 |     |             mstore(0x60, m3)
  3074 |     |             mstore(0x80, m4)
  3075 |     |         }
  3076 |     |     }
  3077 |     | 
  3078 |     |     function log(address p0, address p1, address p2, bytes32 p3) internal pure {
  3079 |     |         bytes32 m0;
  3080 |     |         bytes32 m1;
  3081 |     |         bytes32 m2;
  3082 |     |         bytes32 m3;
  3083 |     |         bytes32 m4;
  3084 |     |         bytes32 m5;
  3085 |     |         bytes32 m6;
  3086 |     |         /// @solidity memory-safe-assembly
  3087 |     |         assembly {
  3088 |     |             function writeString(pos, w) {
  3089 |     |                 let length := 0
  3090 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3091 |     |                 mstore(pos, length)
  3092 |     |                 let shift := sub(256, shl(3, length))
  3093 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3094 |     |             }
  3095 |     |             m0 := mload(0x00)
  3096 |     |             m1 := mload(0x20)
  3097 |     |             m2 := mload(0x40)
  3098 |     |             m3 := mload(0x60)
  3099 |     |             m4 := mload(0x80)
  3100 |     |             m5 := mload(0xa0)
  3101 |     |             m6 := mload(0xc0)
  3102 |     |             // Selector of `log(address,address,address,string)`.
  3103 |     |             mstore(0x00, 0xf808da20)
  3104 |     |             mstore(0x20, p0)
  3105 |     |             mstore(0x40, p1)
  3106 |     |             mstore(0x60, p2)
  3107 |     |             mstore(0x80, 0x80)
  3108 |     |             writeString(0xa0, p3)
  3109 |     |         }
  3110 |     |         _sendLogPayload(0x1c, 0xc4);
  3111 |     |         /// @solidity memory-safe-assembly
  3112 |     |         assembly {
  3113 |     |             mstore(0x00, m0)
  3114 |     |             mstore(0x20, m1)
  3115 |     |             mstore(0x40, m2)
  3116 |     |             mstore(0x60, m3)
  3117 |     |             mstore(0x80, m4)
  3118 |     |             mstore(0xa0, m5)
  3119 |     |             mstore(0xc0, m6)
  3120 |     |         }
  3121 |     |     }
  3122 |     | 
  3123 |     |     function log(address p0, address p1, bool p2, address p3) internal pure {
  3124 |     |         bytes32 m0;
  3125 |     |         bytes32 m1;
  3126 |     |         bytes32 m2;
  3127 |     |         bytes32 m3;
  3128 |     |         bytes32 m4;
  3129 |     |         /// @solidity memory-safe-assembly
  3130 |     |         assembly {
  3131 |     |             m0 := mload(0x00)
  3132 |     |             m1 := mload(0x20)
  3133 |     |             m2 := mload(0x40)
  3134 |     |             m3 := mload(0x60)
  3135 |     |             m4 := mload(0x80)
  3136 |     |             // Selector of `log(address,address,bool,address)`.
  3137 |     |             mstore(0x00, 0x9f1bc36e)
  3138 |     |             mstore(0x20, p0)
  3139 |     |             mstore(0x40, p1)
  3140 |     |             mstore(0x60, p2)
  3141 |     |             mstore(0x80, p3)
  3142 |     |         }
  3143 |     |         _sendLogPayload(0x1c, 0x84);
  3144 |     |         /// @solidity memory-safe-assembly
  3145 |     |         assembly {
  3146 |     |             mstore(0x00, m0)
  3147 |     |             mstore(0x20, m1)
  3148 |     |             mstore(0x40, m2)
  3149 |     |             mstore(0x60, m3)
  3150 |     |             mstore(0x80, m4)
  3151 |     |         }
  3152 |     |     }
  3153 |     | 
  3154 |     |     function log(address p0, address p1, bool p2, bool p3) internal pure {
  3155 |     |         bytes32 m0;
  3156 |     |         bytes32 m1;
  3157 |     |         bytes32 m2;
  3158 |     |         bytes32 m3;
  3159 |     |         bytes32 m4;
  3160 |     |         /// @solidity memory-safe-assembly
  3161 |     |         assembly {
  3162 |     |             m0 := mload(0x00)
  3163 |     |             m1 := mload(0x20)
  3164 |     |             m2 := mload(0x40)
  3165 |     |             m3 := mload(0x60)
  3166 |     |             m4 := mload(0x80)
  3167 |     |             // Selector of `log(address,address,bool,bool)`.
  3168 |     |             mstore(0x00, 0x2cd4134a)
  3169 |     |             mstore(0x20, p0)
  3170 |     |             mstore(0x40, p1)
  3171 |     |             mstore(0x60, p2)
  3172 |     |             mstore(0x80, p3)
  3173 |     |         }
  3174 |     |         _sendLogPayload(0x1c, 0x84);
  3175 |     |         /// @solidity memory-safe-assembly
  3176 |     |         assembly {
  3177 |     |             mstore(0x00, m0)
  3178 |     |             mstore(0x20, m1)
  3179 |     |             mstore(0x40, m2)
  3180 |     |             mstore(0x60, m3)
  3181 |     |             mstore(0x80, m4)
  3182 |     |         }
  3183 |     |     }
  3184 |     | 
  3185 |     |     function log(address p0, address p1, bool p2, uint256 p3) internal pure {
  3186 |     |         bytes32 m0;
  3187 |     |         bytes32 m1;
  3188 |     |         bytes32 m2;
  3189 |     |         bytes32 m3;
  3190 |     |         bytes32 m4;
  3191 |     |         /// @solidity memory-safe-assembly
  3192 |     |         assembly {
  3193 |     |             m0 := mload(0x00)
  3194 |     |             m1 := mload(0x20)
  3195 |     |             m2 := mload(0x40)
  3196 |     |             m3 := mload(0x60)
  3197 |     |             m4 := mload(0x80)
  3198 |     |             // Selector of `log(address,address,bool,uint256)`.
  3199 |     |             mstore(0x00, 0x3971e78c)
  3200 |     |             mstore(0x20, p0)
  3201 |     |             mstore(0x40, p1)
  3202 |     |             mstore(0x60, p2)
  3203 |     |             mstore(0x80, p3)
  3204 |     |         }
  3205 |     |         _sendLogPayload(0x1c, 0x84);
  3206 |     |         /// @solidity memory-safe-assembly
  3207 |     |         assembly {
  3208 |     |             mstore(0x00, m0)
  3209 |     |             mstore(0x20, m1)
  3210 |     |             mstore(0x40, m2)
  3211 |     |             mstore(0x60, m3)
  3212 |     |             mstore(0x80, m4)
  3213 |     |         }
  3214 |     |     }
  3215 |     | 
  3216 |     |     function log(address p0, address p1, bool p2, bytes32 p3) internal pure {
  3217 |     |         bytes32 m0;
  3218 |     |         bytes32 m1;
  3219 |     |         bytes32 m2;
  3220 |     |         bytes32 m3;
  3221 |     |         bytes32 m4;
  3222 |     |         bytes32 m5;
  3223 |     |         bytes32 m6;
  3224 |     |         /// @solidity memory-safe-assembly
  3225 |     |         assembly {
  3226 |     |             function writeString(pos, w) {
  3227 |     |                 let length := 0
  3228 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3229 |     |                 mstore(pos, length)
  3230 |     |                 let shift := sub(256, shl(3, length))
  3231 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3232 |     |             }
  3233 |     |             m0 := mload(0x00)
  3234 |     |             m1 := mload(0x20)
  3235 |     |             m2 := mload(0x40)
  3236 |     |             m3 := mload(0x60)
  3237 |     |             m4 := mload(0x80)
  3238 |     |             m5 := mload(0xa0)
  3239 |     |             m6 := mload(0xc0)
  3240 |     |             // Selector of `log(address,address,bool,string)`.
  3241 |     |             mstore(0x00, 0xaa6540c8)
  3242 |     |             mstore(0x20, p0)
  3243 |     |             mstore(0x40, p1)
  3244 |     |             mstore(0x60, p2)
  3245 |     |             mstore(0x80, 0x80)
  3246 |     |             writeString(0xa0, p3)
  3247 |     |         }
  3248 |     |         _sendLogPayload(0x1c, 0xc4);
  3249 |     |         /// @solidity memory-safe-assembly
  3250 |     |         assembly {
  3251 |     |             mstore(0x00, m0)
  3252 |     |             mstore(0x20, m1)
  3253 |     |             mstore(0x40, m2)
  3254 |     |             mstore(0x60, m3)
  3255 |     |             mstore(0x80, m4)
  3256 |     |             mstore(0xa0, m5)
  3257 |     |             mstore(0xc0, m6)
  3258 |     |         }
  3259 |     |     }
  3260 |     | 
  3261 |     |     function log(address p0, address p1, uint256 p2, address p3) internal pure {
  3262 |     |         bytes32 m0;
  3263 |     |         bytes32 m1;
  3264 |     |         bytes32 m2;
  3265 |     |         bytes32 m3;
  3266 |     |         bytes32 m4;
  3267 |     |         /// @solidity memory-safe-assembly
  3268 |     |         assembly {
  3269 |     |             m0 := mload(0x00)
  3270 |     |             m1 := mload(0x20)
  3271 |     |             m2 := mload(0x40)
  3272 |     |             m3 := mload(0x60)
  3273 |     |             m4 := mload(0x80)
  3274 |     |             // Selector of `log(address,address,uint256,address)`.
  3275 |     |             mstore(0x00, 0x8da6def5)
  3276 |     |             mstore(0x20, p0)
  3277 |     |             mstore(0x40, p1)
  3278 |     |             mstore(0x60, p2)
  3279 |     |             mstore(0x80, p3)
  3280 |     |         }
  3281 |     |         _sendLogPayload(0x1c, 0x84);
  3282 |     |         /// @solidity memory-safe-assembly
  3283 |     |         assembly {
  3284 |     |             mstore(0x00, m0)
  3285 |     |             mstore(0x20, m1)
  3286 |     |             mstore(0x40, m2)
  3287 |     |             mstore(0x60, m3)
  3288 |     |             mstore(0x80, m4)
  3289 |     |         }
  3290 |     |     }
  3291 |     | 
  3292 |     |     function log(address p0, address p1, uint256 p2, bool p3) internal pure {
  3293 |     |         bytes32 m0;
  3294 |     |         bytes32 m1;
  3295 |     |         bytes32 m2;
  3296 |     |         bytes32 m3;
  3297 |     |         bytes32 m4;
  3298 |     |         /// @solidity memory-safe-assembly
  3299 |     |         assembly {
  3300 |     |             m0 := mload(0x00)
  3301 |     |             m1 := mload(0x20)
  3302 |     |             m2 := mload(0x40)
  3303 |     |             m3 := mload(0x60)
  3304 |     |             m4 := mload(0x80)
  3305 |     |             // Selector of `log(address,address,uint256,bool)`.
  3306 |     |             mstore(0x00, 0x9b4254e2)
  3307 |     |             mstore(0x20, p0)
  3308 |     |             mstore(0x40, p1)
  3309 |     |             mstore(0x60, p2)
  3310 |     |             mstore(0x80, p3)
  3311 |     |         }
  3312 |     |         _sendLogPayload(0x1c, 0x84);
  3313 |     |         /// @solidity memory-safe-assembly
  3314 |     |         assembly {
  3315 |     |             mstore(0x00, m0)
  3316 |     |             mstore(0x20, m1)
  3317 |     |             mstore(0x40, m2)
  3318 |     |             mstore(0x60, m3)
  3319 |     |             mstore(0x80, m4)
  3320 |     |         }
  3321 |     |     }
  3322 |     | 
  3323 |     |     function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {
  3324 |     |         bytes32 m0;
  3325 |     |         bytes32 m1;
  3326 |     |         bytes32 m2;
  3327 |     |         bytes32 m3;
  3328 |     |         bytes32 m4;
  3329 |     |         /// @solidity memory-safe-assembly
  3330 |     |         assembly {
  3331 |     |             m0 := mload(0x00)
  3332 |     |             m1 := mload(0x20)
  3333 |     |             m2 := mload(0x40)
  3334 |     |             m3 := mload(0x60)
  3335 |     |             m4 := mload(0x80)
  3336 |     |             // Selector of `log(address,address,uint256,uint256)`.
  3337 |     |             mstore(0x00, 0xbe553481)
  3338 |     |             mstore(0x20, p0)
  3339 |     |             mstore(0x40, p1)
  3340 |     |             mstore(0x60, p2)
  3341 |     |             mstore(0x80, p3)
  3342 |     |         }
  3343 |     |         _sendLogPayload(0x1c, 0x84);
  3344 |     |         /// @solidity memory-safe-assembly
  3345 |     |         assembly {
  3346 |     |             mstore(0x00, m0)
  3347 |     |             mstore(0x20, m1)
  3348 |     |             mstore(0x40, m2)
  3349 |     |             mstore(0x60, m3)
  3350 |     |             mstore(0x80, m4)
  3351 |     |         }
  3352 |     |     }
  3353 |     | 
  3354 |     |     function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {
  3355 |     |         bytes32 m0;
  3356 |     |         bytes32 m1;
  3357 |     |         bytes32 m2;
  3358 |     |         bytes32 m3;
  3359 |     |         bytes32 m4;
  3360 |     |         bytes32 m5;
  3361 |     |         bytes32 m6;
  3362 |     |         /// @solidity memory-safe-assembly
  3363 |     |         assembly {
  3364 |     |             function writeString(pos, w) {
  3365 |     |                 let length := 0
  3366 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3367 |     |                 mstore(pos, length)
  3368 |     |                 let shift := sub(256, shl(3, length))
  3369 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3370 |     |             }
  3371 |     |             m0 := mload(0x00)
  3372 |     |             m1 := mload(0x20)
  3373 |     |             m2 := mload(0x40)
  3374 |     |             m3 := mload(0x60)
  3375 |     |             m4 := mload(0x80)
  3376 |     |             m5 := mload(0xa0)
  3377 |     |             m6 := mload(0xc0)
  3378 |     |             // Selector of `log(address,address,uint256,string)`.
  3379 |     |             mstore(0x00, 0xfdb4f990)
  3380 |     |             mstore(0x20, p0)
  3381 |     |             mstore(0x40, p1)
  3382 |     |             mstore(0x60, p2)
  3383 |     |             mstore(0x80, 0x80)
  3384 |     |             writeString(0xa0, p3)
  3385 |     |         }
  3386 |     |         _sendLogPayload(0x1c, 0xc4);
  3387 |     |         /// @solidity memory-safe-assembly
  3388 |     |         assembly {
  3389 |     |             mstore(0x00, m0)
  3390 |     |             mstore(0x20, m1)
  3391 |     |             mstore(0x40, m2)
  3392 |     |             mstore(0x60, m3)
  3393 |     |             mstore(0x80, m4)
  3394 |     |             mstore(0xa0, m5)
  3395 |     |             mstore(0xc0, m6)
  3396 |     |         }
  3397 |     |     }
  3398 |     | 
  3399 |     |     function log(address p0, address p1, bytes32 p2, address p3) internal pure {
  3400 |     |         bytes32 m0;
  3401 |     |         bytes32 m1;
  3402 |     |         bytes32 m2;
  3403 |     |         bytes32 m3;
  3404 |     |         bytes32 m4;
  3405 |     |         bytes32 m5;
  3406 |     |         bytes32 m6;
  3407 |     |         /// @solidity memory-safe-assembly
  3408 |     |         assembly {
  3409 |     |             function writeString(pos, w) {
  3410 |     |                 let length := 0
  3411 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3412 |     |                 mstore(pos, length)
  3413 |     |                 let shift := sub(256, shl(3, length))
  3414 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3415 |     |             }
  3416 |     |             m0 := mload(0x00)
  3417 |     |             m1 := mload(0x20)
  3418 |     |             m2 := mload(0x40)
  3419 |     |             m3 := mload(0x60)
  3420 |     |             m4 := mload(0x80)
  3421 |     |             m5 := mload(0xa0)
  3422 |     |             m6 := mload(0xc0)
  3423 |     |             // Selector of `log(address,address,string,address)`.
  3424 |     |             mstore(0x00, 0x8f736d16)
  3425 |     |             mstore(0x20, p0)
  3426 |     |             mstore(0x40, p1)
  3427 |     |             mstore(0x60, 0x80)
  3428 |     |             mstore(0x80, p3)
  3429 |     |             writeString(0xa0, p2)
  3430 |     |         }
  3431 |     |         _sendLogPayload(0x1c, 0xc4);
  3432 |     |         /// @solidity memory-safe-assembly
  3433 |     |         assembly {
  3434 |     |             mstore(0x00, m0)
  3435 |     |             mstore(0x20, m1)
  3436 |     |             mstore(0x40, m2)
  3437 |     |             mstore(0x60, m3)
  3438 |     |             mstore(0x80, m4)
  3439 |     |             mstore(0xa0, m5)
  3440 |     |             mstore(0xc0, m6)
  3441 |     |         }
  3442 |     |     }
  3443 |     | 
  3444 |     |     function log(address p0, address p1, bytes32 p2, bool p3) internal pure {
  3445 |     |         bytes32 m0;
  3446 |     |         bytes32 m1;
  3447 |     |         bytes32 m2;
  3448 |     |         bytes32 m3;
  3449 |     |         bytes32 m4;
  3450 |     |         bytes32 m5;
  3451 |     |         bytes32 m6;
  3452 |     |         /// @solidity memory-safe-assembly
  3453 |     |         assembly {
  3454 |     |             function writeString(pos, w) {
  3455 |     |                 let length := 0
  3456 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3457 |     |                 mstore(pos, length)
  3458 |     |                 let shift := sub(256, shl(3, length))
  3459 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3460 |     |             }
  3461 |     |             m0 := mload(0x00)
  3462 |     |             m1 := mload(0x20)
  3463 |     |             m2 := mload(0x40)
  3464 |     |             m3 := mload(0x60)
  3465 |     |             m4 := mload(0x80)
  3466 |     |             m5 := mload(0xa0)
  3467 |     |             m6 := mload(0xc0)
  3468 |     |             // Selector of `log(address,address,string,bool)`.
  3469 |     |             mstore(0x00, 0x6f1a594e)
  3470 |     |             mstore(0x20, p0)
  3471 |     |             mstore(0x40, p1)
  3472 |     |             mstore(0x60, 0x80)
  3473 |     |             mstore(0x80, p3)
  3474 |     |             writeString(0xa0, p2)
  3475 |     |         }
  3476 |     |         _sendLogPayload(0x1c, 0xc4);
  3477 |     |         /// @solidity memory-safe-assembly
  3478 |     |         assembly {
  3479 |     |             mstore(0x00, m0)
  3480 |     |             mstore(0x20, m1)
  3481 |     |             mstore(0x40, m2)
  3482 |     |             mstore(0x60, m3)
  3483 |     |             mstore(0x80, m4)
  3484 |     |             mstore(0xa0, m5)
  3485 |     |             mstore(0xc0, m6)
  3486 |     |         }
  3487 |     |     }
  3488 |     | 
  3489 |     |     function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {
  3490 |     |         bytes32 m0;
  3491 |     |         bytes32 m1;
  3492 |     |         bytes32 m2;
  3493 |     |         bytes32 m3;
  3494 |     |         bytes32 m4;
  3495 |     |         bytes32 m5;
  3496 |     |         bytes32 m6;
  3497 |     |         /// @solidity memory-safe-assembly
  3498 |     |         assembly {
  3499 |     |             function writeString(pos, w) {
  3500 |     |                 let length := 0
  3501 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3502 |     |                 mstore(pos, length)
  3503 |     |                 let shift := sub(256, shl(3, length))
  3504 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3505 |     |             }
  3506 |     |             m0 := mload(0x00)
  3507 |     |             m1 := mload(0x20)
  3508 |     |             m2 := mload(0x40)
  3509 |     |             m3 := mload(0x60)
  3510 |     |             m4 := mload(0x80)
  3511 |     |             m5 := mload(0xa0)
  3512 |     |             m6 := mload(0xc0)
  3513 |     |             // Selector of `log(address,address,string,uint256)`.
  3514 |     |             mstore(0x00, 0xef1cefe7)
  3515 |     |             mstore(0x20, p0)
  3516 |     |             mstore(0x40, p1)
  3517 |     |             mstore(0x60, 0x80)
  3518 |     |             mstore(0x80, p3)
  3519 |     |             writeString(0xa0, p2)
  3520 |     |         }
  3521 |     |         _sendLogPayload(0x1c, 0xc4);
  3522 |     |         /// @solidity memory-safe-assembly
  3523 |     |         assembly {
  3524 |     |             mstore(0x00, m0)
  3525 |     |             mstore(0x20, m1)
  3526 |     |             mstore(0x40, m2)
  3527 |     |             mstore(0x60, m3)
  3528 |     |             mstore(0x80, m4)
  3529 |     |             mstore(0xa0, m5)
  3530 |     |             mstore(0xc0, m6)
  3531 |     |         }
  3532 |     |     }
  3533 |     | 
  3534 |     |     function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {
  3535 |     |         bytes32 m0;
  3536 |     |         bytes32 m1;
  3537 |     |         bytes32 m2;
  3538 |     |         bytes32 m3;
  3539 |     |         bytes32 m4;
  3540 |     |         bytes32 m5;
  3541 |     |         bytes32 m6;
  3542 |     |         bytes32 m7;
  3543 |     |         bytes32 m8;
  3544 |     |         /// @solidity memory-safe-assembly
  3545 |     |         assembly {
  3546 |     |             function writeString(pos, w) {
  3547 |     |                 let length := 0
  3548 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3549 |     |                 mstore(pos, length)
  3550 |     |                 let shift := sub(256, shl(3, length))
  3551 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3552 |     |             }
  3553 |     |             m0 := mload(0x00)
  3554 |     |             m1 := mload(0x20)
  3555 |     |             m2 := mload(0x40)
  3556 |     |             m3 := mload(0x60)
  3557 |     |             m4 := mload(0x80)
  3558 |     |             m5 := mload(0xa0)
  3559 |     |             m6 := mload(0xc0)
  3560 |     |             m7 := mload(0xe0)
  3561 |     |             m8 := mload(0x100)
  3562 |     |             // Selector of `log(address,address,string,string)`.
  3563 |     |             mstore(0x00, 0x21bdaf25)
  3564 |     |             mstore(0x20, p0)
  3565 |     |             mstore(0x40, p1)
  3566 |     |             mstore(0x60, 0x80)
  3567 |     |             mstore(0x80, 0xc0)
  3568 |     |             writeString(0xa0, p2)
  3569 |     |             writeString(0xe0, p3)
  3570 |     |         }
  3571 |     |         _sendLogPayload(0x1c, 0x104);
  3572 |     |         /// @solidity memory-safe-assembly
  3573 |     |         assembly {
  3574 |     |             mstore(0x00, m0)
  3575 |     |             mstore(0x20, m1)
  3576 |     |             mstore(0x40, m2)
  3577 |     |             mstore(0x60, m3)
  3578 |     |             mstore(0x80, m4)
  3579 |     |             mstore(0xa0, m5)
  3580 |     |             mstore(0xc0, m6)
  3581 |     |             mstore(0xe0, m7)
  3582 |     |             mstore(0x100, m8)
  3583 |     |         }
  3584 |     |     }
  3585 |     | 
  3586 |     |     function log(address p0, bool p1, address p2, address p3) internal pure {
  3587 |     |         bytes32 m0;
  3588 |     |         bytes32 m1;
  3589 |     |         bytes32 m2;
  3590 |     |         bytes32 m3;
  3591 |     |         bytes32 m4;
  3592 |     |         /// @solidity memory-safe-assembly
  3593 |     |         assembly {
  3594 |     |             m0 := mload(0x00)
  3595 |     |             m1 := mload(0x20)
  3596 |     |             m2 := mload(0x40)
  3597 |     |             m3 := mload(0x60)
  3598 |     |             m4 := mload(0x80)
  3599 |     |             // Selector of `log(address,bool,address,address)`.
  3600 |     |             mstore(0x00, 0x660375dd)
  3601 |     |             mstore(0x20, p0)
  3602 |     |             mstore(0x40, p1)
  3603 |     |             mstore(0x60, p2)
  3604 |     |             mstore(0x80, p3)
  3605 |     |         }
  3606 |     |         _sendLogPayload(0x1c, 0x84);
  3607 |     |         /// @solidity memory-safe-assembly
  3608 |     |         assembly {
  3609 |     |             mstore(0x00, m0)
  3610 |     |             mstore(0x20, m1)
  3611 |     |             mstore(0x40, m2)
  3612 |     |             mstore(0x60, m3)
  3613 |     |             mstore(0x80, m4)
  3614 |     |         }
  3615 |     |     }
  3616 |     | 
  3617 |     |     function log(address p0, bool p1, address p2, bool p3) internal pure {
  3618 |     |         bytes32 m0;
  3619 |     |         bytes32 m1;
  3620 |     |         bytes32 m2;
  3621 |     |         bytes32 m3;
  3622 |     |         bytes32 m4;
  3623 |     |         /// @solidity memory-safe-assembly
  3624 |     |         assembly {
  3625 |     |             m0 := mload(0x00)
  3626 |     |             m1 := mload(0x20)
  3627 |     |             m2 := mload(0x40)
  3628 |     |             m3 := mload(0x60)
  3629 |     |             m4 := mload(0x80)
  3630 |     |             // Selector of `log(address,bool,address,bool)`.
  3631 |     |             mstore(0x00, 0xa6f50b0f)
  3632 |     |             mstore(0x20, p0)
  3633 |     |             mstore(0x40, p1)
  3634 |     |             mstore(0x60, p2)
  3635 |     |             mstore(0x80, p3)
  3636 |     |         }
  3637 |     |         _sendLogPayload(0x1c, 0x84);
  3638 |     |         /// @solidity memory-safe-assembly
  3639 |     |         assembly {
  3640 |     |             mstore(0x00, m0)
  3641 |     |             mstore(0x20, m1)
  3642 |     |             mstore(0x40, m2)
  3643 |     |             mstore(0x60, m3)
  3644 |     |             mstore(0x80, m4)
  3645 |     |         }
  3646 |     |     }
  3647 |     | 
  3648 |     |     function log(address p0, bool p1, address p2, uint256 p3) internal pure {
  3649 |     |         bytes32 m0;
  3650 |     |         bytes32 m1;
  3651 |     |         bytes32 m2;
  3652 |     |         bytes32 m3;
  3653 |     |         bytes32 m4;
  3654 |     |         /// @solidity memory-safe-assembly
  3655 |     |         assembly {
  3656 |     |             m0 := mload(0x00)
  3657 |     |             m1 := mload(0x20)
  3658 |     |             m2 := mload(0x40)
  3659 |     |             m3 := mload(0x60)
  3660 |     |             m4 := mload(0x80)
  3661 |     |             // Selector of `log(address,bool,address,uint256)`.
  3662 |     |             mstore(0x00, 0xa75c59de)
  3663 |     |             mstore(0x20, p0)
  3664 |     |             mstore(0x40, p1)
  3665 |     |             mstore(0x60, p2)
  3666 |     |             mstore(0x80, p3)
  3667 |     |         }
  3668 |     |         _sendLogPayload(0x1c, 0x84);
  3669 |     |         /// @solidity memory-safe-assembly
  3670 |     |         assembly {
  3671 |     |             mstore(0x00, m0)
  3672 |     |             mstore(0x20, m1)
  3673 |     |             mstore(0x40, m2)
  3674 |     |             mstore(0x60, m3)
  3675 |     |             mstore(0x80, m4)
  3676 |     |         }
  3677 |     |     }
  3678 |     | 
  3679 |     |     function log(address p0, bool p1, address p2, bytes32 p3) internal pure {
  3680 |     |         bytes32 m0;
  3681 |     |         bytes32 m1;
  3682 |     |         bytes32 m2;
  3683 |     |         bytes32 m3;
  3684 |     |         bytes32 m4;
  3685 |     |         bytes32 m5;
  3686 |     |         bytes32 m6;
  3687 |     |         /// @solidity memory-safe-assembly
  3688 |     |         assembly {
  3689 |     |             function writeString(pos, w) {
  3690 |     |                 let length := 0
  3691 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3692 |     |                 mstore(pos, length)
  3693 |     |                 let shift := sub(256, shl(3, length))
  3694 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3695 |     |             }
  3696 |     |             m0 := mload(0x00)
  3697 |     |             m1 := mload(0x20)
  3698 |     |             m2 := mload(0x40)
  3699 |     |             m3 := mload(0x60)
  3700 |     |             m4 := mload(0x80)
  3701 |     |             m5 := mload(0xa0)
  3702 |     |             m6 := mload(0xc0)
  3703 |     |             // Selector of `log(address,bool,address,string)`.
  3704 |     |             mstore(0x00, 0x2dd778e6)
  3705 |     |             mstore(0x20, p0)
  3706 |     |             mstore(0x40, p1)
  3707 |     |             mstore(0x60, p2)
  3708 |     |             mstore(0x80, 0x80)
  3709 |     |             writeString(0xa0, p3)
  3710 |     |         }
  3711 |     |         _sendLogPayload(0x1c, 0xc4);
  3712 |     |         /// @solidity memory-safe-assembly
  3713 |     |         assembly {
  3714 |     |             mstore(0x00, m0)
  3715 |     |             mstore(0x20, m1)
  3716 |     |             mstore(0x40, m2)
  3717 |     |             mstore(0x60, m3)
  3718 |     |             mstore(0x80, m4)
  3719 |     |             mstore(0xa0, m5)
  3720 |     |             mstore(0xc0, m6)
  3721 |     |         }
  3722 |     |     }
  3723 |     | 
  3724 |     |     function log(address p0, bool p1, bool p2, address p3) internal pure {
  3725 |     |         bytes32 m0;
  3726 |     |         bytes32 m1;
  3727 |     |         bytes32 m2;
  3728 |     |         bytes32 m3;
  3729 |     |         bytes32 m4;
  3730 |     |         /// @solidity memory-safe-assembly
  3731 |     |         assembly {
  3732 |     |             m0 := mload(0x00)
  3733 |     |             m1 := mload(0x20)
  3734 |     |             m2 := mload(0x40)
  3735 |     |             m3 := mload(0x60)
  3736 |     |             m4 := mload(0x80)
  3737 |     |             // Selector of `log(address,bool,bool,address)`.
  3738 |     |             mstore(0x00, 0xcf394485)
  3739 |     |             mstore(0x20, p0)
  3740 |     |             mstore(0x40, p1)
  3741 |     |             mstore(0x60, p2)
  3742 |     |             mstore(0x80, p3)
  3743 |     |         }
  3744 |     |         _sendLogPayload(0x1c, 0x84);
  3745 |     |         /// @solidity memory-safe-assembly
  3746 |     |         assembly {
  3747 |     |             mstore(0x00, m0)
  3748 |     |             mstore(0x20, m1)
  3749 |     |             mstore(0x40, m2)
  3750 |     |             mstore(0x60, m3)
  3751 |     |             mstore(0x80, m4)
  3752 |     |         }
  3753 |     |     }
  3754 |     | 
  3755 |     |     function log(address p0, bool p1, bool p2, bool p3) internal pure {
  3756 |     |         bytes32 m0;
  3757 |     |         bytes32 m1;
  3758 |     |         bytes32 m2;
  3759 |     |         bytes32 m3;
  3760 |     |         bytes32 m4;
  3761 |     |         /// @solidity memory-safe-assembly
  3762 |     |         assembly {
  3763 |     |             m0 := mload(0x00)
  3764 |     |             m1 := mload(0x20)
  3765 |     |             m2 := mload(0x40)
  3766 |     |             m3 := mload(0x60)
  3767 |     |             m4 := mload(0x80)
  3768 |     |             // Selector of `log(address,bool,bool,bool)`.
  3769 |     |             mstore(0x00, 0xcac43479)
  3770 |     |             mstore(0x20, p0)
  3771 |     |             mstore(0x40, p1)
  3772 |     |             mstore(0x60, p2)
  3773 |     |             mstore(0x80, p3)
  3774 |     |         }
  3775 |     |         _sendLogPayload(0x1c, 0x84);
  3776 |     |         /// @solidity memory-safe-assembly
  3777 |     |         assembly {
  3778 |     |             mstore(0x00, m0)
  3779 |     |             mstore(0x20, m1)
  3780 |     |             mstore(0x40, m2)
  3781 |     |             mstore(0x60, m3)
  3782 |     |             mstore(0x80, m4)
  3783 |     |         }
  3784 |     |     }
  3785 |     | 
  3786 |     |     function log(address p0, bool p1, bool p2, uint256 p3) internal pure {
  3787 |     |         bytes32 m0;
  3788 |     |         bytes32 m1;
  3789 |     |         bytes32 m2;
  3790 |     |         bytes32 m3;
  3791 |     |         bytes32 m4;
  3792 |     |         /// @solidity memory-safe-assembly
  3793 |     |         assembly {
  3794 |     |             m0 := mload(0x00)
  3795 |     |             m1 := mload(0x20)
  3796 |     |             m2 := mload(0x40)
  3797 |     |             m3 := mload(0x60)
  3798 |     |             m4 := mload(0x80)
  3799 |     |             // Selector of `log(address,bool,bool,uint256)`.
  3800 |     |             mstore(0x00, 0x8c4e5de6)
  3801 |     |             mstore(0x20, p0)
  3802 |     |             mstore(0x40, p1)
  3803 |     |             mstore(0x60, p2)
  3804 |     |             mstore(0x80, p3)
  3805 |     |         }
  3806 |     |         _sendLogPayload(0x1c, 0x84);
  3807 |     |         /// @solidity memory-safe-assembly
  3808 |     |         assembly {
  3809 |     |             mstore(0x00, m0)
  3810 |     |             mstore(0x20, m1)
  3811 |     |             mstore(0x40, m2)
  3812 |     |             mstore(0x60, m3)
  3813 |     |             mstore(0x80, m4)
  3814 |     |         }
  3815 |     |     }
  3816 |     | 
  3817 |     |     function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {
  3818 |     |         bytes32 m0;
  3819 |     |         bytes32 m1;
  3820 |     |         bytes32 m2;
  3821 |     |         bytes32 m3;
  3822 |     |         bytes32 m4;
  3823 |     |         bytes32 m5;
  3824 |     |         bytes32 m6;
  3825 |     |         /// @solidity memory-safe-assembly
  3826 |     |         assembly {
  3827 |     |             function writeString(pos, w) {
  3828 |     |                 let length := 0
  3829 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3830 |     |                 mstore(pos, length)
  3831 |     |                 let shift := sub(256, shl(3, length))
  3832 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3833 |     |             }
  3834 |     |             m0 := mload(0x00)
  3835 |     |             m1 := mload(0x20)
  3836 |     |             m2 := mload(0x40)
  3837 |     |             m3 := mload(0x60)
  3838 |     |             m4 := mload(0x80)
  3839 |     |             m5 := mload(0xa0)
  3840 |     |             m6 := mload(0xc0)
  3841 |     |             // Selector of `log(address,bool,bool,string)`.
  3842 |     |             mstore(0x00, 0xdfc4a2e8)
  3843 |     |             mstore(0x20, p0)
  3844 |     |             mstore(0x40, p1)
  3845 |     |             mstore(0x60, p2)
  3846 |     |             mstore(0x80, 0x80)
  3847 |     |             writeString(0xa0, p3)
  3848 |     |         }
  3849 |     |         _sendLogPayload(0x1c, 0xc4);
  3850 |     |         /// @solidity memory-safe-assembly
  3851 |     |         assembly {
  3852 |     |             mstore(0x00, m0)
  3853 |     |             mstore(0x20, m1)
  3854 |     |             mstore(0x40, m2)
  3855 |     |             mstore(0x60, m3)
  3856 |     |             mstore(0x80, m4)
  3857 |     |             mstore(0xa0, m5)
  3858 |     |             mstore(0xc0, m6)
  3859 |     |         }
  3860 |     |     }
  3861 |     | 
  3862 |     |     function log(address p0, bool p1, uint256 p2, address p3) internal pure {
  3863 |     |         bytes32 m0;
  3864 |     |         bytes32 m1;
  3865 |     |         bytes32 m2;
  3866 |     |         bytes32 m3;
  3867 |     |         bytes32 m4;
  3868 |     |         /// @solidity memory-safe-assembly
  3869 |     |         assembly {
  3870 |     |             m0 := mload(0x00)
  3871 |     |             m1 := mload(0x20)
  3872 |     |             m2 := mload(0x40)
  3873 |     |             m3 := mload(0x60)
  3874 |     |             m4 := mload(0x80)
  3875 |     |             // Selector of `log(address,bool,uint256,address)`.
  3876 |     |             mstore(0x00, 0xccf790a1)
  3877 |     |             mstore(0x20, p0)
  3878 |     |             mstore(0x40, p1)
  3879 |     |             mstore(0x60, p2)
  3880 |     |             mstore(0x80, p3)
  3881 |     |         }
  3882 |     |         _sendLogPayload(0x1c, 0x84);
  3883 |     |         /// @solidity memory-safe-assembly
  3884 |     |         assembly {
  3885 |     |             mstore(0x00, m0)
  3886 |     |             mstore(0x20, m1)
  3887 |     |             mstore(0x40, m2)
  3888 |     |             mstore(0x60, m3)
  3889 |     |             mstore(0x80, m4)
  3890 |     |         }
  3891 |     |     }
  3892 |     | 
  3893 |     |     function log(address p0, bool p1, uint256 p2, bool p3) internal pure {
  3894 |     |         bytes32 m0;
  3895 |     |         bytes32 m1;
  3896 |     |         bytes32 m2;
  3897 |     |         bytes32 m3;
  3898 |     |         bytes32 m4;
  3899 |     |         /// @solidity memory-safe-assembly
  3900 |     |         assembly {
  3901 |     |             m0 := mload(0x00)
  3902 |     |             m1 := mload(0x20)
  3903 |     |             m2 := mload(0x40)
  3904 |     |             m3 := mload(0x60)
  3905 |     |             m4 := mload(0x80)
  3906 |     |             // Selector of `log(address,bool,uint256,bool)`.
  3907 |     |             mstore(0x00, 0xc4643e20)
  3908 |     |             mstore(0x20, p0)
  3909 |     |             mstore(0x40, p1)
  3910 |     |             mstore(0x60, p2)
  3911 |     |             mstore(0x80, p3)
  3912 |     |         }
  3913 |     |         _sendLogPayload(0x1c, 0x84);
  3914 |     |         /// @solidity memory-safe-assembly
  3915 |     |         assembly {
  3916 |     |             mstore(0x00, m0)
  3917 |     |             mstore(0x20, m1)
  3918 |     |             mstore(0x40, m2)
  3919 |     |             mstore(0x60, m3)
  3920 |     |             mstore(0x80, m4)
  3921 |     |         }
  3922 |     |     }
  3923 |     | 
  3924 |     |     function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {
  3925 |     |         bytes32 m0;
  3926 |     |         bytes32 m1;
  3927 |     |         bytes32 m2;
  3928 |     |         bytes32 m3;
  3929 |     |         bytes32 m4;
  3930 |     |         /// @solidity memory-safe-assembly
  3931 |     |         assembly {
  3932 |     |             m0 := mload(0x00)
  3933 |     |             m1 := mload(0x20)
  3934 |     |             m2 := mload(0x40)
  3935 |     |             m3 := mload(0x60)
  3936 |     |             m4 := mload(0x80)
  3937 |     |             // Selector of `log(address,bool,uint256,uint256)`.
  3938 |     |             mstore(0x00, 0x386ff5f4)
  3939 |     |             mstore(0x20, p0)
  3940 |     |             mstore(0x40, p1)
  3941 |     |             mstore(0x60, p2)
  3942 |     |             mstore(0x80, p3)
  3943 |     |         }
  3944 |     |         _sendLogPayload(0x1c, 0x84);
  3945 |     |         /// @solidity memory-safe-assembly
  3946 |     |         assembly {
  3947 |     |             mstore(0x00, m0)
  3948 |     |             mstore(0x20, m1)
  3949 |     |             mstore(0x40, m2)
  3950 |     |             mstore(0x60, m3)
  3951 |     |             mstore(0x80, m4)
  3952 |     |         }
  3953 |     |     }
  3954 |     | 
  3955 |     |     function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {
  3956 |     |         bytes32 m0;
  3957 |     |         bytes32 m1;
  3958 |     |         bytes32 m2;
  3959 |     |         bytes32 m3;
  3960 |     |         bytes32 m4;
  3961 |     |         bytes32 m5;
  3962 |     |         bytes32 m6;
  3963 |     |         /// @solidity memory-safe-assembly
  3964 |     |         assembly {
  3965 |     |             function writeString(pos, w) {
  3966 |     |                 let length := 0
  3967 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  3968 |     |                 mstore(pos, length)
  3969 |     |                 let shift := sub(256, shl(3, length))
  3970 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  3971 |     |             }
  3972 |     |             m0 := mload(0x00)
  3973 |     |             m1 := mload(0x20)
  3974 |     |             m2 := mload(0x40)
  3975 |     |             m3 := mload(0x60)
  3976 |     |             m4 := mload(0x80)
  3977 |     |             m5 := mload(0xa0)
  3978 |     |             m6 := mload(0xc0)
  3979 |     |             // Selector of `log(address,bool,uint256,string)`.
  3980 |     |             mstore(0x00, 0x0aa6cfad)
  3981 |     |             mstore(0x20, p0)
  3982 |     |             mstore(0x40, p1)
  3983 |     |             mstore(0x60, p2)
  3984 |     |             mstore(0x80, 0x80)
  3985 |     |             writeString(0xa0, p3)
  3986 |     |         }
  3987 |     |         _sendLogPayload(0x1c, 0xc4);
  3988 |     |         /// @solidity memory-safe-assembly
  3989 |     |         assembly {
  3990 |     |             mstore(0x00, m0)
  3991 |     |             mstore(0x20, m1)
  3992 |     |             mstore(0x40, m2)
  3993 |     |             mstore(0x60, m3)
  3994 |     |             mstore(0x80, m4)
  3995 |     |             mstore(0xa0, m5)
  3996 |     |             mstore(0xc0, m6)
  3997 |     |         }
  3998 |     |     }
  3999 |     | 
  4000 |     |     function log(address p0, bool p1, bytes32 p2, address p3) internal pure {
  4001 |     |         bytes32 m0;
  4002 |     |         bytes32 m1;
  4003 |     |         bytes32 m2;
  4004 |     |         bytes32 m3;
  4005 |     |         bytes32 m4;
  4006 |     |         bytes32 m5;
  4007 |     |         bytes32 m6;
  4008 |     |         /// @solidity memory-safe-assembly
  4009 |     |         assembly {
  4010 |     |             function writeString(pos, w) {
  4011 |     |                 let length := 0
  4012 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4013 |     |                 mstore(pos, length)
  4014 |     |                 let shift := sub(256, shl(3, length))
  4015 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4016 |     |             }
  4017 |     |             m0 := mload(0x00)
  4018 |     |             m1 := mload(0x20)
  4019 |     |             m2 := mload(0x40)
  4020 |     |             m3 := mload(0x60)
  4021 |     |             m4 := mload(0x80)
  4022 |     |             m5 := mload(0xa0)
  4023 |     |             m6 := mload(0xc0)
  4024 |     |             // Selector of `log(address,bool,string,address)`.
  4025 |     |             mstore(0x00, 0x19fd4956)
  4026 |     |             mstore(0x20, p0)
  4027 |     |             mstore(0x40, p1)
  4028 |     |             mstore(0x60, 0x80)
  4029 |     |             mstore(0x80, p3)
  4030 |     |             writeString(0xa0, p2)
  4031 |     |         }
  4032 |     |         _sendLogPayload(0x1c, 0xc4);
  4033 |     |         /// @solidity memory-safe-assembly
  4034 |     |         assembly {
  4035 |     |             mstore(0x00, m0)
  4036 |     |             mstore(0x20, m1)
  4037 |     |             mstore(0x40, m2)
  4038 |     |             mstore(0x60, m3)
  4039 |     |             mstore(0x80, m4)
  4040 |     |             mstore(0xa0, m5)
  4041 |     |             mstore(0xc0, m6)
  4042 |     |         }
  4043 |     |     }
  4044 |     | 
  4045 |     |     function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {
  4046 |     |         bytes32 m0;
  4047 |     |         bytes32 m1;
  4048 |     |         bytes32 m2;
  4049 |     |         bytes32 m3;
  4050 |     |         bytes32 m4;
  4051 |     |         bytes32 m5;
  4052 |     |         bytes32 m6;
  4053 |     |         /// @solidity memory-safe-assembly
  4054 |     |         assembly {
  4055 |     |             function writeString(pos, w) {
  4056 |     |                 let length := 0
  4057 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4058 |     |                 mstore(pos, length)
  4059 |     |                 let shift := sub(256, shl(3, length))
  4060 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4061 |     |             }
  4062 |     |             m0 := mload(0x00)
  4063 |     |             m1 := mload(0x20)
  4064 |     |             m2 := mload(0x40)
  4065 |     |             m3 := mload(0x60)
  4066 |     |             m4 := mload(0x80)
  4067 |     |             m5 := mload(0xa0)
  4068 |     |             m6 := mload(0xc0)
  4069 |     |             // Selector of `log(address,bool,string,bool)`.
  4070 |     |             mstore(0x00, 0x50ad461d)
  4071 |     |             mstore(0x20, p0)
  4072 |     |             mstore(0x40, p1)
  4073 |     |             mstore(0x60, 0x80)
  4074 |     |             mstore(0x80, p3)
  4075 |     |             writeString(0xa0, p2)
  4076 |     |         }
  4077 |     |         _sendLogPayload(0x1c, 0xc4);
  4078 |     |         /// @solidity memory-safe-assembly
  4079 |     |         assembly {
  4080 |     |             mstore(0x00, m0)
  4081 |     |             mstore(0x20, m1)
  4082 |     |             mstore(0x40, m2)
  4083 |     |             mstore(0x60, m3)
  4084 |     |             mstore(0x80, m4)
  4085 |     |             mstore(0xa0, m5)
  4086 |     |             mstore(0xc0, m6)
  4087 |     |         }
  4088 |     |     }
  4089 |     | 
  4090 |     |     function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {
  4091 |     |         bytes32 m0;
  4092 |     |         bytes32 m1;
  4093 |     |         bytes32 m2;
  4094 |     |         bytes32 m3;
  4095 |     |         bytes32 m4;
  4096 |     |         bytes32 m5;
  4097 |     |         bytes32 m6;
  4098 |     |         /// @solidity memory-safe-assembly
  4099 |     |         assembly {
  4100 |     |             function writeString(pos, w) {
  4101 |     |                 let length := 0
  4102 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4103 |     |                 mstore(pos, length)
  4104 |     |                 let shift := sub(256, shl(3, length))
  4105 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4106 |     |             }
  4107 |     |             m0 := mload(0x00)
  4108 |     |             m1 := mload(0x20)
  4109 |     |             m2 := mload(0x40)
  4110 |     |             m3 := mload(0x60)
  4111 |     |             m4 := mload(0x80)
  4112 |     |             m5 := mload(0xa0)
  4113 |     |             m6 := mload(0xc0)
  4114 |     |             // Selector of `log(address,bool,string,uint256)`.
  4115 |     |             mstore(0x00, 0x80e6a20b)
  4116 |     |             mstore(0x20, p0)
  4117 |     |             mstore(0x40, p1)
  4118 |     |             mstore(0x60, 0x80)
  4119 |     |             mstore(0x80, p3)
  4120 |     |             writeString(0xa0, p2)
  4121 |     |         }
  4122 |     |         _sendLogPayload(0x1c, 0xc4);
  4123 |     |         /// @solidity memory-safe-assembly
  4124 |     |         assembly {
  4125 |     |             mstore(0x00, m0)
  4126 |     |             mstore(0x20, m1)
  4127 |     |             mstore(0x40, m2)
  4128 |     |             mstore(0x60, m3)
  4129 |     |             mstore(0x80, m4)
  4130 |     |             mstore(0xa0, m5)
  4131 |     |             mstore(0xc0, m6)
  4132 |     |         }
  4133 |     |     }
  4134 |     | 
  4135 |     |     function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
  4136 |     |         bytes32 m0;
  4137 |     |         bytes32 m1;
  4138 |     |         bytes32 m2;
  4139 |     |         bytes32 m3;
  4140 |     |         bytes32 m4;
  4141 |     |         bytes32 m5;
  4142 |     |         bytes32 m6;
  4143 |     |         bytes32 m7;
  4144 |     |         bytes32 m8;
  4145 |     |         /// @solidity memory-safe-assembly
  4146 |     |         assembly {
  4147 |     |             function writeString(pos, w) {
  4148 |     |                 let length := 0
  4149 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4150 |     |                 mstore(pos, length)
  4151 |     |                 let shift := sub(256, shl(3, length))
  4152 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4153 |     |             }
  4154 |     |             m0 := mload(0x00)
  4155 |     |             m1 := mload(0x20)
  4156 |     |             m2 := mload(0x40)
  4157 |     |             m3 := mload(0x60)
  4158 |     |             m4 := mload(0x80)
  4159 |     |             m5 := mload(0xa0)
  4160 |     |             m6 := mload(0xc0)
  4161 |     |             m7 := mload(0xe0)
  4162 |     |             m8 := mload(0x100)
  4163 |     |             // Selector of `log(address,bool,string,string)`.
  4164 |     |             mstore(0x00, 0x475c5c33)
  4165 |     |             mstore(0x20, p0)
  4166 |     |             mstore(0x40, p1)
  4167 |     |             mstore(0x60, 0x80)
  4168 |     |             mstore(0x80, 0xc0)
  4169 |     |             writeString(0xa0, p2)
  4170 |     |             writeString(0xe0, p3)
  4171 |     |         }
  4172 |     |         _sendLogPayload(0x1c, 0x104);
  4173 |     |         /// @solidity memory-safe-assembly
  4174 |     |         assembly {
  4175 |     |             mstore(0x00, m0)
  4176 |     |             mstore(0x20, m1)
  4177 |     |             mstore(0x40, m2)
  4178 |     |             mstore(0x60, m3)
  4179 |     |             mstore(0x80, m4)
  4180 |     |             mstore(0xa0, m5)
  4181 |     |             mstore(0xc0, m6)
  4182 |     |             mstore(0xe0, m7)
  4183 |     |             mstore(0x100, m8)
  4184 |     |         }
  4185 |     |     }
  4186 |     | 
  4187 |     |     function log(address p0, uint256 p1, address p2, address p3) internal pure {
  4188 |     |         bytes32 m0;
  4189 |     |         bytes32 m1;
  4190 |     |         bytes32 m2;
  4191 |     |         bytes32 m3;
  4192 |     |         bytes32 m4;
  4193 |     |         /// @solidity memory-safe-assembly
  4194 |     |         assembly {
  4195 |     |             m0 := mload(0x00)
  4196 |     |             m1 := mload(0x20)
  4197 |     |             m2 := mload(0x40)
  4198 |     |             m3 := mload(0x60)
  4199 |     |             m4 := mload(0x80)
  4200 |     |             // Selector of `log(address,uint256,address,address)`.
  4201 |     |             mstore(0x00, 0x478d1c62)
  4202 |     |             mstore(0x20, p0)
  4203 |     |             mstore(0x40, p1)
  4204 |     |             mstore(0x60, p2)
  4205 |     |             mstore(0x80, p3)
  4206 |     |         }
  4207 |     |         _sendLogPayload(0x1c, 0x84);
  4208 |     |         /// @solidity memory-safe-assembly
  4209 |     |         assembly {
  4210 |     |             mstore(0x00, m0)
  4211 |     |             mstore(0x20, m1)
  4212 |     |             mstore(0x40, m2)
  4213 |     |             mstore(0x60, m3)
  4214 |     |             mstore(0x80, m4)
  4215 |     |         }
  4216 |     |     }
  4217 |     | 
  4218 |     |     function log(address p0, uint256 p1, address p2, bool p3) internal pure {
  4219 |     |         bytes32 m0;
  4220 |     |         bytes32 m1;
  4221 |     |         bytes32 m2;
  4222 |     |         bytes32 m3;
  4223 |     |         bytes32 m4;
  4224 |     |         /// @solidity memory-safe-assembly
  4225 |     |         assembly {
  4226 |     |             m0 := mload(0x00)
  4227 |     |             m1 := mload(0x20)
  4228 |     |             m2 := mload(0x40)
  4229 |     |             m3 := mload(0x60)
  4230 |     |             m4 := mload(0x80)
  4231 |     |             // Selector of `log(address,uint256,address,bool)`.
  4232 |     |             mstore(0x00, 0xa1bcc9b3)
  4233 |     |             mstore(0x20, p0)
  4234 |     |             mstore(0x40, p1)
  4235 |     |             mstore(0x60, p2)
  4236 |     |             mstore(0x80, p3)
  4237 |     |         }
  4238 |     |         _sendLogPayload(0x1c, 0x84);
  4239 |     |         /// @solidity memory-safe-assembly
  4240 |     |         assembly {
  4241 |     |             mstore(0x00, m0)
  4242 |     |             mstore(0x20, m1)
  4243 |     |             mstore(0x40, m2)
  4244 |     |             mstore(0x60, m3)
  4245 |     |             mstore(0x80, m4)
  4246 |     |         }
  4247 |     |     }
  4248 |     | 
  4249 |     |     function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {
  4250 |     |         bytes32 m0;
  4251 |     |         bytes32 m1;
  4252 |     |         bytes32 m2;
  4253 |     |         bytes32 m3;
  4254 |     |         bytes32 m4;
  4255 |     |         /// @solidity memory-safe-assembly
  4256 |     |         assembly {
  4257 |     |             m0 := mload(0x00)
  4258 |     |             m1 := mload(0x20)
  4259 |     |             m2 := mload(0x40)
  4260 |     |             m3 := mload(0x60)
  4261 |     |             m4 := mload(0x80)
  4262 |     |             // Selector of `log(address,uint256,address,uint256)`.
  4263 |     |             mstore(0x00, 0x100f650e)
  4264 |     |             mstore(0x20, p0)
  4265 |     |             mstore(0x40, p1)
  4266 |     |             mstore(0x60, p2)
  4267 |     |             mstore(0x80, p3)
  4268 |     |         }
  4269 |     |         _sendLogPayload(0x1c, 0x84);
  4270 |     |         /// @solidity memory-safe-assembly
  4271 |     |         assembly {
  4272 |     |             mstore(0x00, m0)
  4273 |     |             mstore(0x20, m1)
  4274 |     |             mstore(0x40, m2)
  4275 |     |             mstore(0x60, m3)
  4276 |     |             mstore(0x80, m4)
  4277 |     |         }
  4278 |     |     }
  4279 |     | 
  4280 |     |     function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {
  4281 |     |         bytes32 m0;
  4282 |     |         bytes32 m1;
  4283 |     |         bytes32 m2;
  4284 |     |         bytes32 m3;
  4285 |     |         bytes32 m4;
  4286 |     |         bytes32 m5;
  4287 |     |         bytes32 m6;
  4288 |     |         /// @solidity memory-safe-assembly
  4289 |     |         assembly {
  4290 |     |             function writeString(pos, w) {
  4291 |     |                 let length := 0
  4292 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4293 |     |                 mstore(pos, length)
  4294 |     |                 let shift := sub(256, shl(3, length))
  4295 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4296 |     |             }
  4297 |     |             m0 := mload(0x00)
  4298 |     |             m1 := mload(0x20)
  4299 |     |             m2 := mload(0x40)
  4300 |     |             m3 := mload(0x60)
  4301 |     |             m4 := mload(0x80)
  4302 |     |             m5 := mload(0xa0)
  4303 |     |             m6 := mload(0xc0)
  4304 |     |             // Selector of `log(address,uint256,address,string)`.
  4305 |     |             mstore(0x00, 0x1da986ea)
  4306 |     |             mstore(0x20, p0)
  4307 |     |             mstore(0x40, p1)
  4308 |     |             mstore(0x60, p2)
  4309 |     |             mstore(0x80, 0x80)
  4310 |     |             writeString(0xa0, p3)
  4311 |     |         }
  4312 |     |         _sendLogPayload(0x1c, 0xc4);
  4313 |     |         /// @solidity memory-safe-assembly
  4314 |     |         assembly {
  4315 |     |             mstore(0x00, m0)
  4316 |     |             mstore(0x20, m1)
  4317 |     |             mstore(0x40, m2)
  4318 |     |             mstore(0x60, m3)
  4319 |     |             mstore(0x80, m4)
  4320 |     |             mstore(0xa0, m5)
  4321 |     |             mstore(0xc0, m6)
  4322 |     |         }
  4323 |     |     }
  4324 |     | 
  4325 |     |     function log(address p0, uint256 p1, bool p2, address p3) internal pure {
  4326 |     |         bytes32 m0;
  4327 |     |         bytes32 m1;
  4328 |     |         bytes32 m2;
  4329 |     |         bytes32 m3;
  4330 |     |         bytes32 m4;
  4331 |     |         /// @solidity memory-safe-assembly
  4332 |     |         assembly {
  4333 |     |             m0 := mload(0x00)
  4334 |     |             m1 := mload(0x20)
  4335 |     |             m2 := mload(0x40)
  4336 |     |             m3 := mload(0x60)
  4337 |     |             m4 := mload(0x80)
  4338 |     |             // Selector of `log(address,uint256,bool,address)`.
  4339 |     |             mstore(0x00, 0xa31bfdcc)
  4340 |     |             mstore(0x20, p0)
  4341 |     |             mstore(0x40, p1)
  4342 |     |             mstore(0x60, p2)
  4343 |     |             mstore(0x80, p3)
  4344 |     |         }
  4345 |     |         _sendLogPayload(0x1c, 0x84);
  4346 |     |         /// @solidity memory-safe-assembly
  4347 |     |         assembly {
  4348 |     |             mstore(0x00, m0)
  4349 |     |             mstore(0x20, m1)
  4350 |     |             mstore(0x40, m2)
  4351 |     |             mstore(0x60, m3)
  4352 |     |             mstore(0x80, m4)
  4353 |     |         }
  4354 |     |     }
  4355 |     | 
  4356 |     |     function log(address p0, uint256 p1, bool p2, bool p3) internal pure {
  4357 |     |         bytes32 m0;
  4358 |     |         bytes32 m1;
  4359 |     |         bytes32 m2;
  4360 |     |         bytes32 m3;
  4361 |     |         bytes32 m4;
  4362 |     |         /// @solidity memory-safe-assembly
  4363 |     |         assembly {
  4364 |     |             m0 := mload(0x00)
  4365 |     |             m1 := mload(0x20)
  4366 |     |             m2 := mload(0x40)
  4367 |     |             m3 := mload(0x60)
  4368 |     |             m4 := mload(0x80)
  4369 |     |             // Selector of `log(address,uint256,bool,bool)`.
  4370 |     |             mstore(0x00, 0x3bf5e537)
  4371 |     |             mstore(0x20, p0)
  4372 |     |             mstore(0x40, p1)
  4373 |     |             mstore(0x60, p2)
  4374 |     |             mstore(0x80, p3)
  4375 |     |         }
  4376 |     |         _sendLogPayload(0x1c, 0x84);
  4377 |     |         /// @solidity memory-safe-assembly
  4378 |     |         assembly {
  4379 |     |             mstore(0x00, m0)
  4380 |     |             mstore(0x20, m1)
  4381 |     |             mstore(0x40, m2)
  4382 |     |             mstore(0x60, m3)
  4383 |     |             mstore(0x80, m4)
  4384 |     |         }
  4385 |     |     }
  4386 |     | 
  4387 |     |     function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {
  4388 |     |         bytes32 m0;
  4389 |     |         bytes32 m1;
  4390 |     |         bytes32 m2;
  4391 |     |         bytes32 m3;
  4392 |     |         bytes32 m4;
  4393 |     |         /// @solidity memory-safe-assembly
  4394 |     |         assembly {
  4395 |     |             m0 := mload(0x00)
  4396 |     |             m1 := mload(0x20)
  4397 |     |             m2 := mload(0x40)
  4398 |     |             m3 := mload(0x60)
  4399 |     |             m4 := mload(0x80)
  4400 |     |             // Selector of `log(address,uint256,bool,uint256)`.
  4401 |     |             mstore(0x00, 0x22f6b999)
  4402 |     |             mstore(0x20, p0)
  4403 |     |             mstore(0x40, p1)
  4404 |     |             mstore(0x60, p2)
  4405 |     |             mstore(0x80, p3)
  4406 |     |         }
  4407 |     |         _sendLogPayload(0x1c, 0x84);
  4408 |     |         /// @solidity memory-safe-assembly
  4409 |     |         assembly {
  4410 |     |             mstore(0x00, m0)
  4411 |     |             mstore(0x20, m1)
  4412 |     |             mstore(0x40, m2)
  4413 |     |             mstore(0x60, m3)
  4414 |     |             mstore(0x80, m4)
  4415 |     |         }
  4416 |     |     }
  4417 |     | 
  4418 |     |     function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {
  4419 |     |         bytes32 m0;
  4420 |     |         bytes32 m1;
  4421 |     |         bytes32 m2;
  4422 |     |         bytes32 m3;
  4423 |     |         bytes32 m4;
  4424 |     |         bytes32 m5;
  4425 |     |         bytes32 m6;
  4426 |     |         /// @solidity memory-safe-assembly
  4427 |     |         assembly {
  4428 |     |             function writeString(pos, w) {
  4429 |     |                 let length := 0
  4430 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4431 |     |                 mstore(pos, length)
  4432 |     |                 let shift := sub(256, shl(3, length))
  4433 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4434 |     |             }
  4435 |     |             m0 := mload(0x00)
  4436 |     |             m1 := mload(0x20)
  4437 |     |             m2 := mload(0x40)
  4438 |     |             m3 := mload(0x60)
  4439 |     |             m4 := mload(0x80)
  4440 |     |             m5 := mload(0xa0)
  4441 |     |             m6 := mload(0xc0)
  4442 |     |             // Selector of `log(address,uint256,bool,string)`.
  4443 |     |             mstore(0x00, 0xc5ad85f9)
  4444 |     |             mstore(0x20, p0)
  4445 |     |             mstore(0x40, p1)
  4446 |     |             mstore(0x60, p2)
  4447 |     |             mstore(0x80, 0x80)
  4448 |     |             writeString(0xa0, p3)
  4449 |     |         }
  4450 |     |         _sendLogPayload(0x1c, 0xc4);
  4451 |     |         /// @solidity memory-safe-assembly
  4452 |     |         assembly {
  4453 |     |             mstore(0x00, m0)
  4454 |     |             mstore(0x20, m1)
  4455 |     |             mstore(0x40, m2)
  4456 |     |             mstore(0x60, m3)
  4457 |     |             mstore(0x80, m4)
  4458 |     |             mstore(0xa0, m5)
  4459 |     |             mstore(0xc0, m6)
  4460 |     |         }
  4461 |     |     }
  4462 |     | 
  4463 |     |     function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {
  4464 |     |         bytes32 m0;
  4465 |     |         bytes32 m1;
  4466 |     |         bytes32 m2;
  4467 |     |         bytes32 m3;
  4468 |     |         bytes32 m4;
  4469 |     |         /// @solidity memory-safe-assembly
  4470 |     |         assembly {
  4471 |     |             m0 := mload(0x00)
  4472 |     |             m1 := mload(0x20)
  4473 |     |             m2 := mload(0x40)
  4474 |     |             m3 := mload(0x60)
  4475 |     |             m4 := mload(0x80)
  4476 |     |             // Selector of `log(address,uint256,uint256,address)`.
  4477 |     |             mstore(0x00, 0x20e3984d)
  4478 |     |             mstore(0x20, p0)
  4479 |     |             mstore(0x40, p1)
  4480 |     |             mstore(0x60, p2)
  4481 |     |             mstore(0x80, p3)
  4482 |     |         }
  4483 |     |         _sendLogPayload(0x1c, 0x84);
  4484 |     |         /// @solidity memory-safe-assembly
  4485 |     |         assembly {
  4486 |     |             mstore(0x00, m0)
  4487 |     |             mstore(0x20, m1)
  4488 |     |             mstore(0x40, m2)
  4489 |     |             mstore(0x60, m3)
  4490 |     |             mstore(0x80, m4)
  4491 |     |         }
  4492 |     |     }
  4493 |     | 
  4494 |     |     function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {
  4495 |     |         bytes32 m0;
  4496 |     |         bytes32 m1;
  4497 |     |         bytes32 m2;
  4498 |     |         bytes32 m3;
  4499 |     |         bytes32 m4;
  4500 |     |         /// @solidity memory-safe-assembly
  4501 |     |         assembly {
  4502 |     |             m0 := mload(0x00)
  4503 |     |             m1 := mload(0x20)
  4504 |     |             m2 := mload(0x40)
  4505 |     |             m3 := mload(0x60)
  4506 |     |             m4 := mload(0x80)
  4507 |     |             // Selector of `log(address,uint256,uint256,bool)`.
  4508 |     |             mstore(0x00, 0x66f1bc67)
  4509 |     |             mstore(0x20, p0)
  4510 |     |             mstore(0x40, p1)
  4511 |     |             mstore(0x60, p2)
  4512 |     |             mstore(0x80, p3)
  4513 |     |         }
  4514 |     |         _sendLogPayload(0x1c, 0x84);
  4515 |     |         /// @solidity memory-safe-assembly
  4516 |     |         assembly {
  4517 |     |             mstore(0x00, m0)
  4518 |     |             mstore(0x20, m1)
  4519 |     |             mstore(0x40, m2)
  4520 |     |             mstore(0x60, m3)
  4521 |     |             mstore(0x80, m4)
  4522 |     |         }
  4523 |     |     }
  4524 |     | 
  4525 |     |     function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  4526 |     |         bytes32 m0;
  4527 |     |         bytes32 m1;
  4528 |     |         bytes32 m2;
  4529 |     |         bytes32 m3;
  4530 |     |         bytes32 m4;
  4531 |     |         /// @solidity memory-safe-assembly
  4532 |     |         assembly {
  4533 |     |             m0 := mload(0x00)
  4534 |     |             m1 := mload(0x20)
  4535 |     |             m2 := mload(0x40)
  4536 |     |             m3 := mload(0x60)
  4537 |     |             m4 := mload(0x80)
  4538 |     |             // Selector of `log(address,uint256,uint256,uint256)`.
  4539 |     |             mstore(0x00, 0x34f0e636)
  4540 |     |             mstore(0x20, p0)
  4541 |     |             mstore(0x40, p1)
  4542 |     |             mstore(0x60, p2)
  4543 |     |             mstore(0x80, p3)
  4544 |     |         }
  4545 |     |         _sendLogPayload(0x1c, 0x84);
  4546 |     |         /// @solidity memory-safe-assembly
  4547 |     |         assembly {
  4548 |     |             mstore(0x00, m0)
  4549 |     |             mstore(0x20, m1)
  4550 |     |             mstore(0x40, m2)
  4551 |     |             mstore(0x60, m3)
  4552 |     |             mstore(0x80, m4)
  4553 |     |         }
  4554 |     |     }
  4555 |     | 
  4556 |     |     function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
  4557 |     |         bytes32 m0;
  4558 |     |         bytes32 m1;
  4559 |     |         bytes32 m2;
  4560 |     |         bytes32 m3;
  4561 |     |         bytes32 m4;
  4562 |     |         bytes32 m5;
  4563 |     |         bytes32 m6;
  4564 |     |         /// @solidity memory-safe-assembly
  4565 |     |         assembly {
  4566 |     |             function writeString(pos, w) {
  4567 |     |                 let length := 0
  4568 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4569 |     |                 mstore(pos, length)
  4570 |     |                 let shift := sub(256, shl(3, length))
  4571 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4572 |     |             }
  4573 |     |             m0 := mload(0x00)
  4574 |     |             m1 := mload(0x20)
  4575 |     |             m2 := mload(0x40)
  4576 |     |             m3 := mload(0x60)
  4577 |     |             m4 := mload(0x80)
  4578 |     |             m5 := mload(0xa0)
  4579 |     |             m6 := mload(0xc0)
  4580 |     |             // Selector of `log(address,uint256,uint256,string)`.
  4581 |     |             mstore(0x00, 0x4a28c017)
  4582 |     |             mstore(0x20, p0)
  4583 |     |             mstore(0x40, p1)
  4584 |     |             mstore(0x60, p2)
  4585 |     |             mstore(0x80, 0x80)
  4586 |     |             writeString(0xa0, p3)
  4587 |     |         }
  4588 |     |         _sendLogPayload(0x1c, 0xc4);
  4589 |     |         /// @solidity memory-safe-assembly
  4590 |     |         assembly {
  4591 |     |             mstore(0x00, m0)
  4592 |     |             mstore(0x20, m1)
  4593 |     |             mstore(0x40, m2)
  4594 |     |             mstore(0x60, m3)
  4595 |     |             mstore(0x80, m4)
  4596 |     |             mstore(0xa0, m5)
  4597 |     |             mstore(0xc0, m6)
  4598 |     |         }
  4599 |     |     }
  4600 |     | 
  4601 |     |     function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {
  4602 |     |         bytes32 m0;
  4603 |     |         bytes32 m1;
  4604 |     |         bytes32 m2;
  4605 |     |         bytes32 m3;
  4606 |     |         bytes32 m4;
  4607 |     |         bytes32 m5;
  4608 |     |         bytes32 m6;
  4609 |     |         /// @solidity memory-safe-assembly
  4610 |     |         assembly {
  4611 |     |             function writeString(pos, w) {
  4612 |     |                 let length := 0
  4613 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4614 |     |                 mstore(pos, length)
  4615 |     |                 let shift := sub(256, shl(3, length))
  4616 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4617 |     |             }
  4618 |     |             m0 := mload(0x00)
  4619 |     |             m1 := mload(0x20)
  4620 |     |             m2 := mload(0x40)
  4621 |     |             m3 := mload(0x60)
  4622 |     |             m4 := mload(0x80)
  4623 |     |             m5 := mload(0xa0)
  4624 |     |             m6 := mload(0xc0)
  4625 |     |             // Selector of `log(address,uint256,string,address)`.
  4626 |     |             mstore(0x00, 0x5c430d47)
  4627 |     |             mstore(0x20, p0)
  4628 |     |             mstore(0x40, p1)
  4629 |     |             mstore(0x60, 0x80)
  4630 |     |             mstore(0x80, p3)
  4631 |     |             writeString(0xa0, p2)
  4632 |     |         }
  4633 |     |         _sendLogPayload(0x1c, 0xc4);
  4634 |     |         /// @solidity memory-safe-assembly
  4635 |     |         assembly {
  4636 |     |             mstore(0x00, m0)
  4637 |     |             mstore(0x20, m1)
  4638 |     |             mstore(0x40, m2)
  4639 |     |             mstore(0x60, m3)
  4640 |     |             mstore(0x80, m4)
  4641 |     |             mstore(0xa0, m5)
  4642 |     |             mstore(0xc0, m6)
  4643 |     |         }
  4644 |     |     }
  4645 |     | 
  4646 |     |     function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {
  4647 |     |         bytes32 m0;
  4648 |     |         bytes32 m1;
  4649 |     |         bytes32 m2;
  4650 |     |         bytes32 m3;
  4651 |     |         bytes32 m4;
  4652 |     |         bytes32 m5;
  4653 |     |         bytes32 m6;
  4654 |     |         /// @solidity memory-safe-assembly
  4655 |     |         assembly {
  4656 |     |             function writeString(pos, w) {
  4657 |     |                 let length := 0
  4658 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4659 |     |                 mstore(pos, length)
  4660 |     |                 let shift := sub(256, shl(3, length))
  4661 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4662 |     |             }
  4663 |     |             m0 := mload(0x00)
  4664 |     |             m1 := mload(0x20)
  4665 |     |             m2 := mload(0x40)
  4666 |     |             m3 := mload(0x60)
  4667 |     |             m4 := mload(0x80)
  4668 |     |             m5 := mload(0xa0)
  4669 |     |             m6 := mload(0xc0)
  4670 |     |             // Selector of `log(address,uint256,string,bool)`.
  4671 |     |             mstore(0x00, 0xcf18105c)
  4672 |     |             mstore(0x20, p0)
  4673 |     |             mstore(0x40, p1)
  4674 |     |             mstore(0x60, 0x80)
  4675 |     |             mstore(0x80, p3)
  4676 |     |             writeString(0xa0, p2)
  4677 |     |         }
  4678 |     |         _sendLogPayload(0x1c, 0xc4);
  4679 |     |         /// @solidity memory-safe-assembly
  4680 |     |         assembly {
  4681 |     |             mstore(0x00, m0)
  4682 |     |             mstore(0x20, m1)
  4683 |     |             mstore(0x40, m2)
  4684 |     |             mstore(0x60, m3)
  4685 |     |             mstore(0x80, m4)
  4686 |     |             mstore(0xa0, m5)
  4687 |     |             mstore(0xc0, m6)
  4688 |     |         }
  4689 |     |     }
  4690 |     | 
  4691 |     |     function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
  4692 |     |         bytes32 m0;
  4693 |     |         bytes32 m1;
  4694 |     |         bytes32 m2;
  4695 |     |         bytes32 m3;
  4696 |     |         bytes32 m4;
  4697 |     |         bytes32 m5;
  4698 |     |         bytes32 m6;
  4699 |     |         /// @solidity memory-safe-assembly
  4700 |     |         assembly {
  4701 |     |             function writeString(pos, w) {
  4702 |     |                 let length := 0
  4703 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4704 |     |                 mstore(pos, length)
  4705 |     |                 let shift := sub(256, shl(3, length))
  4706 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4707 |     |             }
  4708 |     |             m0 := mload(0x00)
  4709 |     |             m1 := mload(0x20)
  4710 |     |             m2 := mload(0x40)
  4711 |     |             m3 := mload(0x60)
  4712 |     |             m4 := mload(0x80)
  4713 |     |             m5 := mload(0xa0)
  4714 |     |             m6 := mload(0xc0)
  4715 |     |             // Selector of `log(address,uint256,string,uint256)`.
  4716 |     |             mstore(0x00, 0xbf01f891)
  4717 |     |             mstore(0x20, p0)
  4718 |     |             mstore(0x40, p1)
  4719 |     |             mstore(0x60, 0x80)
  4720 |     |             mstore(0x80, p3)
  4721 |     |             writeString(0xa0, p2)
  4722 |     |         }
  4723 |     |         _sendLogPayload(0x1c, 0xc4);
  4724 |     |         /// @solidity memory-safe-assembly
  4725 |     |         assembly {
  4726 |     |             mstore(0x00, m0)
  4727 |     |             mstore(0x20, m1)
  4728 |     |             mstore(0x40, m2)
  4729 |     |             mstore(0x60, m3)
  4730 |     |             mstore(0x80, m4)
  4731 |     |             mstore(0xa0, m5)
  4732 |     |             mstore(0xc0, m6)
  4733 |     |         }
  4734 |     |     }
  4735 |     | 
  4736 |     |     function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
  4737 |     |         bytes32 m0;
  4738 |     |         bytes32 m1;
  4739 |     |         bytes32 m2;
  4740 |     |         bytes32 m3;
  4741 |     |         bytes32 m4;
  4742 |     |         bytes32 m5;
  4743 |     |         bytes32 m6;
  4744 |     |         bytes32 m7;
  4745 |     |         bytes32 m8;
  4746 |     |         /// @solidity memory-safe-assembly
  4747 |     |         assembly {
  4748 |     |             function writeString(pos, w) {
  4749 |     |                 let length := 0
  4750 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4751 |     |                 mstore(pos, length)
  4752 |     |                 let shift := sub(256, shl(3, length))
  4753 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4754 |     |             }
  4755 |     |             m0 := mload(0x00)
  4756 |     |             m1 := mload(0x20)
  4757 |     |             m2 := mload(0x40)
  4758 |     |             m3 := mload(0x60)
  4759 |     |             m4 := mload(0x80)
  4760 |     |             m5 := mload(0xa0)
  4761 |     |             m6 := mload(0xc0)
  4762 |     |             m7 := mload(0xe0)
  4763 |     |             m8 := mload(0x100)
  4764 |     |             // Selector of `log(address,uint256,string,string)`.
  4765 |     |             mstore(0x00, 0x88a8c406)
  4766 |     |             mstore(0x20, p0)
  4767 |     |             mstore(0x40, p1)
  4768 |     |             mstore(0x60, 0x80)
  4769 |     |             mstore(0x80, 0xc0)
  4770 |     |             writeString(0xa0, p2)
  4771 |     |             writeString(0xe0, p3)
  4772 |     |         }
  4773 |     |         _sendLogPayload(0x1c, 0x104);
  4774 |     |         /// @solidity memory-safe-assembly
  4775 |     |         assembly {
  4776 |     |             mstore(0x00, m0)
  4777 |     |             mstore(0x20, m1)
  4778 |     |             mstore(0x40, m2)
  4779 |     |             mstore(0x60, m3)
  4780 |     |             mstore(0x80, m4)
  4781 |     |             mstore(0xa0, m5)
  4782 |     |             mstore(0xc0, m6)
  4783 |     |             mstore(0xe0, m7)
  4784 |     |             mstore(0x100, m8)
  4785 |     |         }
  4786 |     |     }
  4787 |     | 
  4788 |     |     function log(address p0, bytes32 p1, address p2, address p3) internal pure {
  4789 |     |         bytes32 m0;
  4790 |     |         bytes32 m1;
  4791 |     |         bytes32 m2;
  4792 |     |         bytes32 m3;
  4793 |     |         bytes32 m4;
  4794 |     |         bytes32 m5;
  4795 |     |         bytes32 m6;
  4796 |     |         /// @solidity memory-safe-assembly
  4797 |     |         assembly {
  4798 |     |             function writeString(pos, w) {
  4799 |     |                 let length := 0
  4800 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4801 |     |                 mstore(pos, length)
  4802 |     |                 let shift := sub(256, shl(3, length))
  4803 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4804 |     |             }
  4805 |     |             m0 := mload(0x00)
  4806 |     |             m1 := mload(0x20)
  4807 |     |             m2 := mload(0x40)
  4808 |     |             m3 := mload(0x60)
  4809 |     |             m4 := mload(0x80)
  4810 |     |             m5 := mload(0xa0)
  4811 |     |             m6 := mload(0xc0)
  4812 |     |             // Selector of `log(address,string,address,address)`.
  4813 |     |             mstore(0x00, 0x0d36fa20)
  4814 |     |             mstore(0x20, p0)
  4815 |     |             mstore(0x40, 0x80)
  4816 |     |             mstore(0x60, p2)
  4817 |     |             mstore(0x80, p3)
  4818 |     |             writeString(0xa0, p1)
  4819 |     |         }
  4820 |     |         _sendLogPayload(0x1c, 0xc4);
  4821 |     |         /// @solidity memory-safe-assembly
  4822 |     |         assembly {
  4823 |     |             mstore(0x00, m0)
  4824 |     |             mstore(0x20, m1)
  4825 |     |             mstore(0x40, m2)
  4826 |     |             mstore(0x60, m3)
  4827 |     |             mstore(0x80, m4)
  4828 |     |             mstore(0xa0, m5)
  4829 |     |             mstore(0xc0, m6)
  4830 |     |         }
  4831 |     |     }
  4832 |     | 
  4833 |     |     function log(address p0, bytes32 p1, address p2, bool p3) internal pure {
  4834 |     |         bytes32 m0;
  4835 |     |         bytes32 m1;
  4836 |     |         bytes32 m2;
  4837 |     |         bytes32 m3;
  4838 |     |         bytes32 m4;
  4839 |     |         bytes32 m5;
  4840 |     |         bytes32 m6;
  4841 |     |         /// @solidity memory-safe-assembly
  4842 |     |         assembly {
  4843 |     |             function writeString(pos, w) {
  4844 |     |                 let length := 0
  4845 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4846 |     |                 mstore(pos, length)
  4847 |     |                 let shift := sub(256, shl(3, length))
  4848 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4849 |     |             }
  4850 |     |             m0 := mload(0x00)
  4851 |     |             m1 := mload(0x20)
  4852 |     |             m2 := mload(0x40)
  4853 |     |             m3 := mload(0x60)
  4854 |     |             m4 := mload(0x80)
  4855 |     |             m5 := mload(0xa0)
  4856 |     |             m6 := mload(0xc0)
  4857 |     |             // Selector of `log(address,string,address,bool)`.
  4858 |     |             mstore(0x00, 0x0df12b76)
  4859 |     |             mstore(0x20, p0)
  4860 |     |             mstore(0x40, 0x80)
  4861 |     |             mstore(0x60, p2)
  4862 |     |             mstore(0x80, p3)
  4863 |     |             writeString(0xa0, p1)
  4864 |     |         }
  4865 |     |         _sendLogPayload(0x1c, 0xc4);
  4866 |     |         /// @solidity memory-safe-assembly
  4867 |     |         assembly {
  4868 |     |             mstore(0x00, m0)
  4869 |     |             mstore(0x20, m1)
  4870 |     |             mstore(0x40, m2)
  4871 |     |             mstore(0x60, m3)
  4872 |     |             mstore(0x80, m4)
  4873 |     |             mstore(0xa0, m5)
  4874 |     |             mstore(0xc0, m6)
  4875 |     |         }
  4876 |     |     }
  4877 |     | 
  4878 |     |     function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {
  4879 |     |         bytes32 m0;
  4880 |     |         bytes32 m1;
  4881 |     |         bytes32 m2;
  4882 |     |         bytes32 m3;
  4883 |     |         bytes32 m4;
  4884 |     |         bytes32 m5;
  4885 |     |         bytes32 m6;
  4886 |     |         /// @solidity memory-safe-assembly
  4887 |     |         assembly {
  4888 |     |             function writeString(pos, w) {
  4889 |     |                 let length := 0
  4890 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4891 |     |                 mstore(pos, length)
  4892 |     |                 let shift := sub(256, shl(3, length))
  4893 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4894 |     |             }
  4895 |     |             m0 := mload(0x00)
  4896 |     |             m1 := mload(0x20)
  4897 |     |             m2 := mload(0x40)
  4898 |     |             m3 := mload(0x60)
  4899 |     |             m4 := mload(0x80)
  4900 |     |             m5 := mload(0xa0)
  4901 |     |             m6 := mload(0xc0)
  4902 |     |             // Selector of `log(address,string,address,uint256)`.
  4903 |     |             mstore(0x00, 0x457fe3cf)
  4904 |     |             mstore(0x20, p0)
  4905 |     |             mstore(0x40, 0x80)
  4906 |     |             mstore(0x60, p2)
  4907 |     |             mstore(0x80, p3)
  4908 |     |             writeString(0xa0, p1)
  4909 |     |         }
  4910 |     |         _sendLogPayload(0x1c, 0xc4);
  4911 |     |         /// @solidity memory-safe-assembly
  4912 |     |         assembly {
  4913 |     |             mstore(0x00, m0)
  4914 |     |             mstore(0x20, m1)
  4915 |     |             mstore(0x40, m2)
  4916 |     |             mstore(0x60, m3)
  4917 |     |             mstore(0x80, m4)
  4918 |     |             mstore(0xa0, m5)
  4919 |     |             mstore(0xc0, m6)
  4920 |     |         }
  4921 |     |     }
  4922 |     | 
  4923 |     |     function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {
  4924 |     |         bytes32 m0;
  4925 |     |         bytes32 m1;
  4926 |     |         bytes32 m2;
  4927 |     |         bytes32 m3;
  4928 |     |         bytes32 m4;
  4929 |     |         bytes32 m5;
  4930 |     |         bytes32 m6;
  4931 |     |         bytes32 m7;
  4932 |     |         bytes32 m8;
  4933 |     |         /// @solidity memory-safe-assembly
  4934 |     |         assembly {
  4935 |     |             function writeString(pos, w) {
  4936 |     |                 let length := 0
  4937 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4938 |     |                 mstore(pos, length)
  4939 |     |                 let shift := sub(256, shl(3, length))
  4940 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4941 |     |             }
  4942 |     |             m0 := mload(0x00)
  4943 |     |             m1 := mload(0x20)
  4944 |     |             m2 := mload(0x40)
  4945 |     |             m3 := mload(0x60)
  4946 |     |             m4 := mload(0x80)
  4947 |     |             m5 := mload(0xa0)
  4948 |     |             m6 := mload(0xc0)
  4949 |     |             m7 := mload(0xe0)
  4950 |     |             m8 := mload(0x100)
  4951 |     |             // Selector of `log(address,string,address,string)`.
  4952 |     |             mstore(0x00, 0xf7e36245)
  4953 |     |             mstore(0x20, p0)
  4954 |     |             mstore(0x40, 0x80)
  4955 |     |             mstore(0x60, p2)
  4956 |     |             mstore(0x80, 0xc0)
  4957 |     |             writeString(0xa0, p1)
  4958 |     |             writeString(0xe0, p3)
  4959 |     |         }
  4960 |     |         _sendLogPayload(0x1c, 0x104);
  4961 |     |         /// @solidity memory-safe-assembly
  4962 |     |         assembly {
  4963 |     |             mstore(0x00, m0)
  4964 |     |             mstore(0x20, m1)
  4965 |     |             mstore(0x40, m2)
  4966 |     |             mstore(0x60, m3)
  4967 |     |             mstore(0x80, m4)
  4968 |     |             mstore(0xa0, m5)
  4969 |     |             mstore(0xc0, m6)
  4970 |     |             mstore(0xe0, m7)
  4971 |     |             mstore(0x100, m8)
  4972 |     |         }
  4973 |     |     }
  4974 |     | 
  4975 |     |     function log(address p0, bytes32 p1, bool p2, address p3) internal pure {
  4976 |     |         bytes32 m0;
  4977 |     |         bytes32 m1;
  4978 |     |         bytes32 m2;
  4979 |     |         bytes32 m3;
  4980 |     |         bytes32 m4;
  4981 |     |         bytes32 m5;
  4982 |     |         bytes32 m6;
  4983 |     |         /// @solidity memory-safe-assembly
  4984 |     |         assembly {
  4985 |     |             function writeString(pos, w) {
  4986 |     |                 let length := 0
  4987 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  4988 |     |                 mstore(pos, length)
  4989 |     |                 let shift := sub(256, shl(3, length))
  4990 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  4991 |     |             }
  4992 |     |             m0 := mload(0x00)
  4993 |     |             m1 := mload(0x20)
  4994 |     |             m2 := mload(0x40)
  4995 |     |             m3 := mload(0x60)
  4996 |     |             m4 := mload(0x80)
  4997 |     |             m5 := mload(0xa0)
  4998 |     |             m6 := mload(0xc0)
  4999 |     |             // Selector of `log(address,string,bool,address)`.
  5000 |     |             mstore(0x00, 0x205871c2)
  5001 |     |             mstore(0x20, p0)
  5002 |     |             mstore(0x40, 0x80)
  5003 |     |             mstore(0x60, p2)
  5004 |     |             mstore(0x80, p3)
  5005 |     |             writeString(0xa0, p1)
  5006 |     |         }
  5007 |     |         _sendLogPayload(0x1c, 0xc4);
  5008 |     |         /// @solidity memory-safe-assembly
  5009 |     |         assembly {
  5010 |     |             mstore(0x00, m0)
  5011 |     |             mstore(0x20, m1)
  5012 |     |             mstore(0x40, m2)
  5013 |     |             mstore(0x60, m3)
  5014 |     |             mstore(0x80, m4)
  5015 |     |             mstore(0xa0, m5)
  5016 |     |             mstore(0xc0, m6)
  5017 |     |         }
  5018 |     |     }
  5019 |     | 
  5020 |     |     function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {
  5021 |     |         bytes32 m0;
  5022 |     |         bytes32 m1;
  5023 |     |         bytes32 m2;
  5024 |     |         bytes32 m3;
  5025 |     |         bytes32 m4;
  5026 |     |         bytes32 m5;
  5027 |     |         bytes32 m6;
  5028 |     |         /// @solidity memory-safe-assembly
  5029 |     |         assembly {
  5030 |     |             function writeString(pos, w) {
  5031 |     |                 let length := 0
  5032 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5033 |     |                 mstore(pos, length)
  5034 |     |                 let shift := sub(256, shl(3, length))
  5035 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5036 |     |             }
  5037 |     |             m0 := mload(0x00)
  5038 |     |             m1 := mload(0x20)
  5039 |     |             m2 := mload(0x40)
  5040 |     |             m3 := mload(0x60)
  5041 |     |             m4 := mload(0x80)
  5042 |     |             m5 := mload(0xa0)
  5043 |     |             m6 := mload(0xc0)
  5044 |     |             // Selector of `log(address,string,bool,bool)`.
  5045 |     |             mstore(0x00, 0x5f1d5c9f)
  5046 |     |             mstore(0x20, p0)
  5047 |     |             mstore(0x40, 0x80)
  5048 |     |             mstore(0x60, p2)
  5049 |     |             mstore(0x80, p3)
  5050 |     |             writeString(0xa0, p1)
  5051 |     |         }
  5052 |     |         _sendLogPayload(0x1c, 0xc4);
  5053 |     |         /// @solidity memory-safe-assembly
  5054 |     |         assembly {
  5055 |     |             mstore(0x00, m0)
  5056 |     |             mstore(0x20, m1)
  5057 |     |             mstore(0x40, m2)
  5058 |     |             mstore(0x60, m3)
  5059 |     |             mstore(0x80, m4)
  5060 |     |             mstore(0xa0, m5)
  5061 |     |             mstore(0xc0, m6)
  5062 |     |         }
  5063 |     |     }
  5064 |     | 
  5065 |     |     function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {
  5066 |     |         bytes32 m0;
  5067 |     |         bytes32 m1;
  5068 |     |         bytes32 m2;
  5069 |     |         bytes32 m3;
  5070 |     |         bytes32 m4;
  5071 |     |         bytes32 m5;
  5072 |     |         bytes32 m6;
  5073 |     |         /// @solidity memory-safe-assembly
  5074 |     |         assembly {
  5075 |     |             function writeString(pos, w) {
  5076 |     |                 let length := 0
  5077 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5078 |     |                 mstore(pos, length)
  5079 |     |                 let shift := sub(256, shl(3, length))
  5080 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5081 |     |             }
  5082 |     |             m0 := mload(0x00)
  5083 |     |             m1 := mload(0x20)
  5084 |     |             m2 := mload(0x40)
  5085 |     |             m3 := mload(0x60)
  5086 |     |             m4 := mload(0x80)
  5087 |     |             m5 := mload(0xa0)
  5088 |     |             m6 := mload(0xc0)
  5089 |     |             // Selector of `log(address,string,bool,uint256)`.
  5090 |     |             mstore(0x00, 0x515e38b6)
  5091 |     |             mstore(0x20, p0)
  5092 |     |             mstore(0x40, 0x80)
  5093 |     |             mstore(0x60, p2)
  5094 |     |             mstore(0x80, p3)
  5095 |     |             writeString(0xa0, p1)
  5096 |     |         }
  5097 |     |         _sendLogPayload(0x1c, 0xc4);
  5098 |     |         /// @solidity memory-safe-assembly
  5099 |     |         assembly {
  5100 |     |             mstore(0x00, m0)
  5101 |     |             mstore(0x20, m1)
  5102 |     |             mstore(0x40, m2)
  5103 |     |             mstore(0x60, m3)
  5104 |     |             mstore(0x80, m4)
  5105 |     |             mstore(0xa0, m5)
  5106 |     |             mstore(0xc0, m6)
  5107 |     |         }
  5108 |     |     }
  5109 |     | 
  5110 |     |     function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
  5111 |     |         bytes32 m0;
  5112 |     |         bytes32 m1;
  5113 |     |         bytes32 m2;
  5114 |     |         bytes32 m3;
  5115 |     |         bytes32 m4;
  5116 |     |         bytes32 m5;
  5117 |     |         bytes32 m6;
  5118 |     |         bytes32 m7;
  5119 |     |         bytes32 m8;
  5120 |     |         /// @solidity memory-safe-assembly
  5121 |     |         assembly {
  5122 |     |             function writeString(pos, w) {
  5123 |     |                 let length := 0
  5124 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5125 |     |                 mstore(pos, length)
  5126 |     |                 let shift := sub(256, shl(3, length))
  5127 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5128 |     |             }
  5129 |     |             m0 := mload(0x00)
  5130 |     |             m1 := mload(0x20)
  5131 |     |             m2 := mload(0x40)
  5132 |     |             m3 := mload(0x60)
  5133 |     |             m4 := mload(0x80)
  5134 |     |             m5 := mload(0xa0)
  5135 |     |             m6 := mload(0xc0)
  5136 |     |             m7 := mload(0xe0)
  5137 |     |             m8 := mload(0x100)
  5138 |     |             // Selector of `log(address,string,bool,string)`.
  5139 |     |             mstore(0x00, 0xbc0b61fe)
  5140 |     |             mstore(0x20, p0)
  5141 |     |             mstore(0x40, 0x80)
  5142 |     |             mstore(0x60, p2)
  5143 |     |             mstore(0x80, 0xc0)
  5144 |     |             writeString(0xa0, p1)
  5145 |     |             writeString(0xe0, p3)
  5146 |     |         }
  5147 |     |         _sendLogPayload(0x1c, 0x104);
  5148 |     |         /// @solidity memory-safe-assembly
  5149 |     |         assembly {
  5150 |     |             mstore(0x00, m0)
  5151 |     |             mstore(0x20, m1)
  5152 |     |             mstore(0x40, m2)
  5153 |     |             mstore(0x60, m3)
  5154 |     |             mstore(0x80, m4)
  5155 |     |             mstore(0xa0, m5)
  5156 |     |             mstore(0xc0, m6)
  5157 |     |             mstore(0xe0, m7)
  5158 |     |             mstore(0x100, m8)
  5159 |     |         }
  5160 |     |     }
  5161 |     | 
  5162 |     |     function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {
  5163 |     |         bytes32 m0;
  5164 |     |         bytes32 m1;
  5165 |     |         bytes32 m2;
  5166 |     |         bytes32 m3;
  5167 |     |         bytes32 m4;
  5168 |     |         bytes32 m5;
  5169 |     |         bytes32 m6;
  5170 |     |         /// @solidity memory-safe-assembly
  5171 |     |         assembly {
  5172 |     |             function writeString(pos, w) {
  5173 |     |                 let length := 0
  5174 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5175 |     |                 mstore(pos, length)
  5176 |     |                 let shift := sub(256, shl(3, length))
  5177 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5178 |     |             }
  5179 |     |             m0 := mload(0x00)
  5180 |     |             m1 := mload(0x20)
  5181 |     |             m2 := mload(0x40)
  5182 |     |             m3 := mload(0x60)
  5183 |     |             m4 := mload(0x80)
  5184 |     |             m5 := mload(0xa0)
  5185 |     |             m6 := mload(0xc0)
  5186 |     |             // Selector of `log(address,string,uint256,address)`.
  5187 |     |             mstore(0x00, 0x63183678)
  5188 |     |             mstore(0x20, p0)
  5189 |     |             mstore(0x40, 0x80)
  5190 |     |             mstore(0x60, p2)
  5191 |     |             mstore(0x80, p3)
  5192 |     |             writeString(0xa0, p1)
  5193 |     |         }
  5194 |     |         _sendLogPayload(0x1c, 0xc4);
  5195 |     |         /// @solidity memory-safe-assembly
  5196 |     |         assembly {
  5197 |     |             mstore(0x00, m0)
  5198 |     |             mstore(0x20, m1)
  5199 |     |             mstore(0x40, m2)
  5200 |     |             mstore(0x60, m3)
  5201 |     |             mstore(0x80, m4)
  5202 |     |             mstore(0xa0, m5)
  5203 |     |             mstore(0xc0, m6)
  5204 |     |         }
  5205 |     |     }
  5206 |     | 
  5207 |     |     function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {
  5208 |     |         bytes32 m0;
  5209 |     |         bytes32 m1;
  5210 |     |         bytes32 m2;
  5211 |     |         bytes32 m3;
  5212 |     |         bytes32 m4;
  5213 |     |         bytes32 m5;
  5214 |     |         bytes32 m6;
  5215 |     |         /// @solidity memory-safe-assembly
  5216 |     |         assembly {
  5217 |     |             function writeString(pos, w) {
  5218 |     |                 let length := 0
  5219 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5220 |     |                 mstore(pos, length)
  5221 |     |                 let shift := sub(256, shl(3, length))
  5222 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5223 |     |             }
  5224 |     |             m0 := mload(0x00)
  5225 |     |             m1 := mload(0x20)
  5226 |     |             m2 := mload(0x40)
  5227 |     |             m3 := mload(0x60)
  5228 |     |             m4 := mload(0x80)
  5229 |     |             m5 := mload(0xa0)
  5230 |     |             m6 := mload(0xc0)
  5231 |     |             // Selector of `log(address,string,uint256,bool)`.
  5232 |     |             mstore(0x00, 0x0ef7e050)
  5233 |     |             mstore(0x20, p0)
  5234 |     |             mstore(0x40, 0x80)
  5235 |     |             mstore(0x60, p2)
  5236 |     |             mstore(0x80, p3)
  5237 |     |             writeString(0xa0, p1)
  5238 |     |         }
  5239 |     |         _sendLogPayload(0x1c, 0xc4);
  5240 |     |         /// @solidity memory-safe-assembly
  5241 |     |         assembly {
  5242 |     |             mstore(0x00, m0)
  5243 |     |             mstore(0x20, m1)
  5244 |     |             mstore(0x40, m2)
  5245 |     |             mstore(0x60, m3)
  5246 |     |             mstore(0x80, m4)
  5247 |     |             mstore(0xa0, m5)
  5248 |     |             mstore(0xc0, m6)
  5249 |     |         }
  5250 |     |     }
  5251 |     | 
  5252 |     |     function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
  5253 |     |         bytes32 m0;
  5254 |     |         bytes32 m1;
  5255 |     |         bytes32 m2;
  5256 |     |         bytes32 m3;
  5257 |     |         bytes32 m4;
  5258 |     |         bytes32 m5;
  5259 |     |         bytes32 m6;
  5260 |     |         /// @solidity memory-safe-assembly
  5261 |     |         assembly {
  5262 |     |             function writeString(pos, w) {
  5263 |     |                 let length := 0
  5264 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5265 |     |                 mstore(pos, length)
  5266 |     |                 let shift := sub(256, shl(3, length))
  5267 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5268 |     |             }
  5269 |     |             m0 := mload(0x00)
  5270 |     |             m1 := mload(0x20)
  5271 |     |             m2 := mload(0x40)
  5272 |     |             m3 := mload(0x60)
  5273 |     |             m4 := mload(0x80)
  5274 |     |             m5 := mload(0xa0)
  5275 |     |             m6 := mload(0xc0)
  5276 |     |             // Selector of `log(address,string,uint256,uint256)`.
  5277 |     |             mstore(0x00, 0x1dc8e1b8)
  5278 |     |             mstore(0x20, p0)
  5279 |     |             mstore(0x40, 0x80)
  5280 |     |             mstore(0x60, p2)
  5281 |     |             mstore(0x80, p3)
  5282 |     |             writeString(0xa0, p1)
  5283 |     |         }
  5284 |     |         _sendLogPayload(0x1c, 0xc4);
  5285 |     |         /// @solidity memory-safe-assembly
  5286 |     |         assembly {
  5287 |     |             mstore(0x00, m0)
  5288 |     |             mstore(0x20, m1)
  5289 |     |             mstore(0x40, m2)
  5290 |     |             mstore(0x60, m3)
  5291 |     |             mstore(0x80, m4)
  5292 |     |             mstore(0xa0, m5)
  5293 |     |             mstore(0xc0, m6)
  5294 |     |         }
  5295 |     |     }
  5296 |     | 
  5297 |     |     function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
  5298 |     |         bytes32 m0;
  5299 |     |         bytes32 m1;
  5300 |     |         bytes32 m2;
  5301 |     |         bytes32 m3;
  5302 |     |         bytes32 m4;
  5303 |     |         bytes32 m5;
  5304 |     |         bytes32 m6;
  5305 |     |         bytes32 m7;
  5306 |     |         bytes32 m8;
  5307 |     |         /// @solidity memory-safe-assembly
  5308 |     |         assembly {
  5309 |     |             function writeString(pos, w) {
  5310 |     |                 let length := 0
  5311 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5312 |     |                 mstore(pos, length)
  5313 |     |                 let shift := sub(256, shl(3, length))
  5314 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5315 |     |             }
  5316 |     |             m0 := mload(0x00)
  5317 |     |             m1 := mload(0x20)
  5318 |     |             m2 := mload(0x40)
  5319 |     |             m3 := mload(0x60)
  5320 |     |             m4 := mload(0x80)
  5321 |     |             m5 := mload(0xa0)
  5322 |     |             m6 := mload(0xc0)
  5323 |     |             m7 := mload(0xe0)
  5324 |     |             m8 := mload(0x100)
  5325 |     |             // Selector of `log(address,string,uint256,string)`.
  5326 |     |             mstore(0x00, 0x448830a8)
  5327 |     |             mstore(0x20, p0)
  5328 |     |             mstore(0x40, 0x80)
  5329 |     |             mstore(0x60, p2)
  5330 |     |             mstore(0x80, 0xc0)
  5331 |     |             writeString(0xa0, p1)
  5332 |     |             writeString(0xe0, p3)
  5333 |     |         }
  5334 |     |         _sendLogPayload(0x1c, 0x104);
  5335 |     |         /// @solidity memory-safe-assembly
  5336 |     |         assembly {
  5337 |     |             mstore(0x00, m0)
  5338 |     |             mstore(0x20, m1)
  5339 |     |             mstore(0x40, m2)
  5340 |     |             mstore(0x60, m3)
  5341 |     |             mstore(0x80, m4)
  5342 |     |             mstore(0xa0, m5)
  5343 |     |             mstore(0xc0, m6)
  5344 |     |             mstore(0xe0, m7)
  5345 |     |             mstore(0x100, m8)
  5346 |     |         }
  5347 |     |     }
  5348 |     | 
  5349 |     |     function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {
  5350 |     |         bytes32 m0;
  5351 |     |         bytes32 m1;
  5352 |     |         bytes32 m2;
  5353 |     |         bytes32 m3;
  5354 |     |         bytes32 m4;
  5355 |     |         bytes32 m5;
  5356 |     |         bytes32 m6;
  5357 |     |         bytes32 m7;
  5358 |     |         bytes32 m8;
  5359 |     |         /// @solidity memory-safe-assembly
  5360 |     |         assembly {
  5361 |     |             function writeString(pos, w) {
  5362 |     |                 let length := 0
  5363 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5364 |     |                 mstore(pos, length)
  5365 |     |                 let shift := sub(256, shl(3, length))
  5366 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5367 |     |             }
  5368 |     |             m0 := mload(0x00)
  5369 |     |             m1 := mload(0x20)
  5370 |     |             m2 := mload(0x40)
  5371 |     |             m3 := mload(0x60)
  5372 |     |             m4 := mload(0x80)
  5373 |     |             m5 := mload(0xa0)
  5374 |     |             m6 := mload(0xc0)
  5375 |     |             m7 := mload(0xe0)
  5376 |     |             m8 := mload(0x100)
  5377 |     |             // Selector of `log(address,string,string,address)`.
  5378 |     |             mstore(0x00, 0xa04e2f87)
  5379 |     |             mstore(0x20, p0)
  5380 |     |             mstore(0x40, 0x80)
  5381 |     |             mstore(0x60, 0xc0)
  5382 |     |             mstore(0x80, p3)
  5383 |     |             writeString(0xa0, p1)
  5384 |     |             writeString(0xe0, p2)
  5385 |     |         }
  5386 |     |         _sendLogPayload(0x1c, 0x104);
  5387 |     |         /// @solidity memory-safe-assembly
  5388 |     |         assembly {
  5389 |     |             mstore(0x00, m0)
  5390 |     |             mstore(0x20, m1)
  5391 |     |             mstore(0x40, m2)
  5392 |     |             mstore(0x60, m3)
  5393 |     |             mstore(0x80, m4)
  5394 |     |             mstore(0xa0, m5)
  5395 |     |             mstore(0xc0, m6)
  5396 |     |             mstore(0xe0, m7)
  5397 |     |             mstore(0x100, m8)
  5398 |     |         }
  5399 |     |     }
  5400 |     | 
  5401 |     |     function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
  5402 |     |         bytes32 m0;
  5403 |     |         bytes32 m1;
  5404 |     |         bytes32 m2;
  5405 |     |         bytes32 m3;
  5406 |     |         bytes32 m4;
  5407 |     |         bytes32 m5;
  5408 |     |         bytes32 m6;
  5409 |     |         bytes32 m7;
  5410 |     |         bytes32 m8;
  5411 |     |         /// @solidity memory-safe-assembly
  5412 |     |         assembly {
  5413 |     |             function writeString(pos, w) {
  5414 |     |                 let length := 0
  5415 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5416 |     |                 mstore(pos, length)
  5417 |     |                 let shift := sub(256, shl(3, length))
  5418 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5419 |     |             }
  5420 |     |             m0 := mload(0x00)
  5421 |     |             m1 := mload(0x20)
  5422 |     |             m2 := mload(0x40)
  5423 |     |             m3 := mload(0x60)
  5424 |     |             m4 := mload(0x80)
  5425 |     |             m5 := mload(0xa0)
  5426 |     |             m6 := mload(0xc0)
  5427 |     |             m7 := mload(0xe0)
  5428 |     |             m8 := mload(0x100)
  5429 |     |             // Selector of `log(address,string,string,bool)`.
  5430 |     |             mstore(0x00, 0x35a5071f)
  5431 |     |             mstore(0x20, p0)
  5432 |     |             mstore(0x40, 0x80)
  5433 |     |             mstore(0x60, 0xc0)
  5434 |     |             mstore(0x80, p3)
  5435 |     |             writeString(0xa0, p1)
  5436 |     |             writeString(0xe0, p2)
  5437 |     |         }
  5438 |     |         _sendLogPayload(0x1c, 0x104);
  5439 |     |         /// @solidity memory-safe-assembly
  5440 |     |         assembly {
  5441 |     |             mstore(0x00, m0)
  5442 |     |             mstore(0x20, m1)
  5443 |     |             mstore(0x40, m2)
  5444 |     |             mstore(0x60, m3)
  5445 |     |             mstore(0x80, m4)
  5446 |     |             mstore(0xa0, m5)
  5447 |     |             mstore(0xc0, m6)
  5448 |     |             mstore(0xe0, m7)
  5449 |     |             mstore(0x100, m8)
  5450 |     |         }
  5451 |     |     }
  5452 |     | 
  5453 |     |     function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
  5454 |     |         bytes32 m0;
  5455 |     |         bytes32 m1;
  5456 |     |         bytes32 m2;
  5457 |     |         bytes32 m3;
  5458 |     |         bytes32 m4;
  5459 |     |         bytes32 m5;
  5460 |     |         bytes32 m6;
  5461 |     |         bytes32 m7;
  5462 |     |         bytes32 m8;
  5463 |     |         /// @solidity memory-safe-assembly
  5464 |     |         assembly {
  5465 |     |             function writeString(pos, w) {
  5466 |     |                 let length := 0
  5467 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5468 |     |                 mstore(pos, length)
  5469 |     |                 let shift := sub(256, shl(3, length))
  5470 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5471 |     |             }
  5472 |     |             m0 := mload(0x00)
  5473 |     |             m1 := mload(0x20)
  5474 |     |             m2 := mload(0x40)
  5475 |     |             m3 := mload(0x60)
  5476 |     |             m4 := mload(0x80)
  5477 |     |             m5 := mload(0xa0)
  5478 |     |             m6 := mload(0xc0)
  5479 |     |             m7 := mload(0xe0)
  5480 |     |             m8 := mload(0x100)
  5481 |     |             // Selector of `log(address,string,string,uint256)`.
  5482 |     |             mstore(0x00, 0x159f8927)
  5483 |     |             mstore(0x20, p0)
  5484 |     |             mstore(0x40, 0x80)
  5485 |     |             mstore(0x60, 0xc0)
  5486 |     |             mstore(0x80, p3)
  5487 |     |             writeString(0xa0, p1)
  5488 |     |             writeString(0xe0, p2)
  5489 |     |         }
  5490 |     |         _sendLogPayload(0x1c, 0x104);
  5491 |     |         /// @solidity memory-safe-assembly
  5492 |     |         assembly {
  5493 |     |             mstore(0x00, m0)
  5494 |     |             mstore(0x20, m1)
  5495 |     |             mstore(0x40, m2)
  5496 |     |             mstore(0x60, m3)
  5497 |     |             mstore(0x80, m4)
  5498 |     |             mstore(0xa0, m5)
  5499 |     |             mstore(0xc0, m6)
  5500 |     |             mstore(0xe0, m7)
  5501 |     |             mstore(0x100, m8)
  5502 |     |         }
  5503 |     |     }
  5504 |     | 
  5505 |     |     function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
  5506 |     |         bytes32 m0;
  5507 |     |         bytes32 m1;
  5508 |     |         bytes32 m2;
  5509 |     |         bytes32 m3;
  5510 |     |         bytes32 m4;
  5511 |     |         bytes32 m5;
  5512 |     |         bytes32 m6;
  5513 |     |         bytes32 m7;
  5514 |     |         bytes32 m8;
  5515 |     |         bytes32 m9;
  5516 |     |         bytes32 m10;
  5517 |     |         /// @solidity memory-safe-assembly
  5518 |     |         assembly {
  5519 |     |             function writeString(pos, w) {
  5520 |     |                 let length := 0
  5521 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5522 |     |                 mstore(pos, length)
  5523 |     |                 let shift := sub(256, shl(3, length))
  5524 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5525 |     |             }
  5526 |     |             m0 := mload(0x00)
  5527 |     |             m1 := mload(0x20)
  5528 |     |             m2 := mload(0x40)
  5529 |     |             m3 := mload(0x60)
  5530 |     |             m4 := mload(0x80)
  5531 |     |             m5 := mload(0xa0)
  5532 |     |             m6 := mload(0xc0)
  5533 |     |             m7 := mload(0xe0)
  5534 |     |             m8 := mload(0x100)
  5535 |     |             m9 := mload(0x120)
  5536 |     |             m10 := mload(0x140)
  5537 |     |             // Selector of `log(address,string,string,string)`.
  5538 |     |             mstore(0x00, 0x5d02c50b)
  5539 |     |             mstore(0x20, p0)
  5540 |     |             mstore(0x40, 0x80)
  5541 |     |             mstore(0x60, 0xc0)
  5542 |     |             mstore(0x80, 0x100)
  5543 |     |             writeString(0xa0, p1)
  5544 |     |             writeString(0xe0, p2)
  5545 |     |             writeString(0x120, p3)
  5546 |     |         }
  5547 |     |         _sendLogPayload(0x1c, 0x144);
  5548 |     |         /// @solidity memory-safe-assembly
  5549 |     |         assembly {
  5550 |     |             mstore(0x00, m0)
  5551 |     |             mstore(0x20, m1)
  5552 |     |             mstore(0x40, m2)
  5553 |     |             mstore(0x60, m3)
  5554 |     |             mstore(0x80, m4)
  5555 |     |             mstore(0xa0, m5)
  5556 |     |             mstore(0xc0, m6)
  5557 |     |             mstore(0xe0, m7)
  5558 |     |             mstore(0x100, m8)
  5559 |     |             mstore(0x120, m9)
  5560 |     |             mstore(0x140, m10)
  5561 |     |         }
  5562 |     |     }
  5563 |     | 
  5564 |     |     function log(bool p0, address p1, address p2, address p3) internal pure {
  5565 |     |         bytes32 m0;
  5566 |     |         bytes32 m1;
  5567 |     |         bytes32 m2;
  5568 |     |         bytes32 m3;
  5569 |     |         bytes32 m4;
  5570 |     |         /// @solidity memory-safe-assembly
  5571 |     |         assembly {
  5572 |     |             m0 := mload(0x00)
  5573 |     |             m1 := mload(0x20)
  5574 |     |             m2 := mload(0x40)
  5575 |     |             m3 := mload(0x60)
  5576 |     |             m4 := mload(0x80)
  5577 |     |             // Selector of `log(bool,address,address,address)`.
  5578 |     |             mstore(0x00, 0x1d14d001)
  5579 |     |             mstore(0x20, p0)
  5580 |     |             mstore(0x40, p1)
  5581 |     |             mstore(0x60, p2)
  5582 |     |             mstore(0x80, p3)
  5583 |     |         }
  5584 |     |         _sendLogPayload(0x1c, 0x84);
  5585 |     |         /// @solidity memory-safe-assembly
  5586 |     |         assembly {
  5587 |     |             mstore(0x00, m0)
  5588 |     |             mstore(0x20, m1)
  5589 |     |             mstore(0x40, m2)
  5590 |     |             mstore(0x60, m3)
  5591 |     |             mstore(0x80, m4)
  5592 |     |         }
  5593 |     |     }
  5594 |     | 
  5595 |     |     function log(bool p0, address p1, address p2, bool p3) internal pure {
  5596 |     |         bytes32 m0;
  5597 |     |         bytes32 m1;
  5598 |     |         bytes32 m2;
  5599 |     |         bytes32 m3;
  5600 |     |         bytes32 m4;
  5601 |     |         /// @solidity memory-safe-assembly
  5602 |     |         assembly {
  5603 |     |             m0 := mload(0x00)
  5604 |     |             m1 := mload(0x20)
  5605 |     |             m2 := mload(0x40)
  5606 |     |             m3 := mload(0x60)
  5607 |     |             m4 := mload(0x80)
  5608 |     |             // Selector of `log(bool,address,address,bool)`.
  5609 |     |             mstore(0x00, 0x46600be0)
  5610 |     |             mstore(0x20, p0)
  5611 |     |             mstore(0x40, p1)
  5612 |     |             mstore(0x60, p2)
  5613 |     |             mstore(0x80, p3)
  5614 |     |         }
  5615 |     |         _sendLogPayload(0x1c, 0x84);
  5616 |     |         /// @solidity memory-safe-assembly
  5617 |     |         assembly {
  5618 |     |             mstore(0x00, m0)
  5619 |     |             mstore(0x20, m1)
  5620 |     |             mstore(0x40, m2)
  5621 |     |             mstore(0x60, m3)
  5622 |     |             mstore(0x80, m4)
  5623 |     |         }
  5624 |     |     }
  5625 |     | 
  5626 |     |     function log(bool p0, address p1, address p2, uint256 p3) internal pure {
  5627 |     |         bytes32 m0;
  5628 |     |         bytes32 m1;
  5629 |     |         bytes32 m2;
  5630 |     |         bytes32 m3;
  5631 |     |         bytes32 m4;
  5632 |     |         /// @solidity memory-safe-assembly
  5633 |     |         assembly {
  5634 |     |             m0 := mload(0x00)
  5635 |     |             m1 := mload(0x20)
  5636 |     |             m2 := mload(0x40)
  5637 |     |             m3 := mload(0x60)
  5638 |     |             m4 := mload(0x80)
  5639 |     |             // Selector of `log(bool,address,address,uint256)`.
  5640 |     |             mstore(0x00, 0x0c66d1be)
  5641 |     |             mstore(0x20, p0)
  5642 |     |             mstore(0x40, p1)
  5643 |     |             mstore(0x60, p2)
  5644 |     |             mstore(0x80, p3)
  5645 |     |         }
  5646 |     |         _sendLogPayload(0x1c, 0x84);
  5647 |     |         /// @solidity memory-safe-assembly
  5648 |     |         assembly {
  5649 |     |             mstore(0x00, m0)
  5650 |     |             mstore(0x20, m1)
  5651 |     |             mstore(0x40, m2)
  5652 |     |             mstore(0x60, m3)
  5653 |     |             mstore(0x80, m4)
  5654 |     |         }
  5655 |     |     }
  5656 |     | 
  5657 |     |     function log(bool p0, address p1, address p2, bytes32 p3) internal pure {
  5658 |     |         bytes32 m0;
  5659 |     |         bytes32 m1;
  5660 |     |         bytes32 m2;
  5661 |     |         bytes32 m3;
  5662 |     |         bytes32 m4;
  5663 |     |         bytes32 m5;
  5664 |     |         bytes32 m6;
  5665 |     |         /// @solidity memory-safe-assembly
  5666 |     |         assembly {
  5667 |     |             function writeString(pos, w) {
  5668 |     |                 let length := 0
  5669 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5670 |     |                 mstore(pos, length)
  5671 |     |                 let shift := sub(256, shl(3, length))
  5672 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5673 |     |             }
  5674 |     |             m0 := mload(0x00)
  5675 |     |             m1 := mload(0x20)
  5676 |     |             m2 := mload(0x40)
  5677 |     |             m3 := mload(0x60)
  5678 |     |             m4 := mload(0x80)
  5679 |     |             m5 := mload(0xa0)
  5680 |     |             m6 := mload(0xc0)
  5681 |     |             // Selector of `log(bool,address,address,string)`.
  5682 |     |             mstore(0x00, 0xd812a167)
  5683 |     |             mstore(0x20, p0)
  5684 |     |             mstore(0x40, p1)
  5685 |     |             mstore(0x60, p2)
  5686 |     |             mstore(0x80, 0x80)
  5687 |     |             writeString(0xa0, p3)
  5688 |     |         }
  5689 |     |         _sendLogPayload(0x1c, 0xc4);
  5690 |     |         /// @solidity memory-safe-assembly
  5691 |     |         assembly {
  5692 |     |             mstore(0x00, m0)
  5693 |     |             mstore(0x20, m1)
  5694 |     |             mstore(0x40, m2)
  5695 |     |             mstore(0x60, m3)
  5696 |     |             mstore(0x80, m4)
  5697 |     |             mstore(0xa0, m5)
  5698 |     |             mstore(0xc0, m6)
  5699 |     |         }
  5700 |     |     }
  5701 |     | 
  5702 |     |     function log(bool p0, address p1, bool p2, address p3) internal pure {
  5703 |     |         bytes32 m0;
  5704 |     |         bytes32 m1;
  5705 |     |         bytes32 m2;
  5706 |     |         bytes32 m3;
  5707 |     |         bytes32 m4;
  5708 |     |         /// @solidity memory-safe-assembly
  5709 |     |         assembly {
  5710 |     |             m0 := mload(0x00)
  5711 |     |             m1 := mload(0x20)
  5712 |     |             m2 := mload(0x40)
  5713 |     |             m3 := mload(0x60)
  5714 |     |             m4 := mload(0x80)
  5715 |     |             // Selector of `log(bool,address,bool,address)`.
  5716 |     |             mstore(0x00, 0x1c41a336)
  5717 |     |             mstore(0x20, p0)
  5718 |     |             mstore(0x40, p1)
  5719 |     |             mstore(0x60, p2)
  5720 |     |             mstore(0x80, p3)
  5721 |     |         }
  5722 |     |         _sendLogPayload(0x1c, 0x84);
  5723 |     |         /// @solidity memory-safe-assembly
  5724 |     |         assembly {
  5725 |     |             mstore(0x00, m0)
  5726 |     |             mstore(0x20, m1)
  5727 |     |             mstore(0x40, m2)
  5728 |     |             mstore(0x60, m3)
  5729 |     |             mstore(0x80, m4)
  5730 |     |         }
  5731 |     |     }
  5732 |     | 
  5733 |     |     function log(bool p0, address p1, bool p2, bool p3) internal pure {
  5734 |     |         bytes32 m0;
  5735 |     |         bytes32 m1;
  5736 |     |         bytes32 m2;
  5737 |     |         bytes32 m3;
  5738 |     |         bytes32 m4;
  5739 |     |         /// @solidity memory-safe-assembly
  5740 |     |         assembly {
  5741 |     |             m0 := mload(0x00)
  5742 |     |             m1 := mload(0x20)
  5743 |     |             m2 := mload(0x40)
  5744 |     |             m3 := mload(0x60)
  5745 |     |             m4 := mload(0x80)
  5746 |     |             // Selector of `log(bool,address,bool,bool)`.
  5747 |     |             mstore(0x00, 0x6a9c478b)
  5748 |     |             mstore(0x20, p0)
  5749 |     |             mstore(0x40, p1)
  5750 |     |             mstore(0x60, p2)
  5751 |     |             mstore(0x80, p3)
  5752 |     |         }
  5753 |     |         _sendLogPayload(0x1c, 0x84);
  5754 |     |         /// @solidity memory-safe-assembly
  5755 |     |         assembly {
  5756 |     |             mstore(0x00, m0)
  5757 |     |             mstore(0x20, m1)
  5758 |     |             mstore(0x40, m2)
  5759 |     |             mstore(0x60, m3)
  5760 |     |             mstore(0x80, m4)
  5761 |     |         }
  5762 |     |     }
  5763 |     | 
  5764 |     |     function log(bool p0, address p1, bool p2, uint256 p3) internal pure {
  5765 |     |         bytes32 m0;
  5766 |     |         bytes32 m1;
  5767 |     |         bytes32 m2;
  5768 |     |         bytes32 m3;
  5769 |     |         bytes32 m4;
  5770 |     |         /// @solidity memory-safe-assembly
  5771 |     |         assembly {
  5772 |     |             m0 := mload(0x00)
  5773 |     |             m1 := mload(0x20)
  5774 |     |             m2 := mload(0x40)
  5775 |     |             m3 := mload(0x60)
  5776 |     |             m4 := mload(0x80)
  5777 |     |             // Selector of `log(bool,address,bool,uint256)`.
  5778 |     |             mstore(0x00, 0x07831502)
  5779 |     |             mstore(0x20, p0)
  5780 |     |             mstore(0x40, p1)
  5781 |     |             mstore(0x60, p2)
  5782 |     |             mstore(0x80, p3)
  5783 |     |         }
  5784 |     |         _sendLogPayload(0x1c, 0x84);
  5785 |     |         /// @solidity memory-safe-assembly
  5786 |     |         assembly {
  5787 |     |             mstore(0x00, m0)
  5788 |     |             mstore(0x20, m1)
  5789 |     |             mstore(0x40, m2)
  5790 |     |             mstore(0x60, m3)
  5791 |     |             mstore(0x80, m4)
  5792 |     |         }
  5793 |     |     }
  5794 |     | 
  5795 |     |     function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {
  5796 |     |         bytes32 m0;
  5797 |     |         bytes32 m1;
  5798 |     |         bytes32 m2;
  5799 |     |         bytes32 m3;
  5800 |     |         bytes32 m4;
  5801 |     |         bytes32 m5;
  5802 |     |         bytes32 m6;
  5803 |     |         /// @solidity memory-safe-assembly
  5804 |     |         assembly {
  5805 |     |             function writeString(pos, w) {
  5806 |     |                 let length := 0
  5807 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5808 |     |                 mstore(pos, length)
  5809 |     |                 let shift := sub(256, shl(3, length))
  5810 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5811 |     |             }
  5812 |     |             m0 := mload(0x00)
  5813 |     |             m1 := mload(0x20)
  5814 |     |             m2 := mload(0x40)
  5815 |     |             m3 := mload(0x60)
  5816 |     |             m4 := mload(0x80)
  5817 |     |             m5 := mload(0xa0)
  5818 |     |             m6 := mload(0xc0)
  5819 |     |             // Selector of `log(bool,address,bool,string)`.
  5820 |     |             mstore(0x00, 0x4a66cb34)
  5821 |     |             mstore(0x20, p0)
  5822 |     |             mstore(0x40, p1)
  5823 |     |             mstore(0x60, p2)
  5824 |     |             mstore(0x80, 0x80)
  5825 |     |             writeString(0xa0, p3)
  5826 |     |         }
  5827 |     |         _sendLogPayload(0x1c, 0xc4);
  5828 |     |         /// @solidity memory-safe-assembly
  5829 |     |         assembly {
  5830 |     |             mstore(0x00, m0)
  5831 |     |             mstore(0x20, m1)
  5832 |     |             mstore(0x40, m2)
  5833 |     |             mstore(0x60, m3)
  5834 |     |             mstore(0x80, m4)
  5835 |     |             mstore(0xa0, m5)
  5836 |     |             mstore(0xc0, m6)
  5837 |     |         }
  5838 |     |     }
  5839 |     | 
  5840 |     |     function log(bool p0, address p1, uint256 p2, address p3) internal pure {
  5841 |     |         bytes32 m0;
  5842 |     |         bytes32 m1;
  5843 |     |         bytes32 m2;
  5844 |     |         bytes32 m3;
  5845 |     |         bytes32 m4;
  5846 |     |         /// @solidity memory-safe-assembly
  5847 |     |         assembly {
  5848 |     |             m0 := mload(0x00)
  5849 |     |             m1 := mload(0x20)
  5850 |     |             m2 := mload(0x40)
  5851 |     |             m3 := mload(0x60)
  5852 |     |             m4 := mload(0x80)
  5853 |     |             // Selector of `log(bool,address,uint256,address)`.
  5854 |     |             mstore(0x00, 0x136b05dd)
  5855 |     |             mstore(0x20, p0)
  5856 |     |             mstore(0x40, p1)
  5857 |     |             mstore(0x60, p2)
  5858 |     |             mstore(0x80, p3)
  5859 |     |         }
  5860 |     |         _sendLogPayload(0x1c, 0x84);
  5861 |     |         /// @solidity memory-safe-assembly
  5862 |     |         assembly {
  5863 |     |             mstore(0x00, m0)
  5864 |     |             mstore(0x20, m1)
  5865 |     |             mstore(0x40, m2)
  5866 |     |             mstore(0x60, m3)
  5867 |     |             mstore(0x80, m4)
  5868 |     |         }
  5869 |     |     }
  5870 |     | 
  5871 |     |     function log(bool p0, address p1, uint256 p2, bool p3) internal pure {
  5872 |     |         bytes32 m0;
  5873 |     |         bytes32 m1;
  5874 |     |         bytes32 m2;
  5875 |     |         bytes32 m3;
  5876 |     |         bytes32 m4;
  5877 |     |         /// @solidity memory-safe-assembly
  5878 |     |         assembly {
  5879 |     |             m0 := mload(0x00)
  5880 |     |             m1 := mload(0x20)
  5881 |     |             m2 := mload(0x40)
  5882 |     |             m3 := mload(0x60)
  5883 |     |             m4 := mload(0x80)
  5884 |     |             // Selector of `log(bool,address,uint256,bool)`.
  5885 |     |             mstore(0x00, 0xd6019f1c)
  5886 |     |             mstore(0x20, p0)
  5887 |     |             mstore(0x40, p1)
  5888 |     |             mstore(0x60, p2)
  5889 |     |             mstore(0x80, p3)
  5890 |     |         }
  5891 |     |         _sendLogPayload(0x1c, 0x84);
  5892 |     |         /// @solidity memory-safe-assembly
  5893 |     |         assembly {
  5894 |     |             mstore(0x00, m0)
  5895 |     |             mstore(0x20, m1)
  5896 |     |             mstore(0x40, m2)
  5897 |     |             mstore(0x60, m3)
  5898 |     |             mstore(0x80, m4)
  5899 |     |         }
  5900 |     |     }
  5901 |     | 
  5902 |     |     function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {
  5903 |     |         bytes32 m0;
  5904 |     |         bytes32 m1;
  5905 |     |         bytes32 m2;
  5906 |     |         bytes32 m3;
  5907 |     |         bytes32 m4;
  5908 |     |         /// @solidity memory-safe-assembly
  5909 |     |         assembly {
  5910 |     |             m0 := mload(0x00)
  5911 |     |             m1 := mload(0x20)
  5912 |     |             m2 := mload(0x40)
  5913 |     |             m3 := mload(0x60)
  5914 |     |             m4 := mload(0x80)
  5915 |     |             // Selector of `log(bool,address,uint256,uint256)`.
  5916 |     |             mstore(0x00, 0x7bf181a1)
  5917 |     |             mstore(0x20, p0)
  5918 |     |             mstore(0x40, p1)
  5919 |     |             mstore(0x60, p2)
  5920 |     |             mstore(0x80, p3)
  5921 |     |         }
  5922 |     |         _sendLogPayload(0x1c, 0x84);
  5923 |     |         /// @solidity memory-safe-assembly
  5924 |     |         assembly {
  5925 |     |             mstore(0x00, m0)
  5926 |     |             mstore(0x20, m1)
  5927 |     |             mstore(0x40, m2)
  5928 |     |             mstore(0x60, m3)
  5929 |     |             mstore(0x80, m4)
  5930 |     |         }
  5931 |     |     }
  5932 |     | 
  5933 |     |     function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {
  5934 |     |         bytes32 m0;
  5935 |     |         bytes32 m1;
  5936 |     |         bytes32 m2;
  5937 |     |         bytes32 m3;
  5938 |     |         bytes32 m4;
  5939 |     |         bytes32 m5;
  5940 |     |         bytes32 m6;
  5941 |     |         /// @solidity memory-safe-assembly
  5942 |     |         assembly {
  5943 |     |             function writeString(pos, w) {
  5944 |     |                 let length := 0
  5945 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5946 |     |                 mstore(pos, length)
  5947 |     |                 let shift := sub(256, shl(3, length))
  5948 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5949 |     |             }
  5950 |     |             m0 := mload(0x00)
  5951 |     |             m1 := mload(0x20)
  5952 |     |             m2 := mload(0x40)
  5953 |     |             m3 := mload(0x60)
  5954 |     |             m4 := mload(0x80)
  5955 |     |             m5 := mload(0xa0)
  5956 |     |             m6 := mload(0xc0)
  5957 |     |             // Selector of `log(bool,address,uint256,string)`.
  5958 |     |             mstore(0x00, 0x51f09ff8)
  5959 |     |             mstore(0x20, p0)
  5960 |     |             mstore(0x40, p1)
  5961 |     |             mstore(0x60, p2)
  5962 |     |             mstore(0x80, 0x80)
  5963 |     |             writeString(0xa0, p3)
  5964 |     |         }
  5965 |     |         _sendLogPayload(0x1c, 0xc4);
  5966 |     |         /// @solidity memory-safe-assembly
  5967 |     |         assembly {
  5968 |     |             mstore(0x00, m0)
  5969 |     |             mstore(0x20, m1)
  5970 |     |             mstore(0x40, m2)
  5971 |     |             mstore(0x60, m3)
  5972 |     |             mstore(0x80, m4)
  5973 |     |             mstore(0xa0, m5)
  5974 |     |             mstore(0xc0, m6)
  5975 |     |         }
  5976 |     |     }
  5977 |     | 
  5978 |     |     function log(bool p0, address p1, bytes32 p2, address p3) internal pure {
  5979 |     |         bytes32 m0;
  5980 |     |         bytes32 m1;
  5981 |     |         bytes32 m2;
  5982 |     |         bytes32 m3;
  5983 |     |         bytes32 m4;
  5984 |     |         bytes32 m5;
  5985 |     |         bytes32 m6;
  5986 |     |         /// @solidity memory-safe-assembly
  5987 |     |         assembly {
  5988 |     |             function writeString(pos, w) {
  5989 |     |                 let length := 0
  5990 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  5991 |     |                 mstore(pos, length)
  5992 |     |                 let shift := sub(256, shl(3, length))
  5993 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  5994 |     |             }
  5995 |     |             m0 := mload(0x00)
  5996 |     |             m1 := mload(0x20)
  5997 |     |             m2 := mload(0x40)
  5998 |     |             m3 := mload(0x60)
  5999 |     |             m4 := mload(0x80)
  6000 |     |             m5 := mload(0xa0)
  6001 |     |             m6 := mload(0xc0)
  6002 |     |             // Selector of `log(bool,address,string,address)`.
  6003 |     |             mstore(0x00, 0x6f7c603e)
  6004 |     |             mstore(0x20, p0)
  6005 |     |             mstore(0x40, p1)
  6006 |     |             mstore(0x60, 0x80)
  6007 |     |             mstore(0x80, p3)
  6008 |     |             writeString(0xa0, p2)
  6009 |     |         }
  6010 |     |         _sendLogPayload(0x1c, 0xc4);
  6011 |     |         /// @solidity memory-safe-assembly
  6012 |     |         assembly {
  6013 |     |             mstore(0x00, m0)
  6014 |     |             mstore(0x20, m1)
  6015 |     |             mstore(0x40, m2)
  6016 |     |             mstore(0x60, m3)
  6017 |     |             mstore(0x80, m4)
  6018 |     |             mstore(0xa0, m5)
  6019 |     |             mstore(0xc0, m6)
  6020 |     |         }
  6021 |     |     }
  6022 |     | 
  6023 |     |     function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {
  6024 |     |         bytes32 m0;
  6025 |     |         bytes32 m1;
  6026 |     |         bytes32 m2;
  6027 |     |         bytes32 m3;
  6028 |     |         bytes32 m4;
  6029 |     |         bytes32 m5;
  6030 |     |         bytes32 m6;
  6031 |     |         /// @solidity memory-safe-assembly
  6032 |     |         assembly {
  6033 |     |             function writeString(pos, w) {
  6034 |     |                 let length := 0
  6035 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6036 |     |                 mstore(pos, length)
  6037 |     |                 let shift := sub(256, shl(3, length))
  6038 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6039 |     |             }
  6040 |     |             m0 := mload(0x00)
  6041 |     |             m1 := mload(0x20)
  6042 |     |             m2 := mload(0x40)
  6043 |     |             m3 := mload(0x60)
  6044 |     |             m4 := mload(0x80)
  6045 |     |             m5 := mload(0xa0)
  6046 |     |             m6 := mload(0xc0)
  6047 |     |             // Selector of `log(bool,address,string,bool)`.
  6048 |     |             mstore(0x00, 0xe2bfd60b)
  6049 |     |             mstore(0x20, p0)
  6050 |     |             mstore(0x40, p1)
  6051 |     |             mstore(0x60, 0x80)
  6052 |     |             mstore(0x80, p3)
  6053 |     |             writeString(0xa0, p2)
  6054 |     |         }
  6055 |     |         _sendLogPayload(0x1c, 0xc4);
  6056 |     |         /// @solidity memory-safe-assembly
  6057 |     |         assembly {
  6058 |     |             mstore(0x00, m0)
  6059 |     |             mstore(0x20, m1)
  6060 |     |             mstore(0x40, m2)
  6061 |     |             mstore(0x60, m3)
  6062 |     |             mstore(0x80, m4)
  6063 |     |             mstore(0xa0, m5)
  6064 |     |             mstore(0xc0, m6)
  6065 |     |         }
  6066 |     |     }
  6067 |     | 
  6068 |     |     function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {
  6069 |     |         bytes32 m0;
  6070 |     |         bytes32 m1;
  6071 |     |         bytes32 m2;
  6072 |     |         bytes32 m3;
  6073 |     |         bytes32 m4;
  6074 |     |         bytes32 m5;
  6075 |     |         bytes32 m6;
  6076 |     |         /// @solidity memory-safe-assembly
  6077 |     |         assembly {
  6078 |     |             function writeString(pos, w) {
  6079 |     |                 let length := 0
  6080 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6081 |     |                 mstore(pos, length)
  6082 |     |                 let shift := sub(256, shl(3, length))
  6083 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6084 |     |             }
  6085 |     |             m0 := mload(0x00)
  6086 |     |             m1 := mload(0x20)
  6087 |     |             m2 := mload(0x40)
  6088 |     |             m3 := mload(0x60)
  6089 |     |             m4 := mload(0x80)
  6090 |     |             m5 := mload(0xa0)
  6091 |     |             m6 := mload(0xc0)
  6092 |     |             // Selector of `log(bool,address,string,uint256)`.
  6093 |     |             mstore(0x00, 0xc21f64c7)
  6094 |     |             mstore(0x20, p0)
  6095 |     |             mstore(0x40, p1)
  6096 |     |             mstore(0x60, 0x80)
  6097 |     |             mstore(0x80, p3)
  6098 |     |             writeString(0xa0, p2)
  6099 |     |         }
  6100 |     |         _sendLogPayload(0x1c, 0xc4);
  6101 |     |         /// @solidity memory-safe-assembly
  6102 |     |         assembly {
  6103 |     |             mstore(0x00, m0)
  6104 |     |             mstore(0x20, m1)
  6105 |     |             mstore(0x40, m2)
  6106 |     |             mstore(0x60, m3)
  6107 |     |             mstore(0x80, m4)
  6108 |     |             mstore(0xa0, m5)
  6109 |     |             mstore(0xc0, m6)
  6110 |     |         }
  6111 |     |     }
  6112 |     | 
  6113 |     |     function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {
  6114 |     |         bytes32 m0;
  6115 |     |         bytes32 m1;
  6116 |     |         bytes32 m2;
  6117 |     |         bytes32 m3;
  6118 |     |         bytes32 m4;
  6119 |     |         bytes32 m5;
  6120 |     |         bytes32 m6;
  6121 |     |         bytes32 m7;
  6122 |     |         bytes32 m8;
  6123 |     |         /// @solidity memory-safe-assembly
  6124 |     |         assembly {
  6125 |     |             function writeString(pos, w) {
  6126 |     |                 let length := 0
  6127 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6128 |     |                 mstore(pos, length)
  6129 |     |                 let shift := sub(256, shl(3, length))
  6130 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6131 |     |             }
  6132 |     |             m0 := mload(0x00)
  6133 |     |             m1 := mload(0x20)
  6134 |     |             m2 := mload(0x40)
  6135 |     |             m3 := mload(0x60)
  6136 |     |             m4 := mload(0x80)
  6137 |     |             m5 := mload(0xa0)
  6138 |     |             m6 := mload(0xc0)
  6139 |     |             m7 := mload(0xe0)
  6140 |     |             m8 := mload(0x100)
  6141 |     |             // Selector of `log(bool,address,string,string)`.
  6142 |     |             mstore(0x00, 0xa73c1db6)
  6143 |     |             mstore(0x20, p0)
  6144 |     |             mstore(0x40, p1)
  6145 |     |             mstore(0x60, 0x80)
  6146 |     |             mstore(0x80, 0xc0)
  6147 |     |             writeString(0xa0, p2)
  6148 |     |             writeString(0xe0, p3)
  6149 |     |         }
  6150 |     |         _sendLogPayload(0x1c, 0x104);
  6151 |     |         /// @solidity memory-safe-assembly
  6152 |     |         assembly {
  6153 |     |             mstore(0x00, m0)
  6154 |     |             mstore(0x20, m1)
  6155 |     |             mstore(0x40, m2)
  6156 |     |             mstore(0x60, m3)
  6157 |     |             mstore(0x80, m4)
  6158 |     |             mstore(0xa0, m5)
  6159 |     |             mstore(0xc0, m6)
  6160 |     |             mstore(0xe0, m7)
  6161 |     |             mstore(0x100, m8)
  6162 |     |         }
  6163 |     |     }
  6164 |     | 
  6165 |     |     function log(bool p0, bool p1, address p2, address p3) internal pure {
  6166 |     |         bytes32 m0;
  6167 |     |         bytes32 m1;
  6168 |     |         bytes32 m2;
  6169 |     |         bytes32 m3;
  6170 |     |         bytes32 m4;
  6171 |     |         /// @solidity memory-safe-assembly
  6172 |     |         assembly {
  6173 |     |             m0 := mload(0x00)
  6174 |     |             m1 := mload(0x20)
  6175 |     |             m2 := mload(0x40)
  6176 |     |             m3 := mload(0x60)
  6177 |     |             m4 := mload(0x80)
  6178 |     |             // Selector of `log(bool,bool,address,address)`.
  6179 |     |             mstore(0x00, 0xf4880ea4)
  6180 |     |             mstore(0x20, p0)
  6181 |     |             mstore(0x40, p1)
  6182 |     |             mstore(0x60, p2)
  6183 |     |             mstore(0x80, p3)
  6184 |     |         }
  6185 |     |         _sendLogPayload(0x1c, 0x84);
  6186 |     |         /// @solidity memory-safe-assembly
  6187 |     |         assembly {
  6188 |     |             mstore(0x00, m0)
  6189 |     |             mstore(0x20, m1)
  6190 |     |             mstore(0x40, m2)
  6191 |     |             mstore(0x60, m3)
  6192 |     |             mstore(0x80, m4)
  6193 |     |         }
  6194 |     |     }
  6195 |     | 
  6196 |     |     function log(bool p0, bool p1, address p2, bool p3) internal pure {
  6197 |     |         bytes32 m0;
  6198 |     |         bytes32 m1;
  6199 |     |         bytes32 m2;
  6200 |     |         bytes32 m3;
  6201 |     |         bytes32 m4;
  6202 |     |         /// @solidity memory-safe-assembly
  6203 |     |         assembly {
  6204 |     |             m0 := mload(0x00)
  6205 |     |             m1 := mload(0x20)
  6206 |     |             m2 := mload(0x40)
  6207 |     |             m3 := mload(0x60)
  6208 |     |             m4 := mload(0x80)
  6209 |     |             // Selector of `log(bool,bool,address,bool)`.
  6210 |     |             mstore(0x00, 0xc0a302d8)
  6211 |     |             mstore(0x20, p0)
  6212 |     |             mstore(0x40, p1)
  6213 |     |             mstore(0x60, p2)
  6214 |     |             mstore(0x80, p3)
  6215 |     |         }
  6216 |     |         _sendLogPayload(0x1c, 0x84);
  6217 |     |         /// @solidity memory-safe-assembly
  6218 |     |         assembly {
  6219 |     |             mstore(0x00, m0)
  6220 |     |             mstore(0x20, m1)
  6221 |     |             mstore(0x40, m2)
  6222 |     |             mstore(0x60, m3)
  6223 |     |             mstore(0x80, m4)
  6224 |     |         }
  6225 |     |     }
  6226 |     | 
  6227 |     |     function log(bool p0, bool p1, address p2, uint256 p3) internal pure {
  6228 |     |         bytes32 m0;
  6229 |     |         bytes32 m1;
  6230 |     |         bytes32 m2;
  6231 |     |         bytes32 m3;
  6232 |     |         bytes32 m4;
  6233 |     |         /// @solidity memory-safe-assembly
  6234 |     |         assembly {
  6235 |     |             m0 := mload(0x00)
  6236 |     |             m1 := mload(0x20)
  6237 |     |             m2 := mload(0x40)
  6238 |     |             m3 := mload(0x60)
  6239 |     |             m4 := mload(0x80)
  6240 |     |             // Selector of `log(bool,bool,address,uint256)`.
  6241 |     |             mstore(0x00, 0x4c123d57)
  6242 |     |             mstore(0x20, p0)
  6243 |     |             mstore(0x40, p1)
  6244 |     |             mstore(0x60, p2)
  6245 |     |             mstore(0x80, p3)
  6246 |     |         }
  6247 |     |         _sendLogPayload(0x1c, 0x84);
  6248 |     |         /// @solidity memory-safe-assembly
  6249 |     |         assembly {
  6250 |     |             mstore(0x00, m0)
  6251 |     |             mstore(0x20, m1)
  6252 |     |             mstore(0x40, m2)
  6253 |     |             mstore(0x60, m3)
  6254 |     |             mstore(0x80, m4)
  6255 |     |         }
  6256 |     |     }
  6257 |     | 
  6258 |     |     function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {
  6259 |     |         bytes32 m0;
  6260 |     |         bytes32 m1;
  6261 |     |         bytes32 m2;
  6262 |     |         bytes32 m3;
  6263 |     |         bytes32 m4;
  6264 |     |         bytes32 m5;
  6265 |     |         bytes32 m6;
  6266 |     |         /// @solidity memory-safe-assembly
  6267 |     |         assembly {
  6268 |     |             function writeString(pos, w) {
  6269 |     |                 let length := 0
  6270 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6271 |     |                 mstore(pos, length)
  6272 |     |                 let shift := sub(256, shl(3, length))
  6273 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6274 |     |             }
  6275 |     |             m0 := mload(0x00)
  6276 |     |             m1 := mload(0x20)
  6277 |     |             m2 := mload(0x40)
  6278 |     |             m3 := mload(0x60)
  6279 |     |             m4 := mload(0x80)
  6280 |     |             m5 := mload(0xa0)
  6281 |     |             m6 := mload(0xc0)
  6282 |     |             // Selector of `log(bool,bool,address,string)`.
  6283 |     |             mstore(0x00, 0xa0a47963)
  6284 |     |             mstore(0x20, p0)
  6285 |     |             mstore(0x40, p1)
  6286 |     |             mstore(0x60, p2)
  6287 |     |             mstore(0x80, 0x80)
  6288 |     |             writeString(0xa0, p3)
  6289 |     |         }
  6290 |     |         _sendLogPayload(0x1c, 0xc4);
  6291 |     |         /// @solidity memory-safe-assembly
  6292 |     |         assembly {
  6293 |     |             mstore(0x00, m0)
  6294 |     |             mstore(0x20, m1)
  6295 |     |             mstore(0x40, m2)
  6296 |     |             mstore(0x60, m3)
  6297 |     |             mstore(0x80, m4)
  6298 |     |             mstore(0xa0, m5)
  6299 |     |             mstore(0xc0, m6)
  6300 |     |         }
  6301 |     |     }
  6302 |     | 
  6303 |     |     function log(bool p0, bool p1, bool p2, address p3) internal pure {
  6304 |     |         bytes32 m0;
  6305 |     |         bytes32 m1;
  6306 |     |         bytes32 m2;
  6307 |     |         bytes32 m3;
  6308 |     |         bytes32 m4;
  6309 |     |         /// @solidity memory-safe-assembly
  6310 |     |         assembly {
  6311 |     |             m0 := mload(0x00)
  6312 |     |             m1 := mload(0x20)
  6313 |     |             m2 := mload(0x40)
  6314 |     |             m3 := mload(0x60)
  6315 |     |             m4 := mload(0x80)
  6316 |     |             // Selector of `log(bool,bool,bool,address)`.
  6317 |     |             mstore(0x00, 0x8c329b1a)
  6318 |     |             mstore(0x20, p0)
  6319 |     |             mstore(0x40, p1)
  6320 |     |             mstore(0x60, p2)
  6321 |     |             mstore(0x80, p3)
  6322 |     |         }
  6323 |     |         _sendLogPayload(0x1c, 0x84);
  6324 |     |         /// @solidity memory-safe-assembly
  6325 |     |         assembly {
  6326 |     |             mstore(0x00, m0)
  6327 |     |             mstore(0x20, m1)
  6328 |     |             mstore(0x40, m2)
  6329 |     |             mstore(0x60, m3)
  6330 |     |             mstore(0x80, m4)
  6331 |     |         }
  6332 |     |     }
  6333 |     | 
  6334 |     |     function log(bool p0, bool p1, bool p2, bool p3) internal pure {
  6335 |     |         bytes32 m0;
  6336 |     |         bytes32 m1;
  6337 |     |         bytes32 m2;
  6338 |     |         bytes32 m3;
  6339 |     |         bytes32 m4;
  6340 |     |         /// @solidity memory-safe-assembly
  6341 |     |         assembly {
  6342 |     |             m0 := mload(0x00)
  6343 |     |             m1 := mload(0x20)
  6344 |     |             m2 := mload(0x40)
  6345 |     |             m3 := mload(0x60)
  6346 |     |             m4 := mload(0x80)
  6347 |     |             // Selector of `log(bool,bool,bool,bool)`.
  6348 |     |             mstore(0x00, 0x3b2a5ce0)
  6349 |     |             mstore(0x20, p0)
  6350 |     |             mstore(0x40, p1)
  6351 |     |             mstore(0x60, p2)
  6352 |     |             mstore(0x80, p3)
  6353 |     |         }
  6354 |     |         _sendLogPayload(0x1c, 0x84);
  6355 |     |         /// @solidity memory-safe-assembly
  6356 |     |         assembly {
  6357 |     |             mstore(0x00, m0)
  6358 |     |             mstore(0x20, m1)
  6359 |     |             mstore(0x40, m2)
  6360 |     |             mstore(0x60, m3)
  6361 |     |             mstore(0x80, m4)
  6362 |     |         }
  6363 |     |     }
  6364 |     | 
  6365 |     |     function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {
  6366 |     |         bytes32 m0;
  6367 |     |         bytes32 m1;
  6368 |     |         bytes32 m2;
  6369 |     |         bytes32 m3;
  6370 |     |         bytes32 m4;
  6371 |     |         /// @solidity memory-safe-assembly
  6372 |     |         assembly {
  6373 |     |             m0 := mload(0x00)
  6374 |     |             m1 := mload(0x20)
  6375 |     |             m2 := mload(0x40)
  6376 |     |             m3 := mload(0x60)
  6377 |     |             m4 := mload(0x80)
  6378 |     |             // Selector of `log(bool,bool,bool,uint256)`.
  6379 |     |             mstore(0x00, 0x6d7045c1)
  6380 |     |             mstore(0x20, p0)
  6381 |     |             mstore(0x40, p1)
  6382 |     |             mstore(0x60, p2)
  6383 |     |             mstore(0x80, p3)
  6384 |     |         }
  6385 |     |         _sendLogPayload(0x1c, 0x84);
  6386 |     |         /// @solidity memory-safe-assembly
  6387 |     |         assembly {
  6388 |     |             mstore(0x00, m0)
  6389 |     |             mstore(0x20, m1)
  6390 |     |             mstore(0x40, m2)
  6391 |     |             mstore(0x60, m3)
  6392 |     |             mstore(0x80, m4)
  6393 |     |         }
  6394 |     |     }
  6395 |     | 
  6396 |     |     function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {
  6397 |     |         bytes32 m0;
  6398 |     |         bytes32 m1;
  6399 |     |         bytes32 m2;
  6400 |     |         bytes32 m3;
  6401 |     |         bytes32 m4;
  6402 |     |         bytes32 m5;
  6403 |     |         bytes32 m6;
  6404 |     |         /// @solidity memory-safe-assembly
  6405 |     |         assembly {
  6406 |     |             function writeString(pos, w) {
  6407 |     |                 let length := 0
  6408 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6409 |     |                 mstore(pos, length)
  6410 |     |                 let shift := sub(256, shl(3, length))
  6411 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6412 |     |             }
  6413 |     |             m0 := mload(0x00)
  6414 |     |             m1 := mload(0x20)
  6415 |     |             m2 := mload(0x40)
  6416 |     |             m3 := mload(0x60)
  6417 |     |             m4 := mload(0x80)
  6418 |     |             m5 := mload(0xa0)
  6419 |     |             m6 := mload(0xc0)
  6420 |     |             // Selector of `log(bool,bool,bool,string)`.
  6421 |     |             mstore(0x00, 0x2ae408d4)
  6422 |     |             mstore(0x20, p0)
  6423 |     |             mstore(0x40, p1)
  6424 |     |             mstore(0x60, p2)
  6425 |     |             mstore(0x80, 0x80)
  6426 |     |             writeString(0xa0, p3)
  6427 |     |         }
  6428 |     |         _sendLogPayload(0x1c, 0xc4);
  6429 |     |         /// @solidity memory-safe-assembly
  6430 |     |         assembly {
  6431 |     |             mstore(0x00, m0)
  6432 |     |             mstore(0x20, m1)
  6433 |     |             mstore(0x40, m2)
  6434 |     |             mstore(0x60, m3)
  6435 |     |             mstore(0x80, m4)
  6436 |     |             mstore(0xa0, m5)
  6437 |     |             mstore(0xc0, m6)
  6438 |     |         }
  6439 |     |     }
  6440 |     | 
  6441 |     |     function log(bool p0, bool p1, uint256 p2, address p3) internal pure {
  6442 |     |         bytes32 m0;
  6443 |     |         bytes32 m1;
  6444 |     |         bytes32 m2;
  6445 |     |         bytes32 m3;
  6446 |     |         bytes32 m4;
  6447 |     |         /// @solidity memory-safe-assembly
  6448 |     |         assembly {
  6449 |     |             m0 := mload(0x00)
  6450 |     |             m1 := mload(0x20)
  6451 |     |             m2 := mload(0x40)
  6452 |     |             m3 := mload(0x60)
  6453 |     |             m4 := mload(0x80)
  6454 |     |             // Selector of `log(bool,bool,uint256,address)`.
  6455 |     |             mstore(0x00, 0x54a7a9a0)
  6456 |     |             mstore(0x20, p0)
  6457 |     |             mstore(0x40, p1)
  6458 |     |             mstore(0x60, p2)
  6459 |     |             mstore(0x80, p3)
  6460 |     |         }
  6461 |     |         _sendLogPayload(0x1c, 0x84);
  6462 |     |         /// @solidity memory-safe-assembly
  6463 |     |         assembly {
  6464 |     |             mstore(0x00, m0)
  6465 |     |             mstore(0x20, m1)
  6466 |     |             mstore(0x40, m2)
  6467 |     |             mstore(0x60, m3)
  6468 |     |             mstore(0x80, m4)
  6469 |     |         }
  6470 |     |     }
  6471 |     | 
  6472 |     |     function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {
  6473 |     |         bytes32 m0;
  6474 |     |         bytes32 m1;
  6475 |     |         bytes32 m2;
  6476 |     |         bytes32 m3;
  6477 |     |         bytes32 m4;
  6478 |     |         /// @solidity memory-safe-assembly
  6479 |     |         assembly {
  6480 |     |             m0 := mload(0x00)
  6481 |     |             m1 := mload(0x20)
  6482 |     |             m2 := mload(0x40)
  6483 |     |             m3 := mload(0x60)
  6484 |     |             m4 := mload(0x80)
  6485 |     |             // Selector of `log(bool,bool,uint256,bool)`.
  6486 |     |             mstore(0x00, 0x619e4d0e)
  6487 |     |             mstore(0x20, p0)
  6488 |     |             mstore(0x40, p1)
  6489 |     |             mstore(0x60, p2)
  6490 |     |             mstore(0x80, p3)
  6491 |     |         }
  6492 |     |         _sendLogPayload(0x1c, 0x84);
  6493 |     |         /// @solidity memory-safe-assembly
  6494 |     |         assembly {
  6495 |     |             mstore(0x00, m0)
  6496 |     |             mstore(0x20, m1)
  6497 |     |             mstore(0x40, m2)
  6498 |     |             mstore(0x60, m3)
  6499 |     |             mstore(0x80, m4)
  6500 |     |         }
  6501 |     |     }
  6502 |     | 
  6503 |     |     function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {
  6504 |     |         bytes32 m0;
  6505 |     |         bytes32 m1;
  6506 |     |         bytes32 m2;
  6507 |     |         bytes32 m3;
  6508 |     |         bytes32 m4;
  6509 |     |         /// @solidity memory-safe-assembly
  6510 |     |         assembly {
  6511 |     |             m0 := mload(0x00)
  6512 |     |             m1 := mload(0x20)
  6513 |     |             m2 := mload(0x40)
  6514 |     |             m3 := mload(0x60)
  6515 |     |             m4 := mload(0x80)
  6516 |     |             // Selector of `log(bool,bool,uint256,uint256)`.
  6517 |     |             mstore(0x00, 0x0bb00eab)
  6518 |     |             mstore(0x20, p0)
  6519 |     |             mstore(0x40, p1)
  6520 |     |             mstore(0x60, p2)
  6521 |     |             mstore(0x80, p3)
  6522 |     |         }
  6523 |     |         _sendLogPayload(0x1c, 0x84);
  6524 |     |         /// @solidity memory-safe-assembly
  6525 |     |         assembly {
  6526 |     |             mstore(0x00, m0)
  6527 |     |             mstore(0x20, m1)
  6528 |     |             mstore(0x40, m2)
  6529 |     |             mstore(0x60, m3)
  6530 |     |             mstore(0x80, m4)
  6531 |     |         }
  6532 |     |     }
  6533 |     | 
  6534 |     |     function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {
  6535 |     |         bytes32 m0;
  6536 |     |         bytes32 m1;
  6537 |     |         bytes32 m2;
  6538 |     |         bytes32 m3;
  6539 |     |         bytes32 m4;
  6540 |     |         bytes32 m5;
  6541 |     |         bytes32 m6;
  6542 |     |         /// @solidity memory-safe-assembly
  6543 |     |         assembly {
  6544 |     |             function writeString(pos, w) {
  6545 |     |                 let length := 0
  6546 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6547 |     |                 mstore(pos, length)
  6548 |     |                 let shift := sub(256, shl(3, length))
  6549 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6550 |     |             }
  6551 |     |             m0 := mload(0x00)
  6552 |     |             m1 := mload(0x20)
  6553 |     |             m2 := mload(0x40)
  6554 |     |             m3 := mload(0x60)
  6555 |     |             m4 := mload(0x80)
  6556 |     |             m5 := mload(0xa0)
  6557 |     |             m6 := mload(0xc0)
  6558 |     |             // Selector of `log(bool,bool,uint256,string)`.
  6559 |     |             mstore(0x00, 0x7dd4d0e0)
  6560 |     |             mstore(0x20, p0)
  6561 |     |             mstore(0x40, p1)
  6562 |     |             mstore(0x60, p2)
  6563 |     |             mstore(0x80, 0x80)
  6564 |     |             writeString(0xa0, p3)
  6565 |     |         }
  6566 |     |         _sendLogPayload(0x1c, 0xc4);
  6567 |     |         /// @solidity memory-safe-assembly
  6568 |     |         assembly {
  6569 |     |             mstore(0x00, m0)
  6570 |     |             mstore(0x20, m1)
  6571 |     |             mstore(0x40, m2)
  6572 |     |             mstore(0x60, m3)
  6573 |     |             mstore(0x80, m4)
  6574 |     |             mstore(0xa0, m5)
  6575 |     |             mstore(0xc0, m6)
  6576 |     |         }
  6577 |     |     }
  6578 |     | 
  6579 |     |     function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {
  6580 |     |         bytes32 m0;
  6581 |     |         bytes32 m1;
  6582 |     |         bytes32 m2;
  6583 |     |         bytes32 m3;
  6584 |     |         bytes32 m4;
  6585 |     |         bytes32 m5;
  6586 |     |         bytes32 m6;
  6587 |     |         /// @solidity memory-safe-assembly
  6588 |     |         assembly {
  6589 |     |             function writeString(pos, w) {
  6590 |     |                 let length := 0
  6591 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6592 |     |                 mstore(pos, length)
  6593 |     |                 let shift := sub(256, shl(3, length))
  6594 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6595 |     |             }
  6596 |     |             m0 := mload(0x00)
  6597 |     |             m1 := mload(0x20)
  6598 |     |             m2 := mload(0x40)
  6599 |     |             m3 := mload(0x60)
  6600 |     |             m4 := mload(0x80)
  6601 |     |             m5 := mload(0xa0)
  6602 |     |             m6 := mload(0xc0)
  6603 |     |             // Selector of `log(bool,bool,string,address)`.
  6604 |     |             mstore(0x00, 0xf9ad2b89)
  6605 |     |             mstore(0x20, p0)
  6606 |     |             mstore(0x40, p1)
  6607 |     |             mstore(0x60, 0x80)
  6608 |     |             mstore(0x80, p3)
  6609 |     |             writeString(0xa0, p2)
  6610 |     |         }
  6611 |     |         _sendLogPayload(0x1c, 0xc4);
  6612 |     |         /// @solidity memory-safe-assembly
  6613 |     |         assembly {
  6614 |     |             mstore(0x00, m0)
  6615 |     |             mstore(0x20, m1)
  6616 |     |             mstore(0x40, m2)
  6617 |     |             mstore(0x60, m3)
  6618 |     |             mstore(0x80, m4)
  6619 |     |             mstore(0xa0, m5)
  6620 |     |             mstore(0xc0, m6)
  6621 |     |         }
  6622 |     |     }
  6623 |     | 
  6624 |     |     function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {
  6625 |     |         bytes32 m0;
  6626 |     |         bytes32 m1;
  6627 |     |         bytes32 m2;
  6628 |     |         bytes32 m3;
  6629 |     |         bytes32 m4;
  6630 |     |         bytes32 m5;
  6631 |     |         bytes32 m6;
  6632 |     |         /// @solidity memory-safe-assembly
  6633 |     |         assembly {
  6634 |     |             function writeString(pos, w) {
  6635 |     |                 let length := 0
  6636 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6637 |     |                 mstore(pos, length)
  6638 |     |                 let shift := sub(256, shl(3, length))
  6639 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6640 |     |             }
  6641 |     |             m0 := mload(0x00)
  6642 |     |             m1 := mload(0x20)
  6643 |     |             m2 := mload(0x40)
  6644 |     |             m3 := mload(0x60)
  6645 |     |             m4 := mload(0x80)
  6646 |     |             m5 := mload(0xa0)
  6647 |     |             m6 := mload(0xc0)
  6648 |     |             // Selector of `log(bool,bool,string,bool)`.
  6649 |     |             mstore(0x00, 0xb857163a)
  6650 |     |             mstore(0x20, p0)
  6651 |     |             mstore(0x40, p1)
  6652 |     |             mstore(0x60, 0x80)
  6653 |     |             mstore(0x80, p3)
  6654 |     |             writeString(0xa0, p2)
  6655 |     |         }
  6656 |     |         _sendLogPayload(0x1c, 0xc4);
  6657 |     |         /// @solidity memory-safe-assembly
  6658 |     |         assembly {
  6659 |     |             mstore(0x00, m0)
  6660 |     |             mstore(0x20, m1)
  6661 |     |             mstore(0x40, m2)
  6662 |     |             mstore(0x60, m3)
  6663 |     |             mstore(0x80, m4)
  6664 |     |             mstore(0xa0, m5)
  6665 |     |             mstore(0xc0, m6)
  6666 |     |         }
  6667 |     |     }
  6668 |     | 
  6669 |     |     function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {
  6670 |     |         bytes32 m0;
  6671 |     |         bytes32 m1;
  6672 |     |         bytes32 m2;
  6673 |     |         bytes32 m3;
  6674 |     |         bytes32 m4;
  6675 |     |         bytes32 m5;
  6676 |     |         bytes32 m6;
  6677 |     |         /// @solidity memory-safe-assembly
  6678 |     |         assembly {
  6679 |     |             function writeString(pos, w) {
  6680 |     |                 let length := 0
  6681 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6682 |     |                 mstore(pos, length)
  6683 |     |                 let shift := sub(256, shl(3, length))
  6684 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6685 |     |             }
  6686 |     |             m0 := mload(0x00)
  6687 |     |             m1 := mload(0x20)
  6688 |     |             m2 := mload(0x40)
  6689 |     |             m3 := mload(0x60)
  6690 |     |             m4 := mload(0x80)
  6691 |     |             m5 := mload(0xa0)
  6692 |     |             m6 := mload(0xc0)
  6693 |     |             // Selector of `log(bool,bool,string,uint256)`.
  6694 |     |             mstore(0x00, 0xe3a9ca2f)
  6695 |     |             mstore(0x20, p0)
  6696 |     |             mstore(0x40, p1)
  6697 |     |             mstore(0x60, 0x80)
  6698 |     |             mstore(0x80, p3)
  6699 |     |             writeString(0xa0, p2)
  6700 |     |         }
  6701 |     |         _sendLogPayload(0x1c, 0xc4);
  6702 |     |         /// @solidity memory-safe-assembly
  6703 |     |         assembly {
  6704 |     |             mstore(0x00, m0)
  6705 |     |             mstore(0x20, m1)
  6706 |     |             mstore(0x40, m2)
  6707 |     |             mstore(0x60, m3)
  6708 |     |             mstore(0x80, m4)
  6709 |     |             mstore(0xa0, m5)
  6710 |     |             mstore(0xc0, m6)
  6711 |     |         }
  6712 |     |     }
  6713 |     | 
  6714 |     |     function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
  6715 |     |         bytes32 m0;
  6716 |     |         bytes32 m1;
  6717 |     |         bytes32 m2;
  6718 |     |         bytes32 m3;
  6719 |     |         bytes32 m4;
  6720 |     |         bytes32 m5;
  6721 |     |         bytes32 m6;
  6722 |     |         bytes32 m7;
  6723 |     |         bytes32 m8;
  6724 |     |         /// @solidity memory-safe-assembly
  6725 |     |         assembly {
  6726 |     |             function writeString(pos, w) {
  6727 |     |                 let length := 0
  6728 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6729 |     |                 mstore(pos, length)
  6730 |     |                 let shift := sub(256, shl(3, length))
  6731 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6732 |     |             }
  6733 |     |             m0 := mload(0x00)
  6734 |     |             m1 := mload(0x20)
  6735 |     |             m2 := mload(0x40)
  6736 |     |             m3 := mload(0x60)
  6737 |     |             m4 := mload(0x80)
  6738 |     |             m5 := mload(0xa0)
  6739 |     |             m6 := mload(0xc0)
  6740 |     |             m7 := mload(0xe0)
  6741 |     |             m8 := mload(0x100)
  6742 |     |             // Selector of `log(bool,bool,string,string)`.
  6743 |     |             mstore(0x00, 0x6d1e8751)
  6744 |     |             mstore(0x20, p0)
  6745 |     |             mstore(0x40, p1)
  6746 |     |             mstore(0x60, 0x80)
  6747 |     |             mstore(0x80, 0xc0)
  6748 |     |             writeString(0xa0, p2)
  6749 |     |             writeString(0xe0, p3)
  6750 |     |         }
  6751 |     |         _sendLogPayload(0x1c, 0x104);
  6752 |     |         /// @solidity memory-safe-assembly
  6753 |     |         assembly {
  6754 |     |             mstore(0x00, m0)
  6755 |     |             mstore(0x20, m1)
  6756 |     |             mstore(0x40, m2)
  6757 |     |             mstore(0x60, m3)
  6758 |     |             mstore(0x80, m4)
  6759 |     |             mstore(0xa0, m5)
  6760 |     |             mstore(0xc0, m6)
  6761 |     |             mstore(0xe0, m7)
  6762 |     |             mstore(0x100, m8)
  6763 |     |         }
  6764 |     |     }
  6765 |     | 
  6766 |     |     function log(bool p0, uint256 p1, address p2, address p3) internal pure {
  6767 |     |         bytes32 m0;
  6768 |     |         bytes32 m1;
  6769 |     |         bytes32 m2;
  6770 |     |         bytes32 m3;
  6771 |     |         bytes32 m4;
  6772 |     |         /// @solidity memory-safe-assembly
  6773 |     |         assembly {
  6774 |     |             m0 := mload(0x00)
  6775 |     |             m1 := mload(0x20)
  6776 |     |             m2 := mload(0x40)
  6777 |     |             m3 := mload(0x60)
  6778 |     |             m4 := mload(0x80)
  6779 |     |             // Selector of `log(bool,uint256,address,address)`.
  6780 |     |             mstore(0x00, 0x26f560a8)
  6781 |     |             mstore(0x20, p0)
  6782 |     |             mstore(0x40, p1)
  6783 |     |             mstore(0x60, p2)
  6784 |     |             mstore(0x80, p3)
  6785 |     |         }
  6786 |     |         _sendLogPayload(0x1c, 0x84);
  6787 |     |         /// @solidity memory-safe-assembly
  6788 |     |         assembly {
  6789 |     |             mstore(0x00, m0)
  6790 |     |             mstore(0x20, m1)
  6791 |     |             mstore(0x40, m2)
  6792 |     |             mstore(0x60, m3)
  6793 |     |             mstore(0x80, m4)
  6794 |     |         }
  6795 |     |     }
  6796 |     | 
  6797 |     |     function log(bool p0, uint256 p1, address p2, bool p3) internal pure {
  6798 |     |         bytes32 m0;
  6799 |     |         bytes32 m1;
  6800 |     |         bytes32 m2;
  6801 |     |         bytes32 m3;
  6802 |     |         bytes32 m4;
  6803 |     |         /// @solidity memory-safe-assembly
  6804 |     |         assembly {
  6805 |     |             m0 := mload(0x00)
  6806 |     |             m1 := mload(0x20)
  6807 |     |             m2 := mload(0x40)
  6808 |     |             m3 := mload(0x60)
  6809 |     |             m4 := mload(0x80)
  6810 |     |             // Selector of `log(bool,uint256,address,bool)`.
  6811 |     |             mstore(0x00, 0xb4c314ff)
  6812 |     |             mstore(0x20, p0)
  6813 |     |             mstore(0x40, p1)
  6814 |     |             mstore(0x60, p2)
  6815 |     |             mstore(0x80, p3)
  6816 |     |         }
  6817 |     |         _sendLogPayload(0x1c, 0x84);
  6818 |     |         /// @solidity memory-safe-assembly
  6819 |     |         assembly {
  6820 |     |             mstore(0x00, m0)
  6821 |     |             mstore(0x20, m1)
  6822 |     |             mstore(0x40, m2)
  6823 |     |             mstore(0x60, m3)
  6824 |     |             mstore(0x80, m4)
  6825 |     |         }
  6826 |     |     }
  6827 |     | 
  6828 |     |     function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {
  6829 |     |         bytes32 m0;
  6830 |     |         bytes32 m1;
  6831 |     |         bytes32 m2;
  6832 |     |         bytes32 m3;
  6833 |     |         bytes32 m4;
  6834 |     |         /// @solidity memory-safe-assembly
  6835 |     |         assembly {
  6836 |     |             m0 := mload(0x00)
  6837 |     |             m1 := mload(0x20)
  6838 |     |             m2 := mload(0x40)
  6839 |     |             m3 := mload(0x60)
  6840 |     |             m4 := mload(0x80)
  6841 |     |             // Selector of `log(bool,uint256,address,uint256)`.
  6842 |     |             mstore(0x00, 0x1537dc87)
  6843 |     |             mstore(0x20, p0)
  6844 |     |             mstore(0x40, p1)
  6845 |     |             mstore(0x60, p2)
  6846 |     |             mstore(0x80, p3)
  6847 |     |         }
  6848 |     |         _sendLogPayload(0x1c, 0x84);
  6849 |     |         /// @solidity memory-safe-assembly
  6850 |     |         assembly {
  6851 |     |             mstore(0x00, m0)
  6852 |     |             mstore(0x20, m1)
  6853 |     |             mstore(0x40, m2)
  6854 |     |             mstore(0x60, m3)
  6855 |     |             mstore(0x80, m4)
  6856 |     |         }
  6857 |     |     }
  6858 |     | 
  6859 |     |     function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {
  6860 |     |         bytes32 m0;
  6861 |     |         bytes32 m1;
  6862 |     |         bytes32 m2;
  6863 |     |         bytes32 m3;
  6864 |     |         bytes32 m4;
  6865 |     |         bytes32 m5;
  6866 |     |         bytes32 m6;
  6867 |     |         /// @solidity memory-safe-assembly
  6868 |     |         assembly {
  6869 |     |             function writeString(pos, w) {
  6870 |     |                 let length := 0
  6871 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  6872 |     |                 mstore(pos, length)
  6873 |     |                 let shift := sub(256, shl(3, length))
  6874 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  6875 |     |             }
  6876 |     |             m0 := mload(0x00)
  6877 |     |             m1 := mload(0x20)
  6878 |     |             m2 := mload(0x40)
  6879 |     |             m3 := mload(0x60)
  6880 |     |             m4 := mload(0x80)
  6881 |     |             m5 := mload(0xa0)
  6882 |     |             m6 := mload(0xc0)
  6883 |     |             // Selector of `log(bool,uint256,address,string)`.
  6884 |     |             mstore(0x00, 0x1bb3b09a)
  6885 |     |             mstore(0x20, p0)
  6886 |     |             mstore(0x40, p1)
  6887 |     |             mstore(0x60, p2)
  6888 |     |             mstore(0x80, 0x80)
  6889 |     |             writeString(0xa0, p3)
  6890 |     |         }
  6891 |     |         _sendLogPayload(0x1c, 0xc4);
  6892 |     |         /// @solidity memory-safe-assembly
  6893 |     |         assembly {
  6894 |     |             mstore(0x00, m0)
  6895 |     |             mstore(0x20, m1)
  6896 |     |             mstore(0x40, m2)
  6897 |     |             mstore(0x60, m3)
  6898 |     |             mstore(0x80, m4)
  6899 |     |             mstore(0xa0, m5)
  6900 |     |             mstore(0xc0, m6)
  6901 |     |         }
  6902 |     |     }
  6903 |     | 
  6904 |     |     function log(bool p0, uint256 p1, bool p2, address p3) internal pure {
  6905 |     |         bytes32 m0;
  6906 |     |         bytes32 m1;
  6907 |     |         bytes32 m2;
  6908 |     |         bytes32 m3;
  6909 |     |         bytes32 m4;
  6910 |     |         /// @solidity memory-safe-assembly
  6911 |     |         assembly {
  6912 |     |             m0 := mload(0x00)
  6913 |     |             m1 := mload(0x20)
  6914 |     |             m2 := mload(0x40)
  6915 |     |             m3 := mload(0x60)
  6916 |     |             m4 := mload(0x80)
  6917 |     |             // Selector of `log(bool,uint256,bool,address)`.
  6918 |     |             mstore(0x00, 0x9acd3616)
  6919 |     |             mstore(0x20, p0)
  6920 |     |             mstore(0x40, p1)
  6921 |     |             mstore(0x60, p2)
  6922 |     |             mstore(0x80, p3)
  6923 |     |         }
  6924 |     |         _sendLogPayload(0x1c, 0x84);
  6925 |     |         /// @solidity memory-safe-assembly
  6926 |     |         assembly {
  6927 |     |             mstore(0x00, m0)
  6928 |     |             mstore(0x20, m1)
  6929 |     |             mstore(0x40, m2)
  6930 |     |             mstore(0x60, m3)
  6931 |     |             mstore(0x80, m4)
  6932 |     |         }
  6933 |     |     }
  6934 |     | 
  6935 |     |     function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {
  6936 |     |         bytes32 m0;
  6937 |     |         bytes32 m1;
  6938 |     |         bytes32 m2;
  6939 |     |         bytes32 m3;
  6940 |     |         bytes32 m4;
  6941 |     |         /// @solidity memory-safe-assembly
  6942 |     |         assembly {
  6943 |     |             m0 := mload(0x00)
  6944 |     |             m1 := mload(0x20)
  6945 |     |             m2 := mload(0x40)
  6946 |     |             m3 := mload(0x60)
  6947 |     |             m4 := mload(0x80)
  6948 |     |             // Selector of `log(bool,uint256,bool,bool)`.
  6949 |     |             mstore(0x00, 0xceb5f4d7)
  6950 |     |             mstore(0x20, p0)
  6951 |     |             mstore(0x40, p1)
  6952 |     |             mstore(0x60, p2)
  6953 |     |             mstore(0x80, p3)
  6954 |     |         }
  6955 |     |         _sendLogPayload(0x1c, 0x84);
  6956 |     |         /// @solidity memory-safe-assembly
  6957 |     |         assembly {
  6958 |     |             mstore(0x00, m0)
  6959 |     |             mstore(0x20, m1)
  6960 |     |             mstore(0x40, m2)
  6961 |     |             mstore(0x60, m3)
  6962 |     |             mstore(0x80, m4)
  6963 |     |         }
  6964 |     |     }
  6965 |     | 
  6966 |     |     function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {
  6967 |     |         bytes32 m0;
  6968 |     |         bytes32 m1;
  6969 |     |         bytes32 m2;
  6970 |     |         bytes32 m3;
  6971 |     |         bytes32 m4;
  6972 |     |         /// @solidity memory-safe-assembly
  6973 |     |         assembly {
  6974 |     |             m0 := mload(0x00)
  6975 |     |             m1 := mload(0x20)
  6976 |     |             m2 := mload(0x40)
  6977 |     |             m3 := mload(0x60)
  6978 |     |             m4 := mload(0x80)
  6979 |     |             // Selector of `log(bool,uint256,bool,uint256)`.
  6980 |     |             mstore(0x00, 0x7f9bbca2)
  6981 |     |             mstore(0x20, p0)
  6982 |     |             mstore(0x40, p1)
  6983 |     |             mstore(0x60, p2)
  6984 |     |             mstore(0x80, p3)
  6985 |     |         }
  6986 |     |         _sendLogPayload(0x1c, 0x84);
  6987 |     |         /// @solidity memory-safe-assembly
  6988 |     |         assembly {
  6989 |     |             mstore(0x00, m0)
  6990 |     |             mstore(0x20, m1)
  6991 |     |             mstore(0x40, m2)
  6992 |     |             mstore(0x60, m3)
  6993 |     |             mstore(0x80, m4)
  6994 |     |         }
  6995 |     |     }
  6996 |     | 
  6997 |     |     function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {
  6998 |     |         bytes32 m0;
  6999 |     |         bytes32 m1;
  7000 |     |         bytes32 m2;
  7001 |     |         bytes32 m3;
  7002 |     |         bytes32 m4;
  7003 |     |         bytes32 m5;
  7004 |     |         bytes32 m6;
  7005 |     |         /// @solidity memory-safe-assembly
  7006 |     |         assembly {
  7007 |     |             function writeString(pos, w) {
  7008 |     |                 let length := 0
  7009 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7010 |     |                 mstore(pos, length)
  7011 |     |                 let shift := sub(256, shl(3, length))
  7012 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7013 |     |             }
  7014 |     |             m0 := mload(0x00)
  7015 |     |             m1 := mload(0x20)
  7016 |     |             m2 := mload(0x40)
  7017 |     |             m3 := mload(0x60)
  7018 |     |             m4 := mload(0x80)
  7019 |     |             m5 := mload(0xa0)
  7020 |     |             m6 := mload(0xc0)
  7021 |     |             // Selector of `log(bool,uint256,bool,string)`.
  7022 |     |             mstore(0x00, 0x9143dbb1)
  7023 |     |             mstore(0x20, p0)
  7024 |     |             mstore(0x40, p1)
  7025 |     |             mstore(0x60, p2)
  7026 |     |             mstore(0x80, 0x80)
  7027 |     |             writeString(0xa0, p3)
  7028 |     |         }
  7029 |     |         _sendLogPayload(0x1c, 0xc4);
  7030 |     |         /// @solidity memory-safe-assembly
  7031 |     |         assembly {
  7032 |     |             mstore(0x00, m0)
  7033 |     |             mstore(0x20, m1)
  7034 |     |             mstore(0x40, m2)
  7035 |     |             mstore(0x60, m3)
  7036 |     |             mstore(0x80, m4)
  7037 |     |             mstore(0xa0, m5)
  7038 |     |             mstore(0xc0, m6)
  7039 |     |         }
  7040 |     |     }
  7041 |     | 
  7042 |     |     function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {
  7043 |     |         bytes32 m0;
  7044 |     |         bytes32 m1;
  7045 |     |         bytes32 m2;
  7046 |     |         bytes32 m3;
  7047 |     |         bytes32 m4;
  7048 |     |         /// @solidity memory-safe-assembly
  7049 |     |         assembly {
  7050 |     |             m0 := mload(0x00)
  7051 |     |             m1 := mload(0x20)
  7052 |     |             m2 := mload(0x40)
  7053 |     |             m3 := mload(0x60)
  7054 |     |             m4 := mload(0x80)
  7055 |     |             // Selector of `log(bool,uint256,uint256,address)`.
  7056 |     |             mstore(0x00, 0x00dd87b9)
  7057 |     |             mstore(0x20, p0)
  7058 |     |             mstore(0x40, p1)
  7059 |     |             mstore(0x60, p2)
  7060 |     |             mstore(0x80, p3)
  7061 |     |         }
  7062 |     |         _sendLogPayload(0x1c, 0x84);
  7063 |     |         /// @solidity memory-safe-assembly
  7064 |     |         assembly {
  7065 |     |             mstore(0x00, m0)
  7066 |     |             mstore(0x20, m1)
  7067 |     |             mstore(0x40, m2)
  7068 |     |             mstore(0x60, m3)
  7069 |     |             mstore(0x80, m4)
  7070 |     |         }
  7071 |     |     }
  7072 |     | 
  7073 |     |     function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {
  7074 |     |         bytes32 m0;
  7075 |     |         bytes32 m1;
  7076 |     |         bytes32 m2;
  7077 |     |         bytes32 m3;
  7078 |     |         bytes32 m4;
  7079 |     |         /// @solidity memory-safe-assembly
  7080 |     |         assembly {
  7081 |     |             m0 := mload(0x00)
  7082 |     |             m1 := mload(0x20)
  7083 |     |             m2 := mload(0x40)
  7084 |     |             m3 := mload(0x60)
  7085 |     |             m4 := mload(0x80)
  7086 |     |             // Selector of `log(bool,uint256,uint256,bool)`.
  7087 |     |             mstore(0x00, 0xbe984353)
  7088 |     |             mstore(0x20, p0)
  7089 |     |             mstore(0x40, p1)
  7090 |     |             mstore(0x60, p2)
  7091 |     |             mstore(0x80, p3)
  7092 |     |         }
  7093 |     |         _sendLogPayload(0x1c, 0x84);
  7094 |     |         /// @solidity memory-safe-assembly
  7095 |     |         assembly {
  7096 |     |             mstore(0x00, m0)
  7097 |     |             mstore(0x20, m1)
  7098 |     |             mstore(0x40, m2)
  7099 |     |             mstore(0x60, m3)
  7100 |     |             mstore(0x80, m4)
  7101 |     |         }
  7102 |     |     }
  7103 |     | 
  7104 |     |     function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  7105 |     |         bytes32 m0;
  7106 |     |         bytes32 m1;
  7107 |     |         bytes32 m2;
  7108 |     |         bytes32 m3;
  7109 |     |         bytes32 m4;
  7110 |     |         /// @solidity memory-safe-assembly
  7111 |     |         assembly {
  7112 |     |             m0 := mload(0x00)
  7113 |     |             m1 := mload(0x20)
  7114 |     |             m2 := mload(0x40)
  7115 |     |             m3 := mload(0x60)
  7116 |     |             m4 := mload(0x80)
  7117 |     |             // Selector of `log(bool,uint256,uint256,uint256)`.
  7118 |     |             mstore(0x00, 0x374bb4b2)
  7119 |     |             mstore(0x20, p0)
  7120 |     |             mstore(0x40, p1)
  7121 |     |             mstore(0x60, p2)
  7122 |     |             mstore(0x80, p3)
  7123 |     |         }
  7124 |     |         _sendLogPayload(0x1c, 0x84);
  7125 |     |         /// @solidity memory-safe-assembly
  7126 |     |         assembly {
  7127 |     |             mstore(0x00, m0)
  7128 |     |             mstore(0x20, m1)
  7129 |     |             mstore(0x40, m2)
  7130 |     |             mstore(0x60, m3)
  7131 |     |             mstore(0x80, m4)
  7132 |     |         }
  7133 |     |     }
  7134 |     | 
  7135 |     |     function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
  7136 |     |         bytes32 m0;
  7137 |     |         bytes32 m1;
  7138 |     |         bytes32 m2;
  7139 |     |         bytes32 m3;
  7140 |     |         bytes32 m4;
  7141 |     |         bytes32 m5;
  7142 |     |         bytes32 m6;
  7143 |     |         /// @solidity memory-safe-assembly
  7144 |     |         assembly {
  7145 |     |             function writeString(pos, w) {
  7146 |     |                 let length := 0
  7147 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7148 |     |                 mstore(pos, length)
  7149 |     |                 let shift := sub(256, shl(3, length))
  7150 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7151 |     |             }
  7152 |     |             m0 := mload(0x00)
  7153 |     |             m1 := mload(0x20)
  7154 |     |             m2 := mload(0x40)
  7155 |     |             m3 := mload(0x60)
  7156 |     |             m4 := mload(0x80)
  7157 |     |             m5 := mload(0xa0)
  7158 |     |             m6 := mload(0xc0)
  7159 |     |             // Selector of `log(bool,uint256,uint256,string)`.
  7160 |     |             mstore(0x00, 0x8e69fb5d)
  7161 |     |             mstore(0x20, p0)
  7162 |     |             mstore(0x40, p1)
  7163 |     |             mstore(0x60, p2)
  7164 |     |             mstore(0x80, 0x80)
  7165 |     |             writeString(0xa0, p3)
  7166 |     |         }
  7167 |     |         _sendLogPayload(0x1c, 0xc4);
  7168 |     |         /// @solidity memory-safe-assembly
  7169 |     |         assembly {
  7170 |     |             mstore(0x00, m0)
  7171 |     |             mstore(0x20, m1)
  7172 |     |             mstore(0x40, m2)
  7173 |     |             mstore(0x60, m3)
  7174 |     |             mstore(0x80, m4)
  7175 |     |             mstore(0xa0, m5)
  7176 |     |             mstore(0xc0, m6)
  7177 |     |         }
  7178 |     |     }
  7179 |     | 
  7180 |     |     function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {
  7181 |     |         bytes32 m0;
  7182 |     |         bytes32 m1;
  7183 |     |         bytes32 m2;
  7184 |     |         bytes32 m3;
  7185 |     |         bytes32 m4;
  7186 |     |         bytes32 m5;
  7187 |     |         bytes32 m6;
  7188 |     |         /// @solidity memory-safe-assembly
  7189 |     |         assembly {
  7190 |     |             function writeString(pos, w) {
  7191 |     |                 let length := 0
  7192 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7193 |     |                 mstore(pos, length)
  7194 |     |                 let shift := sub(256, shl(3, length))
  7195 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7196 |     |             }
  7197 |     |             m0 := mload(0x00)
  7198 |     |             m1 := mload(0x20)
  7199 |     |             m2 := mload(0x40)
  7200 |     |             m3 := mload(0x60)
  7201 |     |             m4 := mload(0x80)
  7202 |     |             m5 := mload(0xa0)
  7203 |     |             m6 := mload(0xc0)
  7204 |     |             // Selector of `log(bool,uint256,string,address)`.
  7205 |     |             mstore(0x00, 0xfedd1fff)
  7206 |     |             mstore(0x20, p0)
  7207 |     |             mstore(0x40, p1)
  7208 |     |             mstore(0x60, 0x80)
  7209 |     |             mstore(0x80, p3)
  7210 |     |             writeString(0xa0, p2)
  7211 |     |         }
  7212 |     |         _sendLogPayload(0x1c, 0xc4);
  7213 |     |         /// @solidity memory-safe-assembly
  7214 |     |         assembly {
  7215 |     |             mstore(0x00, m0)
  7216 |     |             mstore(0x20, m1)
  7217 |     |             mstore(0x40, m2)
  7218 |     |             mstore(0x60, m3)
  7219 |     |             mstore(0x80, m4)
  7220 |     |             mstore(0xa0, m5)
  7221 |     |             mstore(0xc0, m6)
  7222 |     |         }
  7223 |     |     }
  7224 |     | 
  7225 |     |     function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {
  7226 |     |         bytes32 m0;
  7227 |     |         bytes32 m1;
  7228 |     |         bytes32 m2;
  7229 |     |         bytes32 m3;
  7230 |     |         bytes32 m4;
  7231 |     |         bytes32 m5;
  7232 |     |         bytes32 m6;
  7233 |     |         /// @solidity memory-safe-assembly
  7234 |     |         assembly {
  7235 |     |             function writeString(pos, w) {
  7236 |     |                 let length := 0
  7237 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7238 |     |                 mstore(pos, length)
  7239 |     |                 let shift := sub(256, shl(3, length))
  7240 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7241 |     |             }
  7242 |     |             m0 := mload(0x00)
  7243 |     |             m1 := mload(0x20)
  7244 |     |             m2 := mload(0x40)
  7245 |     |             m3 := mload(0x60)
  7246 |     |             m4 := mload(0x80)
  7247 |     |             m5 := mload(0xa0)
  7248 |     |             m6 := mload(0xc0)
  7249 |     |             // Selector of `log(bool,uint256,string,bool)`.
  7250 |     |             mstore(0x00, 0xe5e70b2b)
  7251 |     |             mstore(0x20, p0)
  7252 |     |             mstore(0x40, p1)
  7253 |     |             mstore(0x60, 0x80)
  7254 |     |             mstore(0x80, p3)
  7255 |     |             writeString(0xa0, p2)
  7256 |     |         }
  7257 |     |         _sendLogPayload(0x1c, 0xc4);
  7258 |     |         /// @solidity memory-safe-assembly
  7259 |     |         assembly {
  7260 |     |             mstore(0x00, m0)
  7261 |     |             mstore(0x20, m1)
  7262 |     |             mstore(0x40, m2)
  7263 |     |             mstore(0x60, m3)
  7264 |     |             mstore(0x80, m4)
  7265 |     |             mstore(0xa0, m5)
  7266 |     |             mstore(0xc0, m6)
  7267 |     |         }
  7268 |     |     }
  7269 |     | 
  7270 |     |     function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
  7271 |     |         bytes32 m0;
  7272 |     |         bytes32 m1;
  7273 |     |         bytes32 m2;
  7274 |     |         bytes32 m3;
  7275 |     |         bytes32 m4;
  7276 |     |         bytes32 m5;
  7277 |     |         bytes32 m6;
  7278 |     |         /// @solidity memory-safe-assembly
  7279 |     |         assembly {
  7280 |     |             function writeString(pos, w) {
  7281 |     |                 let length := 0
  7282 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7283 |     |                 mstore(pos, length)
  7284 |     |                 let shift := sub(256, shl(3, length))
  7285 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7286 |     |             }
  7287 |     |             m0 := mload(0x00)
  7288 |     |             m1 := mload(0x20)
  7289 |     |             m2 := mload(0x40)
  7290 |     |             m3 := mload(0x60)
  7291 |     |             m4 := mload(0x80)
  7292 |     |             m5 := mload(0xa0)
  7293 |     |             m6 := mload(0xc0)
  7294 |     |             // Selector of `log(bool,uint256,string,uint256)`.
  7295 |     |             mstore(0x00, 0x6a1199e2)
  7296 |     |             mstore(0x20, p0)
  7297 |     |             mstore(0x40, p1)
  7298 |     |             mstore(0x60, 0x80)
  7299 |     |             mstore(0x80, p3)
  7300 |     |             writeString(0xa0, p2)
  7301 |     |         }
  7302 |     |         _sendLogPayload(0x1c, 0xc4);
  7303 |     |         /// @solidity memory-safe-assembly
  7304 |     |         assembly {
  7305 |     |             mstore(0x00, m0)
  7306 |     |             mstore(0x20, m1)
  7307 |     |             mstore(0x40, m2)
  7308 |     |             mstore(0x60, m3)
  7309 |     |             mstore(0x80, m4)
  7310 |     |             mstore(0xa0, m5)
  7311 |     |             mstore(0xc0, m6)
  7312 |     |         }
  7313 |     |     }
  7314 |     | 
  7315 |     |     function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
  7316 |     |         bytes32 m0;
  7317 |     |         bytes32 m1;
  7318 |     |         bytes32 m2;
  7319 |     |         bytes32 m3;
  7320 |     |         bytes32 m4;
  7321 |     |         bytes32 m5;
  7322 |     |         bytes32 m6;
  7323 |     |         bytes32 m7;
  7324 |     |         bytes32 m8;
  7325 |     |         /// @solidity memory-safe-assembly
  7326 |     |         assembly {
  7327 |     |             function writeString(pos, w) {
  7328 |     |                 let length := 0
  7329 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7330 |     |                 mstore(pos, length)
  7331 |     |                 let shift := sub(256, shl(3, length))
  7332 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7333 |     |             }
  7334 |     |             m0 := mload(0x00)
  7335 |     |             m1 := mload(0x20)
  7336 |     |             m2 := mload(0x40)
  7337 |     |             m3 := mload(0x60)
  7338 |     |             m4 := mload(0x80)
  7339 |     |             m5 := mload(0xa0)
  7340 |     |             m6 := mload(0xc0)
  7341 |     |             m7 := mload(0xe0)
  7342 |     |             m8 := mload(0x100)
  7343 |     |             // Selector of `log(bool,uint256,string,string)`.
  7344 |     |             mstore(0x00, 0xf5bc2249)
  7345 |     |             mstore(0x20, p0)
  7346 |     |             mstore(0x40, p1)
  7347 |     |             mstore(0x60, 0x80)
  7348 |     |             mstore(0x80, 0xc0)
  7349 |     |             writeString(0xa0, p2)
  7350 |     |             writeString(0xe0, p3)
  7351 |     |         }
  7352 |     |         _sendLogPayload(0x1c, 0x104);
  7353 |     |         /// @solidity memory-safe-assembly
  7354 |     |         assembly {
  7355 |     |             mstore(0x00, m0)
  7356 |     |             mstore(0x20, m1)
  7357 |     |             mstore(0x40, m2)
  7358 |     |             mstore(0x60, m3)
  7359 |     |             mstore(0x80, m4)
  7360 |     |             mstore(0xa0, m5)
  7361 |     |             mstore(0xc0, m6)
  7362 |     |             mstore(0xe0, m7)
  7363 |     |             mstore(0x100, m8)
  7364 |     |         }
  7365 |     |     }
  7366 |     | 
  7367 |     |     function log(bool p0, bytes32 p1, address p2, address p3) internal pure {
  7368 |     |         bytes32 m0;
  7369 |     |         bytes32 m1;
  7370 |     |         bytes32 m2;
  7371 |     |         bytes32 m3;
  7372 |     |         bytes32 m4;
  7373 |     |         bytes32 m5;
  7374 |     |         bytes32 m6;
  7375 |     |         /// @solidity memory-safe-assembly
  7376 |     |         assembly {
  7377 |     |             function writeString(pos, w) {
  7378 |     |                 let length := 0
  7379 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7380 |     |                 mstore(pos, length)
  7381 |     |                 let shift := sub(256, shl(3, length))
  7382 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7383 |     |             }
  7384 |     |             m0 := mload(0x00)
  7385 |     |             m1 := mload(0x20)
  7386 |     |             m2 := mload(0x40)
  7387 |     |             m3 := mload(0x60)
  7388 |     |             m4 := mload(0x80)
  7389 |     |             m5 := mload(0xa0)
  7390 |     |             m6 := mload(0xc0)
  7391 |     |             // Selector of `log(bool,string,address,address)`.
  7392 |     |             mstore(0x00, 0x2b2b18dc)
  7393 |     |             mstore(0x20, p0)
  7394 |     |             mstore(0x40, 0x80)
  7395 |     |             mstore(0x60, p2)
  7396 |     |             mstore(0x80, p3)
  7397 |     |             writeString(0xa0, p1)
  7398 |     |         }
  7399 |     |         _sendLogPayload(0x1c, 0xc4);
  7400 |     |         /// @solidity memory-safe-assembly
  7401 |     |         assembly {
  7402 |     |             mstore(0x00, m0)
  7403 |     |             mstore(0x20, m1)
  7404 |     |             mstore(0x40, m2)
  7405 |     |             mstore(0x60, m3)
  7406 |     |             mstore(0x80, m4)
  7407 |     |             mstore(0xa0, m5)
  7408 |     |             mstore(0xc0, m6)
  7409 |     |         }
  7410 |     |     }
  7411 |     | 
  7412 |     |     function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {
  7413 |     |         bytes32 m0;
  7414 |     |         bytes32 m1;
  7415 |     |         bytes32 m2;
  7416 |     |         bytes32 m3;
  7417 |     |         bytes32 m4;
  7418 |     |         bytes32 m5;
  7419 |     |         bytes32 m6;
  7420 |     |         /// @solidity memory-safe-assembly
  7421 |     |         assembly {
  7422 |     |             function writeString(pos, w) {
  7423 |     |                 let length := 0
  7424 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7425 |     |                 mstore(pos, length)
  7426 |     |                 let shift := sub(256, shl(3, length))
  7427 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7428 |     |             }
  7429 |     |             m0 := mload(0x00)
  7430 |     |             m1 := mload(0x20)
  7431 |     |             m2 := mload(0x40)
  7432 |     |             m3 := mload(0x60)
  7433 |     |             m4 := mload(0x80)
  7434 |     |             m5 := mload(0xa0)
  7435 |     |             m6 := mload(0xc0)
  7436 |     |             // Selector of `log(bool,string,address,bool)`.
  7437 |     |             mstore(0x00, 0x6dd434ca)
  7438 |     |             mstore(0x20, p0)
  7439 |     |             mstore(0x40, 0x80)
  7440 |     |             mstore(0x60, p2)
  7441 |     |             mstore(0x80, p3)
  7442 |     |             writeString(0xa0, p1)
  7443 |     |         }
  7444 |     |         _sendLogPayload(0x1c, 0xc4);
  7445 |     |         /// @solidity memory-safe-assembly
  7446 |     |         assembly {
  7447 |     |             mstore(0x00, m0)
  7448 |     |             mstore(0x20, m1)
  7449 |     |             mstore(0x40, m2)
  7450 |     |             mstore(0x60, m3)
  7451 |     |             mstore(0x80, m4)
  7452 |     |             mstore(0xa0, m5)
  7453 |     |             mstore(0xc0, m6)
  7454 |     |         }
  7455 |     |     }
  7456 |     | 
  7457 |     |     function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {
  7458 |     |         bytes32 m0;
  7459 |     |         bytes32 m1;
  7460 |     |         bytes32 m2;
  7461 |     |         bytes32 m3;
  7462 |     |         bytes32 m4;
  7463 |     |         bytes32 m5;
  7464 |     |         bytes32 m6;
  7465 |     |         /// @solidity memory-safe-assembly
  7466 |     |         assembly {
  7467 |     |             function writeString(pos, w) {
  7468 |     |                 let length := 0
  7469 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7470 |     |                 mstore(pos, length)
  7471 |     |                 let shift := sub(256, shl(3, length))
  7472 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7473 |     |             }
  7474 |     |             m0 := mload(0x00)
  7475 |     |             m1 := mload(0x20)
  7476 |     |             m2 := mload(0x40)
  7477 |     |             m3 := mload(0x60)
  7478 |     |             m4 := mload(0x80)
  7479 |     |             m5 := mload(0xa0)
  7480 |     |             m6 := mload(0xc0)
  7481 |     |             // Selector of `log(bool,string,address,uint256)`.
  7482 |     |             mstore(0x00, 0xa5cada94)
  7483 |     |             mstore(0x20, p0)
  7484 |     |             mstore(0x40, 0x80)
  7485 |     |             mstore(0x60, p2)
  7486 |     |             mstore(0x80, p3)
  7487 |     |             writeString(0xa0, p1)
  7488 |     |         }
  7489 |     |         _sendLogPayload(0x1c, 0xc4);
  7490 |     |         /// @solidity memory-safe-assembly
  7491 |     |         assembly {
  7492 |     |             mstore(0x00, m0)
  7493 |     |             mstore(0x20, m1)
  7494 |     |             mstore(0x40, m2)
  7495 |     |             mstore(0x60, m3)
  7496 |     |             mstore(0x80, m4)
  7497 |     |             mstore(0xa0, m5)
  7498 |     |             mstore(0xc0, m6)
  7499 |     |         }
  7500 |     |     }
  7501 |     | 
  7502 |     |     function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {
  7503 |     |         bytes32 m0;
  7504 |     |         bytes32 m1;
  7505 |     |         bytes32 m2;
  7506 |     |         bytes32 m3;
  7507 |     |         bytes32 m4;
  7508 |     |         bytes32 m5;
  7509 |     |         bytes32 m6;
  7510 |     |         bytes32 m7;
  7511 |     |         bytes32 m8;
  7512 |     |         /// @solidity memory-safe-assembly
  7513 |     |         assembly {
  7514 |     |             function writeString(pos, w) {
  7515 |     |                 let length := 0
  7516 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7517 |     |                 mstore(pos, length)
  7518 |     |                 let shift := sub(256, shl(3, length))
  7519 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7520 |     |             }
  7521 |     |             m0 := mload(0x00)
  7522 |     |             m1 := mload(0x20)
  7523 |     |             m2 := mload(0x40)
  7524 |     |             m3 := mload(0x60)
  7525 |     |             m4 := mload(0x80)
  7526 |     |             m5 := mload(0xa0)
  7527 |     |             m6 := mload(0xc0)
  7528 |     |             m7 := mload(0xe0)
  7529 |     |             m8 := mload(0x100)
  7530 |     |             // Selector of `log(bool,string,address,string)`.
  7531 |     |             mstore(0x00, 0x12d6c788)
  7532 |     |             mstore(0x20, p0)
  7533 |     |             mstore(0x40, 0x80)
  7534 |     |             mstore(0x60, p2)
  7535 |     |             mstore(0x80, 0xc0)
  7536 |     |             writeString(0xa0, p1)
  7537 |     |             writeString(0xe0, p3)
  7538 |     |         }
  7539 |     |         _sendLogPayload(0x1c, 0x104);
  7540 |     |         /// @solidity memory-safe-assembly
  7541 |     |         assembly {
  7542 |     |             mstore(0x00, m0)
  7543 |     |             mstore(0x20, m1)
  7544 |     |             mstore(0x40, m2)
  7545 |     |             mstore(0x60, m3)
  7546 |     |             mstore(0x80, m4)
  7547 |     |             mstore(0xa0, m5)
  7548 |     |             mstore(0xc0, m6)
  7549 |     |             mstore(0xe0, m7)
  7550 |     |             mstore(0x100, m8)
  7551 |     |         }
  7552 |     |     }
  7553 |     | 
  7554 |     |     function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {
  7555 |     |         bytes32 m0;
  7556 |     |         bytes32 m1;
  7557 |     |         bytes32 m2;
  7558 |     |         bytes32 m3;
  7559 |     |         bytes32 m4;
  7560 |     |         bytes32 m5;
  7561 |     |         bytes32 m6;
  7562 |     |         /// @solidity memory-safe-assembly
  7563 |     |         assembly {
  7564 |     |             function writeString(pos, w) {
  7565 |     |                 let length := 0
  7566 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7567 |     |                 mstore(pos, length)
  7568 |     |                 let shift := sub(256, shl(3, length))
  7569 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7570 |     |             }
  7571 |     |             m0 := mload(0x00)
  7572 |     |             m1 := mload(0x20)
  7573 |     |             m2 := mload(0x40)
  7574 |     |             m3 := mload(0x60)
  7575 |     |             m4 := mload(0x80)
  7576 |     |             m5 := mload(0xa0)
  7577 |     |             m6 := mload(0xc0)
  7578 |     |             // Selector of `log(bool,string,bool,address)`.
  7579 |     |             mstore(0x00, 0x538e06ab)
  7580 |     |             mstore(0x20, p0)
  7581 |     |             mstore(0x40, 0x80)
  7582 |     |             mstore(0x60, p2)
  7583 |     |             mstore(0x80, p3)
  7584 |     |             writeString(0xa0, p1)
  7585 |     |         }
  7586 |     |         _sendLogPayload(0x1c, 0xc4);
  7587 |     |         /// @solidity memory-safe-assembly
  7588 |     |         assembly {
  7589 |     |             mstore(0x00, m0)
  7590 |     |             mstore(0x20, m1)
  7591 |     |             mstore(0x40, m2)
  7592 |     |             mstore(0x60, m3)
  7593 |     |             mstore(0x80, m4)
  7594 |     |             mstore(0xa0, m5)
  7595 |     |             mstore(0xc0, m6)
  7596 |     |         }
  7597 |     |     }
  7598 |     | 
  7599 |     |     function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {
  7600 |     |         bytes32 m0;
  7601 |     |         bytes32 m1;
  7602 |     |         bytes32 m2;
  7603 |     |         bytes32 m3;
  7604 |     |         bytes32 m4;
  7605 |     |         bytes32 m5;
  7606 |     |         bytes32 m6;
  7607 |     |         /// @solidity memory-safe-assembly
  7608 |     |         assembly {
  7609 |     |             function writeString(pos, w) {
  7610 |     |                 let length := 0
  7611 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7612 |     |                 mstore(pos, length)
  7613 |     |                 let shift := sub(256, shl(3, length))
  7614 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7615 |     |             }
  7616 |     |             m0 := mload(0x00)
  7617 |     |             m1 := mload(0x20)
  7618 |     |             m2 := mload(0x40)
  7619 |     |             m3 := mload(0x60)
  7620 |     |             m4 := mload(0x80)
  7621 |     |             m5 := mload(0xa0)
  7622 |     |             m6 := mload(0xc0)
  7623 |     |             // Selector of `log(bool,string,bool,bool)`.
  7624 |     |             mstore(0x00, 0xdc5e935b)
  7625 |     |             mstore(0x20, p0)
  7626 |     |             mstore(0x40, 0x80)
  7627 |     |             mstore(0x60, p2)
  7628 |     |             mstore(0x80, p3)
  7629 |     |             writeString(0xa0, p1)
  7630 |     |         }
  7631 |     |         _sendLogPayload(0x1c, 0xc4);
  7632 |     |         /// @solidity memory-safe-assembly
  7633 |     |         assembly {
  7634 |     |             mstore(0x00, m0)
  7635 |     |             mstore(0x20, m1)
  7636 |     |             mstore(0x40, m2)
  7637 |     |             mstore(0x60, m3)
  7638 |     |             mstore(0x80, m4)
  7639 |     |             mstore(0xa0, m5)
  7640 |     |             mstore(0xc0, m6)
  7641 |     |         }
  7642 |     |     }
  7643 |     | 
  7644 |     |     function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {
  7645 |     |         bytes32 m0;
  7646 |     |         bytes32 m1;
  7647 |     |         bytes32 m2;
  7648 |     |         bytes32 m3;
  7649 |     |         bytes32 m4;
  7650 |     |         bytes32 m5;
  7651 |     |         bytes32 m6;
  7652 |     |         /// @solidity memory-safe-assembly
  7653 |     |         assembly {
  7654 |     |             function writeString(pos, w) {
  7655 |     |                 let length := 0
  7656 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7657 |     |                 mstore(pos, length)
  7658 |     |                 let shift := sub(256, shl(3, length))
  7659 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7660 |     |             }
  7661 |     |             m0 := mload(0x00)
  7662 |     |             m1 := mload(0x20)
  7663 |     |             m2 := mload(0x40)
  7664 |     |             m3 := mload(0x60)
  7665 |     |             m4 := mload(0x80)
  7666 |     |             m5 := mload(0xa0)
  7667 |     |             m6 := mload(0xc0)
  7668 |     |             // Selector of `log(bool,string,bool,uint256)`.
  7669 |     |             mstore(0x00, 0x1606a393)
  7670 |     |             mstore(0x20, p0)
  7671 |     |             mstore(0x40, 0x80)
  7672 |     |             mstore(0x60, p2)
  7673 |     |             mstore(0x80, p3)
  7674 |     |             writeString(0xa0, p1)
  7675 |     |         }
  7676 |     |         _sendLogPayload(0x1c, 0xc4);
  7677 |     |         /// @solidity memory-safe-assembly
  7678 |     |         assembly {
  7679 |     |             mstore(0x00, m0)
  7680 |     |             mstore(0x20, m1)
  7681 |     |             mstore(0x40, m2)
  7682 |     |             mstore(0x60, m3)
  7683 |     |             mstore(0x80, m4)
  7684 |     |             mstore(0xa0, m5)
  7685 |     |             mstore(0xc0, m6)
  7686 |     |         }
  7687 |     |     }
  7688 |     | 
  7689 |     |     function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
  7690 |     |         bytes32 m0;
  7691 |     |         bytes32 m1;
  7692 |     |         bytes32 m2;
  7693 |     |         bytes32 m3;
  7694 |     |         bytes32 m4;
  7695 |     |         bytes32 m5;
  7696 |     |         bytes32 m6;
  7697 |     |         bytes32 m7;
  7698 |     |         bytes32 m8;
  7699 |     |         /// @solidity memory-safe-assembly
  7700 |     |         assembly {
  7701 |     |             function writeString(pos, w) {
  7702 |     |                 let length := 0
  7703 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7704 |     |                 mstore(pos, length)
  7705 |     |                 let shift := sub(256, shl(3, length))
  7706 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7707 |     |             }
  7708 |     |             m0 := mload(0x00)
  7709 |     |             m1 := mload(0x20)
  7710 |     |             m2 := mload(0x40)
  7711 |     |             m3 := mload(0x60)
  7712 |     |             m4 := mload(0x80)
  7713 |     |             m5 := mload(0xa0)
  7714 |     |             m6 := mload(0xc0)
  7715 |     |             m7 := mload(0xe0)
  7716 |     |             m8 := mload(0x100)
  7717 |     |             // Selector of `log(bool,string,bool,string)`.
  7718 |     |             mstore(0x00, 0x483d0416)
  7719 |     |             mstore(0x20, p0)
  7720 |     |             mstore(0x40, 0x80)
  7721 |     |             mstore(0x60, p2)
  7722 |     |             mstore(0x80, 0xc0)
  7723 |     |             writeString(0xa0, p1)
  7724 |     |             writeString(0xe0, p3)
  7725 |     |         }
  7726 |     |         _sendLogPayload(0x1c, 0x104);
  7727 |     |         /// @solidity memory-safe-assembly
  7728 |     |         assembly {
  7729 |     |             mstore(0x00, m0)
  7730 |     |             mstore(0x20, m1)
  7731 |     |             mstore(0x40, m2)
  7732 |     |             mstore(0x60, m3)
  7733 |     |             mstore(0x80, m4)
  7734 |     |             mstore(0xa0, m5)
  7735 |     |             mstore(0xc0, m6)
  7736 |     |             mstore(0xe0, m7)
  7737 |     |             mstore(0x100, m8)
  7738 |     |         }
  7739 |     |     }
  7740 |     | 
  7741 |     |     function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {
  7742 |     |         bytes32 m0;
  7743 |     |         bytes32 m1;
  7744 |     |         bytes32 m2;
  7745 |     |         bytes32 m3;
  7746 |     |         bytes32 m4;
  7747 |     |         bytes32 m5;
  7748 |     |         bytes32 m6;
  7749 |     |         /// @solidity memory-safe-assembly
  7750 |     |         assembly {
  7751 |     |             function writeString(pos, w) {
  7752 |     |                 let length := 0
  7753 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7754 |     |                 mstore(pos, length)
  7755 |     |                 let shift := sub(256, shl(3, length))
  7756 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7757 |     |             }
  7758 |     |             m0 := mload(0x00)
  7759 |     |             m1 := mload(0x20)
  7760 |     |             m2 := mload(0x40)
  7761 |     |             m3 := mload(0x60)
  7762 |     |             m4 := mload(0x80)
  7763 |     |             m5 := mload(0xa0)
  7764 |     |             m6 := mload(0xc0)
  7765 |     |             // Selector of `log(bool,string,uint256,address)`.
  7766 |     |             mstore(0x00, 0x1596a1ce)
  7767 |     |             mstore(0x20, p0)
  7768 |     |             mstore(0x40, 0x80)
  7769 |     |             mstore(0x60, p2)
  7770 |     |             mstore(0x80, p3)
  7771 |     |             writeString(0xa0, p1)
  7772 |     |         }
  7773 |     |         _sendLogPayload(0x1c, 0xc4);
  7774 |     |         /// @solidity memory-safe-assembly
  7775 |     |         assembly {
  7776 |     |             mstore(0x00, m0)
  7777 |     |             mstore(0x20, m1)
  7778 |     |             mstore(0x40, m2)
  7779 |     |             mstore(0x60, m3)
  7780 |     |             mstore(0x80, m4)
  7781 |     |             mstore(0xa0, m5)
  7782 |     |             mstore(0xc0, m6)
  7783 |     |         }
  7784 |     |     }
  7785 |     | 
  7786 |     |     function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {
  7787 |     |         bytes32 m0;
  7788 |     |         bytes32 m1;
  7789 |     |         bytes32 m2;
  7790 |     |         bytes32 m3;
  7791 |     |         bytes32 m4;
  7792 |     |         bytes32 m5;
  7793 |     |         bytes32 m6;
  7794 |     |         /// @solidity memory-safe-assembly
  7795 |     |         assembly {
  7796 |     |             function writeString(pos, w) {
  7797 |     |                 let length := 0
  7798 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7799 |     |                 mstore(pos, length)
  7800 |     |                 let shift := sub(256, shl(3, length))
  7801 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7802 |     |             }
  7803 |     |             m0 := mload(0x00)
  7804 |     |             m1 := mload(0x20)
  7805 |     |             m2 := mload(0x40)
  7806 |     |             m3 := mload(0x60)
  7807 |     |             m4 := mload(0x80)
  7808 |     |             m5 := mload(0xa0)
  7809 |     |             m6 := mload(0xc0)
  7810 |     |             // Selector of `log(bool,string,uint256,bool)`.
  7811 |     |             mstore(0x00, 0x6b0e5d53)
  7812 |     |             mstore(0x20, p0)
  7813 |     |             mstore(0x40, 0x80)
  7814 |     |             mstore(0x60, p2)
  7815 |     |             mstore(0x80, p3)
  7816 |     |             writeString(0xa0, p1)
  7817 |     |         }
  7818 |     |         _sendLogPayload(0x1c, 0xc4);
  7819 |     |         /// @solidity memory-safe-assembly
  7820 |     |         assembly {
  7821 |     |             mstore(0x00, m0)
  7822 |     |             mstore(0x20, m1)
  7823 |     |             mstore(0x40, m2)
  7824 |     |             mstore(0x60, m3)
  7825 |     |             mstore(0x80, m4)
  7826 |     |             mstore(0xa0, m5)
  7827 |     |             mstore(0xc0, m6)
  7828 |     |         }
  7829 |     |     }
  7830 |     | 
  7831 |     |     function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
  7832 |     |         bytes32 m0;
  7833 |     |         bytes32 m1;
  7834 |     |         bytes32 m2;
  7835 |     |         bytes32 m3;
  7836 |     |         bytes32 m4;
  7837 |     |         bytes32 m5;
  7838 |     |         bytes32 m6;
  7839 |     |         /// @solidity memory-safe-assembly
  7840 |     |         assembly {
  7841 |     |             function writeString(pos, w) {
  7842 |     |                 let length := 0
  7843 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7844 |     |                 mstore(pos, length)
  7845 |     |                 let shift := sub(256, shl(3, length))
  7846 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7847 |     |             }
  7848 |     |             m0 := mload(0x00)
  7849 |     |             m1 := mload(0x20)
  7850 |     |             m2 := mload(0x40)
  7851 |     |             m3 := mload(0x60)
  7852 |     |             m4 := mload(0x80)
  7853 |     |             m5 := mload(0xa0)
  7854 |     |             m6 := mload(0xc0)
  7855 |     |             // Selector of `log(bool,string,uint256,uint256)`.
  7856 |     |             mstore(0x00, 0x28863fcb)
  7857 |     |             mstore(0x20, p0)
  7858 |     |             mstore(0x40, 0x80)
  7859 |     |             mstore(0x60, p2)
  7860 |     |             mstore(0x80, p3)
  7861 |     |             writeString(0xa0, p1)
  7862 |     |         }
  7863 |     |         _sendLogPayload(0x1c, 0xc4);
  7864 |     |         /// @solidity memory-safe-assembly
  7865 |     |         assembly {
  7866 |     |             mstore(0x00, m0)
  7867 |     |             mstore(0x20, m1)
  7868 |     |             mstore(0x40, m2)
  7869 |     |             mstore(0x60, m3)
  7870 |     |             mstore(0x80, m4)
  7871 |     |             mstore(0xa0, m5)
  7872 |     |             mstore(0xc0, m6)
  7873 |     |         }
  7874 |     |     }
  7875 |     | 
  7876 |     |     function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
  7877 |     |         bytes32 m0;
  7878 |     |         bytes32 m1;
  7879 |     |         bytes32 m2;
  7880 |     |         bytes32 m3;
  7881 |     |         bytes32 m4;
  7882 |     |         bytes32 m5;
  7883 |     |         bytes32 m6;
  7884 |     |         bytes32 m7;
  7885 |     |         bytes32 m8;
  7886 |     |         /// @solidity memory-safe-assembly
  7887 |     |         assembly {
  7888 |     |             function writeString(pos, w) {
  7889 |     |                 let length := 0
  7890 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7891 |     |                 mstore(pos, length)
  7892 |     |                 let shift := sub(256, shl(3, length))
  7893 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7894 |     |             }
  7895 |     |             m0 := mload(0x00)
  7896 |     |             m1 := mload(0x20)
  7897 |     |             m2 := mload(0x40)
  7898 |     |             m3 := mload(0x60)
  7899 |     |             m4 := mload(0x80)
  7900 |     |             m5 := mload(0xa0)
  7901 |     |             m6 := mload(0xc0)
  7902 |     |             m7 := mload(0xe0)
  7903 |     |             m8 := mload(0x100)
  7904 |     |             // Selector of `log(bool,string,uint256,string)`.
  7905 |     |             mstore(0x00, 0x1ad96de6)
  7906 |     |             mstore(0x20, p0)
  7907 |     |             mstore(0x40, 0x80)
  7908 |     |             mstore(0x60, p2)
  7909 |     |             mstore(0x80, 0xc0)
  7910 |     |             writeString(0xa0, p1)
  7911 |     |             writeString(0xe0, p3)
  7912 |     |         }
  7913 |     |         _sendLogPayload(0x1c, 0x104);
  7914 |     |         /// @solidity memory-safe-assembly
  7915 |     |         assembly {
  7916 |     |             mstore(0x00, m0)
  7917 |     |             mstore(0x20, m1)
  7918 |     |             mstore(0x40, m2)
  7919 |     |             mstore(0x60, m3)
  7920 |     |             mstore(0x80, m4)
  7921 |     |             mstore(0xa0, m5)
  7922 |     |             mstore(0xc0, m6)
  7923 |     |             mstore(0xe0, m7)
  7924 |     |             mstore(0x100, m8)
  7925 |     |         }
  7926 |     |     }
  7927 |     | 
  7928 |     |     function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {
  7929 |     |         bytes32 m0;
  7930 |     |         bytes32 m1;
  7931 |     |         bytes32 m2;
  7932 |     |         bytes32 m3;
  7933 |     |         bytes32 m4;
  7934 |     |         bytes32 m5;
  7935 |     |         bytes32 m6;
  7936 |     |         bytes32 m7;
  7937 |     |         bytes32 m8;
  7938 |     |         /// @solidity memory-safe-assembly
  7939 |     |         assembly {
  7940 |     |             function writeString(pos, w) {
  7941 |     |                 let length := 0
  7942 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7943 |     |                 mstore(pos, length)
  7944 |     |                 let shift := sub(256, shl(3, length))
  7945 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7946 |     |             }
  7947 |     |             m0 := mload(0x00)
  7948 |     |             m1 := mload(0x20)
  7949 |     |             m2 := mload(0x40)
  7950 |     |             m3 := mload(0x60)
  7951 |     |             m4 := mload(0x80)
  7952 |     |             m5 := mload(0xa0)
  7953 |     |             m6 := mload(0xc0)
  7954 |     |             m7 := mload(0xe0)
  7955 |     |             m8 := mload(0x100)
  7956 |     |             // Selector of `log(bool,string,string,address)`.
  7957 |     |             mstore(0x00, 0x97d394d8)
  7958 |     |             mstore(0x20, p0)
  7959 |     |             mstore(0x40, 0x80)
  7960 |     |             mstore(0x60, 0xc0)
  7961 |     |             mstore(0x80, p3)
  7962 |     |             writeString(0xa0, p1)
  7963 |     |             writeString(0xe0, p2)
  7964 |     |         }
  7965 |     |         _sendLogPayload(0x1c, 0x104);
  7966 |     |         /// @solidity memory-safe-assembly
  7967 |     |         assembly {
  7968 |     |             mstore(0x00, m0)
  7969 |     |             mstore(0x20, m1)
  7970 |     |             mstore(0x40, m2)
  7971 |     |             mstore(0x60, m3)
  7972 |     |             mstore(0x80, m4)
  7973 |     |             mstore(0xa0, m5)
  7974 |     |             mstore(0xc0, m6)
  7975 |     |             mstore(0xe0, m7)
  7976 |     |             mstore(0x100, m8)
  7977 |     |         }
  7978 |     |     }
  7979 |     | 
  7980 |     |     function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
  7981 |     |         bytes32 m0;
  7982 |     |         bytes32 m1;
  7983 |     |         bytes32 m2;
  7984 |     |         bytes32 m3;
  7985 |     |         bytes32 m4;
  7986 |     |         bytes32 m5;
  7987 |     |         bytes32 m6;
  7988 |     |         bytes32 m7;
  7989 |     |         bytes32 m8;
  7990 |     |         /// @solidity memory-safe-assembly
  7991 |     |         assembly {
  7992 |     |             function writeString(pos, w) {
  7993 |     |                 let length := 0
  7994 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  7995 |     |                 mstore(pos, length)
  7996 |     |                 let shift := sub(256, shl(3, length))
  7997 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  7998 |     |             }
  7999 |     |             m0 := mload(0x00)
  8000 |     |             m1 := mload(0x20)
  8001 |     |             m2 := mload(0x40)
  8002 |     |             m3 := mload(0x60)
  8003 |     |             m4 := mload(0x80)
  8004 |     |             m5 := mload(0xa0)
  8005 |     |             m6 := mload(0xc0)
  8006 |     |             m7 := mload(0xe0)
  8007 |     |             m8 := mload(0x100)
  8008 |     |             // Selector of `log(bool,string,string,bool)`.
  8009 |     |             mstore(0x00, 0x1e4b87e5)
  8010 |     |             mstore(0x20, p0)
  8011 |     |             mstore(0x40, 0x80)
  8012 |     |             mstore(0x60, 0xc0)
  8013 |     |             mstore(0x80, p3)
  8014 |     |             writeString(0xa0, p1)
  8015 |     |             writeString(0xe0, p2)
  8016 |     |         }
  8017 |     |         _sendLogPayload(0x1c, 0x104);
  8018 |     |         /// @solidity memory-safe-assembly
  8019 |     |         assembly {
  8020 |     |             mstore(0x00, m0)
  8021 |     |             mstore(0x20, m1)
  8022 |     |             mstore(0x40, m2)
  8023 |     |             mstore(0x60, m3)
  8024 |     |             mstore(0x80, m4)
  8025 |     |             mstore(0xa0, m5)
  8026 |     |             mstore(0xc0, m6)
  8027 |     |             mstore(0xe0, m7)
  8028 |     |             mstore(0x100, m8)
  8029 |     |         }
  8030 |     |     }
  8031 |     | 
  8032 |     |     function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
  8033 |     |         bytes32 m0;
  8034 |     |         bytes32 m1;
  8035 |     |         bytes32 m2;
  8036 |     |         bytes32 m3;
  8037 |     |         bytes32 m4;
  8038 |     |         bytes32 m5;
  8039 |     |         bytes32 m6;
  8040 |     |         bytes32 m7;
  8041 |     |         bytes32 m8;
  8042 |     |         /// @solidity memory-safe-assembly
  8043 |     |         assembly {
  8044 |     |             function writeString(pos, w) {
  8045 |     |                 let length := 0
  8046 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8047 |     |                 mstore(pos, length)
  8048 |     |                 let shift := sub(256, shl(3, length))
  8049 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8050 |     |             }
  8051 |     |             m0 := mload(0x00)
  8052 |     |             m1 := mload(0x20)
  8053 |     |             m2 := mload(0x40)
  8054 |     |             m3 := mload(0x60)
  8055 |     |             m4 := mload(0x80)
  8056 |     |             m5 := mload(0xa0)
  8057 |     |             m6 := mload(0xc0)
  8058 |     |             m7 := mload(0xe0)
  8059 |     |             m8 := mload(0x100)
  8060 |     |             // Selector of `log(bool,string,string,uint256)`.
  8061 |     |             mstore(0x00, 0x7be0c3eb)
  8062 |     |             mstore(0x20, p0)
  8063 |     |             mstore(0x40, 0x80)
  8064 |     |             mstore(0x60, 0xc0)
  8065 |     |             mstore(0x80, p3)
  8066 |     |             writeString(0xa0, p1)
  8067 |     |             writeString(0xe0, p2)
  8068 |     |         }
  8069 |     |         _sendLogPayload(0x1c, 0x104);
  8070 |     |         /// @solidity memory-safe-assembly
  8071 |     |         assembly {
  8072 |     |             mstore(0x00, m0)
  8073 |     |             mstore(0x20, m1)
  8074 |     |             mstore(0x40, m2)
  8075 |     |             mstore(0x60, m3)
  8076 |     |             mstore(0x80, m4)
  8077 |     |             mstore(0xa0, m5)
  8078 |     |             mstore(0xc0, m6)
  8079 |     |             mstore(0xe0, m7)
  8080 |     |             mstore(0x100, m8)
  8081 |     |         }
  8082 |     |     }
  8083 |     | 
  8084 |     |     function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
  8085 |     |         bytes32 m0;
  8086 |     |         bytes32 m1;
  8087 |     |         bytes32 m2;
  8088 |     |         bytes32 m3;
  8089 |     |         bytes32 m4;
  8090 |     |         bytes32 m5;
  8091 |     |         bytes32 m6;
  8092 |     |         bytes32 m7;
  8093 |     |         bytes32 m8;
  8094 |     |         bytes32 m9;
  8095 |     |         bytes32 m10;
  8096 |     |         /// @solidity memory-safe-assembly
  8097 |     |         assembly {
  8098 |     |             function writeString(pos, w) {
  8099 |     |                 let length := 0
  8100 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8101 |     |                 mstore(pos, length)
  8102 |     |                 let shift := sub(256, shl(3, length))
  8103 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8104 |     |             }
  8105 |     |             m0 := mload(0x00)
  8106 |     |             m1 := mload(0x20)
  8107 |     |             m2 := mload(0x40)
  8108 |     |             m3 := mload(0x60)
  8109 |     |             m4 := mload(0x80)
  8110 |     |             m5 := mload(0xa0)
  8111 |     |             m6 := mload(0xc0)
  8112 |     |             m7 := mload(0xe0)
  8113 |     |             m8 := mload(0x100)
  8114 |     |             m9 := mload(0x120)
  8115 |     |             m10 := mload(0x140)
  8116 |     |             // Selector of `log(bool,string,string,string)`.
  8117 |     |             mstore(0x00, 0x1762e32a)
  8118 |     |             mstore(0x20, p0)
  8119 |     |             mstore(0x40, 0x80)
  8120 |     |             mstore(0x60, 0xc0)
  8121 |     |             mstore(0x80, 0x100)
  8122 |     |             writeString(0xa0, p1)
  8123 |     |             writeString(0xe0, p2)
  8124 |     |             writeString(0x120, p3)
  8125 |     |         }
  8126 |     |         _sendLogPayload(0x1c, 0x144);
  8127 |     |         /// @solidity memory-safe-assembly
  8128 |     |         assembly {
  8129 |     |             mstore(0x00, m0)
  8130 |     |             mstore(0x20, m1)
  8131 |     |             mstore(0x40, m2)
  8132 |     |             mstore(0x60, m3)
  8133 |     |             mstore(0x80, m4)
  8134 |     |             mstore(0xa0, m5)
  8135 |     |             mstore(0xc0, m6)
  8136 |     |             mstore(0xe0, m7)
  8137 |     |             mstore(0x100, m8)
  8138 |     |             mstore(0x120, m9)
  8139 |     |             mstore(0x140, m10)
  8140 |     |         }
  8141 |     |     }
  8142 |     | 
  8143 |     |     function log(uint256 p0, address p1, address p2, address p3) internal pure {
  8144 |     |         bytes32 m0;
  8145 |     |         bytes32 m1;
  8146 |     |         bytes32 m2;
  8147 |     |         bytes32 m3;
  8148 |     |         bytes32 m4;
  8149 |     |         /// @solidity memory-safe-assembly
  8150 |     |         assembly {
  8151 |     |             m0 := mload(0x00)
  8152 |     |             m1 := mload(0x20)
  8153 |     |             m2 := mload(0x40)
  8154 |     |             m3 := mload(0x60)
  8155 |     |             m4 := mload(0x80)
  8156 |     |             // Selector of `log(uint256,address,address,address)`.
  8157 |     |             mstore(0x00, 0x2488b414)
  8158 |     |             mstore(0x20, p0)
  8159 |     |             mstore(0x40, p1)
  8160 |     |             mstore(0x60, p2)
  8161 |     |             mstore(0x80, p3)
  8162 |     |         }
  8163 |     |         _sendLogPayload(0x1c, 0x84);
  8164 |     |         /// @solidity memory-safe-assembly
  8165 |     |         assembly {
  8166 |     |             mstore(0x00, m0)
  8167 |     |             mstore(0x20, m1)
  8168 |     |             mstore(0x40, m2)
  8169 |     |             mstore(0x60, m3)
  8170 |     |             mstore(0x80, m4)
  8171 |     |         }
  8172 |     |     }
  8173 |     | 
  8174 |     |     function log(uint256 p0, address p1, address p2, bool p3) internal pure {
  8175 |     |         bytes32 m0;
  8176 |     |         bytes32 m1;
  8177 |     |         bytes32 m2;
  8178 |     |         bytes32 m3;
  8179 |     |         bytes32 m4;
  8180 |     |         /// @solidity memory-safe-assembly
  8181 |     |         assembly {
  8182 |     |             m0 := mload(0x00)
  8183 |     |             m1 := mload(0x20)
  8184 |     |             m2 := mload(0x40)
  8185 |     |             m3 := mload(0x60)
  8186 |     |             m4 := mload(0x80)
  8187 |     |             // Selector of `log(uint256,address,address,bool)`.
  8188 |     |             mstore(0x00, 0x091ffaf5)
  8189 |     |             mstore(0x20, p0)
  8190 |     |             mstore(0x40, p1)
  8191 |     |             mstore(0x60, p2)
  8192 |     |             mstore(0x80, p3)
  8193 |     |         }
  8194 |     |         _sendLogPayload(0x1c, 0x84);
  8195 |     |         /// @solidity memory-safe-assembly
  8196 |     |         assembly {
  8197 |     |             mstore(0x00, m0)
  8198 |     |             mstore(0x20, m1)
  8199 |     |             mstore(0x40, m2)
  8200 |     |             mstore(0x60, m3)
  8201 |     |             mstore(0x80, m4)
  8202 |     |         }
  8203 |     |     }
  8204 |     | 
  8205 |     |     function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {
  8206 |     |         bytes32 m0;
  8207 |     |         bytes32 m1;
  8208 |     |         bytes32 m2;
  8209 |     |         bytes32 m3;
  8210 |     |         bytes32 m4;
  8211 |     |         /// @solidity memory-safe-assembly
  8212 |     |         assembly {
  8213 |     |             m0 := mload(0x00)
  8214 |     |             m1 := mload(0x20)
  8215 |     |             m2 := mload(0x40)
  8216 |     |             m3 := mload(0x60)
  8217 |     |             m4 := mload(0x80)
  8218 |     |             // Selector of `log(uint256,address,address,uint256)`.
  8219 |     |             mstore(0x00, 0x736efbb6)
  8220 |     |             mstore(0x20, p0)
  8221 |     |             mstore(0x40, p1)
  8222 |     |             mstore(0x60, p2)
  8223 |     |             mstore(0x80, p3)
  8224 |     |         }
  8225 |     |         _sendLogPayload(0x1c, 0x84);
  8226 |     |         /// @solidity memory-safe-assembly
  8227 |     |         assembly {
  8228 |     |             mstore(0x00, m0)
  8229 |     |             mstore(0x20, m1)
  8230 |     |             mstore(0x40, m2)
  8231 |     |             mstore(0x60, m3)
  8232 |     |             mstore(0x80, m4)
  8233 |     |         }
  8234 |     |     }
  8235 |     | 
  8236 |     |     function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {
  8237 |     |         bytes32 m0;
  8238 |     |         bytes32 m1;
  8239 |     |         bytes32 m2;
  8240 |     |         bytes32 m3;
  8241 |     |         bytes32 m4;
  8242 |     |         bytes32 m5;
  8243 |     |         bytes32 m6;
  8244 |     |         /// @solidity memory-safe-assembly
  8245 |     |         assembly {
  8246 |     |             function writeString(pos, w) {
  8247 |     |                 let length := 0
  8248 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8249 |     |                 mstore(pos, length)
  8250 |     |                 let shift := sub(256, shl(3, length))
  8251 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8252 |     |             }
  8253 |     |             m0 := mload(0x00)
  8254 |     |             m1 := mload(0x20)
  8255 |     |             m2 := mload(0x40)
  8256 |     |             m3 := mload(0x60)
  8257 |     |             m4 := mload(0x80)
  8258 |     |             m5 := mload(0xa0)
  8259 |     |             m6 := mload(0xc0)
  8260 |     |             // Selector of `log(uint256,address,address,string)`.
  8261 |     |             mstore(0x00, 0x031c6f73)
  8262 |     |             mstore(0x20, p0)
  8263 |     |             mstore(0x40, p1)
  8264 |     |             mstore(0x60, p2)
  8265 |     |             mstore(0x80, 0x80)
  8266 |     |             writeString(0xa0, p3)
  8267 |     |         }
  8268 |     |         _sendLogPayload(0x1c, 0xc4);
  8269 |     |         /// @solidity memory-safe-assembly
  8270 |     |         assembly {
  8271 |     |             mstore(0x00, m0)
  8272 |     |             mstore(0x20, m1)
  8273 |     |             mstore(0x40, m2)
  8274 |     |             mstore(0x60, m3)
  8275 |     |             mstore(0x80, m4)
  8276 |     |             mstore(0xa0, m5)
  8277 |     |             mstore(0xc0, m6)
  8278 |     |         }
  8279 |     |     }
  8280 |     | 
  8281 |     |     function log(uint256 p0, address p1, bool p2, address p3) internal pure {
  8282 |     |         bytes32 m0;
  8283 |     |         bytes32 m1;
  8284 |     |         bytes32 m2;
  8285 |     |         bytes32 m3;
  8286 |     |         bytes32 m4;
  8287 |     |         /// @solidity memory-safe-assembly
  8288 |     |         assembly {
  8289 |     |             m0 := mload(0x00)
  8290 |     |             m1 := mload(0x20)
  8291 |     |             m2 := mload(0x40)
  8292 |     |             m3 := mload(0x60)
  8293 |     |             m4 := mload(0x80)
  8294 |     |             // Selector of `log(uint256,address,bool,address)`.
  8295 |     |             mstore(0x00, 0xef72c513)
  8296 |     |             mstore(0x20, p0)
  8297 |     |             mstore(0x40, p1)
  8298 |     |             mstore(0x60, p2)
  8299 |     |             mstore(0x80, p3)
  8300 |     |         }
  8301 |     |         _sendLogPayload(0x1c, 0x84);
  8302 |     |         /// @solidity memory-safe-assembly
  8303 |     |         assembly {
  8304 |     |             mstore(0x00, m0)
  8305 |     |             mstore(0x20, m1)
  8306 |     |             mstore(0x40, m2)
  8307 |     |             mstore(0x60, m3)
  8308 |     |             mstore(0x80, m4)
  8309 |     |         }
  8310 |     |     }
  8311 |     | 
  8312 |     |     function log(uint256 p0, address p1, bool p2, bool p3) internal pure {
  8313 |     |         bytes32 m0;
  8314 |     |         bytes32 m1;
  8315 |     |         bytes32 m2;
  8316 |     |         bytes32 m3;
  8317 |     |         bytes32 m4;
  8318 |     |         /// @solidity memory-safe-assembly
  8319 |     |         assembly {
  8320 |     |             m0 := mload(0x00)
  8321 |     |             m1 := mload(0x20)
  8322 |     |             m2 := mload(0x40)
  8323 |     |             m3 := mload(0x60)
  8324 |     |             m4 := mload(0x80)
  8325 |     |             // Selector of `log(uint256,address,bool,bool)`.
  8326 |     |             mstore(0x00, 0xe351140f)
  8327 |     |             mstore(0x20, p0)
  8328 |     |             mstore(0x40, p1)
  8329 |     |             mstore(0x60, p2)
  8330 |     |             mstore(0x80, p3)
  8331 |     |         }
  8332 |     |         _sendLogPayload(0x1c, 0x84);
  8333 |     |         /// @solidity memory-safe-assembly
  8334 |     |         assembly {
  8335 |     |             mstore(0x00, m0)
  8336 |     |             mstore(0x20, m1)
  8337 |     |             mstore(0x40, m2)
  8338 |     |             mstore(0x60, m3)
  8339 |     |             mstore(0x80, m4)
  8340 |     |         }
  8341 |     |     }
  8342 |     | 
  8343 |     |     function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {
  8344 |     |         bytes32 m0;
  8345 |     |         bytes32 m1;
  8346 |     |         bytes32 m2;
  8347 |     |         bytes32 m3;
  8348 |     |         bytes32 m4;
  8349 |     |         /// @solidity memory-safe-assembly
  8350 |     |         assembly {
  8351 |     |             m0 := mload(0x00)
  8352 |     |             m1 := mload(0x20)
  8353 |     |             m2 := mload(0x40)
  8354 |     |             m3 := mload(0x60)
  8355 |     |             m4 := mload(0x80)
  8356 |     |             // Selector of `log(uint256,address,bool,uint256)`.
  8357 |     |             mstore(0x00, 0x5abd992a)
  8358 |     |             mstore(0x20, p0)
  8359 |     |             mstore(0x40, p1)
  8360 |     |             mstore(0x60, p2)
  8361 |     |             mstore(0x80, p3)
  8362 |     |         }
  8363 |     |         _sendLogPayload(0x1c, 0x84);
  8364 |     |         /// @solidity memory-safe-assembly
  8365 |     |         assembly {
  8366 |     |             mstore(0x00, m0)
  8367 |     |             mstore(0x20, m1)
  8368 |     |             mstore(0x40, m2)
  8369 |     |             mstore(0x60, m3)
  8370 |     |             mstore(0x80, m4)
  8371 |     |         }
  8372 |     |     }
  8373 |     | 
  8374 |     |     function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {
  8375 |     |         bytes32 m0;
  8376 |     |         bytes32 m1;
  8377 |     |         bytes32 m2;
  8378 |     |         bytes32 m3;
  8379 |     |         bytes32 m4;
  8380 |     |         bytes32 m5;
  8381 |     |         bytes32 m6;
  8382 |     |         /// @solidity memory-safe-assembly
  8383 |     |         assembly {
  8384 |     |             function writeString(pos, w) {
  8385 |     |                 let length := 0
  8386 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8387 |     |                 mstore(pos, length)
  8388 |     |                 let shift := sub(256, shl(3, length))
  8389 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8390 |     |             }
  8391 |     |             m0 := mload(0x00)
  8392 |     |             m1 := mload(0x20)
  8393 |     |             m2 := mload(0x40)
  8394 |     |             m3 := mload(0x60)
  8395 |     |             m4 := mload(0x80)
  8396 |     |             m5 := mload(0xa0)
  8397 |     |             m6 := mload(0xc0)
  8398 |     |             // Selector of `log(uint256,address,bool,string)`.
  8399 |     |             mstore(0x00, 0x90fb06aa)
  8400 |     |             mstore(0x20, p0)
  8401 |     |             mstore(0x40, p1)
  8402 |     |             mstore(0x60, p2)
  8403 |     |             mstore(0x80, 0x80)
  8404 |     |             writeString(0xa0, p3)
  8405 |     |         }
  8406 |     |         _sendLogPayload(0x1c, 0xc4);
  8407 |     |         /// @solidity memory-safe-assembly
  8408 |     |         assembly {
  8409 |     |             mstore(0x00, m0)
  8410 |     |             mstore(0x20, m1)
  8411 |     |             mstore(0x40, m2)
  8412 |     |             mstore(0x60, m3)
  8413 |     |             mstore(0x80, m4)
  8414 |     |             mstore(0xa0, m5)
  8415 |     |             mstore(0xc0, m6)
  8416 |     |         }
  8417 |     |     }
  8418 |     | 
  8419 |     |     function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {
  8420 |     |         bytes32 m0;
  8421 |     |         bytes32 m1;
  8422 |     |         bytes32 m2;
  8423 |     |         bytes32 m3;
  8424 |     |         bytes32 m4;
  8425 |     |         /// @solidity memory-safe-assembly
  8426 |     |         assembly {
  8427 |     |             m0 := mload(0x00)
  8428 |     |             m1 := mload(0x20)
  8429 |     |             m2 := mload(0x40)
  8430 |     |             m3 := mload(0x60)
  8431 |     |             m4 := mload(0x80)
  8432 |     |             // Selector of `log(uint256,address,uint256,address)`.
  8433 |     |             mstore(0x00, 0x15c127b5)
  8434 |     |             mstore(0x20, p0)
  8435 |     |             mstore(0x40, p1)
  8436 |     |             mstore(0x60, p2)
  8437 |     |             mstore(0x80, p3)
  8438 |     |         }
  8439 |     |         _sendLogPayload(0x1c, 0x84);
  8440 |     |         /// @solidity memory-safe-assembly
  8441 |     |         assembly {
  8442 |     |             mstore(0x00, m0)
  8443 |     |             mstore(0x20, m1)
  8444 |     |             mstore(0x40, m2)
  8445 |     |             mstore(0x60, m3)
  8446 |     |             mstore(0x80, m4)
  8447 |     |         }
  8448 |     |     }
  8449 |     | 
  8450 |     |     function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {
  8451 |     |         bytes32 m0;
  8452 |     |         bytes32 m1;
  8453 |     |         bytes32 m2;
  8454 |     |         bytes32 m3;
  8455 |     |         bytes32 m4;
  8456 |     |         /// @solidity memory-safe-assembly
  8457 |     |         assembly {
  8458 |     |             m0 := mload(0x00)
  8459 |     |             m1 := mload(0x20)
  8460 |     |             m2 := mload(0x40)
  8461 |     |             m3 := mload(0x60)
  8462 |     |             m4 := mload(0x80)
  8463 |     |             // Selector of `log(uint256,address,uint256,bool)`.
  8464 |     |             mstore(0x00, 0x5f743a7c)
  8465 |     |             mstore(0x20, p0)
  8466 |     |             mstore(0x40, p1)
  8467 |     |             mstore(0x60, p2)
  8468 |     |             mstore(0x80, p3)
  8469 |     |         }
  8470 |     |         _sendLogPayload(0x1c, 0x84);
  8471 |     |         /// @solidity memory-safe-assembly
  8472 |     |         assembly {
  8473 |     |             mstore(0x00, m0)
  8474 |     |             mstore(0x20, m1)
  8475 |     |             mstore(0x40, m2)
  8476 |     |             mstore(0x60, m3)
  8477 |     |             mstore(0x80, m4)
  8478 |     |         }
  8479 |     |     }
  8480 |     | 
  8481 |     |     function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {
  8482 |     |         bytes32 m0;
  8483 |     |         bytes32 m1;
  8484 |     |         bytes32 m2;
  8485 |     |         bytes32 m3;
  8486 |     |         bytes32 m4;
  8487 |     |         /// @solidity memory-safe-assembly
  8488 |     |         assembly {
  8489 |     |             m0 := mload(0x00)
  8490 |     |             m1 := mload(0x20)
  8491 |     |             m2 := mload(0x40)
  8492 |     |             m3 := mload(0x60)
  8493 |     |             m4 := mload(0x80)
  8494 |     |             // Selector of `log(uint256,address,uint256,uint256)`.
  8495 |     |             mstore(0x00, 0x0c9cd9c1)
  8496 |     |             mstore(0x20, p0)
  8497 |     |             mstore(0x40, p1)
  8498 |     |             mstore(0x60, p2)
  8499 |     |             mstore(0x80, p3)
  8500 |     |         }
  8501 |     |         _sendLogPayload(0x1c, 0x84);
  8502 |     |         /// @solidity memory-safe-assembly
  8503 |     |         assembly {
  8504 |     |             mstore(0x00, m0)
  8505 |     |             mstore(0x20, m1)
  8506 |     |             mstore(0x40, m2)
  8507 |     |             mstore(0x60, m3)
  8508 |     |             mstore(0x80, m4)
  8509 |     |         }
  8510 |     |     }
  8511 |     | 
  8512 |     |     function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {
  8513 |     |         bytes32 m0;
  8514 |     |         bytes32 m1;
  8515 |     |         bytes32 m2;
  8516 |     |         bytes32 m3;
  8517 |     |         bytes32 m4;
  8518 |     |         bytes32 m5;
  8519 |     |         bytes32 m6;
  8520 |     |         /// @solidity memory-safe-assembly
  8521 |     |         assembly {
  8522 |     |             function writeString(pos, w) {
  8523 |     |                 let length := 0
  8524 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8525 |     |                 mstore(pos, length)
  8526 |     |                 let shift := sub(256, shl(3, length))
  8527 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8528 |     |             }
  8529 |     |             m0 := mload(0x00)
  8530 |     |             m1 := mload(0x20)
  8531 |     |             m2 := mload(0x40)
  8532 |     |             m3 := mload(0x60)
  8533 |     |             m4 := mload(0x80)
  8534 |     |             m5 := mload(0xa0)
  8535 |     |             m6 := mload(0xc0)
  8536 |     |             // Selector of `log(uint256,address,uint256,string)`.
  8537 |     |             mstore(0x00, 0xddb06521)
  8538 |     |             mstore(0x20, p0)
  8539 |     |             mstore(0x40, p1)
  8540 |     |             mstore(0x60, p2)
  8541 |     |             mstore(0x80, 0x80)
  8542 |     |             writeString(0xa0, p3)
  8543 |     |         }
  8544 |     |         _sendLogPayload(0x1c, 0xc4);
  8545 |     |         /// @solidity memory-safe-assembly
  8546 |     |         assembly {
  8547 |     |             mstore(0x00, m0)
  8548 |     |             mstore(0x20, m1)
  8549 |     |             mstore(0x40, m2)
  8550 |     |             mstore(0x60, m3)
  8551 |     |             mstore(0x80, m4)
  8552 |     |             mstore(0xa0, m5)
  8553 |     |             mstore(0xc0, m6)
  8554 |     |         }
  8555 |     |     }
  8556 |     | 
  8557 |     |     function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {
  8558 |     |         bytes32 m0;
  8559 |     |         bytes32 m1;
  8560 |     |         bytes32 m2;
  8561 |     |         bytes32 m3;
  8562 |     |         bytes32 m4;
  8563 |     |         bytes32 m5;
  8564 |     |         bytes32 m6;
  8565 |     |         /// @solidity memory-safe-assembly
  8566 |     |         assembly {
  8567 |     |             function writeString(pos, w) {
  8568 |     |                 let length := 0
  8569 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8570 |     |                 mstore(pos, length)
  8571 |     |                 let shift := sub(256, shl(3, length))
  8572 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8573 |     |             }
  8574 |     |             m0 := mload(0x00)
  8575 |     |             m1 := mload(0x20)
  8576 |     |             m2 := mload(0x40)
  8577 |     |             m3 := mload(0x60)
  8578 |     |             m4 := mload(0x80)
  8579 |     |             m5 := mload(0xa0)
  8580 |     |             m6 := mload(0xc0)
  8581 |     |             // Selector of `log(uint256,address,string,address)`.
  8582 |     |             mstore(0x00, 0x9cba8fff)
  8583 |     |             mstore(0x20, p0)
  8584 |     |             mstore(0x40, p1)
  8585 |     |             mstore(0x60, 0x80)
  8586 |     |             mstore(0x80, p3)
  8587 |     |             writeString(0xa0, p2)
  8588 |     |         }
  8589 |     |         _sendLogPayload(0x1c, 0xc4);
  8590 |     |         /// @solidity memory-safe-assembly
  8591 |     |         assembly {
  8592 |     |             mstore(0x00, m0)
  8593 |     |             mstore(0x20, m1)
  8594 |     |             mstore(0x40, m2)
  8595 |     |             mstore(0x60, m3)
  8596 |     |             mstore(0x80, m4)
  8597 |     |             mstore(0xa0, m5)
  8598 |     |             mstore(0xc0, m6)
  8599 |     |         }
  8600 |     |     }
  8601 |     | 
  8602 |     |     function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {
  8603 |     |         bytes32 m0;
  8604 |     |         bytes32 m1;
  8605 |     |         bytes32 m2;
  8606 |     |         bytes32 m3;
  8607 |     |         bytes32 m4;
  8608 |     |         bytes32 m5;
  8609 |     |         bytes32 m6;
  8610 |     |         /// @solidity memory-safe-assembly
  8611 |     |         assembly {
  8612 |     |             function writeString(pos, w) {
  8613 |     |                 let length := 0
  8614 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8615 |     |                 mstore(pos, length)
  8616 |     |                 let shift := sub(256, shl(3, length))
  8617 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8618 |     |             }
  8619 |     |             m0 := mload(0x00)
  8620 |     |             m1 := mload(0x20)
  8621 |     |             m2 := mload(0x40)
  8622 |     |             m3 := mload(0x60)
  8623 |     |             m4 := mload(0x80)
  8624 |     |             m5 := mload(0xa0)
  8625 |     |             m6 := mload(0xc0)
  8626 |     |             // Selector of `log(uint256,address,string,bool)`.
  8627 |     |             mstore(0x00, 0xcc32ab07)
  8628 |     |             mstore(0x20, p0)
  8629 |     |             mstore(0x40, p1)
  8630 |     |             mstore(0x60, 0x80)
  8631 |     |             mstore(0x80, p3)
  8632 |     |             writeString(0xa0, p2)
  8633 |     |         }
  8634 |     |         _sendLogPayload(0x1c, 0xc4);
  8635 |     |         /// @solidity memory-safe-assembly
  8636 |     |         assembly {
  8637 |     |             mstore(0x00, m0)
  8638 |     |             mstore(0x20, m1)
  8639 |     |             mstore(0x40, m2)
  8640 |     |             mstore(0x60, m3)
  8641 |     |             mstore(0x80, m4)
  8642 |     |             mstore(0xa0, m5)
  8643 |     |             mstore(0xc0, m6)
  8644 |     |         }
  8645 |     |     }
  8646 |     | 
  8647 |     |     function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {
  8648 |     |         bytes32 m0;
  8649 |     |         bytes32 m1;
  8650 |     |         bytes32 m2;
  8651 |     |         bytes32 m3;
  8652 |     |         bytes32 m4;
  8653 |     |         bytes32 m5;
  8654 |     |         bytes32 m6;
  8655 |     |         /// @solidity memory-safe-assembly
  8656 |     |         assembly {
  8657 |     |             function writeString(pos, w) {
  8658 |     |                 let length := 0
  8659 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8660 |     |                 mstore(pos, length)
  8661 |     |                 let shift := sub(256, shl(3, length))
  8662 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8663 |     |             }
  8664 |     |             m0 := mload(0x00)
  8665 |     |             m1 := mload(0x20)
  8666 |     |             m2 := mload(0x40)
  8667 |     |             m3 := mload(0x60)
  8668 |     |             m4 := mload(0x80)
  8669 |     |             m5 := mload(0xa0)
  8670 |     |             m6 := mload(0xc0)
  8671 |     |             // Selector of `log(uint256,address,string,uint256)`.
  8672 |     |             mstore(0x00, 0x46826b5d)
  8673 |     |             mstore(0x20, p0)
  8674 |     |             mstore(0x40, p1)
  8675 |     |             mstore(0x60, 0x80)
  8676 |     |             mstore(0x80, p3)
  8677 |     |             writeString(0xa0, p2)
  8678 |     |         }
  8679 |     |         _sendLogPayload(0x1c, 0xc4);
  8680 |     |         /// @solidity memory-safe-assembly
  8681 |     |         assembly {
  8682 |     |             mstore(0x00, m0)
  8683 |     |             mstore(0x20, m1)
  8684 |     |             mstore(0x40, m2)
  8685 |     |             mstore(0x60, m3)
  8686 |     |             mstore(0x80, m4)
  8687 |     |             mstore(0xa0, m5)
  8688 |     |             mstore(0xc0, m6)
  8689 |     |         }
  8690 |     |     }
  8691 |     | 
  8692 |     |     function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {
  8693 |     |         bytes32 m0;
  8694 |     |         bytes32 m1;
  8695 |     |         bytes32 m2;
  8696 |     |         bytes32 m3;
  8697 |     |         bytes32 m4;
  8698 |     |         bytes32 m5;
  8699 |     |         bytes32 m6;
  8700 |     |         bytes32 m7;
  8701 |     |         bytes32 m8;
  8702 |     |         /// @solidity memory-safe-assembly
  8703 |     |         assembly {
  8704 |     |             function writeString(pos, w) {
  8705 |     |                 let length := 0
  8706 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8707 |     |                 mstore(pos, length)
  8708 |     |                 let shift := sub(256, shl(3, length))
  8709 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8710 |     |             }
  8711 |     |             m0 := mload(0x00)
  8712 |     |             m1 := mload(0x20)
  8713 |     |             m2 := mload(0x40)
  8714 |     |             m3 := mload(0x60)
  8715 |     |             m4 := mload(0x80)
  8716 |     |             m5 := mload(0xa0)
  8717 |     |             m6 := mload(0xc0)
  8718 |     |             m7 := mload(0xe0)
  8719 |     |             m8 := mload(0x100)
  8720 |     |             // Selector of `log(uint256,address,string,string)`.
  8721 |     |             mstore(0x00, 0x3e128ca3)
  8722 |     |             mstore(0x20, p0)
  8723 |     |             mstore(0x40, p1)
  8724 |     |             mstore(0x60, 0x80)
  8725 |     |             mstore(0x80, 0xc0)
  8726 |     |             writeString(0xa0, p2)
  8727 |     |             writeString(0xe0, p3)
  8728 |     |         }
  8729 |     |         _sendLogPayload(0x1c, 0x104);
  8730 |     |         /// @solidity memory-safe-assembly
  8731 |     |         assembly {
  8732 |     |             mstore(0x00, m0)
  8733 |     |             mstore(0x20, m1)
  8734 |     |             mstore(0x40, m2)
  8735 |     |             mstore(0x60, m3)
  8736 |     |             mstore(0x80, m4)
  8737 |     |             mstore(0xa0, m5)
  8738 |     |             mstore(0xc0, m6)
  8739 |     |             mstore(0xe0, m7)
  8740 |     |             mstore(0x100, m8)
  8741 |     |         }
  8742 |     |     }
  8743 |     | 
  8744 |     |     function log(uint256 p0, bool p1, address p2, address p3) internal pure {
  8745 |     |         bytes32 m0;
  8746 |     |         bytes32 m1;
  8747 |     |         bytes32 m2;
  8748 |     |         bytes32 m3;
  8749 |     |         bytes32 m4;
  8750 |     |         /// @solidity memory-safe-assembly
  8751 |     |         assembly {
  8752 |     |             m0 := mload(0x00)
  8753 |     |             m1 := mload(0x20)
  8754 |     |             m2 := mload(0x40)
  8755 |     |             m3 := mload(0x60)
  8756 |     |             m4 := mload(0x80)
  8757 |     |             // Selector of `log(uint256,bool,address,address)`.
  8758 |     |             mstore(0x00, 0xa1ef4cbb)
  8759 |     |             mstore(0x20, p0)
  8760 |     |             mstore(0x40, p1)
  8761 |     |             mstore(0x60, p2)
  8762 |     |             mstore(0x80, p3)
  8763 |     |         }
  8764 |     |         _sendLogPayload(0x1c, 0x84);
  8765 |     |         /// @solidity memory-safe-assembly
  8766 |     |         assembly {
  8767 |     |             mstore(0x00, m0)
  8768 |     |             mstore(0x20, m1)
  8769 |     |             mstore(0x40, m2)
  8770 |     |             mstore(0x60, m3)
  8771 |     |             mstore(0x80, m4)
  8772 |     |         }
  8773 |     |     }
  8774 |     | 
  8775 |     |     function log(uint256 p0, bool p1, address p2, bool p3) internal pure {
  8776 |     |         bytes32 m0;
  8777 |     |         bytes32 m1;
  8778 |     |         bytes32 m2;
  8779 |     |         bytes32 m3;
  8780 |     |         bytes32 m4;
  8781 |     |         /// @solidity memory-safe-assembly
  8782 |     |         assembly {
  8783 |     |             m0 := mload(0x00)
  8784 |     |             m1 := mload(0x20)
  8785 |     |             m2 := mload(0x40)
  8786 |     |             m3 := mload(0x60)
  8787 |     |             m4 := mload(0x80)
  8788 |     |             // Selector of `log(uint256,bool,address,bool)`.
  8789 |     |             mstore(0x00, 0x454d54a5)
  8790 |     |             mstore(0x20, p0)
  8791 |     |             mstore(0x40, p1)
  8792 |     |             mstore(0x60, p2)
  8793 |     |             mstore(0x80, p3)
  8794 |     |         }
  8795 |     |         _sendLogPayload(0x1c, 0x84);
  8796 |     |         /// @solidity memory-safe-assembly
  8797 |     |         assembly {
  8798 |     |             mstore(0x00, m0)
  8799 |     |             mstore(0x20, m1)
  8800 |     |             mstore(0x40, m2)
  8801 |     |             mstore(0x60, m3)
  8802 |     |             mstore(0x80, m4)
  8803 |     |         }
  8804 |     |     }
  8805 |     | 
  8806 |     |     function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {
  8807 |     |         bytes32 m0;
  8808 |     |         bytes32 m1;
  8809 |     |         bytes32 m2;
  8810 |     |         bytes32 m3;
  8811 |     |         bytes32 m4;
  8812 |     |         /// @solidity memory-safe-assembly
  8813 |     |         assembly {
  8814 |     |             m0 := mload(0x00)
  8815 |     |             m1 := mload(0x20)
  8816 |     |             m2 := mload(0x40)
  8817 |     |             m3 := mload(0x60)
  8818 |     |             m4 := mload(0x80)
  8819 |     |             // Selector of `log(uint256,bool,address,uint256)`.
  8820 |     |             mstore(0x00, 0x078287f5)
  8821 |     |             mstore(0x20, p0)
  8822 |     |             mstore(0x40, p1)
  8823 |     |             mstore(0x60, p2)
  8824 |     |             mstore(0x80, p3)
  8825 |     |         }
  8826 |     |         _sendLogPayload(0x1c, 0x84);
  8827 |     |         /// @solidity memory-safe-assembly
  8828 |     |         assembly {
  8829 |     |             mstore(0x00, m0)
  8830 |     |             mstore(0x20, m1)
  8831 |     |             mstore(0x40, m2)
  8832 |     |             mstore(0x60, m3)
  8833 |     |             mstore(0x80, m4)
  8834 |     |         }
  8835 |     |     }
  8836 |     | 
  8837 |     |     function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {
  8838 |     |         bytes32 m0;
  8839 |     |         bytes32 m1;
  8840 |     |         bytes32 m2;
  8841 |     |         bytes32 m3;
  8842 |     |         bytes32 m4;
  8843 |     |         bytes32 m5;
  8844 |     |         bytes32 m6;
  8845 |     |         /// @solidity memory-safe-assembly
  8846 |     |         assembly {
  8847 |     |             function writeString(pos, w) {
  8848 |     |                 let length := 0
  8849 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8850 |     |                 mstore(pos, length)
  8851 |     |                 let shift := sub(256, shl(3, length))
  8852 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8853 |     |             }
  8854 |     |             m0 := mload(0x00)
  8855 |     |             m1 := mload(0x20)
  8856 |     |             m2 := mload(0x40)
  8857 |     |             m3 := mload(0x60)
  8858 |     |             m4 := mload(0x80)
  8859 |     |             m5 := mload(0xa0)
  8860 |     |             m6 := mload(0xc0)
  8861 |     |             // Selector of `log(uint256,bool,address,string)`.
  8862 |     |             mstore(0x00, 0xade052c7)
  8863 |     |             mstore(0x20, p0)
  8864 |     |             mstore(0x40, p1)
  8865 |     |             mstore(0x60, p2)
  8866 |     |             mstore(0x80, 0x80)
  8867 |     |             writeString(0xa0, p3)
  8868 |     |         }
  8869 |     |         _sendLogPayload(0x1c, 0xc4);
  8870 |     |         /// @solidity memory-safe-assembly
  8871 |     |         assembly {
  8872 |     |             mstore(0x00, m0)
  8873 |     |             mstore(0x20, m1)
  8874 |     |             mstore(0x40, m2)
  8875 |     |             mstore(0x60, m3)
  8876 |     |             mstore(0x80, m4)
  8877 |     |             mstore(0xa0, m5)
  8878 |     |             mstore(0xc0, m6)
  8879 |     |         }
  8880 |     |     }
  8881 |     | 
  8882 |     |     function log(uint256 p0, bool p1, bool p2, address p3) internal pure {
  8883 |     |         bytes32 m0;
  8884 |     |         bytes32 m1;
  8885 |     |         bytes32 m2;
  8886 |     |         bytes32 m3;
  8887 |     |         bytes32 m4;
  8888 |     |         /// @solidity memory-safe-assembly
  8889 |     |         assembly {
  8890 |     |             m0 := mload(0x00)
  8891 |     |             m1 := mload(0x20)
  8892 |     |             m2 := mload(0x40)
  8893 |     |             m3 := mload(0x60)
  8894 |     |             m4 := mload(0x80)
  8895 |     |             // Selector of `log(uint256,bool,bool,address)`.
  8896 |     |             mstore(0x00, 0x69640b59)
  8897 |     |             mstore(0x20, p0)
  8898 |     |             mstore(0x40, p1)
  8899 |     |             mstore(0x60, p2)
  8900 |     |             mstore(0x80, p3)
  8901 |     |         }
  8902 |     |         _sendLogPayload(0x1c, 0x84);
  8903 |     |         /// @solidity memory-safe-assembly
  8904 |     |         assembly {
  8905 |     |             mstore(0x00, m0)
  8906 |     |             mstore(0x20, m1)
  8907 |     |             mstore(0x40, m2)
  8908 |     |             mstore(0x60, m3)
  8909 |     |             mstore(0x80, m4)
  8910 |     |         }
  8911 |     |     }
  8912 |     | 
  8913 |     |     function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {
  8914 |     |         bytes32 m0;
  8915 |     |         bytes32 m1;
  8916 |     |         bytes32 m2;
  8917 |     |         bytes32 m3;
  8918 |     |         bytes32 m4;
  8919 |     |         /// @solidity memory-safe-assembly
  8920 |     |         assembly {
  8921 |     |             m0 := mload(0x00)
  8922 |     |             m1 := mload(0x20)
  8923 |     |             m2 := mload(0x40)
  8924 |     |             m3 := mload(0x60)
  8925 |     |             m4 := mload(0x80)
  8926 |     |             // Selector of `log(uint256,bool,bool,bool)`.
  8927 |     |             mstore(0x00, 0xb6f577a1)
  8928 |     |             mstore(0x20, p0)
  8929 |     |             mstore(0x40, p1)
  8930 |     |             mstore(0x60, p2)
  8931 |     |             mstore(0x80, p3)
  8932 |     |         }
  8933 |     |         _sendLogPayload(0x1c, 0x84);
  8934 |     |         /// @solidity memory-safe-assembly
  8935 |     |         assembly {
  8936 |     |             mstore(0x00, m0)
  8937 |     |             mstore(0x20, m1)
  8938 |     |             mstore(0x40, m2)
  8939 |     |             mstore(0x60, m3)
  8940 |     |             mstore(0x80, m4)
  8941 |     |         }
  8942 |     |     }
  8943 |     | 
  8944 |     |     function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {
  8945 |     |         bytes32 m0;
  8946 |     |         bytes32 m1;
  8947 |     |         bytes32 m2;
  8948 |     |         bytes32 m3;
  8949 |     |         bytes32 m4;
  8950 |     |         /// @solidity memory-safe-assembly
  8951 |     |         assembly {
  8952 |     |             m0 := mload(0x00)
  8953 |     |             m1 := mload(0x20)
  8954 |     |             m2 := mload(0x40)
  8955 |     |             m3 := mload(0x60)
  8956 |     |             m4 := mload(0x80)
  8957 |     |             // Selector of `log(uint256,bool,bool,uint256)`.
  8958 |     |             mstore(0x00, 0x7464ce23)
  8959 |     |             mstore(0x20, p0)
  8960 |     |             mstore(0x40, p1)
  8961 |     |             mstore(0x60, p2)
  8962 |     |             mstore(0x80, p3)
  8963 |     |         }
  8964 |     |         _sendLogPayload(0x1c, 0x84);
  8965 |     |         /// @solidity memory-safe-assembly
  8966 |     |         assembly {
  8967 |     |             mstore(0x00, m0)
  8968 |     |             mstore(0x20, m1)
  8969 |     |             mstore(0x40, m2)
  8970 |     |             mstore(0x60, m3)
  8971 |     |             mstore(0x80, m4)
  8972 |     |         }
  8973 |     |     }
  8974 |     | 
  8975 |     |     function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {
  8976 |     |         bytes32 m0;
  8977 |     |         bytes32 m1;
  8978 |     |         bytes32 m2;
  8979 |     |         bytes32 m3;
  8980 |     |         bytes32 m4;
  8981 |     |         bytes32 m5;
  8982 |     |         bytes32 m6;
  8983 |     |         /// @solidity memory-safe-assembly
  8984 |     |         assembly {
  8985 |     |             function writeString(pos, w) {
  8986 |     |                 let length := 0
  8987 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  8988 |     |                 mstore(pos, length)
  8989 |     |                 let shift := sub(256, shl(3, length))
  8990 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  8991 |     |             }
  8992 |     |             m0 := mload(0x00)
  8993 |     |             m1 := mload(0x20)
  8994 |     |             m2 := mload(0x40)
  8995 |     |             m3 := mload(0x60)
  8996 |     |             m4 := mload(0x80)
  8997 |     |             m5 := mload(0xa0)
  8998 |     |             m6 := mload(0xc0)
  8999 |     |             // Selector of `log(uint256,bool,bool,string)`.
  9000 |     |             mstore(0x00, 0xdddb9561)
  9001 |     |             mstore(0x20, p0)
  9002 |     |             mstore(0x40, p1)
  9003 |     |             mstore(0x60, p2)
  9004 |     |             mstore(0x80, 0x80)
  9005 |     |             writeString(0xa0, p3)
  9006 |     |         }
  9007 |     |         _sendLogPayload(0x1c, 0xc4);
  9008 |     |         /// @solidity memory-safe-assembly
  9009 |     |         assembly {
  9010 |     |             mstore(0x00, m0)
  9011 |     |             mstore(0x20, m1)
  9012 |     |             mstore(0x40, m2)
  9013 |     |             mstore(0x60, m3)
  9014 |     |             mstore(0x80, m4)
  9015 |     |             mstore(0xa0, m5)
  9016 |     |             mstore(0xc0, m6)
  9017 |     |         }
  9018 |     |     }
  9019 |     | 
  9020 |     |     function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {
  9021 |     |         bytes32 m0;
  9022 |     |         bytes32 m1;
  9023 |     |         bytes32 m2;
  9024 |     |         bytes32 m3;
  9025 |     |         bytes32 m4;
  9026 |     |         /// @solidity memory-safe-assembly
  9027 |     |         assembly {
  9028 |     |             m0 := mload(0x00)
  9029 |     |             m1 := mload(0x20)
  9030 |     |             m2 := mload(0x40)
  9031 |     |             m3 := mload(0x60)
  9032 |     |             m4 := mload(0x80)
  9033 |     |             // Selector of `log(uint256,bool,uint256,address)`.
  9034 |     |             mstore(0x00, 0x88cb6041)
  9035 |     |             mstore(0x20, p0)
  9036 |     |             mstore(0x40, p1)
  9037 |     |             mstore(0x60, p2)
  9038 |     |             mstore(0x80, p3)
  9039 |     |         }
  9040 |     |         _sendLogPayload(0x1c, 0x84);
  9041 |     |         /// @solidity memory-safe-assembly
  9042 |     |         assembly {
  9043 |     |             mstore(0x00, m0)
  9044 |     |             mstore(0x20, m1)
  9045 |     |             mstore(0x40, m2)
  9046 |     |             mstore(0x60, m3)
  9047 |     |             mstore(0x80, m4)
  9048 |     |         }
  9049 |     |     }
  9050 |     | 
  9051 |     |     function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {
  9052 |     |         bytes32 m0;
  9053 |     |         bytes32 m1;
  9054 |     |         bytes32 m2;
  9055 |     |         bytes32 m3;
  9056 |     |         bytes32 m4;
  9057 |     |         /// @solidity memory-safe-assembly
  9058 |     |         assembly {
  9059 |     |             m0 := mload(0x00)
  9060 |     |             m1 := mload(0x20)
  9061 |     |             m2 := mload(0x40)
  9062 |     |             m3 := mload(0x60)
  9063 |     |             m4 := mload(0x80)
  9064 |     |             // Selector of `log(uint256,bool,uint256,bool)`.
  9065 |     |             mstore(0x00, 0x91a02e2a)
  9066 |     |             mstore(0x20, p0)
  9067 |     |             mstore(0x40, p1)
  9068 |     |             mstore(0x60, p2)
  9069 |     |             mstore(0x80, p3)
  9070 |     |         }
  9071 |     |         _sendLogPayload(0x1c, 0x84);
  9072 |     |         /// @solidity memory-safe-assembly
  9073 |     |         assembly {
  9074 |     |             mstore(0x00, m0)
  9075 |     |             mstore(0x20, m1)
  9076 |     |             mstore(0x40, m2)
  9077 |     |             mstore(0x60, m3)
  9078 |     |             mstore(0x80, m4)
  9079 |     |         }
  9080 |     |     }
  9081 |     | 
  9082 |     |     function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {
  9083 |     |         bytes32 m0;
  9084 |     |         bytes32 m1;
  9085 |     |         bytes32 m2;
  9086 |     |         bytes32 m3;
  9087 |     |         bytes32 m4;
  9088 |     |         /// @solidity memory-safe-assembly
  9089 |     |         assembly {
  9090 |     |             m0 := mload(0x00)
  9091 |     |             m1 := mload(0x20)
  9092 |     |             m2 := mload(0x40)
  9093 |     |             m3 := mload(0x60)
  9094 |     |             m4 := mload(0x80)
  9095 |     |             // Selector of `log(uint256,bool,uint256,uint256)`.
  9096 |     |             mstore(0x00, 0xc6acc7a8)
  9097 |     |             mstore(0x20, p0)
  9098 |     |             mstore(0x40, p1)
  9099 |     |             mstore(0x60, p2)
  9100 |     |             mstore(0x80, p3)
  9101 |     |         }
  9102 |     |         _sendLogPayload(0x1c, 0x84);
  9103 |     |         /// @solidity memory-safe-assembly
  9104 |     |         assembly {
  9105 |     |             mstore(0x00, m0)
  9106 |     |             mstore(0x20, m1)
  9107 |     |             mstore(0x40, m2)
  9108 |     |             mstore(0x60, m3)
  9109 |     |             mstore(0x80, m4)
  9110 |     |         }
  9111 |     |     }
  9112 |     | 
  9113 |     |     function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {
  9114 |     |         bytes32 m0;
  9115 |     |         bytes32 m1;
  9116 |     |         bytes32 m2;
  9117 |     |         bytes32 m3;
  9118 |     |         bytes32 m4;
  9119 |     |         bytes32 m5;
  9120 |     |         bytes32 m6;
  9121 |     |         /// @solidity memory-safe-assembly
  9122 |     |         assembly {
  9123 |     |             function writeString(pos, w) {
  9124 |     |                 let length := 0
  9125 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9126 |     |                 mstore(pos, length)
  9127 |     |                 let shift := sub(256, shl(3, length))
  9128 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9129 |     |             }
  9130 |     |             m0 := mload(0x00)
  9131 |     |             m1 := mload(0x20)
  9132 |     |             m2 := mload(0x40)
  9133 |     |             m3 := mload(0x60)
  9134 |     |             m4 := mload(0x80)
  9135 |     |             m5 := mload(0xa0)
  9136 |     |             m6 := mload(0xc0)
  9137 |     |             // Selector of `log(uint256,bool,uint256,string)`.
  9138 |     |             mstore(0x00, 0xde03e774)
  9139 |     |             mstore(0x20, p0)
  9140 |     |             mstore(0x40, p1)
  9141 |     |             mstore(0x60, p2)
  9142 |     |             mstore(0x80, 0x80)
  9143 |     |             writeString(0xa0, p3)
  9144 |     |         }
  9145 |     |         _sendLogPayload(0x1c, 0xc4);
  9146 |     |         /// @solidity memory-safe-assembly
  9147 |     |         assembly {
  9148 |     |             mstore(0x00, m0)
  9149 |     |             mstore(0x20, m1)
  9150 |     |             mstore(0x40, m2)
  9151 |     |             mstore(0x60, m3)
  9152 |     |             mstore(0x80, m4)
  9153 |     |             mstore(0xa0, m5)
  9154 |     |             mstore(0xc0, m6)
  9155 |     |         }
  9156 |     |     }
  9157 |     | 
  9158 |     |     function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {
  9159 |     |         bytes32 m0;
  9160 |     |         bytes32 m1;
  9161 |     |         bytes32 m2;
  9162 |     |         bytes32 m3;
  9163 |     |         bytes32 m4;
  9164 |     |         bytes32 m5;
  9165 |     |         bytes32 m6;
  9166 |     |         /// @solidity memory-safe-assembly
  9167 |     |         assembly {
  9168 |     |             function writeString(pos, w) {
  9169 |     |                 let length := 0
  9170 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9171 |     |                 mstore(pos, length)
  9172 |     |                 let shift := sub(256, shl(3, length))
  9173 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9174 |     |             }
  9175 |     |             m0 := mload(0x00)
  9176 |     |             m1 := mload(0x20)
  9177 |     |             m2 := mload(0x40)
  9178 |     |             m3 := mload(0x60)
  9179 |     |             m4 := mload(0x80)
  9180 |     |             m5 := mload(0xa0)
  9181 |     |             m6 := mload(0xc0)
  9182 |     |             // Selector of `log(uint256,bool,string,address)`.
  9183 |     |             mstore(0x00, 0xef529018)
  9184 |     |             mstore(0x20, p0)
  9185 |     |             mstore(0x40, p1)
  9186 |     |             mstore(0x60, 0x80)
  9187 |     |             mstore(0x80, p3)
  9188 |     |             writeString(0xa0, p2)
  9189 |     |         }
  9190 |     |         _sendLogPayload(0x1c, 0xc4);
  9191 |     |         /// @solidity memory-safe-assembly
  9192 |     |         assembly {
  9193 |     |             mstore(0x00, m0)
  9194 |     |             mstore(0x20, m1)
  9195 |     |             mstore(0x40, m2)
  9196 |     |             mstore(0x60, m3)
  9197 |     |             mstore(0x80, m4)
  9198 |     |             mstore(0xa0, m5)
  9199 |     |             mstore(0xc0, m6)
  9200 |     |         }
  9201 |     |     }
  9202 |     | 
  9203 |     |     function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {
  9204 |     |         bytes32 m0;
  9205 |     |         bytes32 m1;
  9206 |     |         bytes32 m2;
  9207 |     |         bytes32 m3;
  9208 |     |         bytes32 m4;
  9209 |     |         bytes32 m5;
  9210 |     |         bytes32 m6;
  9211 |     |         /// @solidity memory-safe-assembly
  9212 |     |         assembly {
  9213 |     |             function writeString(pos, w) {
  9214 |     |                 let length := 0
  9215 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9216 |     |                 mstore(pos, length)
  9217 |     |                 let shift := sub(256, shl(3, length))
  9218 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9219 |     |             }
  9220 |     |             m0 := mload(0x00)
  9221 |     |             m1 := mload(0x20)
  9222 |     |             m2 := mload(0x40)
  9223 |     |             m3 := mload(0x60)
  9224 |     |             m4 := mload(0x80)
  9225 |     |             m5 := mload(0xa0)
  9226 |     |             m6 := mload(0xc0)
  9227 |     |             // Selector of `log(uint256,bool,string,bool)`.
  9228 |     |             mstore(0x00, 0xeb928d7f)
  9229 |     |             mstore(0x20, p0)
  9230 |     |             mstore(0x40, p1)
  9231 |     |             mstore(0x60, 0x80)
  9232 |     |             mstore(0x80, p3)
  9233 |     |             writeString(0xa0, p2)
  9234 |     |         }
  9235 |     |         _sendLogPayload(0x1c, 0xc4);
  9236 |     |         /// @solidity memory-safe-assembly
  9237 |     |         assembly {
  9238 |     |             mstore(0x00, m0)
  9239 |     |             mstore(0x20, m1)
  9240 |     |             mstore(0x40, m2)
  9241 |     |             mstore(0x60, m3)
  9242 |     |             mstore(0x80, m4)
  9243 |     |             mstore(0xa0, m5)
  9244 |     |             mstore(0xc0, m6)
  9245 |     |         }
  9246 |     |     }
  9247 |     | 
  9248 |     |     function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {
  9249 |     |         bytes32 m0;
  9250 |     |         bytes32 m1;
  9251 |     |         bytes32 m2;
  9252 |     |         bytes32 m3;
  9253 |     |         bytes32 m4;
  9254 |     |         bytes32 m5;
  9255 |     |         bytes32 m6;
  9256 |     |         /// @solidity memory-safe-assembly
  9257 |     |         assembly {
  9258 |     |             function writeString(pos, w) {
  9259 |     |                 let length := 0
  9260 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9261 |     |                 mstore(pos, length)
  9262 |     |                 let shift := sub(256, shl(3, length))
  9263 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9264 |     |             }
  9265 |     |             m0 := mload(0x00)
  9266 |     |             m1 := mload(0x20)
  9267 |     |             m2 := mload(0x40)
  9268 |     |             m3 := mload(0x60)
  9269 |     |             m4 := mload(0x80)
  9270 |     |             m5 := mload(0xa0)
  9271 |     |             m6 := mload(0xc0)
  9272 |     |             // Selector of `log(uint256,bool,string,uint256)`.
  9273 |     |             mstore(0x00, 0x2c1d0746)
  9274 |     |             mstore(0x20, p0)
  9275 |     |             mstore(0x40, p1)
  9276 |     |             mstore(0x60, 0x80)
  9277 |     |             mstore(0x80, p3)
  9278 |     |             writeString(0xa0, p2)
  9279 |     |         }
  9280 |     |         _sendLogPayload(0x1c, 0xc4);
  9281 |     |         /// @solidity memory-safe-assembly
  9282 |     |         assembly {
  9283 |     |             mstore(0x00, m0)
  9284 |     |             mstore(0x20, m1)
  9285 |     |             mstore(0x40, m2)
  9286 |     |             mstore(0x60, m3)
  9287 |     |             mstore(0x80, m4)
  9288 |     |             mstore(0xa0, m5)
  9289 |     |             mstore(0xc0, m6)
  9290 |     |         }
  9291 |     |     }
  9292 |     | 
  9293 |     |     function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
  9294 |     |         bytes32 m0;
  9295 |     |         bytes32 m1;
  9296 |     |         bytes32 m2;
  9297 |     |         bytes32 m3;
  9298 |     |         bytes32 m4;
  9299 |     |         bytes32 m5;
  9300 |     |         bytes32 m6;
  9301 |     |         bytes32 m7;
  9302 |     |         bytes32 m8;
  9303 |     |         /// @solidity memory-safe-assembly
  9304 |     |         assembly {
  9305 |     |             function writeString(pos, w) {
  9306 |     |                 let length := 0
  9307 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9308 |     |                 mstore(pos, length)
  9309 |     |                 let shift := sub(256, shl(3, length))
  9310 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9311 |     |             }
  9312 |     |             m0 := mload(0x00)
  9313 |     |             m1 := mload(0x20)
  9314 |     |             m2 := mload(0x40)
  9315 |     |             m3 := mload(0x60)
  9316 |     |             m4 := mload(0x80)
  9317 |     |             m5 := mload(0xa0)
  9318 |     |             m6 := mload(0xc0)
  9319 |     |             m7 := mload(0xe0)
  9320 |     |             m8 := mload(0x100)
  9321 |     |             // Selector of `log(uint256,bool,string,string)`.
  9322 |     |             mstore(0x00, 0x68c8b8bd)
  9323 |     |             mstore(0x20, p0)
  9324 |     |             mstore(0x40, p1)
  9325 |     |             mstore(0x60, 0x80)
  9326 |     |             mstore(0x80, 0xc0)
  9327 |     |             writeString(0xa0, p2)
  9328 |     |             writeString(0xe0, p3)
  9329 |     |         }
  9330 |     |         _sendLogPayload(0x1c, 0x104);
  9331 |     |         /// @solidity memory-safe-assembly
  9332 |     |         assembly {
  9333 |     |             mstore(0x00, m0)
  9334 |     |             mstore(0x20, m1)
  9335 |     |             mstore(0x40, m2)
  9336 |     |             mstore(0x60, m3)
  9337 |     |             mstore(0x80, m4)
  9338 |     |             mstore(0xa0, m5)
  9339 |     |             mstore(0xc0, m6)
  9340 |     |             mstore(0xe0, m7)
  9341 |     |             mstore(0x100, m8)
  9342 |     |         }
  9343 |     |     }
  9344 |     | 
  9345 |     |     function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {
  9346 |     |         bytes32 m0;
  9347 |     |         bytes32 m1;
  9348 |     |         bytes32 m2;
  9349 |     |         bytes32 m3;
  9350 |     |         bytes32 m4;
  9351 |     |         /// @solidity memory-safe-assembly
  9352 |     |         assembly {
  9353 |     |             m0 := mload(0x00)
  9354 |     |             m1 := mload(0x20)
  9355 |     |             m2 := mload(0x40)
  9356 |     |             m3 := mload(0x60)
  9357 |     |             m4 := mload(0x80)
  9358 |     |             // Selector of `log(uint256,uint256,address,address)`.
  9359 |     |             mstore(0x00, 0x56a5d1b1)
  9360 |     |             mstore(0x20, p0)
  9361 |     |             mstore(0x40, p1)
  9362 |     |             mstore(0x60, p2)
  9363 |     |             mstore(0x80, p3)
  9364 |     |         }
  9365 |     |         _sendLogPayload(0x1c, 0x84);
  9366 |     |         /// @solidity memory-safe-assembly
  9367 |     |         assembly {
  9368 |     |             mstore(0x00, m0)
  9369 |     |             mstore(0x20, m1)
  9370 |     |             mstore(0x40, m2)
  9371 |     |             mstore(0x60, m3)
  9372 |     |             mstore(0x80, m4)
  9373 |     |         }
  9374 |     |     }
  9375 |     | 
  9376 |     |     function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {
  9377 |     |         bytes32 m0;
  9378 |     |         bytes32 m1;
  9379 |     |         bytes32 m2;
  9380 |     |         bytes32 m3;
  9381 |     |         bytes32 m4;
  9382 |     |         /// @solidity memory-safe-assembly
  9383 |     |         assembly {
  9384 |     |             m0 := mload(0x00)
  9385 |     |             m1 := mload(0x20)
  9386 |     |             m2 := mload(0x40)
  9387 |     |             m3 := mload(0x60)
  9388 |     |             m4 := mload(0x80)
  9389 |     |             // Selector of `log(uint256,uint256,address,bool)`.
  9390 |     |             mstore(0x00, 0x15cac476)
  9391 |     |             mstore(0x20, p0)
  9392 |     |             mstore(0x40, p1)
  9393 |     |             mstore(0x60, p2)
  9394 |     |             mstore(0x80, p3)
  9395 |     |         }
  9396 |     |         _sendLogPayload(0x1c, 0x84);
  9397 |     |         /// @solidity memory-safe-assembly
  9398 |     |         assembly {
  9399 |     |             mstore(0x00, m0)
  9400 |     |             mstore(0x20, m1)
  9401 |     |             mstore(0x40, m2)
  9402 |     |             mstore(0x60, m3)
  9403 |     |             mstore(0x80, m4)
  9404 |     |         }
  9405 |     |     }
  9406 |     | 
  9407 |     |     function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {
  9408 |     |         bytes32 m0;
  9409 |     |         bytes32 m1;
  9410 |     |         bytes32 m2;
  9411 |     |         bytes32 m3;
  9412 |     |         bytes32 m4;
  9413 |     |         /// @solidity memory-safe-assembly
  9414 |     |         assembly {
  9415 |     |             m0 := mload(0x00)
  9416 |     |             m1 := mload(0x20)
  9417 |     |             m2 := mload(0x40)
  9418 |     |             m3 := mload(0x60)
  9419 |     |             m4 := mload(0x80)
  9420 |     |             // Selector of `log(uint256,uint256,address,uint256)`.
  9421 |     |             mstore(0x00, 0x88f6e4b2)
  9422 |     |             mstore(0x20, p0)
  9423 |     |             mstore(0x40, p1)
  9424 |     |             mstore(0x60, p2)
  9425 |     |             mstore(0x80, p3)
  9426 |     |         }
  9427 |     |         _sendLogPayload(0x1c, 0x84);
  9428 |     |         /// @solidity memory-safe-assembly
  9429 |     |         assembly {
  9430 |     |             mstore(0x00, m0)
  9431 |     |             mstore(0x20, m1)
  9432 |     |             mstore(0x40, m2)
  9433 |     |             mstore(0x60, m3)
  9434 |     |             mstore(0x80, m4)
  9435 |     |         }
  9436 |     |     }
  9437 |     | 
  9438 |     |     function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {
  9439 |     |         bytes32 m0;
  9440 |     |         bytes32 m1;
  9441 |     |         bytes32 m2;
  9442 |     |         bytes32 m3;
  9443 |     |         bytes32 m4;
  9444 |     |         bytes32 m5;
  9445 |     |         bytes32 m6;
  9446 |     |         /// @solidity memory-safe-assembly
  9447 |     |         assembly {
  9448 |     |             function writeString(pos, w) {
  9449 |     |                 let length := 0
  9450 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9451 |     |                 mstore(pos, length)
  9452 |     |                 let shift := sub(256, shl(3, length))
  9453 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9454 |     |             }
  9455 |     |             m0 := mload(0x00)
  9456 |     |             m1 := mload(0x20)
  9457 |     |             m2 := mload(0x40)
  9458 |     |             m3 := mload(0x60)
  9459 |     |             m4 := mload(0x80)
  9460 |     |             m5 := mload(0xa0)
  9461 |     |             m6 := mload(0xc0)
  9462 |     |             // Selector of `log(uint256,uint256,address,string)`.
  9463 |     |             mstore(0x00, 0x6cde40b8)
  9464 |     |             mstore(0x20, p0)
  9465 |     |             mstore(0x40, p1)
  9466 |     |             mstore(0x60, p2)
  9467 |     |             mstore(0x80, 0x80)
  9468 |     |             writeString(0xa0, p3)
  9469 |     |         }
  9470 |     |         _sendLogPayload(0x1c, 0xc4);
  9471 |     |         /// @solidity memory-safe-assembly
  9472 |     |         assembly {
  9473 |     |             mstore(0x00, m0)
  9474 |     |             mstore(0x20, m1)
  9475 |     |             mstore(0x40, m2)
  9476 |     |             mstore(0x60, m3)
  9477 |     |             mstore(0x80, m4)
  9478 |     |             mstore(0xa0, m5)
  9479 |     |             mstore(0xc0, m6)
  9480 |     |         }
  9481 |     |     }
  9482 |     | 
  9483 |     |     function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {
  9484 |     |         bytes32 m0;
  9485 |     |         bytes32 m1;
  9486 |     |         bytes32 m2;
  9487 |     |         bytes32 m3;
  9488 |     |         bytes32 m4;
  9489 |     |         /// @solidity memory-safe-assembly
  9490 |     |         assembly {
  9491 |     |             m0 := mload(0x00)
  9492 |     |             m1 := mload(0x20)
  9493 |     |             m2 := mload(0x40)
  9494 |     |             m3 := mload(0x60)
  9495 |     |             m4 := mload(0x80)
  9496 |     |             // Selector of `log(uint256,uint256,bool,address)`.
  9497 |     |             mstore(0x00, 0x9a816a83)
  9498 |     |             mstore(0x20, p0)
  9499 |     |             mstore(0x40, p1)
  9500 |     |             mstore(0x60, p2)
  9501 |     |             mstore(0x80, p3)
  9502 |     |         }
  9503 |     |         _sendLogPayload(0x1c, 0x84);
  9504 |     |         /// @solidity memory-safe-assembly
  9505 |     |         assembly {
  9506 |     |             mstore(0x00, m0)
  9507 |     |             mstore(0x20, m1)
  9508 |     |             mstore(0x40, m2)
  9509 |     |             mstore(0x60, m3)
  9510 |     |             mstore(0x80, m4)
  9511 |     |         }
  9512 |     |     }
  9513 |     | 
  9514 |     |     function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {
  9515 |     |         bytes32 m0;
  9516 |     |         bytes32 m1;
  9517 |     |         bytes32 m2;
  9518 |     |         bytes32 m3;
  9519 |     |         bytes32 m4;
  9520 |     |         /// @solidity memory-safe-assembly
  9521 |     |         assembly {
  9522 |     |             m0 := mload(0x00)
  9523 |     |             m1 := mload(0x20)
  9524 |     |             m2 := mload(0x40)
  9525 |     |             m3 := mload(0x60)
  9526 |     |             m4 := mload(0x80)
  9527 |     |             // Selector of `log(uint256,uint256,bool,bool)`.
  9528 |     |             mstore(0x00, 0xab085ae6)
  9529 |     |             mstore(0x20, p0)
  9530 |     |             mstore(0x40, p1)
  9531 |     |             mstore(0x60, p2)
  9532 |     |             mstore(0x80, p3)
  9533 |     |         }
  9534 |     |         _sendLogPayload(0x1c, 0x84);
  9535 |     |         /// @solidity memory-safe-assembly
  9536 |     |         assembly {
  9537 |     |             mstore(0x00, m0)
  9538 |     |             mstore(0x20, m1)
  9539 |     |             mstore(0x40, m2)
  9540 |     |             mstore(0x60, m3)
  9541 |     |             mstore(0x80, m4)
  9542 |     |         }
  9543 |     |     }
  9544 |     | 
  9545 |     |     function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {
  9546 |     |         bytes32 m0;
  9547 |     |         bytes32 m1;
  9548 |     |         bytes32 m2;
  9549 |     |         bytes32 m3;
  9550 |     |         bytes32 m4;
  9551 |     |         /// @solidity memory-safe-assembly
  9552 |     |         assembly {
  9553 |     |             m0 := mload(0x00)
  9554 |     |             m1 := mload(0x20)
  9555 |     |             m2 := mload(0x40)
  9556 |     |             m3 := mload(0x60)
  9557 |     |             m4 := mload(0x80)
  9558 |     |             // Selector of `log(uint256,uint256,bool,uint256)`.
  9559 |     |             mstore(0x00, 0xeb7f6fd2)
  9560 |     |             mstore(0x20, p0)
  9561 |     |             mstore(0x40, p1)
  9562 |     |             mstore(0x60, p2)
  9563 |     |             mstore(0x80, p3)
  9564 |     |         }
  9565 |     |         _sendLogPayload(0x1c, 0x84);
  9566 |     |         /// @solidity memory-safe-assembly
  9567 |     |         assembly {
  9568 |     |             mstore(0x00, m0)
  9569 |     |             mstore(0x20, m1)
  9570 |     |             mstore(0x40, m2)
  9571 |     |             mstore(0x60, m3)
  9572 |     |             mstore(0x80, m4)
  9573 |     |         }
  9574 |     |     }
  9575 |     | 
  9576 |     |     function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {
  9577 |     |         bytes32 m0;
  9578 |     |         bytes32 m1;
  9579 |     |         bytes32 m2;
  9580 |     |         bytes32 m3;
  9581 |     |         bytes32 m4;
  9582 |     |         bytes32 m5;
  9583 |     |         bytes32 m6;
  9584 |     |         /// @solidity memory-safe-assembly
  9585 |     |         assembly {
  9586 |     |             function writeString(pos, w) {
  9587 |     |                 let length := 0
  9588 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9589 |     |                 mstore(pos, length)
  9590 |     |                 let shift := sub(256, shl(3, length))
  9591 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9592 |     |             }
  9593 |     |             m0 := mload(0x00)
  9594 |     |             m1 := mload(0x20)
  9595 |     |             m2 := mload(0x40)
  9596 |     |             m3 := mload(0x60)
  9597 |     |             m4 := mload(0x80)
  9598 |     |             m5 := mload(0xa0)
  9599 |     |             m6 := mload(0xc0)
  9600 |     |             // Selector of `log(uint256,uint256,bool,string)`.
  9601 |     |             mstore(0x00, 0xa5b4fc99)
  9602 |     |             mstore(0x20, p0)
  9603 |     |             mstore(0x40, p1)
  9604 |     |             mstore(0x60, p2)
  9605 |     |             mstore(0x80, 0x80)
  9606 |     |             writeString(0xa0, p3)
  9607 |     |         }
  9608 |     |         _sendLogPayload(0x1c, 0xc4);
  9609 |     |         /// @solidity memory-safe-assembly
  9610 |     |         assembly {
  9611 |     |             mstore(0x00, m0)
  9612 |     |             mstore(0x20, m1)
  9613 |     |             mstore(0x40, m2)
  9614 |     |             mstore(0x60, m3)
  9615 |     |             mstore(0x80, m4)
  9616 |     |             mstore(0xa0, m5)
  9617 |     |             mstore(0xc0, m6)
  9618 |     |         }
  9619 |     |     }
  9620 |     | 
  9621 |     |     function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {
  9622 |     |         bytes32 m0;
  9623 |     |         bytes32 m1;
  9624 |     |         bytes32 m2;
  9625 |     |         bytes32 m3;
  9626 |     |         bytes32 m4;
  9627 |     |         /// @solidity memory-safe-assembly
  9628 |     |         assembly {
  9629 |     |             m0 := mload(0x00)
  9630 |     |             m1 := mload(0x20)
  9631 |     |             m2 := mload(0x40)
  9632 |     |             m3 := mload(0x60)
  9633 |     |             m4 := mload(0x80)
  9634 |     |             // Selector of `log(uint256,uint256,uint256,address)`.
  9635 |     |             mstore(0x00, 0xfa8185af)
  9636 |     |             mstore(0x20, p0)
  9637 |     |             mstore(0x40, p1)
  9638 |     |             mstore(0x60, p2)
  9639 |     |             mstore(0x80, p3)
  9640 |     |         }
  9641 |     |         _sendLogPayload(0x1c, 0x84);
  9642 |     |         /// @solidity memory-safe-assembly
  9643 |     |         assembly {
  9644 |     |             mstore(0x00, m0)
  9645 |     |             mstore(0x20, m1)
  9646 |     |             mstore(0x40, m2)
  9647 |     |             mstore(0x60, m3)
  9648 |     |             mstore(0x80, m4)
  9649 |     |         }
  9650 |     |     }
  9651 |     | 
  9652 |     |     function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {
  9653 |     |         bytes32 m0;
  9654 |     |         bytes32 m1;
  9655 |     |         bytes32 m2;
  9656 |     |         bytes32 m3;
  9657 |     |         bytes32 m4;
  9658 |     |         /// @solidity memory-safe-assembly
  9659 |     |         assembly {
  9660 |     |             m0 := mload(0x00)
  9661 |     |             m1 := mload(0x20)
  9662 |     |             m2 := mload(0x40)
  9663 |     |             m3 := mload(0x60)
  9664 |     |             m4 := mload(0x80)
  9665 |     |             // Selector of `log(uint256,uint256,uint256,bool)`.
  9666 |     |             mstore(0x00, 0xc598d185)
  9667 |     |             mstore(0x20, p0)
  9668 |     |             mstore(0x40, p1)
  9669 |     |             mstore(0x60, p2)
  9670 |     |             mstore(0x80, p3)
  9671 |     |         }
  9672 |     |         _sendLogPayload(0x1c, 0x84);
  9673 |     |         /// @solidity memory-safe-assembly
  9674 |     |         assembly {
  9675 |     |             mstore(0x00, m0)
  9676 |     |             mstore(0x20, m1)
  9677 |     |             mstore(0x40, m2)
  9678 |     |             mstore(0x60, m3)
  9679 |     |             mstore(0x80, m4)
  9680 |     |         }
  9681 |     |     }
  9682 |     | 
  9683 |     |     function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
  9684 |     |         bytes32 m0;
  9685 |     |         bytes32 m1;
  9686 |     |         bytes32 m2;
  9687 |     |         bytes32 m3;
  9688 |     |         bytes32 m4;
  9689 |     |         /// @solidity memory-safe-assembly
  9690 |     |         assembly {
  9691 |     |             m0 := mload(0x00)
  9692 |     |             m1 := mload(0x20)
  9693 |     |             m2 := mload(0x40)
  9694 |     |             m3 := mload(0x60)
  9695 |     |             m4 := mload(0x80)
  9696 |     |             // Selector of `log(uint256,uint256,uint256,uint256)`.
  9697 |     |             mstore(0x00, 0x193fb800)
  9698 |     |             mstore(0x20, p0)
  9699 |     |             mstore(0x40, p1)
  9700 |     |             mstore(0x60, p2)
  9701 |     |             mstore(0x80, p3)
  9702 |     |         }
  9703 |     |         _sendLogPayload(0x1c, 0x84);
  9704 |     |         /// @solidity memory-safe-assembly
  9705 |     |         assembly {
  9706 |     |             mstore(0x00, m0)
  9707 |     |             mstore(0x20, m1)
  9708 |     |             mstore(0x40, m2)
  9709 |     |             mstore(0x60, m3)
  9710 |     |             mstore(0x80, m4)
  9711 |     |         }
  9712 |     |     }
  9713 |     | 
  9714 |     |     function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
  9715 |     |         bytes32 m0;
  9716 |     |         bytes32 m1;
  9717 |     |         bytes32 m2;
  9718 |     |         bytes32 m3;
  9719 |     |         bytes32 m4;
  9720 |     |         bytes32 m5;
  9721 |     |         bytes32 m6;
  9722 |     |         /// @solidity memory-safe-assembly
  9723 |     |         assembly {
  9724 |     |             function writeString(pos, w) {
  9725 |     |                 let length := 0
  9726 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9727 |     |                 mstore(pos, length)
  9728 |     |                 let shift := sub(256, shl(3, length))
  9729 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9730 |     |             }
  9731 |     |             m0 := mload(0x00)
  9732 |     |             m1 := mload(0x20)
  9733 |     |             m2 := mload(0x40)
  9734 |     |             m3 := mload(0x60)
  9735 |     |             m4 := mload(0x80)
  9736 |     |             m5 := mload(0xa0)
  9737 |     |             m6 := mload(0xc0)
  9738 |     |             // Selector of `log(uint256,uint256,uint256,string)`.
  9739 |     |             mstore(0x00, 0x59cfcbe3)
  9740 |     |             mstore(0x20, p0)
  9741 |     |             mstore(0x40, p1)
  9742 |     |             mstore(0x60, p2)
  9743 |     |             mstore(0x80, 0x80)
  9744 |     |             writeString(0xa0, p3)
  9745 |     |         }
  9746 |     |         _sendLogPayload(0x1c, 0xc4);
  9747 |     |         /// @solidity memory-safe-assembly
  9748 |     |         assembly {
  9749 |     |             mstore(0x00, m0)
  9750 |     |             mstore(0x20, m1)
  9751 |     |             mstore(0x40, m2)
  9752 |     |             mstore(0x60, m3)
  9753 |     |             mstore(0x80, m4)
  9754 |     |             mstore(0xa0, m5)
  9755 |     |             mstore(0xc0, m6)
  9756 |     |         }
  9757 |     |     }
  9758 |     | 
  9759 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {
  9760 |     |         bytes32 m0;
  9761 |     |         bytes32 m1;
  9762 |     |         bytes32 m2;
  9763 |     |         bytes32 m3;
  9764 |     |         bytes32 m4;
  9765 |     |         bytes32 m5;
  9766 |     |         bytes32 m6;
  9767 |     |         /// @solidity memory-safe-assembly
  9768 |     |         assembly {
  9769 |     |             function writeString(pos, w) {
  9770 |     |                 let length := 0
  9771 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9772 |     |                 mstore(pos, length)
  9773 |     |                 let shift := sub(256, shl(3, length))
  9774 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9775 |     |             }
  9776 |     |             m0 := mload(0x00)
  9777 |     |             m1 := mload(0x20)
  9778 |     |             m2 := mload(0x40)
  9779 |     |             m3 := mload(0x60)
  9780 |     |             m4 := mload(0x80)
  9781 |     |             m5 := mload(0xa0)
  9782 |     |             m6 := mload(0xc0)
  9783 |     |             // Selector of `log(uint256,uint256,string,address)`.
  9784 |     |             mstore(0x00, 0x42d21db7)
  9785 |     |             mstore(0x20, p0)
  9786 |     |             mstore(0x40, p1)
  9787 |     |             mstore(0x60, 0x80)
  9788 |     |             mstore(0x80, p3)
  9789 |     |             writeString(0xa0, p2)
  9790 |     |         }
  9791 |     |         _sendLogPayload(0x1c, 0xc4);
  9792 |     |         /// @solidity memory-safe-assembly
  9793 |     |         assembly {
  9794 |     |             mstore(0x00, m0)
  9795 |     |             mstore(0x20, m1)
  9796 |     |             mstore(0x40, m2)
  9797 |     |             mstore(0x60, m3)
  9798 |     |             mstore(0x80, m4)
  9799 |     |             mstore(0xa0, m5)
  9800 |     |             mstore(0xc0, m6)
  9801 |     |         }
  9802 |     |     }
  9803 |     | 
  9804 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {
  9805 |     |         bytes32 m0;
  9806 |     |         bytes32 m1;
  9807 |     |         bytes32 m2;
  9808 |     |         bytes32 m3;
  9809 |     |         bytes32 m4;
  9810 |     |         bytes32 m5;
  9811 |     |         bytes32 m6;
  9812 |     |         /// @solidity memory-safe-assembly
  9813 |     |         assembly {
  9814 |     |             function writeString(pos, w) {
  9815 |     |                 let length := 0
  9816 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9817 |     |                 mstore(pos, length)
  9818 |     |                 let shift := sub(256, shl(3, length))
  9819 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9820 |     |             }
  9821 |     |             m0 := mload(0x00)
  9822 |     |             m1 := mload(0x20)
  9823 |     |             m2 := mload(0x40)
  9824 |     |             m3 := mload(0x60)
  9825 |     |             m4 := mload(0x80)
  9826 |     |             m5 := mload(0xa0)
  9827 |     |             m6 := mload(0xc0)
  9828 |     |             // Selector of `log(uint256,uint256,string,bool)`.
  9829 |     |             mstore(0x00, 0x7af6ab25)
  9830 |     |             mstore(0x20, p0)
  9831 |     |             mstore(0x40, p1)
  9832 |     |             mstore(0x60, 0x80)
  9833 |     |             mstore(0x80, p3)
  9834 |     |             writeString(0xa0, p2)
  9835 |     |         }
  9836 |     |         _sendLogPayload(0x1c, 0xc4);
  9837 |     |         /// @solidity memory-safe-assembly
  9838 |     |         assembly {
  9839 |     |             mstore(0x00, m0)
  9840 |     |             mstore(0x20, m1)
  9841 |     |             mstore(0x40, m2)
  9842 |     |             mstore(0x60, m3)
  9843 |     |             mstore(0x80, m4)
  9844 |     |             mstore(0xa0, m5)
  9845 |     |             mstore(0xc0, m6)
  9846 |     |         }
  9847 |     |     }
  9848 |     | 
  9849 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
  9850 |     |         bytes32 m0;
  9851 |     |         bytes32 m1;
  9852 |     |         bytes32 m2;
  9853 |     |         bytes32 m3;
  9854 |     |         bytes32 m4;
  9855 |     |         bytes32 m5;
  9856 |     |         bytes32 m6;
  9857 |     |         /// @solidity memory-safe-assembly
  9858 |     |         assembly {
  9859 |     |             function writeString(pos, w) {
  9860 |     |                 let length := 0
  9861 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9862 |     |                 mstore(pos, length)
  9863 |     |                 let shift := sub(256, shl(3, length))
  9864 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9865 |     |             }
  9866 |     |             m0 := mload(0x00)
  9867 |     |             m1 := mload(0x20)
  9868 |     |             m2 := mload(0x40)
  9869 |     |             m3 := mload(0x60)
  9870 |     |             m4 := mload(0x80)
  9871 |     |             m5 := mload(0xa0)
  9872 |     |             m6 := mload(0xc0)
  9873 |     |             // Selector of `log(uint256,uint256,string,uint256)`.
  9874 |     |             mstore(0x00, 0x5da297eb)
  9875 |     |             mstore(0x20, p0)
  9876 |     |             mstore(0x40, p1)
  9877 |     |             mstore(0x60, 0x80)
  9878 |     |             mstore(0x80, p3)
  9879 |     |             writeString(0xa0, p2)
  9880 |     |         }
  9881 |     |         _sendLogPayload(0x1c, 0xc4);
  9882 |     |         /// @solidity memory-safe-assembly
  9883 |     |         assembly {
  9884 |     |             mstore(0x00, m0)
  9885 |     |             mstore(0x20, m1)
  9886 |     |             mstore(0x40, m2)
  9887 |     |             mstore(0x60, m3)
  9888 |     |             mstore(0x80, m4)
  9889 |     |             mstore(0xa0, m5)
  9890 |     |             mstore(0xc0, m6)
  9891 |     |         }
  9892 |     |     }
  9893 |     | 
  9894 |     |     function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
  9895 |     |         bytes32 m0;
  9896 |     |         bytes32 m1;
  9897 |     |         bytes32 m2;
  9898 |     |         bytes32 m3;
  9899 |     |         bytes32 m4;
  9900 |     |         bytes32 m5;
  9901 |     |         bytes32 m6;
  9902 |     |         bytes32 m7;
  9903 |     |         bytes32 m8;
  9904 |     |         /// @solidity memory-safe-assembly
  9905 |     |         assembly {
  9906 |     |             function writeString(pos, w) {
  9907 |     |                 let length := 0
  9908 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9909 |     |                 mstore(pos, length)
  9910 |     |                 let shift := sub(256, shl(3, length))
  9911 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9912 |     |             }
  9913 |     |             m0 := mload(0x00)
  9914 |     |             m1 := mload(0x20)
  9915 |     |             m2 := mload(0x40)
  9916 |     |             m3 := mload(0x60)
  9917 |     |             m4 := mload(0x80)
  9918 |     |             m5 := mload(0xa0)
  9919 |     |             m6 := mload(0xc0)
  9920 |     |             m7 := mload(0xe0)
  9921 |     |             m8 := mload(0x100)
  9922 |     |             // Selector of `log(uint256,uint256,string,string)`.
  9923 |     |             mstore(0x00, 0x27d8afd2)
  9924 |     |             mstore(0x20, p0)
  9925 |     |             mstore(0x40, p1)
  9926 |     |             mstore(0x60, 0x80)
  9927 |     |             mstore(0x80, 0xc0)
  9928 |     |             writeString(0xa0, p2)
  9929 |     |             writeString(0xe0, p3)
  9930 |     |         }
  9931 |     |         _sendLogPayload(0x1c, 0x104);
  9932 |     |         /// @solidity memory-safe-assembly
  9933 |     |         assembly {
  9934 |     |             mstore(0x00, m0)
  9935 |     |             mstore(0x20, m1)
  9936 |     |             mstore(0x40, m2)
  9937 |     |             mstore(0x60, m3)
  9938 |     |             mstore(0x80, m4)
  9939 |     |             mstore(0xa0, m5)
  9940 |     |             mstore(0xc0, m6)
  9941 |     |             mstore(0xe0, m7)
  9942 |     |             mstore(0x100, m8)
  9943 |     |         }
  9944 |     |     }
  9945 |     | 
  9946 |     |     function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {
  9947 |     |         bytes32 m0;
  9948 |     |         bytes32 m1;
  9949 |     |         bytes32 m2;
  9950 |     |         bytes32 m3;
  9951 |     |         bytes32 m4;
  9952 |     |         bytes32 m5;
  9953 |     |         bytes32 m6;
  9954 |     |         /// @solidity memory-safe-assembly
  9955 |     |         assembly {
  9956 |     |             function writeString(pos, w) {
  9957 |     |                 let length := 0
  9958 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
  9959 |     |                 mstore(pos, length)
  9960 |     |                 let shift := sub(256, shl(3, length))
  9961 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
  9962 |     |             }
  9963 |     |             m0 := mload(0x00)
  9964 |     |             m1 := mload(0x20)
  9965 |     |             m2 := mload(0x40)
  9966 |     |             m3 := mload(0x60)
  9967 |     |             m4 := mload(0x80)
  9968 |     |             m5 := mload(0xa0)
  9969 |     |             m6 := mload(0xc0)
  9970 |     |             // Selector of `log(uint256,string,address,address)`.
  9971 |     |             mstore(0x00, 0x6168ed61)
  9972 |     |             mstore(0x20, p0)
  9973 |     |             mstore(0x40, 0x80)
  9974 |     |             mstore(0x60, p2)
  9975 |     |             mstore(0x80, p3)
  9976 |     |             writeString(0xa0, p1)
  9977 |     |         }
  9978 |     |         _sendLogPayload(0x1c, 0xc4);
  9979 |     |         /// @solidity memory-safe-assembly
  9980 |     |         assembly {
  9981 |     |             mstore(0x00, m0)
  9982 |     |             mstore(0x20, m1)
  9983 |     |             mstore(0x40, m2)
  9984 |     |             mstore(0x60, m3)
  9985 |     |             mstore(0x80, m4)
  9986 |     |             mstore(0xa0, m5)
  9987 |     |             mstore(0xc0, m6)
  9988 |     |         }
  9989 |     |     }
  9990 |     | 
  9991 |     |     function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {
  9992 |     |         bytes32 m0;
  9993 |     |         bytes32 m1;
  9994 |     |         bytes32 m2;
  9995 |     |         bytes32 m3;
  9996 |     |         bytes32 m4;
  9997 |     |         bytes32 m5;
  9998 |     |         bytes32 m6;
  9999 |     |         /// @solidity memory-safe-assembly
 10000 |     |         assembly {
 10001 |     |             function writeString(pos, w) {
 10002 |     |                 let length := 0
 10003 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10004 |     |                 mstore(pos, length)
 10005 |     |                 let shift := sub(256, shl(3, length))
 10006 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10007 |     |             }
 10008 |     |             m0 := mload(0x00)
 10009 |     |             m1 := mload(0x20)
 10010 |     |             m2 := mload(0x40)
 10011 |     |             m3 := mload(0x60)
 10012 |     |             m4 := mload(0x80)
 10013 |     |             m5 := mload(0xa0)
 10014 |     |             m6 := mload(0xc0)
 10015 |     |             // Selector of `log(uint256,string,address,bool)`.
 10016 |     |             mstore(0x00, 0x90c30a56)
 10017 |     |             mstore(0x20, p0)
 10018 |     |             mstore(0x40, 0x80)
 10019 |     |             mstore(0x60, p2)
 10020 |     |             mstore(0x80, p3)
 10021 |     |             writeString(0xa0, p1)
 10022 |     |         }
 10023 |     |         _sendLogPayload(0x1c, 0xc4);
 10024 |     |         /// @solidity memory-safe-assembly
 10025 |     |         assembly {
 10026 |     |             mstore(0x00, m0)
 10027 |     |             mstore(0x20, m1)
 10028 |     |             mstore(0x40, m2)
 10029 |     |             mstore(0x60, m3)
 10030 |     |             mstore(0x80, m4)
 10031 |     |             mstore(0xa0, m5)
 10032 |     |             mstore(0xc0, m6)
 10033 |     |         }
 10034 |     |     }
 10035 |     | 
 10036 |     |     function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {
 10037 |     |         bytes32 m0;
 10038 |     |         bytes32 m1;
 10039 |     |         bytes32 m2;
 10040 |     |         bytes32 m3;
 10041 |     |         bytes32 m4;
 10042 |     |         bytes32 m5;
 10043 |     |         bytes32 m6;
 10044 |     |         /// @solidity memory-safe-assembly
 10045 |     |         assembly {
 10046 |     |             function writeString(pos, w) {
 10047 |     |                 let length := 0
 10048 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10049 |     |                 mstore(pos, length)
 10050 |     |                 let shift := sub(256, shl(3, length))
 10051 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10052 |     |             }
 10053 |     |             m0 := mload(0x00)
 10054 |     |             m1 := mload(0x20)
 10055 |     |             m2 := mload(0x40)
 10056 |     |             m3 := mload(0x60)
 10057 |     |             m4 := mload(0x80)
 10058 |     |             m5 := mload(0xa0)
 10059 |     |             m6 := mload(0xc0)
 10060 |     |             // Selector of `log(uint256,string,address,uint256)`.
 10061 |     |             mstore(0x00, 0xe8d3018d)
 10062 |     |             mstore(0x20, p0)
 10063 |     |             mstore(0x40, 0x80)
 10064 |     |             mstore(0x60, p2)
 10065 |     |             mstore(0x80, p3)
 10066 |     |             writeString(0xa0, p1)
 10067 |     |         }
 10068 |     |         _sendLogPayload(0x1c, 0xc4);
 10069 |     |         /// @solidity memory-safe-assembly
 10070 |     |         assembly {
 10071 |     |             mstore(0x00, m0)
 10072 |     |             mstore(0x20, m1)
 10073 |     |             mstore(0x40, m2)
 10074 |     |             mstore(0x60, m3)
 10075 |     |             mstore(0x80, m4)
 10076 |     |             mstore(0xa0, m5)
 10077 |     |             mstore(0xc0, m6)
 10078 |     |         }
 10079 |     |     }
 10080 |     | 
 10081 |     |     function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {
 10082 |     |         bytes32 m0;
 10083 |     |         bytes32 m1;
 10084 |     |         bytes32 m2;
 10085 |     |         bytes32 m3;
 10086 |     |         bytes32 m4;
 10087 |     |         bytes32 m5;
 10088 |     |         bytes32 m6;
 10089 |     |         bytes32 m7;
 10090 |     |         bytes32 m8;
 10091 |     |         /// @solidity memory-safe-assembly
 10092 |     |         assembly {
 10093 |     |             function writeString(pos, w) {
 10094 |     |                 let length := 0
 10095 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10096 |     |                 mstore(pos, length)
 10097 |     |                 let shift := sub(256, shl(3, length))
 10098 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10099 |     |             }
 10100 |     |             m0 := mload(0x00)
 10101 |     |             m1 := mload(0x20)
 10102 |     |             m2 := mload(0x40)
 10103 |     |             m3 := mload(0x60)
 10104 |     |             m4 := mload(0x80)
 10105 |     |             m5 := mload(0xa0)
 10106 |     |             m6 := mload(0xc0)
 10107 |     |             m7 := mload(0xe0)
 10108 |     |             m8 := mload(0x100)
 10109 |     |             // Selector of `log(uint256,string,address,string)`.
 10110 |     |             mstore(0x00, 0x9c3adfa1)
 10111 |     |             mstore(0x20, p0)
 10112 |     |             mstore(0x40, 0x80)
 10113 |     |             mstore(0x60, p2)
 10114 |     |             mstore(0x80, 0xc0)
 10115 |     |             writeString(0xa0, p1)
 10116 |     |             writeString(0xe0, p3)
 10117 |     |         }
 10118 |     |         _sendLogPayload(0x1c, 0x104);
 10119 |     |         /// @solidity memory-safe-assembly
 10120 |     |         assembly {
 10121 |     |             mstore(0x00, m0)
 10122 |     |             mstore(0x20, m1)
 10123 |     |             mstore(0x40, m2)
 10124 |     |             mstore(0x60, m3)
 10125 |     |             mstore(0x80, m4)
 10126 |     |             mstore(0xa0, m5)
 10127 |     |             mstore(0xc0, m6)
 10128 |     |             mstore(0xe0, m7)
 10129 |     |             mstore(0x100, m8)
 10130 |     |         }
 10131 |     |     }
 10132 |     | 
 10133 |     |     function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {
 10134 |     |         bytes32 m0;
 10135 |     |         bytes32 m1;
 10136 |     |         bytes32 m2;
 10137 |     |         bytes32 m3;
 10138 |     |         bytes32 m4;
 10139 |     |         bytes32 m5;
 10140 |     |         bytes32 m6;
 10141 |     |         /// @solidity memory-safe-assembly
 10142 |     |         assembly {
 10143 |     |             function writeString(pos, w) {
 10144 |     |                 let length := 0
 10145 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10146 |     |                 mstore(pos, length)
 10147 |     |                 let shift := sub(256, shl(3, length))
 10148 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10149 |     |             }
 10150 |     |             m0 := mload(0x00)
 10151 |     |             m1 := mload(0x20)
 10152 |     |             m2 := mload(0x40)
 10153 |     |             m3 := mload(0x60)
 10154 |     |             m4 := mload(0x80)
 10155 |     |             m5 := mload(0xa0)
 10156 |     |             m6 := mload(0xc0)
 10157 |     |             // Selector of `log(uint256,string,bool,address)`.
 10158 |     |             mstore(0x00, 0xae2ec581)
 10159 |     |             mstore(0x20, p0)
 10160 |     |             mstore(0x40, 0x80)
 10161 |     |             mstore(0x60, p2)
 10162 |     |             mstore(0x80, p3)
 10163 |     |             writeString(0xa0, p1)
 10164 |     |         }
 10165 |     |         _sendLogPayload(0x1c, 0xc4);
 10166 |     |         /// @solidity memory-safe-assembly
 10167 |     |         assembly {
 10168 |     |             mstore(0x00, m0)
 10169 |     |             mstore(0x20, m1)
 10170 |     |             mstore(0x40, m2)
 10171 |     |             mstore(0x60, m3)
 10172 |     |             mstore(0x80, m4)
 10173 |     |             mstore(0xa0, m5)
 10174 |     |             mstore(0xc0, m6)
 10175 |     |         }
 10176 |     |     }
 10177 |     | 
 10178 |     |     function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {
 10179 |     |         bytes32 m0;
 10180 |     |         bytes32 m1;
 10181 |     |         bytes32 m2;
 10182 |     |         bytes32 m3;
 10183 |     |         bytes32 m4;
 10184 |     |         bytes32 m5;
 10185 |     |         bytes32 m6;
 10186 |     |         /// @solidity memory-safe-assembly
 10187 |     |         assembly {
 10188 |     |             function writeString(pos, w) {
 10189 |     |                 let length := 0
 10190 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10191 |     |                 mstore(pos, length)
 10192 |     |                 let shift := sub(256, shl(3, length))
 10193 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10194 |     |             }
 10195 |     |             m0 := mload(0x00)
 10196 |     |             m1 := mload(0x20)
 10197 |     |             m2 := mload(0x40)
 10198 |     |             m3 := mload(0x60)
 10199 |     |             m4 := mload(0x80)
 10200 |     |             m5 := mload(0xa0)
 10201 |     |             m6 := mload(0xc0)
 10202 |     |             // Selector of `log(uint256,string,bool,bool)`.
 10203 |     |             mstore(0x00, 0xba535d9c)
 10204 |     |             mstore(0x20, p0)
 10205 |     |             mstore(0x40, 0x80)
 10206 |     |             mstore(0x60, p2)
 10207 |     |             mstore(0x80, p3)
 10208 |     |             writeString(0xa0, p1)
 10209 |     |         }
 10210 |     |         _sendLogPayload(0x1c, 0xc4);
 10211 |     |         /// @solidity memory-safe-assembly
 10212 |     |         assembly {
 10213 |     |             mstore(0x00, m0)
 10214 |     |             mstore(0x20, m1)
 10215 |     |             mstore(0x40, m2)
 10216 |     |             mstore(0x60, m3)
 10217 |     |             mstore(0x80, m4)
 10218 |     |             mstore(0xa0, m5)
 10219 |     |             mstore(0xc0, m6)
 10220 |     |         }
 10221 |     |     }
 10222 |     | 
 10223 |     |     function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {
 10224 |     |         bytes32 m0;
 10225 |     |         bytes32 m1;
 10226 |     |         bytes32 m2;
 10227 |     |         bytes32 m3;
 10228 |     |         bytes32 m4;
 10229 |     |         bytes32 m5;
 10230 |     |         bytes32 m6;
 10231 |     |         /// @solidity memory-safe-assembly
 10232 |     |         assembly {
 10233 |     |             function writeString(pos, w) {
 10234 |     |                 let length := 0
 10235 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10236 |     |                 mstore(pos, length)
 10237 |     |                 let shift := sub(256, shl(3, length))
 10238 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10239 |     |             }
 10240 |     |             m0 := mload(0x00)
 10241 |     |             m1 := mload(0x20)
 10242 |     |             m2 := mload(0x40)
 10243 |     |             m3 := mload(0x60)
 10244 |     |             m4 := mload(0x80)
 10245 |     |             m5 := mload(0xa0)
 10246 |     |             m6 := mload(0xc0)
 10247 |     |             // Selector of `log(uint256,string,bool,uint256)`.
 10248 |     |             mstore(0x00, 0xcf009880)
 10249 |     |             mstore(0x20, p0)
 10250 |     |             mstore(0x40, 0x80)
 10251 |     |             mstore(0x60, p2)
 10252 |     |             mstore(0x80, p3)
 10253 |     |             writeString(0xa0, p1)
 10254 |     |         }
 10255 |     |         _sendLogPayload(0x1c, 0xc4);
 10256 |     |         /// @solidity memory-safe-assembly
 10257 |     |         assembly {
 10258 |     |             mstore(0x00, m0)
 10259 |     |             mstore(0x20, m1)
 10260 |     |             mstore(0x40, m2)
 10261 |     |             mstore(0x60, m3)
 10262 |     |             mstore(0x80, m4)
 10263 |     |             mstore(0xa0, m5)
 10264 |     |             mstore(0xc0, m6)
 10265 |     |         }
 10266 |     |     }
 10267 |     | 
 10268 |     |     function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
 10269 |     |         bytes32 m0;
 10270 |     |         bytes32 m1;
 10271 |     |         bytes32 m2;
 10272 |     |         bytes32 m3;
 10273 |     |         bytes32 m4;
 10274 |     |         bytes32 m5;
 10275 |     |         bytes32 m6;
 10276 |     |         bytes32 m7;
 10277 |     |         bytes32 m8;
 10278 |     |         /// @solidity memory-safe-assembly
 10279 |     |         assembly {
 10280 |     |             function writeString(pos, w) {
 10281 |     |                 let length := 0
 10282 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10283 |     |                 mstore(pos, length)
 10284 |     |                 let shift := sub(256, shl(3, length))
 10285 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10286 |     |             }
 10287 |     |             m0 := mload(0x00)
 10288 |     |             m1 := mload(0x20)
 10289 |     |             m2 := mload(0x40)
 10290 |     |             m3 := mload(0x60)
 10291 |     |             m4 := mload(0x80)
 10292 |     |             m5 := mload(0xa0)
 10293 |     |             m6 := mload(0xc0)
 10294 |     |             m7 := mload(0xe0)
 10295 |     |             m8 := mload(0x100)
 10296 |     |             // Selector of `log(uint256,string,bool,string)`.
 10297 |     |             mstore(0x00, 0xd2d423cd)
 10298 |     |             mstore(0x20, p0)
 10299 |     |             mstore(0x40, 0x80)
 10300 |     |             mstore(0x60, p2)
 10301 |     |             mstore(0x80, 0xc0)
 10302 |     |             writeString(0xa0, p1)
 10303 |     |             writeString(0xe0, p3)
 10304 |     |         }
 10305 |     |         _sendLogPayload(0x1c, 0x104);
 10306 |     |         /// @solidity memory-safe-assembly
 10307 |     |         assembly {
 10308 |     |             mstore(0x00, m0)
 10309 |     |             mstore(0x20, m1)
 10310 |     |             mstore(0x40, m2)
 10311 |     |             mstore(0x60, m3)
 10312 |     |             mstore(0x80, m4)
 10313 |     |             mstore(0xa0, m5)
 10314 |     |             mstore(0xc0, m6)
 10315 |     |             mstore(0xe0, m7)
 10316 |     |             mstore(0x100, m8)
 10317 |     |         }
 10318 |     |     }
 10319 |     | 
 10320 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {
 10321 |     |         bytes32 m0;
 10322 |     |         bytes32 m1;
 10323 |     |         bytes32 m2;
 10324 |     |         bytes32 m3;
 10325 |     |         bytes32 m4;
 10326 |     |         bytes32 m5;
 10327 |     |         bytes32 m6;
 10328 |     |         /// @solidity memory-safe-assembly
 10329 |     |         assembly {
 10330 |     |             function writeString(pos, w) {
 10331 |     |                 let length := 0
 10332 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10333 |     |                 mstore(pos, length)
 10334 |     |                 let shift := sub(256, shl(3, length))
 10335 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10336 |     |             }
 10337 |     |             m0 := mload(0x00)
 10338 |     |             m1 := mload(0x20)
 10339 |     |             m2 := mload(0x40)
 10340 |     |             m3 := mload(0x60)
 10341 |     |             m4 := mload(0x80)
 10342 |     |             m5 := mload(0xa0)
 10343 |     |             m6 := mload(0xc0)
 10344 |     |             // Selector of `log(uint256,string,uint256,address)`.
 10345 |     |             mstore(0x00, 0x3b2279b4)
 10346 |     |             mstore(0x20, p0)
 10347 |     |             mstore(0x40, 0x80)
 10348 |     |             mstore(0x60, p2)
 10349 |     |             mstore(0x80, p3)
 10350 |     |             writeString(0xa0, p1)
 10351 |     |         }
 10352 |     |         _sendLogPayload(0x1c, 0xc4);
 10353 |     |         /// @solidity memory-safe-assembly
 10354 |     |         assembly {
 10355 |     |             mstore(0x00, m0)
 10356 |     |             mstore(0x20, m1)
 10357 |     |             mstore(0x40, m2)
 10358 |     |             mstore(0x60, m3)
 10359 |     |             mstore(0x80, m4)
 10360 |     |             mstore(0xa0, m5)
 10361 |     |             mstore(0xc0, m6)
 10362 |     |         }
 10363 |     |     }
 10364 |     | 
 10365 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {
 10366 |     |         bytes32 m0;
 10367 |     |         bytes32 m1;
 10368 |     |         bytes32 m2;
 10369 |     |         bytes32 m3;
 10370 |     |         bytes32 m4;
 10371 |     |         bytes32 m5;
 10372 |     |         bytes32 m6;
 10373 |     |         /// @solidity memory-safe-assembly
 10374 |     |         assembly {
 10375 |     |             function writeString(pos, w) {
 10376 |     |                 let length := 0
 10377 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10378 |     |                 mstore(pos, length)
 10379 |     |                 let shift := sub(256, shl(3, length))
 10380 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10381 |     |             }
 10382 |     |             m0 := mload(0x00)
 10383 |     |             m1 := mload(0x20)
 10384 |     |             m2 := mload(0x40)
 10385 |     |             m3 := mload(0x60)
 10386 |     |             m4 := mload(0x80)
 10387 |     |             m5 := mload(0xa0)
 10388 |     |             m6 := mload(0xc0)
 10389 |     |             // Selector of `log(uint256,string,uint256,bool)`.
 10390 |     |             mstore(0x00, 0x691a8f74)
 10391 |     |             mstore(0x20, p0)
 10392 |     |             mstore(0x40, 0x80)
 10393 |     |             mstore(0x60, p2)
 10394 |     |             mstore(0x80, p3)
 10395 |     |             writeString(0xa0, p1)
 10396 |     |         }
 10397 |     |         _sendLogPayload(0x1c, 0xc4);
 10398 |     |         /// @solidity memory-safe-assembly
 10399 |     |         assembly {
 10400 |     |             mstore(0x00, m0)
 10401 |     |             mstore(0x20, m1)
 10402 |     |             mstore(0x40, m2)
 10403 |     |             mstore(0x60, m3)
 10404 |     |             mstore(0x80, m4)
 10405 |     |             mstore(0xa0, m5)
 10406 |     |             mstore(0xc0, m6)
 10407 |     |         }
 10408 |     |     }
 10409 |     | 
 10410 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
 10411 |     |         bytes32 m0;
 10412 |     |         bytes32 m1;
 10413 |     |         bytes32 m2;
 10414 |     |         bytes32 m3;
 10415 |     |         bytes32 m4;
 10416 |     |         bytes32 m5;
 10417 |     |         bytes32 m6;
 10418 |     |         /// @solidity memory-safe-assembly
 10419 |     |         assembly {
 10420 |     |             function writeString(pos, w) {
 10421 |     |                 let length := 0
 10422 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10423 |     |                 mstore(pos, length)
 10424 |     |                 let shift := sub(256, shl(3, length))
 10425 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10426 |     |             }
 10427 |     |             m0 := mload(0x00)
 10428 |     |             m1 := mload(0x20)
 10429 |     |             m2 := mload(0x40)
 10430 |     |             m3 := mload(0x60)
 10431 |     |             m4 := mload(0x80)
 10432 |     |             m5 := mload(0xa0)
 10433 |     |             m6 := mload(0xc0)
 10434 |     |             // Selector of `log(uint256,string,uint256,uint256)`.
 10435 |     |             mstore(0x00, 0x82c25b74)
 10436 |     |             mstore(0x20, p0)
 10437 |     |             mstore(0x40, 0x80)
 10438 |     |             mstore(0x60, p2)
 10439 |     |             mstore(0x80, p3)
 10440 |     |             writeString(0xa0, p1)
 10441 |     |         }
 10442 |     |         _sendLogPayload(0x1c, 0xc4);
 10443 |     |         /// @solidity memory-safe-assembly
 10444 |     |         assembly {
 10445 |     |             mstore(0x00, m0)
 10446 |     |             mstore(0x20, m1)
 10447 |     |             mstore(0x40, m2)
 10448 |     |             mstore(0x60, m3)
 10449 |     |             mstore(0x80, m4)
 10450 |     |             mstore(0xa0, m5)
 10451 |     |             mstore(0xc0, m6)
 10452 |     |         }
 10453 |     |     }
 10454 |     | 
 10455 |     |     function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
 10456 |     |         bytes32 m0;
 10457 |     |         bytes32 m1;
 10458 |     |         bytes32 m2;
 10459 |     |         bytes32 m3;
 10460 |     |         bytes32 m4;
 10461 |     |         bytes32 m5;
 10462 |     |         bytes32 m6;
 10463 |     |         bytes32 m7;
 10464 |     |         bytes32 m8;
 10465 |     |         /// @solidity memory-safe-assembly
 10466 |     |         assembly {
 10467 |     |             function writeString(pos, w) {
 10468 |     |                 let length := 0
 10469 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10470 |     |                 mstore(pos, length)
 10471 |     |                 let shift := sub(256, shl(3, length))
 10472 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10473 |     |             }
 10474 |     |             m0 := mload(0x00)
 10475 |     |             m1 := mload(0x20)
 10476 |     |             m2 := mload(0x40)
 10477 |     |             m3 := mload(0x60)
 10478 |     |             m4 := mload(0x80)
 10479 |     |             m5 := mload(0xa0)
 10480 |     |             m6 := mload(0xc0)
 10481 |     |             m7 := mload(0xe0)
 10482 |     |             m8 := mload(0x100)
 10483 |     |             // Selector of `log(uint256,string,uint256,string)`.
 10484 |     |             mstore(0x00, 0xb7b914ca)
 10485 |     |             mstore(0x20, p0)
 10486 |     |             mstore(0x40, 0x80)
 10487 |     |             mstore(0x60, p2)
 10488 |     |             mstore(0x80, 0xc0)
 10489 |     |             writeString(0xa0, p1)
 10490 |     |             writeString(0xe0, p3)
 10491 |     |         }
 10492 |     |         _sendLogPayload(0x1c, 0x104);
 10493 |     |         /// @solidity memory-safe-assembly
 10494 |     |         assembly {
 10495 |     |             mstore(0x00, m0)
 10496 |     |             mstore(0x20, m1)
 10497 |     |             mstore(0x40, m2)
 10498 |     |             mstore(0x60, m3)
 10499 |     |             mstore(0x80, m4)
 10500 |     |             mstore(0xa0, m5)
 10501 |     |             mstore(0xc0, m6)
 10502 |     |             mstore(0xe0, m7)
 10503 |     |             mstore(0x100, m8)
 10504 |     |         }
 10505 |     |     }
 10506 |     | 
 10507 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {
 10508 |     |         bytes32 m0;
 10509 |     |         bytes32 m1;
 10510 |     |         bytes32 m2;
 10511 |     |         bytes32 m3;
 10512 |     |         bytes32 m4;
 10513 |     |         bytes32 m5;
 10514 |     |         bytes32 m6;
 10515 |     |         bytes32 m7;
 10516 |     |         bytes32 m8;
 10517 |     |         /// @solidity memory-safe-assembly
 10518 |     |         assembly {
 10519 |     |             function writeString(pos, w) {
 10520 |     |                 let length := 0
 10521 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10522 |     |                 mstore(pos, length)
 10523 |     |                 let shift := sub(256, shl(3, length))
 10524 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10525 |     |             }
 10526 |     |             m0 := mload(0x00)
 10527 |     |             m1 := mload(0x20)
 10528 |     |             m2 := mload(0x40)
 10529 |     |             m3 := mload(0x60)
 10530 |     |             m4 := mload(0x80)
 10531 |     |             m5 := mload(0xa0)
 10532 |     |             m6 := mload(0xc0)
 10533 |     |             m7 := mload(0xe0)
 10534 |     |             m8 := mload(0x100)
 10535 |     |             // Selector of `log(uint256,string,string,address)`.
 10536 |     |             mstore(0x00, 0xd583c602)
 10537 |     |             mstore(0x20, p0)
 10538 |     |             mstore(0x40, 0x80)
 10539 |     |             mstore(0x60, 0xc0)
 10540 |     |             mstore(0x80, p3)
 10541 |     |             writeString(0xa0, p1)
 10542 |     |             writeString(0xe0, p2)
 10543 |     |         }
 10544 |     |         _sendLogPayload(0x1c, 0x104);
 10545 |     |         /// @solidity memory-safe-assembly
 10546 |     |         assembly {
 10547 |     |             mstore(0x00, m0)
 10548 |     |             mstore(0x20, m1)
 10549 |     |             mstore(0x40, m2)
 10550 |     |             mstore(0x60, m3)
 10551 |     |             mstore(0x80, m4)
 10552 |     |             mstore(0xa0, m5)
 10553 |     |             mstore(0xc0, m6)
 10554 |     |             mstore(0xe0, m7)
 10555 |     |             mstore(0x100, m8)
 10556 |     |         }
 10557 |     |     }
 10558 |     | 
 10559 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
 10560 |     |         bytes32 m0;
 10561 |     |         bytes32 m1;
 10562 |     |         bytes32 m2;
 10563 |     |         bytes32 m3;
 10564 |     |         bytes32 m4;
 10565 |     |         bytes32 m5;
 10566 |     |         bytes32 m6;
 10567 |     |         bytes32 m7;
 10568 |     |         bytes32 m8;
 10569 |     |         /// @solidity memory-safe-assembly
 10570 |     |         assembly {
 10571 |     |             function writeString(pos, w) {
 10572 |     |                 let length := 0
 10573 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10574 |     |                 mstore(pos, length)
 10575 |     |                 let shift := sub(256, shl(3, length))
 10576 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10577 |     |             }
 10578 |     |             m0 := mload(0x00)
 10579 |     |             m1 := mload(0x20)
 10580 |     |             m2 := mload(0x40)
 10581 |     |             m3 := mload(0x60)
 10582 |     |             m4 := mload(0x80)
 10583 |     |             m5 := mload(0xa0)
 10584 |     |             m6 := mload(0xc0)
 10585 |     |             m7 := mload(0xe0)
 10586 |     |             m8 := mload(0x100)
 10587 |     |             // Selector of `log(uint256,string,string,bool)`.
 10588 |     |             mstore(0x00, 0xb3a6b6bd)
 10589 |     |             mstore(0x20, p0)
 10590 |     |             mstore(0x40, 0x80)
 10591 |     |             mstore(0x60, 0xc0)
 10592 |     |             mstore(0x80, p3)
 10593 |     |             writeString(0xa0, p1)
 10594 |     |             writeString(0xe0, p2)
 10595 |     |         }
 10596 |     |         _sendLogPayload(0x1c, 0x104);
 10597 |     |         /// @solidity memory-safe-assembly
 10598 |     |         assembly {
 10599 |     |             mstore(0x00, m0)
 10600 |     |             mstore(0x20, m1)
 10601 |     |             mstore(0x40, m2)
 10602 |     |             mstore(0x60, m3)
 10603 |     |             mstore(0x80, m4)
 10604 |     |             mstore(0xa0, m5)
 10605 |     |             mstore(0xc0, m6)
 10606 |     |             mstore(0xe0, m7)
 10607 |     |             mstore(0x100, m8)
 10608 |     |         }
 10609 |     |     }
 10610 |     | 
 10611 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
 10612 |     |         bytes32 m0;
 10613 |     |         bytes32 m1;
 10614 |     |         bytes32 m2;
 10615 |     |         bytes32 m3;
 10616 |     |         bytes32 m4;
 10617 |     |         bytes32 m5;
 10618 |     |         bytes32 m6;
 10619 |     |         bytes32 m7;
 10620 |     |         bytes32 m8;
 10621 |     |         /// @solidity memory-safe-assembly
 10622 |     |         assembly {
 10623 |     |             function writeString(pos, w) {
 10624 |     |                 let length := 0
 10625 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10626 |     |                 mstore(pos, length)
 10627 |     |                 let shift := sub(256, shl(3, length))
 10628 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10629 |     |             }
 10630 |     |             m0 := mload(0x00)
 10631 |     |             m1 := mload(0x20)
 10632 |     |             m2 := mload(0x40)
 10633 |     |             m3 := mload(0x60)
 10634 |     |             m4 := mload(0x80)
 10635 |     |             m5 := mload(0xa0)
 10636 |     |             m6 := mload(0xc0)
 10637 |     |             m7 := mload(0xe0)
 10638 |     |             m8 := mload(0x100)
 10639 |     |             // Selector of `log(uint256,string,string,uint256)`.
 10640 |     |             mstore(0x00, 0xb028c9bd)
 10641 |     |             mstore(0x20, p0)
 10642 |     |             mstore(0x40, 0x80)
 10643 |     |             mstore(0x60, 0xc0)
 10644 |     |             mstore(0x80, p3)
 10645 |     |             writeString(0xa0, p1)
 10646 |     |             writeString(0xe0, p2)
 10647 |     |         }
 10648 |     |         _sendLogPayload(0x1c, 0x104);
 10649 |     |         /// @solidity memory-safe-assembly
 10650 |     |         assembly {
 10651 |     |             mstore(0x00, m0)
 10652 |     |             mstore(0x20, m1)
 10653 |     |             mstore(0x40, m2)
 10654 |     |             mstore(0x60, m3)
 10655 |     |             mstore(0x80, m4)
 10656 |     |             mstore(0xa0, m5)
 10657 |     |             mstore(0xc0, m6)
 10658 |     |             mstore(0xe0, m7)
 10659 |     |             mstore(0x100, m8)
 10660 |     |         }
 10661 |     |     }
 10662 |     | 
 10663 |     |     function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
 10664 |     |         bytes32 m0;
 10665 |     |         bytes32 m1;
 10666 |     |         bytes32 m2;
 10667 |     |         bytes32 m3;
 10668 |     |         bytes32 m4;
 10669 |     |         bytes32 m5;
 10670 |     |         bytes32 m6;
 10671 |     |         bytes32 m7;
 10672 |     |         bytes32 m8;
 10673 |     |         bytes32 m9;
 10674 |     |         bytes32 m10;
 10675 |     |         /// @solidity memory-safe-assembly
 10676 |     |         assembly {
 10677 |     |             function writeString(pos, w) {
 10678 |     |                 let length := 0
 10679 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10680 |     |                 mstore(pos, length)
 10681 |     |                 let shift := sub(256, shl(3, length))
 10682 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10683 |     |             }
 10684 |     |             m0 := mload(0x00)
 10685 |     |             m1 := mload(0x20)
 10686 |     |             m2 := mload(0x40)
 10687 |     |             m3 := mload(0x60)
 10688 |     |             m4 := mload(0x80)
 10689 |     |             m5 := mload(0xa0)
 10690 |     |             m6 := mload(0xc0)
 10691 |     |             m7 := mload(0xe0)
 10692 |     |             m8 := mload(0x100)
 10693 |     |             m9 := mload(0x120)
 10694 |     |             m10 := mload(0x140)
 10695 |     |             // Selector of `log(uint256,string,string,string)`.
 10696 |     |             mstore(0x00, 0x21ad0683)
 10697 |     |             mstore(0x20, p0)
 10698 |     |             mstore(0x40, 0x80)
 10699 |     |             mstore(0x60, 0xc0)
 10700 |     |             mstore(0x80, 0x100)
 10701 |     |             writeString(0xa0, p1)
 10702 |     |             writeString(0xe0, p2)
 10703 |     |             writeString(0x120, p3)
 10704 |     |         }
 10705 |     |         _sendLogPayload(0x1c, 0x144);
 10706 |     |         /// @solidity memory-safe-assembly
 10707 |     |         assembly {
 10708 |     |             mstore(0x00, m0)
 10709 |     |             mstore(0x20, m1)
 10710 |     |             mstore(0x40, m2)
 10711 |     |             mstore(0x60, m3)
 10712 |     |             mstore(0x80, m4)
 10713 |     |             mstore(0xa0, m5)
 10714 |     |             mstore(0xc0, m6)
 10715 |     |             mstore(0xe0, m7)
 10716 |     |             mstore(0x100, m8)
 10717 |     |             mstore(0x120, m9)
 10718 |     |             mstore(0x140, m10)
 10719 |     |         }
 10720 |     |     }
 10721 |     | 
 10722 |     |     function log(bytes32 p0, address p1, address p2, address p3) internal pure {
 10723 |     |         bytes32 m0;
 10724 |     |         bytes32 m1;
 10725 |     |         bytes32 m2;
 10726 |     |         bytes32 m3;
 10727 |     |         bytes32 m4;
 10728 |     |         bytes32 m5;
 10729 |     |         bytes32 m6;
 10730 |     |         /// @solidity memory-safe-assembly
 10731 |     |         assembly {
 10732 |     |             function writeString(pos, w) {
 10733 |     |                 let length := 0
 10734 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10735 |     |                 mstore(pos, length)
 10736 |     |                 let shift := sub(256, shl(3, length))
 10737 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10738 |     |             }
 10739 |     |             m0 := mload(0x00)
 10740 |     |             m1 := mload(0x20)
 10741 |     |             m2 := mload(0x40)
 10742 |     |             m3 := mload(0x60)
 10743 |     |             m4 := mload(0x80)
 10744 |     |             m5 := mload(0xa0)
 10745 |     |             m6 := mload(0xc0)
 10746 |     |             // Selector of `log(string,address,address,address)`.
 10747 |     |             mstore(0x00, 0xed8f28f6)
 10748 |     |             mstore(0x20, 0x80)
 10749 |     |             mstore(0x40, p1)
 10750 |     |             mstore(0x60, p2)
 10751 |     |             mstore(0x80, p3)
 10752 |     |             writeString(0xa0, p0)
 10753 |     |         }
 10754 |     |         _sendLogPayload(0x1c, 0xc4);
 10755 |     |         /// @solidity memory-safe-assembly
 10756 |     |         assembly {
 10757 |     |             mstore(0x00, m0)
 10758 |     |             mstore(0x20, m1)
 10759 |     |             mstore(0x40, m2)
 10760 |     |             mstore(0x60, m3)
 10761 |     |             mstore(0x80, m4)
 10762 |     |             mstore(0xa0, m5)
 10763 |     |             mstore(0xc0, m6)
 10764 |     |         }
 10765 |     |     }
 10766 |     | 
 10767 |     |     function log(bytes32 p0, address p1, address p2, bool p3) internal pure {
 10768 |     |         bytes32 m0;
 10769 |     |         bytes32 m1;
 10770 |     |         bytes32 m2;
 10771 |     |         bytes32 m3;
 10772 |     |         bytes32 m4;
 10773 |     |         bytes32 m5;
 10774 |     |         bytes32 m6;
 10775 |     |         /// @solidity memory-safe-assembly
 10776 |     |         assembly {
 10777 |     |             function writeString(pos, w) {
 10778 |     |                 let length := 0
 10779 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10780 |     |                 mstore(pos, length)
 10781 |     |                 let shift := sub(256, shl(3, length))
 10782 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10783 |     |             }
 10784 |     |             m0 := mload(0x00)
 10785 |     |             m1 := mload(0x20)
 10786 |     |             m2 := mload(0x40)
 10787 |     |             m3 := mload(0x60)
 10788 |     |             m4 := mload(0x80)
 10789 |     |             m5 := mload(0xa0)
 10790 |     |             m6 := mload(0xc0)
 10791 |     |             // Selector of `log(string,address,address,bool)`.
 10792 |     |             mstore(0x00, 0xb59dbd60)
 10793 |     |             mstore(0x20, 0x80)
 10794 |     |             mstore(0x40, p1)
 10795 |     |             mstore(0x60, p2)
 10796 |     |             mstore(0x80, p3)
 10797 |     |             writeString(0xa0, p0)
 10798 |     |         }
 10799 |     |         _sendLogPayload(0x1c, 0xc4);
 10800 |     |         /// @solidity memory-safe-assembly
 10801 |     |         assembly {
 10802 |     |             mstore(0x00, m0)
 10803 |     |             mstore(0x20, m1)
 10804 |     |             mstore(0x40, m2)
 10805 |     |             mstore(0x60, m3)
 10806 |     |             mstore(0x80, m4)
 10807 |     |             mstore(0xa0, m5)
 10808 |     |             mstore(0xc0, m6)
 10809 |     |         }
 10810 |     |     }
 10811 |     | 
 10812 |     |     function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {
 10813 |     |         bytes32 m0;
 10814 |     |         bytes32 m1;
 10815 |     |         bytes32 m2;
 10816 |     |         bytes32 m3;
 10817 |     |         bytes32 m4;
 10818 |     |         bytes32 m5;
 10819 |     |         bytes32 m6;
 10820 |     |         /// @solidity memory-safe-assembly
 10821 |     |         assembly {
 10822 |     |             function writeString(pos, w) {
 10823 |     |                 let length := 0
 10824 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10825 |     |                 mstore(pos, length)
 10826 |     |                 let shift := sub(256, shl(3, length))
 10827 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10828 |     |             }
 10829 |     |             m0 := mload(0x00)
 10830 |     |             m1 := mload(0x20)
 10831 |     |             m2 := mload(0x40)
 10832 |     |             m3 := mload(0x60)
 10833 |     |             m4 := mload(0x80)
 10834 |     |             m5 := mload(0xa0)
 10835 |     |             m6 := mload(0xc0)
 10836 |     |             // Selector of `log(string,address,address,uint256)`.
 10837 |     |             mstore(0x00, 0x8ef3f399)
 10838 |     |             mstore(0x20, 0x80)
 10839 |     |             mstore(0x40, p1)
 10840 |     |             mstore(0x60, p2)
 10841 |     |             mstore(0x80, p3)
 10842 |     |             writeString(0xa0, p0)
 10843 |     |         }
 10844 |     |         _sendLogPayload(0x1c, 0xc4);
 10845 |     |         /// @solidity memory-safe-assembly
 10846 |     |         assembly {
 10847 |     |             mstore(0x00, m0)
 10848 |     |             mstore(0x20, m1)
 10849 |     |             mstore(0x40, m2)
 10850 |     |             mstore(0x60, m3)
 10851 |     |             mstore(0x80, m4)
 10852 |     |             mstore(0xa0, m5)
 10853 |     |             mstore(0xc0, m6)
 10854 |     |         }
 10855 |     |     }
 10856 |     | 
 10857 |     |     function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {
 10858 |     |         bytes32 m0;
 10859 |     |         bytes32 m1;
 10860 |     |         bytes32 m2;
 10861 |     |         bytes32 m3;
 10862 |     |         bytes32 m4;
 10863 |     |         bytes32 m5;
 10864 |     |         bytes32 m6;
 10865 |     |         bytes32 m7;
 10866 |     |         bytes32 m8;
 10867 |     |         /// @solidity memory-safe-assembly
 10868 |     |         assembly {
 10869 |     |             function writeString(pos, w) {
 10870 |     |                 let length := 0
 10871 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10872 |     |                 mstore(pos, length)
 10873 |     |                 let shift := sub(256, shl(3, length))
 10874 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10875 |     |             }
 10876 |     |             m0 := mload(0x00)
 10877 |     |             m1 := mload(0x20)
 10878 |     |             m2 := mload(0x40)
 10879 |     |             m3 := mload(0x60)
 10880 |     |             m4 := mload(0x80)
 10881 |     |             m5 := mload(0xa0)
 10882 |     |             m6 := mload(0xc0)
 10883 |     |             m7 := mload(0xe0)
 10884 |     |             m8 := mload(0x100)
 10885 |     |             // Selector of `log(string,address,address,string)`.
 10886 |     |             mstore(0x00, 0x800a1c67)
 10887 |     |             mstore(0x20, 0x80)
 10888 |     |             mstore(0x40, p1)
 10889 |     |             mstore(0x60, p2)
 10890 |     |             mstore(0x80, 0xc0)
 10891 |     |             writeString(0xa0, p0)
 10892 |     |             writeString(0xe0, p3)
 10893 |     |         }
 10894 |     |         _sendLogPayload(0x1c, 0x104);
 10895 |     |         /// @solidity memory-safe-assembly
 10896 |     |         assembly {
 10897 |     |             mstore(0x00, m0)
 10898 |     |             mstore(0x20, m1)
 10899 |     |             mstore(0x40, m2)
 10900 |     |             mstore(0x60, m3)
 10901 |     |             mstore(0x80, m4)
 10902 |     |             mstore(0xa0, m5)
 10903 |     |             mstore(0xc0, m6)
 10904 |     |             mstore(0xe0, m7)
 10905 |     |             mstore(0x100, m8)
 10906 |     |         }
 10907 |     |     }
 10908 |     | 
 10909 |     |     function log(bytes32 p0, address p1, bool p2, address p3) internal pure {
 10910 |     |         bytes32 m0;
 10911 |     |         bytes32 m1;
 10912 |     |         bytes32 m2;
 10913 |     |         bytes32 m3;
 10914 |     |         bytes32 m4;
 10915 |     |         bytes32 m5;
 10916 |     |         bytes32 m6;
 10917 |     |         /// @solidity memory-safe-assembly
 10918 |     |         assembly {
 10919 |     |             function writeString(pos, w) {
 10920 |     |                 let length := 0
 10921 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10922 |     |                 mstore(pos, length)
 10923 |     |                 let shift := sub(256, shl(3, length))
 10924 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10925 |     |             }
 10926 |     |             m0 := mload(0x00)
 10927 |     |             m1 := mload(0x20)
 10928 |     |             m2 := mload(0x40)
 10929 |     |             m3 := mload(0x60)
 10930 |     |             m4 := mload(0x80)
 10931 |     |             m5 := mload(0xa0)
 10932 |     |             m6 := mload(0xc0)
 10933 |     |             // Selector of `log(string,address,bool,address)`.
 10934 |     |             mstore(0x00, 0x223603bd)
 10935 |     |             mstore(0x20, 0x80)
 10936 |     |             mstore(0x40, p1)
 10937 |     |             mstore(0x60, p2)
 10938 |     |             mstore(0x80, p3)
 10939 |     |             writeString(0xa0, p0)
 10940 |     |         }
 10941 |     |         _sendLogPayload(0x1c, 0xc4);
 10942 |     |         /// @solidity memory-safe-assembly
 10943 |     |         assembly {
 10944 |     |             mstore(0x00, m0)
 10945 |     |             mstore(0x20, m1)
 10946 |     |             mstore(0x40, m2)
 10947 |     |             mstore(0x60, m3)
 10948 |     |             mstore(0x80, m4)
 10949 |     |             mstore(0xa0, m5)
 10950 |     |             mstore(0xc0, m6)
 10951 |     |         }
 10952 |     |     }
 10953 |     | 
 10954 |     |     function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {
 10955 |     |         bytes32 m0;
 10956 |     |         bytes32 m1;
 10957 |     |         bytes32 m2;
 10958 |     |         bytes32 m3;
 10959 |     |         bytes32 m4;
 10960 |     |         bytes32 m5;
 10961 |     |         bytes32 m6;
 10962 |     |         /// @solidity memory-safe-assembly
 10963 |     |         assembly {
 10964 |     |             function writeString(pos, w) {
 10965 |     |                 let length := 0
 10966 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 10967 |     |                 mstore(pos, length)
 10968 |     |                 let shift := sub(256, shl(3, length))
 10969 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 10970 |     |             }
 10971 |     |             m0 := mload(0x00)
 10972 |     |             m1 := mload(0x20)
 10973 |     |             m2 := mload(0x40)
 10974 |     |             m3 := mload(0x60)
 10975 |     |             m4 := mload(0x80)
 10976 |     |             m5 := mload(0xa0)
 10977 |     |             m6 := mload(0xc0)
 10978 |     |             // Selector of `log(string,address,bool,bool)`.
 10979 |     |             mstore(0x00, 0x79884c2b)
 10980 |     |             mstore(0x20, 0x80)
 10981 |     |             mstore(0x40, p1)
 10982 |     |             mstore(0x60, p2)
 10983 |     |             mstore(0x80, p3)
 10984 |     |             writeString(0xa0, p0)
 10985 |     |         }
 10986 |     |         _sendLogPayload(0x1c, 0xc4);
 10987 |     |         /// @solidity memory-safe-assembly
 10988 |     |         assembly {
 10989 |     |             mstore(0x00, m0)
 10990 |     |             mstore(0x20, m1)
 10991 |     |             mstore(0x40, m2)
 10992 |     |             mstore(0x60, m3)
 10993 |     |             mstore(0x80, m4)
 10994 |     |             mstore(0xa0, m5)
 10995 |     |             mstore(0xc0, m6)
 10996 |     |         }
 10997 |     |     }
 10998 |     | 
 10999 |     |     function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {
 11000 |     |         bytes32 m0;
 11001 |     |         bytes32 m1;
 11002 |     |         bytes32 m2;
 11003 |     |         bytes32 m3;
 11004 |     |         bytes32 m4;
 11005 |     |         bytes32 m5;
 11006 |     |         bytes32 m6;
 11007 |     |         /// @solidity memory-safe-assembly
 11008 |     |         assembly {
 11009 |     |             function writeString(pos, w) {
 11010 |     |                 let length := 0
 11011 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11012 |     |                 mstore(pos, length)
 11013 |     |                 let shift := sub(256, shl(3, length))
 11014 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11015 |     |             }
 11016 |     |             m0 := mload(0x00)
 11017 |     |             m1 := mload(0x20)
 11018 |     |             m2 := mload(0x40)
 11019 |     |             m3 := mload(0x60)
 11020 |     |             m4 := mload(0x80)
 11021 |     |             m5 := mload(0xa0)
 11022 |     |             m6 := mload(0xc0)
 11023 |     |             // Selector of `log(string,address,bool,uint256)`.
 11024 |     |             mstore(0x00, 0x3e9f866a)
 11025 |     |             mstore(0x20, 0x80)
 11026 |     |             mstore(0x40, p1)
 11027 |     |             mstore(0x60, p2)
 11028 |     |             mstore(0x80, p3)
 11029 |     |             writeString(0xa0, p0)
 11030 |     |         }
 11031 |     |         _sendLogPayload(0x1c, 0xc4);
 11032 |     |         /// @solidity memory-safe-assembly
 11033 |     |         assembly {
 11034 |     |             mstore(0x00, m0)
 11035 |     |             mstore(0x20, m1)
 11036 |     |             mstore(0x40, m2)
 11037 |     |             mstore(0x60, m3)
 11038 |     |             mstore(0x80, m4)
 11039 |     |             mstore(0xa0, m5)
 11040 |     |             mstore(0xc0, m6)
 11041 |     |         }
 11042 |     |     }
 11043 |     | 
 11044 |     |     function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {
 11045 |     |         bytes32 m0;
 11046 |     |         bytes32 m1;
 11047 |     |         bytes32 m2;
 11048 |     |         bytes32 m3;
 11049 |     |         bytes32 m4;
 11050 |     |         bytes32 m5;
 11051 |     |         bytes32 m6;
 11052 |     |         bytes32 m7;
 11053 |     |         bytes32 m8;
 11054 |     |         /// @solidity memory-safe-assembly
 11055 |     |         assembly {
 11056 |     |             function writeString(pos, w) {
 11057 |     |                 let length := 0
 11058 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11059 |     |                 mstore(pos, length)
 11060 |     |                 let shift := sub(256, shl(3, length))
 11061 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11062 |     |             }
 11063 |     |             m0 := mload(0x00)
 11064 |     |             m1 := mload(0x20)
 11065 |     |             m2 := mload(0x40)
 11066 |     |             m3 := mload(0x60)
 11067 |     |             m4 := mload(0x80)
 11068 |     |             m5 := mload(0xa0)
 11069 |     |             m6 := mload(0xc0)
 11070 |     |             m7 := mload(0xe0)
 11071 |     |             m8 := mload(0x100)
 11072 |     |             // Selector of `log(string,address,bool,string)`.
 11073 |     |             mstore(0x00, 0x0454c079)
 11074 |     |             mstore(0x20, 0x80)
 11075 |     |             mstore(0x40, p1)
 11076 |     |             mstore(0x60, p2)
 11077 |     |             mstore(0x80, 0xc0)
 11078 |     |             writeString(0xa0, p0)
 11079 |     |             writeString(0xe0, p3)
 11080 |     |         }
 11081 |     |         _sendLogPayload(0x1c, 0x104);
 11082 |     |         /// @solidity memory-safe-assembly
 11083 |     |         assembly {
 11084 |     |             mstore(0x00, m0)
 11085 |     |             mstore(0x20, m1)
 11086 |     |             mstore(0x40, m2)
 11087 |     |             mstore(0x60, m3)
 11088 |     |             mstore(0x80, m4)
 11089 |     |             mstore(0xa0, m5)
 11090 |     |             mstore(0xc0, m6)
 11091 |     |             mstore(0xe0, m7)
 11092 |     |             mstore(0x100, m8)
 11093 |     |         }
 11094 |     |     }
 11095 |     | 
 11096 |     |     function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {
 11097 |     |         bytes32 m0;
 11098 |     |         bytes32 m1;
 11099 |     |         bytes32 m2;
 11100 |     |         bytes32 m3;
 11101 |     |         bytes32 m4;
 11102 |     |         bytes32 m5;
 11103 |     |         bytes32 m6;
 11104 |     |         /// @solidity memory-safe-assembly
 11105 |     |         assembly {
 11106 |     |             function writeString(pos, w) {
 11107 |     |                 let length := 0
 11108 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11109 |     |                 mstore(pos, length)
 11110 |     |                 let shift := sub(256, shl(3, length))
 11111 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11112 |     |             }
 11113 |     |             m0 := mload(0x00)
 11114 |     |             m1 := mload(0x20)
 11115 |     |             m2 := mload(0x40)
 11116 |     |             m3 := mload(0x60)
 11117 |     |             m4 := mload(0x80)
 11118 |     |             m5 := mload(0xa0)
 11119 |     |             m6 := mload(0xc0)
 11120 |     |             // Selector of `log(string,address,uint256,address)`.
 11121 |     |             mstore(0x00, 0x63fb8bc5)
 11122 |     |             mstore(0x20, 0x80)
 11123 |     |             mstore(0x40, p1)
 11124 |     |             mstore(0x60, p2)
 11125 |     |             mstore(0x80, p3)
 11126 |     |             writeString(0xa0, p0)
 11127 |     |         }
 11128 |     |         _sendLogPayload(0x1c, 0xc4);
 11129 |     |         /// @solidity memory-safe-assembly
 11130 |     |         assembly {
 11131 |     |             mstore(0x00, m0)
 11132 |     |             mstore(0x20, m1)
 11133 |     |             mstore(0x40, m2)
 11134 |     |             mstore(0x60, m3)
 11135 |     |             mstore(0x80, m4)
 11136 |     |             mstore(0xa0, m5)
 11137 |     |             mstore(0xc0, m6)
 11138 |     |         }
 11139 |     |     }
 11140 |     | 
 11141 |     |     function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {
 11142 |     |         bytes32 m0;
 11143 |     |         bytes32 m1;
 11144 |     |         bytes32 m2;
 11145 |     |         bytes32 m3;
 11146 |     |         bytes32 m4;
 11147 |     |         bytes32 m5;
 11148 |     |         bytes32 m6;
 11149 |     |         /// @solidity memory-safe-assembly
 11150 |     |         assembly {
 11151 |     |             function writeString(pos, w) {
 11152 |     |                 let length := 0
 11153 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11154 |     |                 mstore(pos, length)
 11155 |     |                 let shift := sub(256, shl(3, length))
 11156 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11157 |     |             }
 11158 |     |             m0 := mload(0x00)
 11159 |     |             m1 := mload(0x20)
 11160 |     |             m2 := mload(0x40)
 11161 |     |             m3 := mload(0x60)
 11162 |     |             m4 := mload(0x80)
 11163 |     |             m5 := mload(0xa0)
 11164 |     |             m6 := mload(0xc0)
 11165 |     |             // Selector of `log(string,address,uint256,bool)`.
 11166 |     |             mstore(0x00, 0xfc4845f0)
 11167 |     |             mstore(0x20, 0x80)
 11168 |     |             mstore(0x40, p1)
 11169 |     |             mstore(0x60, p2)
 11170 |     |             mstore(0x80, p3)
 11171 |     |             writeString(0xa0, p0)
 11172 |     |         }
 11173 |     |         _sendLogPayload(0x1c, 0xc4);
 11174 |     |         /// @solidity memory-safe-assembly
 11175 |     |         assembly {
 11176 |     |             mstore(0x00, m0)
 11177 |     |             mstore(0x20, m1)
 11178 |     |             mstore(0x40, m2)
 11179 |     |             mstore(0x60, m3)
 11180 |     |             mstore(0x80, m4)
 11181 |     |             mstore(0xa0, m5)
 11182 |     |             mstore(0xc0, m6)
 11183 |     |         }
 11184 |     |     }
 11185 |     | 
 11186 |     |     function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {
 11187 |     |         bytes32 m0;
 11188 |     |         bytes32 m1;
 11189 |     |         bytes32 m2;
 11190 |     |         bytes32 m3;
 11191 |     |         bytes32 m4;
 11192 |     |         bytes32 m5;
 11193 |     |         bytes32 m6;
 11194 |     |         /// @solidity memory-safe-assembly
 11195 |     |         assembly {
 11196 |     |             function writeString(pos, w) {
 11197 |     |                 let length := 0
 11198 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11199 |     |                 mstore(pos, length)
 11200 |     |                 let shift := sub(256, shl(3, length))
 11201 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11202 |     |             }
 11203 |     |             m0 := mload(0x00)
 11204 |     |             m1 := mload(0x20)
 11205 |     |             m2 := mload(0x40)
 11206 |     |             m3 := mload(0x60)
 11207 |     |             m4 := mload(0x80)
 11208 |     |             m5 := mload(0xa0)
 11209 |     |             m6 := mload(0xc0)
 11210 |     |             // Selector of `log(string,address,uint256,uint256)`.
 11211 |     |             mstore(0x00, 0xf8f51b1e)
 11212 |     |             mstore(0x20, 0x80)
 11213 |     |             mstore(0x40, p1)
 11214 |     |             mstore(0x60, p2)
 11215 |     |             mstore(0x80, p3)
 11216 |     |             writeString(0xa0, p0)
 11217 |     |         }
 11218 |     |         _sendLogPayload(0x1c, 0xc4);
 11219 |     |         /// @solidity memory-safe-assembly
 11220 |     |         assembly {
 11221 |     |             mstore(0x00, m0)
 11222 |     |             mstore(0x20, m1)
 11223 |     |             mstore(0x40, m2)
 11224 |     |             mstore(0x60, m3)
 11225 |     |             mstore(0x80, m4)
 11226 |     |             mstore(0xa0, m5)
 11227 |     |             mstore(0xc0, m6)
 11228 |     |         }
 11229 |     |     }
 11230 |     | 
 11231 |     |     function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {
 11232 |     |         bytes32 m0;
 11233 |     |         bytes32 m1;
 11234 |     |         bytes32 m2;
 11235 |     |         bytes32 m3;
 11236 |     |         bytes32 m4;
 11237 |     |         bytes32 m5;
 11238 |     |         bytes32 m6;
 11239 |     |         bytes32 m7;
 11240 |     |         bytes32 m8;
 11241 |     |         /// @solidity memory-safe-assembly
 11242 |     |         assembly {
 11243 |     |             function writeString(pos, w) {
 11244 |     |                 let length := 0
 11245 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11246 |     |                 mstore(pos, length)
 11247 |     |                 let shift := sub(256, shl(3, length))
 11248 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11249 |     |             }
 11250 |     |             m0 := mload(0x00)
 11251 |     |             m1 := mload(0x20)
 11252 |     |             m2 := mload(0x40)
 11253 |     |             m3 := mload(0x60)
 11254 |     |             m4 := mload(0x80)
 11255 |     |             m5 := mload(0xa0)
 11256 |     |             m6 := mload(0xc0)
 11257 |     |             m7 := mload(0xe0)
 11258 |     |             m8 := mload(0x100)
 11259 |     |             // Selector of `log(string,address,uint256,string)`.
 11260 |     |             mstore(0x00, 0x5a477632)
 11261 |     |             mstore(0x20, 0x80)
 11262 |     |             mstore(0x40, p1)
 11263 |     |             mstore(0x60, p2)
 11264 |     |             mstore(0x80, 0xc0)
 11265 |     |             writeString(0xa0, p0)
 11266 |     |             writeString(0xe0, p3)
 11267 |     |         }
 11268 |     |         _sendLogPayload(0x1c, 0x104);
 11269 |     |         /// @solidity memory-safe-assembly
 11270 |     |         assembly {
 11271 |     |             mstore(0x00, m0)
 11272 |     |             mstore(0x20, m1)
 11273 |     |             mstore(0x40, m2)
 11274 |     |             mstore(0x60, m3)
 11275 |     |             mstore(0x80, m4)
 11276 |     |             mstore(0xa0, m5)
 11277 |     |             mstore(0xc0, m6)
 11278 |     |             mstore(0xe0, m7)
 11279 |     |             mstore(0x100, m8)
 11280 |     |         }
 11281 |     |     }
 11282 |     | 
 11283 |     |     function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {
 11284 |     |         bytes32 m0;
 11285 |     |         bytes32 m1;
 11286 |     |         bytes32 m2;
 11287 |     |         bytes32 m3;
 11288 |     |         bytes32 m4;
 11289 |     |         bytes32 m5;
 11290 |     |         bytes32 m6;
 11291 |     |         bytes32 m7;
 11292 |     |         bytes32 m8;
 11293 |     |         /// @solidity memory-safe-assembly
 11294 |     |         assembly {
 11295 |     |             function writeString(pos, w) {
 11296 |     |                 let length := 0
 11297 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11298 |     |                 mstore(pos, length)
 11299 |     |                 let shift := sub(256, shl(3, length))
 11300 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11301 |     |             }
 11302 |     |             m0 := mload(0x00)
 11303 |     |             m1 := mload(0x20)
 11304 |     |             m2 := mload(0x40)
 11305 |     |             m3 := mload(0x60)
 11306 |     |             m4 := mload(0x80)
 11307 |     |             m5 := mload(0xa0)
 11308 |     |             m6 := mload(0xc0)
 11309 |     |             m7 := mload(0xe0)
 11310 |     |             m8 := mload(0x100)
 11311 |     |             // Selector of `log(string,address,string,address)`.
 11312 |     |             mstore(0x00, 0xaabc9a31)
 11313 |     |             mstore(0x20, 0x80)
 11314 |     |             mstore(0x40, p1)
 11315 |     |             mstore(0x60, 0xc0)
 11316 |     |             mstore(0x80, p3)
 11317 |     |             writeString(0xa0, p0)
 11318 |     |             writeString(0xe0, p2)
 11319 |     |         }
 11320 |     |         _sendLogPayload(0x1c, 0x104);
 11321 |     |         /// @solidity memory-safe-assembly
 11322 |     |         assembly {
 11323 |     |             mstore(0x00, m0)
 11324 |     |             mstore(0x20, m1)
 11325 |     |             mstore(0x40, m2)
 11326 |     |             mstore(0x60, m3)
 11327 |     |             mstore(0x80, m4)
 11328 |     |             mstore(0xa0, m5)
 11329 |     |             mstore(0xc0, m6)
 11330 |     |             mstore(0xe0, m7)
 11331 |     |             mstore(0x100, m8)
 11332 |     |         }
 11333 |     |     }
 11334 |     | 
 11335 |     |     function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {
 11336 |     |         bytes32 m0;
 11337 |     |         bytes32 m1;
 11338 |     |         bytes32 m2;
 11339 |     |         bytes32 m3;
 11340 |     |         bytes32 m4;
 11341 |     |         bytes32 m5;
 11342 |     |         bytes32 m6;
 11343 |     |         bytes32 m7;
 11344 |     |         bytes32 m8;
 11345 |     |         /// @solidity memory-safe-assembly
 11346 |     |         assembly {
 11347 |     |             function writeString(pos, w) {
 11348 |     |                 let length := 0
 11349 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11350 |     |                 mstore(pos, length)
 11351 |     |                 let shift := sub(256, shl(3, length))
 11352 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11353 |     |             }
 11354 |     |             m0 := mload(0x00)
 11355 |     |             m1 := mload(0x20)
 11356 |     |             m2 := mload(0x40)
 11357 |     |             m3 := mload(0x60)
 11358 |     |             m4 := mload(0x80)
 11359 |     |             m5 := mload(0xa0)
 11360 |     |             m6 := mload(0xc0)
 11361 |     |             m7 := mload(0xe0)
 11362 |     |             m8 := mload(0x100)
 11363 |     |             // Selector of `log(string,address,string,bool)`.
 11364 |     |             mstore(0x00, 0x5f15d28c)
 11365 |     |             mstore(0x20, 0x80)
 11366 |     |             mstore(0x40, p1)
 11367 |     |             mstore(0x60, 0xc0)
 11368 |     |             mstore(0x80, p3)
 11369 |     |             writeString(0xa0, p0)
 11370 |     |             writeString(0xe0, p2)
 11371 |     |         }
 11372 |     |         _sendLogPayload(0x1c, 0x104);
 11373 |     |         /// @solidity memory-safe-assembly
 11374 |     |         assembly {
 11375 |     |             mstore(0x00, m0)
 11376 |     |             mstore(0x20, m1)
 11377 |     |             mstore(0x40, m2)
 11378 |     |             mstore(0x60, m3)
 11379 |     |             mstore(0x80, m4)
 11380 |     |             mstore(0xa0, m5)
 11381 |     |             mstore(0xc0, m6)
 11382 |     |             mstore(0xe0, m7)
 11383 |     |             mstore(0x100, m8)
 11384 |     |         }
 11385 |     |     }
 11386 |     | 
 11387 |     |     function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {
 11388 |     |         bytes32 m0;
 11389 |     |         bytes32 m1;
 11390 |     |         bytes32 m2;
 11391 |     |         bytes32 m3;
 11392 |     |         bytes32 m4;
 11393 |     |         bytes32 m5;
 11394 |     |         bytes32 m6;
 11395 |     |         bytes32 m7;
 11396 |     |         bytes32 m8;
 11397 |     |         /// @solidity memory-safe-assembly
 11398 |     |         assembly {
 11399 |     |             function writeString(pos, w) {
 11400 |     |                 let length := 0
 11401 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11402 |     |                 mstore(pos, length)
 11403 |     |                 let shift := sub(256, shl(3, length))
 11404 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11405 |     |             }
 11406 |     |             m0 := mload(0x00)
 11407 |     |             m1 := mload(0x20)
 11408 |     |             m2 := mload(0x40)
 11409 |     |             m3 := mload(0x60)
 11410 |     |             m4 := mload(0x80)
 11411 |     |             m5 := mload(0xa0)
 11412 |     |             m6 := mload(0xc0)
 11413 |     |             m7 := mload(0xe0)
 11414 |     |             m8 := mload(0x100)
 11415 |     |             // Selector of `log(string,address,string,uint256)`.
 11416 |     |             mstore(0x00, 0x91d1112e)
 11417 |     |             mstore(0x20, 0x80)
 11418 |     |             mstore(0x40, p1)
 11419 |     |             mstore(0x60, 0xc0)
 11420 |     |             mstore(0x80, p3)
 11421 |     |             writeString(0xa0, p0)
 11422 |     |             writeString(0xe0, p2)
 11423 |     |         }
 11424 |     |         _sendLogPayload(0x1c, 0x104);
 11425 |     |         /// @solidity memory-safe-assembly
 11426 |     |         assembly {
 11427 |     |             mstore(0x00, m0)
 11428 |     |             mstore(0x20, m1)
 11429 |     |             mstore(0x40, m2)
 11430 |     |             mstore(0x60, m3)
 11431 |     |             mstore(0x80, m4)
 11432 |     |             mstore(0xa0, m5)
 11433 |     |             mstore(0xc0, m6)
 11434 |     |             mstore(0xe0, m7)
 11435 |     |             mstore(0x100, m8)
 11436 |     |         }
 11437 |     |     }
 11438 |     | 
 11439 |     |     function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {
 11440 |     |         bytes32 m0;
 11441 |     |         bytes32 m1;
 11442 |     |         bytes32 m2;
 11443 |     |         bytes32 m3;
 11444 |     |         bytes32 m4;
 11445 |     |         bytes32 m5;
 11446 |     |         bytes32 m6;
 11447 |     |         bytes32 m7;
 11448 |     |         bytes32 m8;
 11449 |     |         bytes32 m9;
 11450 |     |         bytes32 m10;
 11451 |     |         /// @solidity memory-safe-assembly
 11452 |     |         assembly {
 11453 |     |             function writeString(pos, w) {
 11454 |     |                 let length := 0
 11455 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11456 |     |                 mstore(pos, length)
 11457 |     |                 let shift := sub(256, shl(3, length))
 11458 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11459 |     |             }
 11460 |     |             m0 := mload(0x00)
 11461 |     |             m1 := mload(0x20)
 11462 |     |             m2 := mload(0x40)
 11463 |     |             m3 := mload(0x60)
 11464 |     |             m4 := mload(0x80)
 11465 |     |             m5 := mload(0xa0)
 11466 |     |             m6 := mload(0xc0)
 11467 |     |             m7 := mload(0xe0)
 11468 |     |             m8 := mload(0x100)
 11469 |     |             m9 := mload(0x120)
 11470 |     |             m10 := mload(0x140)
 11471 |     |             // Selector of `log(string,address,string,string)`.
 11472 |     |             mstore(0x00, 0x245986f2)
 11473 |     |             mstore(0x20, 0x80)
 11474 |     |             mstore(0x40, p1)
 11475 |     |             mstore(0x60, 0xc0)
 11476 |     |             mstore(0x80, 0x100)
 11477 |     |             writeString(0xa0, p0)
 11478 |     |             writeString(0xe0, p2)
 11479 |     |             writeString(0x120, p3)
 11480 |     |         }
 11481 |     |         _sendLogPayload(0x1c, 0x144);
 11482 |     |         /// @solidity memory-safe-assembly
 11483 |     |         assembly {
 11484 |     |             mstore(0x00, m0)
 11485 |     |             mstore(0x20, m1)
 11486 |     |             mstore(0x40, m2)
 11487 |     |             mstore(0x60, m3)
 11488 |     |             mstore(0x80, m4)
 11489 |     |             mstore(0xa0, m5)
 11490 |     |             mstore(0xc0, m6)
 11491 |     |             mstore(0xe0, m7)
 11492 |     |             mstore(0x100, m8)
 11493 |     |             mstore(0x120, m9)
 11494 |     |             mstore(0x140, m10)
 11495 |     |         }
 11496 |     |     }
 11497 |     | 
 11498 |     |     function log(bytes32 p0, bool p1, address p2, address p3) internal pure {
 11499 |     |         bytes32 m0;
 11500 |     |         bytes32 m1;
 11501 |     |         bytes32 m2;
 11502 |     |         bytes32 m3;
 11503 |     |         bytes32 m4;
 11504 |     |         bytes32 m5;
 11505 |     |         bytes32 m6;
 11506 |     |         /// @solidity memory-safe-assembly
 11507 |     |         assembly {
 11508 |     |             function writeString(pos, w) {
 11509 |     |                 let length := 0
 11510 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11511 |     |                 mstore(pos, length)
 11512 |     |                 let shift := sub(256, shl(3, length))
 11513 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11514 |     |             }
 11515 |     |             m0 := mload(0x00)
 11516 |     |             m1 := mload(0x20)
 11517 |     |             m2 := mload(0x40)
 11518 |     |             m3 := mload(0x60)
 11519 |     |             m4 := mload(0x80)
 11520 |     |             m5 := mload(0xa0)
 11521 |     |             m6 := mload(0xc0)
 11522 |     |             // Selector of `log(string,bool,address,address)`.
 11523 |     |             mstore(0x00, 0x33e9dd1d)
 11524 |     |             mstore(0x20, 0x80)
 11525 |     |             mstore(0x40, p1)
 11526 |     |             mstore(0x60, p2)
 11527 |     |             mstore(0x80, p3)
 11528 |     |             writeString(0xa0, p0)
 11529 |     |         }
 11530 |     |         _sendLogPayload(0x1c, 0xc4);
 11531 |     |         /// @solidity memory-safe-assembly
 11532 |     |         assembly {
 11533 |     |             mstore(0x00, m0)
 11534 |     |             mstore(0x20, m1)
 11535 |     |             mstore(0x40, m2)
 11536 |     |             mstore(0x60, m3)
 11537 |     |             mstore(0x80, m4)
 11538 |     |             mstore(0xa0, m5)
 11539 |     |             mstore(0xc0, m6)
 11540 |     |         }
 11541 |     |     }
 11542 |     | 
 11543 |     |     function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {
 11544 |     |         bytes32 m0;
 11545 |     |         bytes32 m1;
 11546 |     |         bytes32 m2;
 11547 |     |         bytes32 m3;
 11548 |     |         bytes32 m4;
 11549 |     |         bytes32 m5;
 11550 |     |         bytes32 m6;
 11551 |     |         /// @solidity memory-safe-assembly
 11552 |     |         assembly {
 11553 |     |             function writeString(pos, w) {
 11554 |     |                 let length := 0
 11555 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11556 |     |                 mstore(pos, length)
 11557 |     |                 let shift := sub(256, shl(3, length))
 11558 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11559 |     |             }
 11560 |     |             m0 := mload(0x00)
 11561 |     |             m1 := mload(0x20)
 11562 |     |             m2 := mload(0x40)
 11563 |     |             m3 := mload(0x60)
 11564 |     |             m4 := mload(0x80)
 11565 |     |             m5 := mload(0xa0)
 11566 |     |             m6 := mload(0xc0)
 11567 |     |             // Selector of `log(string,bool,address,bool)`.
 11568 |     |             mstore(0x00, 0x958c28c6)
 11569 |     |             mstore(0x20, 0x80)
 11570 |     |             mstore(0x40, p1)
 11571 |     |             mstore(0x60, p2)
 11572 |     |             mstore(0x80, p3)
 11573 |     |             writeString(0xa0, p0)
 11574 |     |         }
 11575 |     |         _sendLogPayload(0x1c, 0xc4);
 11576 |     |         /// @solidity memory-safe-assembly
 11577 |     |         assembly {
 11578 |     |             mstore(0x00, m0)
 11579 |     |             mstore(0x20, m1)
 11580 |     |             mstore(0x40, m2)
 11581 |     |             mstore(0x60, m3)
 11582 |     |             mstore(0x80, m4)
 11583 |     |             mstore(0xa0, m5)
 11584 |     |             mstore(0xc0, m6)
 11585 |     |         }
 11586 |     |     }
 11587 |     | 
 11588 |     |     function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {
 11589 |     |         bytes32 m0;
 11590 |     |         bytes32 m1;
 11591 |     |         bytes32 m2;
 11592 |     |         bytes32 m3;
 11593 |     |         bytes32 m4;
 11594 |     |         bytes32 m5;
 11595 |     |         bytes32 m6;
 11596 |     |         /// @solidity memory-safe-assembly
 11597 |     |         assembly {
 11598 |     |             function writeString(pos, w) {
 11599 |     |                 let length := 0
 11600 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11601 |     |                 mstore(pos, length)
 11602 |     |                 let shift := sub(256, shl(3, length))
 11603 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11604 |     |             }
 11605 |     |             m0 := mload(0x00)
 11606 |     |             m1 := mload(0x20)
 11607 |     |             m2 := mload(0x40)
 11608 |     |             m3 := mload(0x60)
 11609 |     |             m4 := mload(0x80)
 11610 |     |             m5 := mload(0xa0)
 11611 |     |             m6 := mload(0xc0)
 11612 |     |             // Selector of `log(string,bool,address,uint256)`.
 11613 |     |             mstore(0x00, 0x5d08bb05)
 11614 |     |             mstore(0x20, 0x80)
 11615 |     |             mstore(0x40, p1)
 11616 |     |             mstore(0x60, p2)
 11617 |     |             mstore(0x80, p3)
 11618 |     |             writeString(0xa0, p0)
 11619 |     |         }
 11620 |     |         _sendLogPayload(0x1c, 0xc4);
 11621 |     |         /// @solidity memory-safe-assembly
 11622 |     |         assembly {
 11623 |     |             mstore(0x00, m0)
 11624 |     |             mstore(0x20, m1)
 11625 |     |             mstore(0x40, m2)
 11626 |     |             mstore(0x60, m3)
 11627 |     |             mstore(0x80, m4)
 11628 |     |             mstore(0xa0, m5)
 11629 |     |             mstore(0xc0, m6)
 11630 |     |         }
 11631 |     |     }
 11632 |     | 
 11633 |     |     function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {
 11634 |     |         bytes32 m0;
 11635 |     |         bytes32 m1;
 11636 |     |         bytes32 m2;
 11637 |     |         bytes32 m3;
 11638 |     |         bytes32 m4;
 11639 |     |         bytes32 m5;
 11640 |     |         bytes32 m6;
 11641 |     |         bytes32 m7;
 11642 |     |         bytes32 m8;
 11643 |     |         /// @solidity memory-safe-assembly
 11644 |     |         assembly {
 11645 |     |             function writeString(pos, w) {
 11646 |     |                 let length := 0
 11647 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11648 |     |                 mstore(pos, length)
 11649 |     |                 let shift := sub(256, shl(3, length))
 11650 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11651 |     |             }
 11652 |     |             m0 := mload(0x00)
 11653 |     |             m1 := mload(0x20)
 11654 |     |             m2 := mload(0x40)
 11655 |     |             m3 := mload(0x60)
 11656 |     |             m4 := mload(0x80)
 11657 |     |             m5 := mload(0xa0)
 11658 |     |             m6 := mload(0xc0)
 11659 |     |             m7 := mload(0xe0)
 11660 |     |             m8 := mload(0x100)
 11661 |     |             // Selector of `log(string,bool,address,string)`.
 11662 |     |             mstore(0x00, 0x2d8e33a4)
 11663 |     |             mstore(0x20, 0x80)
 11664 |     |             mstore(0x40, p1)
 11665 |     |             mstore(0x60, p2)
 11666 |     |             mstore(0x80, 0xc0)
 11667 |     |             writeString(0xa0, p0)
 11668 |     |             writeString(0xe0, p3)
 11669 |     |         }
 11670 |     |         _sendLogPayload(0x1c, 0x104);
 11671 |     |         /// @solidity memory-safe-assembly
 11672 |     |         assembly {
 11673 |     |             mstore(0x00, m0)
 11674 |     |             mstore(0x20, m1)
 11675 |     |             mstore(0x40, m2)
 11676 |     |             mstore(0x60, m3)
 11677 |     |             mstore(0x80, m4)
 11678 |     |             mstore(0xa0, m5)
 11679 |     |             mstore(0xc0, m6)
 11680 |     |             mstore(0xe0, m7)
 11681 |     |             mstore(0x100, m8)
 11682 |     |         }
 11683 |     |     }
 11684 |     | 
 11685 |     |     function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {
 11686 |     |         bytes32 m0;
 11687 |     |         bytes32 m1;
 11688 |     |         bytes32 m2;
 11689 |     |         bytes32 m3;
 11690 |     |         bytes32 m4;
 11691 |     |         bytes32 m5;
 11692 |     |         bytes32 m6;
 11693 |     |         /// @solidity memory-safe-assembly
 11694 |     |         assembly {
 11695 |     |             function writeString(pos, w) {
 11696 |     |                 let length := 0
 11697 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11698 |     |                 mstore(pos, length)
 11699 |     |                 let shift := sub(256, shl(3, length))
 11700 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11701 |     |             }
 11702 |     |             m0 := mload(0x00)
 11703 |     |             m1 := mload(0x20)
 11704 |     |             m2 := mload(0x40)
 11705 |     |             m3 := mload(0x60)
 11706 |     |             m4 := mload(0x80)
 11707 |     |             m5 := mload(0xa0)
 11708 |     |             m6 := mload(0xc0)
 11709 |     |             // Selector of `log(string,bool,bool,address)`.
 11710 |     |             mstore(0x00, 0x7190a529)
 11711 |     |             mstore(0x20, 0x80)
 11712 |     |             mstore(0x40, p1)
 11713 |     |             mstore(0x60, p2)
 11714 |     |             mstore(0x80, p3)
 11715 |     |             writeString(0xa0, p0)
 11716 |     |         }
 11717 |     |         _sendLogPayload(0x1c, 0xc4);
 11718 |     |         /// @solidity memory-safe-assembly
 11719 |     |         assembly {
 11720 |     |             mstore(0x00, m0)
 11721 |     |             mstore(0x20, m1)
 11722 |     |             mstore(0x40, m2)
 11723 |     |             mstore(0x60, m3)
 11724 |     |             mstore(0x80, m4)
 11725 |     |             mstore(0xa0, m5)
 11726 |     |             mstore(0xc0, m6)
 11727 |     |         }
 11728 |     |     }
 11729 |     | 
 11730 |     |     function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {
 11731 |     |         bytes32 m0;
 11732 |     |         bytes32 m1;
 11733 |     |         bytes32 m2;
 11734 |     |         bytes32 m3;
 11735 |     |         bytes32 m4;
 11736 |     |         bytes32 m5;
 11737 |     |         bytes32 m6;
 11738 |     |         /// @solidity memory-safe-assembly
 11739 |     |         assembly {
 11740 |     |             function writeString(pos, w) {
 11741 |     |                 let length := 0
 11742 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11743 |     |                 mstore(pos, length)
 11744 |     |                 let shift := sub(256, shl(3, length))
 11745 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11746 |     |             }
 11747 |     |             m0 := mload(0x00)
 11748 |     |             m1 := mload(0x20)
 11749 |     |             m2 := mload(0x40)
 11750 |     |             m3 := mload(0x60)
 11751 |     |             m4 := mload(0x80)
 11752 |     |             m5 := mload(0xa0)
 11753 |     |             m6 := mload(0xc0)
 11754 |     |             // Selector of `log(string,bool,bool,bool)`.
 11755 |     |             mstore(0x00, 0x895af8c5)
 11756 |     |             mstore(0x20, 0x80)
 11757 |     |             mstore(0x40, p1)
 11758 |     |             mstore(0x60, p2)
 11759 |     |             mstore(0x80, p3)
 11760 |     |             writeString(0xa0, p0)
 11761 |     |         }
 11762 |     |         _sendLogPayload(0x1c, 0xc4);
 11763 |     |         /// @solidity memory-safe-assembly
 11764 |     |         assembly {
 11765 |     |             mstore(0x00, m0)
 11766 |     |             mstore(0x20, m1)
 11767 |     |             mstore(0x40, m2)
 11768 |     |             mstore(0x60, m3)
 11769 |     |             mstore(0x80, m4)
 11770 |     |             mstore(0xa0, m5)
 11771 |     |             mstore(0xc0, m6)
 11772 |     |         }
 11773 |     |     }
 11774 |     | 
 11775 |     |     function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {
 11776 |     |         bytes32 m0;
 11777 |     |         bytes32 m1;
 11778 |     |         bytes32 m2;
 11779 |     |         bytes32 m3;
 11780 |     |         bytes32 m4;
 11781 |     |         bytes32 m5;
 11782 |     |         bytes32 m6;
 11783 |     |         /// @solidity memory-safe-assembly
 11784 |     |         assembly {
 11785 |     |             function writeString(pos, w) {
 11786 |     |                 let length := 0
 11787 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11788 |     |                 mstore(pos, length)
 11789 |     |                 let shift := sub(256, shl(3, length))
 11790 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11791 |     |             }
 11792 |     |             m0 := mload(0x00)
 11793 |     |             m1 := mload(0x20)
 11794 |     |             m2 := mload(0x40)
 11795 |     |             m3 := mload(0x60)
 11796 |     |             m4 := mload(0x80)
 11797 |     |             m5 := mload(0xa0)
 11798 |     |             m6 := mload(0xc0)
 11799 |     |             // Selector of `log(string,bool,bool,uint256)`.
 11800 |     |             mstore(0x00, 0x8e3f78a9)
 11801 |     |             mstore(0x20, 0x80)
 11802 |     |             mstore(0x40, p1)
 11803 |     |             mstore(0x60, p2)
 11804 |     |             mstore(0x80, p3)
 11805 |     |             writeString(0xa0, p0)
 11806 |     |         }
 11807 |     |         _sendLogPayload(0x1c, 0xc4);
 11808 |     |         /// @solidity memory-safe-assembly
 11809 |     |         assembly {
 11810 |     |             mstore(0x00, m0)
 11811 |     |             mstore(0x20, m1)
 11812 |     |             mstore(0x40, m2)
 11813 |     |             mstore(0x60, m3)
 11814 |     |             mstore(0x80, m4)
 11815 |     |             mstore(0xa0, m5)
 11816 |     |             mstore(0xc0, m6)
 11817 |     |         }
 11818 |     |     }
 11819 |     | 
 11820 |     |     function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {
 11821 |     |         bytes32 m0;
 11822 |     |         bytes32 m1;
 11823 |     |         bytes32 m2;
 11824 |     |         bytes32 m3;
 11825 |     |         bytes32 m4;
 11826 |     |         bytes32 m5;
 11827 |     |         bytes32 m6;
 11828 |     |         bytes32 m7;
 11829 |     |         bytes32 m8;
 11830 |     |         /// @solidity memory-safe-assembly
 11831 |     |         assembly {
 11832 |     |             function writeString(pos, w) {
 11833 |     |                 let length := 0
 11834 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11835 |     |                 mstore(pos, length)
 11836 |     |                 let shift := sub(256, shl(3, length))
 11837 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11838 |     |             }
 11839 |     |             m0 := mload(0x00)
 11840 |     |             m1 := mload(0x20)
 11841 |     |             m2 := mload(0x40)
 11842 |     |             m3 := mload(0x60)
 11843 |     |             m4 := mload(0x80)
 11844 |     |             m5 := mload(0xa0)
 11845 |     |             m6 := mload(0xc0)
 11846 |     |             m7 := mload(0xe0)
 11847 |     |             m8 := mload(0x100)
 11848 |     |             // Selector of `log(string,bool,bool,string)`.
 11849 |     |             mstore(0x00, 0x9d22d5dd)
 11850 |     |             mstore(0x20, 0x80)
 11851 |     |             mstore(0x40, p1)
 11852 |     |             mstore(0x60, p2)
 11853 |     |             mstore(0x80, 0xc0)
 11854 |     |             writeString(0xa0, p0)
 11855 |     |             writeString(0xe0, p3)
 11856 |     |         }
 11857 |     |         _sendLogPayload(0x1c, 0x104);
 11858 |     |         /// @solidity memory-safe-assembly
 11859 |     |         assembly {
 11860 |     |             mstore(0x00, m0)
 11861 |     |             mstore(0x20, m1)
 11862 |     |             mstore(0x40, m2)
 11863 |     |             mstore(0x60, m3)
 11864 |     |             mstore(0x80, m4)
 11865 |     |             mstore(0xa0, m5)
 11866 |     |             mstore(0xc0, m6)
 11867 |     |             mstore(0xe0, m7)
 11868 |     |             mstore(0x100, m8)
 11869 |     |         }
 11870 |     |     }
 11871 |     | 
 11872 |     |     function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {
 11873 |     |         bytes32 m0;
 11874 |     |         bytes32 m1;
 11875 |     |         bytes32 m2;
 11876 |     |         bytes32 m3;
 11877 |     |         bytes32 m4;
 11878 |     |         bytes32 m5;
 11879 |     |         bytes32 m6;
 11880 |     |         /// @solidity memory-safe-assembly
 11881 |     |         assembly {
 11882 |     |             function writeString(pos, w) {
 11883 |     |                 let length := 0
 11884 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11885 |     |                 mstore(pos, length)
 11886 |     |                 let shift := sub(256, shl(3, length))
 11887 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11888 |     |             }
 11889 |     |             m0 := mload(0x00)
 11890 |     |             m1 := mload(0x20)
 11891 |     |             m2 := mload(0x40)
 11892 |     |             m3 := mload(0x60)
 11893 |     |             m4 := mload(0x80)
 11894 |     |             m5 := mload(0xa0)
 11895 |     |             m6 := mload(0xc0)
 11896 |     |             // Selector of `log(string,bool,uint256,address)`.
 11897 |     |             mstore(0x00, 0x935e09bf)
 11898 |     |             mstore(0x20, 0x80)
 11899 |     |             mstore(0x40, p1)
 11900 |     |             mstore(0x60, p2)
 11901 |     |             mstore(0x80, p3)
 11902 |     |             writeString(0xa0, p0)
 11903 |     |         }
 11904 |     |         _sendLogPayload(0x1c, 0xc4);
 11905 |     |         /// @solidity memory-safe-assembly
 11906 |     |         assembly {
 11907 |     |             mstore(0x00, m0)
 11908 |     |             mstore(0x20, m1)
 11909 |     |             mstore(0x40, m2)
 11910 |     |             mstore(0x60, m3)
 11911 |     |             mstore(0x80, m4)
 11912 |     |             mstore(0xa0, m5)
 11913 |     |             mstore(0xc0, m6)
 11914 |     |         }
 11915 |     |     }
 11916 |     | 
 11917 |     |     function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {
 11918 |     |         bytes32 m0;
 11919 |     |         bytes32 m1;
 11920 |     |         bytes32 m2;
 11921 |     |         bytes32 m3;
 11922 |     |         bytes32 m4;
 11923 |     |         bytes32 m5;
 11924 |     |         bytes32 m6;
 11925 |     |         /// @solidity memory-safe-assembly
 11926 |     |         assembly {
 11927 |     |             function writeString(pos, w) {
 11928 |     |                 let length := 0
 11929 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11930 |     |                 mstore(pos, length)
 11931 |     |                 let shift := sub(256, shl(3, length))
 11932 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11933 |     |             }
 11934 |     |             m0 := mload(0x00)
 11935 |     |             m1 := mload(0x20)
 11936 |     |             m2 := mload(0x40)
 11937 |     |             m3 := mload(0x60)
 11938 |     |             m4 := mload(0x80)
 11939 |     |             m5 := mload(0xa0)
 11940 |     |             m6 := mload(0xc0)
 11941 |     |             // Selector of `log(string,bool,uint256,bool)`.
 11942 |     |             mstore(0x00, 0x8af7cf8a)
 11943 |     |             mstore(0x20, 0x80)
 11944 |     |             mstore(0x40, p1)
 11945 |     |             mstore(0x60, p2)
 11946 |     |             mstore(0x80, p3)
 11947 |     |             writeString(0xa0, p0)
 11948 |     |         }
 11949 |     |         _sendLogPayload(0x1c, 0xc4);
 11950 |     |         /// @solidity memory-safe-assembly
 11951 |     |         assembly {
 11952 |     |             mstore(0x00, m0)
 11953 |     |             mstore(0x20, m1)
 11954 |     |             mstore(0x40, m2)
 11955 |     |             mstore(0x60, m3)
 11956 |     |             mstore(0x80, m4)
 11957 |     |             mstore(0xa0, m5)
 11958 |     |             mstore(0xc0, m6)
 11959 |     |         }
 11960 |     |     }
 11961 |     | 
 11962 |     |     function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {
 11963 |     |         bytes32 m0;
 11964 |     |         bytes32 m1;
 11965 |     |         bytes32 m2;
 11966 |     |         bytes32 m3;
 11967 |     |         bytes32 m4;
 11968 |     |         bytes32 m5;
 11969 |     |         bytes32 m6;
 11970 |     |         /// @solidity memory-safe-assembly
 11971 |     |         assembly {
 11972 |     |             function writeString(pos, w) {
 11973 |     |                 let length := 0
 11974 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 11975 |     |                 mstore(pos, length)
 11976 |     |                 let shift := sub(256, shl(3, length))
 11977 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 11978 |     |             }
 11979 |     |             m0 := mload(0x00)
 11980 |     |             m1 := mload(0x20)
 11981 |     |             m2 := mload(0x40)
 11982 |     |             m3 := mload(0x60)
 11983 |     |             m4 := mload(0x80)
 11984 |     |             m5 := mload(0xa0)
 11985 |     |             m6 := mload(0xc0)
 11986 |     |             // Selector of `log(string,bool,uint256,uint256)`.
 11987 |     |             mstore(0x00, 0x64b5bb67)
 11988 |     |             mstore(0x20, 0x80)
 11989 |     |             mstore(0x40, p1)
 11990 |     |             mstore(0x60, p2)
 11991 |     |             mstore(0x80, p3)
 11992 |     |             writeString(0xa0, p0)
 11993 |     |         }
 11994 |     |         _sendLogPayload(0x1c, 0xc4);
 11995 |     |         /// @solidity memory-safe-assembly
 11996 |     |         assembly {
 11997 |     |             mstore(0x00, m0)
 11998 |     |             mstore(0x20, m1)
 11999 |     |             mstore(0x40, m2)
 12000 |     |             mstore(0x60, m3)
 12001 |     |             mstore(0x80, m4)
 12002 |     |             mstore(0xa0, m5)
 12003 |     |             mstore(0xc0, m6)
 12004 |     |         }
 12005 |     |     }
 12006 |     | 
 12007 |     |     function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {
 12008 |     |         bytes32 m0;
 12009 |     |         bytes32 m1;
 12010 |     |         bytes32 m2;
 12011 |     |         bytes32 m3;
 12012 |     |         bytes32 m4;
 12013 |     |         bytes32 m5;
 12014 |     |         bytes32 m6;
 12015 |     |         bytes32 m7;
 12016 |     |         bytes32 m8;
 12017 |     |         /// @solidity memory-safe-assembly
 12018 |     |         assembly {
 12019 |     |             function writeString(pos, w) {
 12020 |     |                 let length := 0
 12021 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12022 |     |                 mstore(pos, length)
 12023 |     |                 let shift := sub(256, shl(3, length))
 12024 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12025 |     |             }
 12026 |     |             m0 := mload(0x00)
 12027 |     |             m1 := mload(0x20)
 12028 |     |             m2 := mload(0x40)
 12029 |     |             m3 := mload(0x60)
 12030 |     |             m4 := mload(0x80)
 12031 |     |             m5 := mload(0xa0)
 12032 |     |             m6 := mload(0xc0)
 12033 |     |             m7 := mload(0xe0)
 12034 |     |             m8 := mload(0x100)
 12035 |     |             // Selector of `log(string,bool,uint256,string)`.
 12036 |     |             mstore(0x00, 0x742d6ee7)
 12037 |     |             mstore(0x20, 0x80)
 12038 |     |             mstore(0x40, p1)
 12039 |     |             mstore(0x60, p2)
 12040 |     |             mstore(0x80, 0xc0)
 12041 |     |             writeString(0xa0, p0)
 12042 |     |             writeString(0xe0, p3)
 12043 |     |         }
 12044 |     |         _sendLogPayload(0x1c, 0x104);
 12045 |     |         /// @solidity memory-safe-assembly
 12046 |     |         assembly {
 12047 |     |             mstore(0x00, m0)
 12048 |     |             mstore(0x20, m1)
 12049 |     |             mstore(0x40, m2)
 12050 |     |             mstore(0x60, m3)
 12051 |     |             mstore(0x80, m4)
 12052 |     |             mstore(0xa0, m5)
 12053 |     |             mstore(0xc0, m6)
 12054 |     |             mstore(0xe0, m7)
 12055 |     |             mstore(0x100, m8)
 12056 |     |         }
 12057 |     |     }
 12058 |     | 
 12059 |     |     function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {
 12060 |     |         bytes32 m0;
 12061 |     |         bytes32 m1;
 12062 |     |         bytes32 m2;
 12063 |     |         bytes32 m3;
 12064 |     |         bytes32 m4;
 12065 |     |         bytes32 m5;
 12066 |     |         bytes32 m6;
 12067 |     |         bytes32 m7;
 12068 |     |         bytes32 m8;
 12069 |     |         /// @solidity memory-safe-assembly
 12070 |     |         assembly {
 12071 |     |             function writeString(pos, w) {
 12072 |     |                 let length := 0
 12073 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12074 |     |                 mstore(pos, length)
 12075 |     |                 let shift := sub(256, shl(3, length))
 12076 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12077 |     |             }
 12078 |     |             m0 := mload(0x00)
 12079 |     |             m1 := mload(0x20)
 12080 |     |             m2 := mload(0x40)
 12081 |     |             m3 := mload(0x60)
 12082 |     |             m4 := mload(0x80)
 12083 |     |             m5 := mload(0xa0)
 12084 |     |             m6 := mload(0xc0)
 12085 |     |             m7 := mload(0xe0)
 12086 |     |             m8 := mload(0x100)
 12087 |     |             // Selector of `log(string,bool,string,address)`.
 12088 |     |             mstore(0x00, 0xe0625b29)
 12089 |     |             mstore(0x20, 0x80)
 12090 |     |             mstore(0x40, p1)
 12091 |     |             mstore(0x60, 0xc0)
 12092 |     |             mstore(0x80, p3)
 12093 |     |             writeString(0xa0, p0)
 12094 |     |             writeString(0xe0, p2)
 12095 |     |         }
 12096 |     |         _sendLogPayload(0x1c, 0x104);
 12097 |     |         /// @solidity memory-safe-assembly
 12098 |     |         assembly {
 12099 |     |             mstore(0x00, m0)
 12100 |     |             mstore(0x20, m1)
 12101 |     |             mstore(0x40, m2)
 12102 |     |             mstore(0x60, m3)
 12103 |     |             mstore(0x80, m4)
 12104 |     |             mstore(0xa0, m5)
 12105 |     |             mstore(0xc0, m6)
 12106 |     |             mstore(0xe0, m7)
 12107 |     |             mstore(0x100, m8)
 12108 |     |         }
 12109 |     |     }
 12110 |     | 
 12111 |     |     function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {
 12112 |     |         bytes32 m0;
 12113 |     |         bytes32 m1;
 12114 |     |         bytes32 m2;
 12115 |     |         bytes32 m3;
 12116 |     |         bytes32 m4;
 12117 |     |         bytes32 m5;
 12118 |     |         bytes32 m6;
 12119 |     |         bytes32 m7;
 12120 |     |         bytes32 m8;
 12121 |     |         /// @solidity memory-safe-assembly
 12122 |     |         assembly {
 12123 |     |             function writeString(pos, w) {
 12124 |     |                 let length := 0
 12125 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12126 |     |                 mstore(pos, length)
 12127 |     |                 let shift := sub(256, shl(3, length))
 12128 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12129 |     |             }
 12130 |     |             m0 := mload(0x00)
 12131 |     |             m1 := mload(0x20)
 12132 |     |             m2 := mload(0x40)
 12133 |     |             m3 := mload(0x60)
 12134 |     |             m4 := mload(0x80)
 12135 |     |             m5 := mload(0xa0)
 12136 |     |             m6 := mload(0xc0)
 12137 |     |             m7 := mload(0xe0)
 12138 |     |             m8 := mload(0x100)
 12139 |     |             // Selector of `log(string,bool,string,bool)`.
 12140 |     |             mstore(0x00, 0x3f8a701d)
 12141 |     |             mstore(0x20, 0x80)
 12142 |     |             mstore(0x40, p1)
 12143 |     |             mstore(0x60, 0xc0)
 12144 |     |             mstore(0x80, p3)
 12145 |     |             writeString(0xa0, p0)
 12146 |     |             writeString(0xe0, p2)
 12147 |     |         }
 12148 |     |         _sendLogPayload(0x1c, 0x104);
 12149 |     |         /// @solidity memory-safe-assembly
 12150 |     |         assembly {
 12151 |     |             mstore(0x00, m0)
 12152 |     |             mstore(0x20, m1)
 12153 |     |             mstore(0x40, m2)
 12154 |     |             mstore(0x60, m3)
 12155 |     |             mstore(0x80, m4)
 12156 |     |             mstore(0xa0, m5)
 12157 |     |             mstore(0xc0, m6)
 12158 |     |             mstore(0xe0, m7)
 12159 |     |             mstore(0x100, m8)
 12160 |     |         }
 12161 |     |     }
 12162 |     | 
 12163 |     |     function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {
 12164 |     |         bytes32 m0;
 12165 |     |         bytes32 m1;
 12166 |     |         bytes32 m2;
 12167 |     |         bytes32 m3;
 12168 |     |         bytes32 m4;
 12169 |     |         bytes32 m5;
 12170 |     |         bytes32 m6;
 12171 |     |         bytes32 m7;
 12172 |     |         bytes32 m8;
 12173 |     |         /// @solidity memory-safe-assembly
 12174 |     |         assembly {
 12175 |     |             function writeString(pos, w) {
 12176 |     |                 let length := 0
 12177 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12178 |     |                 mstore(pos, length)
 12179 |     |                 let shift := sub(256, shl(3, length))
 12180 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12181 |     |             }
 12182 |     |             m0 := mload(0x00)
 12183 |     |             m1 := mload(0x20)
 12184 |     |             m2 := mload(0x40)
 12185 |     |             m3 := mload(0x60)
 12186 |     |             m4 := mload(0x80)
 12187 |     |             m5 := mload(0xa0)
 12188 |     |             m6 := mload(0xc0)
 12189 |     |             m7 := mload(0xe0)
 12190 |     |             m8 := mload(0x100)
 12191 |     |             // Selector of `log(string,bool,string,uint256)`.
 12192 |     |             mstore(0x00, 0x24f91465)
 12193 |     |             mstore(0x20, 0x80)
 12194 |     |             mstore(0x40, p1)
 12195 |     |             mstore(0x60, 0xc0)
 12196 |     |             mstore(0x80, p3)
 12197 |     |             writeString(0xa0, p0)
 12198 |     |             writeString(0xe0, p2)
 12199 |     |         }
 12200 |     |         _sendLogPayload(0x1c, 0x104);
 12201 |     |         /// @solidity memory-safe-assembly
 12202 |     |         assembly {
 12203 |     |             mstore(0x00, m0)
 12204 |     |             mstore(0x20, m1)
 12205 |     |             mstore(0x40, m2)
 12206 |     |             mstore(0x60, m3)
 12207 |     |             mstore(0x80, m4)
 12208 |     |             mstore(0xa0, m5)
 12209 |     |             mstore(0xc0, m6)
 12210 |     |             mstore(0xe0, m7)
 12211 |     |             mstore(0x100, m8)
 12212 |     |         }
 12213 |     |     }
 12214 |     | 
 12215 |     |     function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {
 12216 |     |         bytes32 m0;
 12217 |     |         bytes32 m1;
 12218 |     |         bytes32 m2;
 12219 |     |         bytes32 m3;
 12220 |     |         bytes32 m4;
 12221 |     |         bytes32 m5;
 12222 |     |         bytes32 m6;
 12223 |     |         bytes32 m7;
 12224 |     |         bytes32 m8;
 12225 |     |         bytes32 m9;
 12226 |     |         bytes32 m10;
 12227 |     |         /// @solidity memory-safe-assembly
 12228 |     |         assembly {
 12229 |     |             function writeString(pos, w) {
 12230 |     |                 let length := 0
 12231 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12232 |     |                 mstore(pos, length)
 12233 |     |                 let shift := sub(256, shl(3, length))
 12234 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12235 |     |             }
 12236 |     |             m0 := mload(0x00)
 12237 |     |             m1 := mload(0x20)
 12238 |     |             m2 := mload(0x40)
 12239 |     |             m3 := mload(0x60)
 12240 |     |             m4 := mload(0x80)
 12241 |     |             m5 := mload(0xa0)
 12242 |     |             m6 := mload(0xc0)
 12243 |     |             m7 := mload(0xe0)
 12244 |     |             m8 := mload(0x100)
 12245 |     |             m9 := mload(0x120)
 12246 |     |             m10 := mload(0x140)
 12247 |     |             // Selector of `log(string,bool,string,string)`.
 12248 |     |             mstore(0x00, 0xa826caeb)
 12249 |     |             mstore(0x20, 0x80)
 12250 |     |             mstore(0x40, p1)
 12251 |     |             mstore(0x60, 0xc0)
 12252 |     |             mstore(0x80, 0x100)
 12253 |     |             writeString(0xa0, p0)
 12254 |     |             writeString(0xe0, p2)
 12255 |     |             writeString(0x120, p3)
 12256 |     |         }
 12257 |     |         _sendLogPayload(0x1c, 0x144);
 12258 |     |         /// @solidity memory-safe-assembly
 12259 |     |         assembly {
 12260 |     |             mstore(0x00, m0)
 12261 |     |             mstore(0x20, m1)
 12262 |     |             mstore(0x40, m2)
 12263 |     |             mstore(0x60, m3)
 12264 |     |             mstore(0x80, m4)
 12265 |     |             mstore(0xa0, m5)
 12266 |     |             mstore(0xc0, m6)
 12267 |     |             mstore(0xe0, m7)
 12268 |     |             mstore(0x100, m8)
 12269 |     |             mstore(0x120, m9)
 12270 |     |             mstore(0x140, m10)
 12271 |     |         }
 12272 |     |     }
 12273 |     | 
 12274 |     |     function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {
 12275 |     |         bytes32 m0;
 12276 |     |         bytes32 m1;
 12277 |     |         bytes32 m2;
 12278 |     |         bytes32 m3;
 12279 |     |         bytes32 m4;
 12280 |     |         bytes32 m5;
 12281 |     |         bytes32 m6;
 12282 |     |         /// @solidity memory-safe-assembly
 12283 |     |         assembly {
 12284 |     |             function writeString(pos, w) {
 12285 |     |                 let length := 0
 12286 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12287 |     |                 mstore(pos, length)
 12288 |     |                 let shift := sub(256, shl(3, length))
 12289 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12290 |     |             }
 12291 |     |             m0 := mload(0x00)
 12292 |     |             m1 := mload(0x20)
 12293 |     |             m2 := mload(0x40)
 12294 |     |             m3 := mload(0x60)
 12295 |     |             m4 := mload(0x80)
 12296 |     |             m5 := mload(0xa0)
 12297 |     |             m6 := mload(0xc0)
 12298 |     |             // Selector of `log(string,uint256,address,address)`.
 12299 |     |             mstore(0x00, 0x5ea2b7ae)
 12300 |     |             mstore(0x20, 0x80)
 12301 |     |             mstore(0x40, p1)
 12302 |     |             mstore(0x60, p2)
 12303 |     |             mstore(0x80, p3)
 12304 |     |             writeString(0xa0, p0)
 12305 |     |         }
 12306 |     |         _sendLogPayload(0x1c, 0xc4);
 12307 |     |         /// @solidity memory-safe-assembly
 12308 |     |         assembly {
 12309 |     |             mstore(0x00, m0)
 12310 |     |             mstore(0x20, m1)
 12311 |     |             mstore(0x40, m2)
 12312 |     |             mstore(0x60, m3)
 12313 |     |             mstore(0x80, m4)
 12314 |     |             mstore(0xa0, m5)
 12315 |     |             mstore(0xc0, m6)
 12316 |     |         }
 12317 |     |     }
 12318 |     | 
 12319 |     |     function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {
 12320 |     |         bytes32 m0;
 12321 |     |         bytes32 m1;
 12322 |     |         bytes32 m2;
 12323 |     |         bytes32 m3;
 12324 |     |         bytes32 m4;
 12325 |     |         bytes32 m5;
 12326 |     |         bytes32 m6;
 12327 |     |         /// @solidity memory-safe-assembly
 12328 |     |         assembly {
 12329 |     |             function writeString(pos, w) {
 12330 |     |                 let length := 0
 12331 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12332 |     |                 mstore(pos, length)
 12333 |     |                 let shift := sub(256, shl(3, length))
 12334 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12335 |     |             }
 12336 |     |             m0 := mload(0x00)
 12337 |     |             m1 := mload(0x20)
 12338 |     |             m2 := mload(0x40)
 12339 |     |             m3 := mload(0x60)
 12340 |     |             m4 := mload(0x80)
 12341 |     |             m5 := mload(0xa0)
 12342 |     |             m6 := mload(0xc0)
 12343 |     |             // Selector of `log(string,uint256,address,bool)`.
 12344 |     |             mstore(0x00, 0x82112a42)
 12345 |     |             mstore(0x20, 0x80)
 12346 |     |             mstore(0x40, p1)
 12347 |     |             mstore(0x60, p2)
 12348 |     |             mstore(0x80, p3)
 12349 |     |             writeString(0xa0, p0)
 12350 |     |         }
 12351 |     |         _sendLogPayload(0x1c, 0xc4);
 12352 |     |         /// @solidity memory-safe-assembly
 12353 |     |         assembly {
 12354 |     |             mstore(0x00, m0)
 12355 |     |             mstore(0x20, m1)
 12356 |     |             mstore(0x40, m2)
 12357 |     |             mstore(0x60, m3)
 12358 |     |             mstore(0x80, m4)
 12359 |     |             mstore(0xa0, m5)
 12360 |     |             mstore(0xc0, m6)
 12361 |     |         }
 12362 |     |     }
 12363 |     | 
 12364 |     |     function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {
 12365 |     |         bytes32 m0;
 12366 |     |         bytes32 m1;
 12367 |     |         bytes32 m2;
 12368 |     |         bytes32 m3;
 12369 |     |         bytes32 m4;
 12370 |     |         bytes32 m5;
 12371 |     |         bytes32 m6;
 12372 |     |         /// @solidity memory-safe-assembly
 12373 |     |         assembly {
 12374 |     |             function writeString(pos, w) {
 12375 |     |                 let length := 0
 12376 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12377 |     |                 mstore(pos, length)
 12378 |     |                 let shift := sub(256, shl(3, length))
 12379 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12380 |     |             }
 12381 |     |             m0 := mload(0x00)
 12382 |     |             m1 := mload(0x20)
 12383 |     |             m2 := mload(0x40)
 12384 |     |             m3 := mload(0x60)
 12385 |     |             m4 := mload(0x80)
 12386 |     |             m5 := mload(0xa0)
 12387 |     |             m6 := mload(0xc0)
 12388 |     |             // Selector of `log(string,uint256,address,uint256)`.
 12389 |     |             mstore(0x00, 0x4f04fdc6)
 12390 |     |             mstore(0x20, 0x80)
 12391 |     |             mstore(0x40, p1)
 12392 |     |             mstore(0x60, p2)
 12393 |     |             mstore(0x80, p3)
 12394 |     |             writeString(0xa0, p0)
 12395 |     |         }
 12396 |     |         _sendLogPayload(0x1c, 0xc4);
 12397 |     |         /// @solidity memory-safe-assembly
 12398 |     |         assembly {
 12399 |     |             mstore(0x00, m0)
 12400 |     |             mstore(0x20, m1)
 12401 |     |             mstore(0x40, m2)
 12402 |     |             mstore(0x60, m3)
 12403 |     |             mstore(0x80, m4)
 12404 |     |             mstore(0xa0, m5)
 12405 |     |             mstore(0xc0, m6)
 12406 |     |         }
 12407 |     |     }
 12408 |     | 
 12409 |     |     function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {
 12410 |     |         bytes32 m0;
 12411 |     |         bytes32 m1;
 12412 |     |         bytes32 m2;
 12413 |     |         bytes32 m3;
 12414 |     |         bytes32 m4;
 12415 |     |         bytes32 m5;
 12416 |     |         bytes32 m6;
 12417 |     |         bytes32 m7;
 12418 |     |         bytes32 m8;
 12419 |     |         /// @solidity memory-safe-assembly
 12420 |     |         assembly {
 12421 |     |             function writeString(pos, w) {
 12422 |     |                 let length := 0
 12423 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12424 |     |                 mstore(pos, length)
 12425 |     |                 let shift := sub(256, shl(3, length))
 12426 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12427 |     |             }
 12428 |     |             m0 := mload(0x00)
 12429 |     |             m1 := mload(0x20)
 12430 |     |             m2 := mload(0x40)
 12431 |     |             m3 := mload(0x60)
 12432 |     |             m4 := mload(0x80)
 12433 |     |             m5 := mload(0xa0)
 12434 |     |             m6 := mload(0xc0)
 12435 |     |             m7 := mload(0xe0)
 12436 |     |             m8 := mload(0x100)
 12437 |     |             // Selector of `log(string,uint256,address,string)`.
 12438 |     |             mstore(0x00, 0x9ffb2f93)
 12439 |     |             mstore(0x20, 0x80)
 12440 |     |             mstore(0x40, p1)
 12441 |     |             mstore(0x60, p2)
 12442 |     |             mstore(0x80, 0xc0)
 12443 |     |             writeString(0xa0, p0)
 12444 |     |             writeString(0xe0, p3)
 12445 |     |         }
 12446 |     |         _sendLogPayload(0x1c, 0x104);
 12447 |     |         /// @solidity memory-safe-assembly
 12448 |     |         assembly {
 12449 |     |             mstore(0x00, m0)
 12450 |     |             mstore(0x20, m1)
 12451 |     |             mstore(0x40, m2)
 12452 |     |             mstore(0x60, m3)
 12453 |     |             mstore(0x80, m4)
 12454 |     |             mstore(0xa0, m5)
 12455 |     |             mstore(0xc0, m6)
 12456 |     |             mstore(0xe0, m7)
 12457 |     |             mstore(0x100, m8)
 12458 |     |         }
 12459 |     |     }
 12460 |     | 
 12461 |     |     function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {
 12462 |     |         bytes32 m0;
 12463 |     |         bytes32 m1;
 12464 |     |         bytes32 m2;
 12465 |     |         bytes32 m3;
 12466 |     |         bytes32 m4;
 12467 |     |         bytes32 m5;
 12468 |     |         bytes32 m6;
 12469 |     |         /// @solidity memory-safe-assembly
 12470 |     |         assembly {
 12471 |     |             function writeString(pos, w) {
 12472 |     |                 let length := 0
 12473 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12474 |     |                 mstore(pos, length)
 12475 |     |                 let shift := sub(256, shl(3, length))
 12476 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12477 |     |             }
 12478 |     |             m0 := mload(0x00)
 12479 |     |             m1 := mload(0x20)
 12480 |     |             m2 := mload(0x40)
 12481 |     |             m3 := mload(0x60)
 12482 |     |             m4 := mload(0x80)
 12483 |     |             m5 := mload(0xa0)
 12484 |     |             m6 := mload(0xc0)
 12485 |     |             // Selector of `log(string,uint256,bool,address)`.
 12486 |     |             mstore(0x00, 0xe0e95b98)
 12487 |     |             mstore(0x20, 0x80)
 12488 |     |             mstore(0x40, p1)
 12489 |     |             mstore(0x60, p2)
 12490 |     |             mstore(0x80, p3)
 12491 |     |             writeString(0xa0, p0)
 12492 |     |         }
 12493 |     |         _sendLogPayload(0x1c, 0xc4);
 12494 |     |         /// @solidity memory-safe-assembly
 12495 |     |         assembly {
 12496 |     |             mstore(0x00, m0)
 12497 |     |             mstore(0x20, m1)
 12498 |     |             mstore(0x40, m2)
 12499 |     |             mstore(0x60, m3)
 12500 |     |             mstore(0x80, m4)
 12501 |     |             mstore(0xa0, m5)
 12502 |     |             mstore(0xc0, m6)
 12503 |     |         }
 12504 |     |     }
 12505 |     | 
 12506 |     |     function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {
 12507 |     |         bytes32 m0;
 12508 |     |         bytes32 m1;
 12509 |     |         bytes32 m2;
 12510 |     |         bytes32 m3;
 12511 |     |         bytes32 m4;
 12512 |     |         bytes32 m5;
 12513 |     |         bytes32 m6;
 12514 |     |         /// @solidity memory-safe-assembly
 12515 |     |         assembly {
 12516 |     |             function writeString(pos, w) {
 12517 |     |                 let length := 0
 12518 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12519 |     |                 mstore(pos, length)
 12520 |     |                 let shift := sub(256, shl(3, length))
 12521 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12522 |     |             }
 12523 |     |             m0 := mload(0x00)
 12524 |     |             m1 := mload(0x20)
 12525 |     |             m2 := mload(0x40)
 12526 |     |             m3 := mload(0x60)
 12527 |     |             m4 := mload(0x80)
 12528 |     |             m5 := mload(0xa0)
 12529 |     |             m6 := mload(0xc0)
 12530 |     |             // Selector of `log(string,uint256,bool,bool)`.
 12531 |     |             mstore(0x00, 0x354c36d6)
 12532 |     |             mstore(0x20, 0x80)
 12533 |     |             mstore(0x40, p1)
 12534 |     |             mstore(0x60, p2)
 12535 |     |             mstore(0x80, p3)
 12536 |     |             writeString(0xa0, p0)
 12537 |     |         }
 12538 |     |         _sendLogPayload(0x1c, 0xc4);
 12539 |     |         /// @solidity memory-safe-assembly
 12540 |     |         assembly {
 12541 |     |             mstore(0x00, m0)
 12542 |     |             mstore(0x20, m1)
 12543 |     |             mstore(0x40, m2)
 12544 |     |             mstore(0x60, m3)
 12545 |     |             mstore(0x80, m4)
 12546 |     |             mstore(0xa0, m5)
 12547 |     |             mstore(0xc0, m6)
 12548 |     |         }
 12549 |     |     }
 12550 |     | 
 12551 |     |     function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {
 12552 |     |         bytes32 m0;
 12553 |     |         bytes32 m1;
 12554 |     |         bytes32 m2;
 12555 |     |         bytes32 m3;
 12556 |     |         bytes32 m4;
 12557 |     |         bytes32 m5;
 12558 |     |         bytes32 m6;
 12559 |     |         /// @solidity memory-safe-assembly
 12560 |     |         assembly {
 12561 |     |             function writeString(pos, w) {
 12562 |     |                 let length := 0
 12563 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12564 |     |                 mstore(pos, length)
 12565 |     |                 let shift := sub(256, shl(3, length))
 12566 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12567 |     |             }
 12568 |     |             m0 := mload(0x00)
 12569 |     |             m1 := mload(0x20)
 12570 |     |             m2 := mload(0x40)
 12571 |     |             m3 := mload(0x60)
 12572 |     |             m4 := mload(0x80)
 12573 |     |             m5 := mload(0xa0)
 12574 |     |             m6 := mload(0xc0)
 12575 |     |             // Selector of `log(string,uint256,bool,uint256)`.
 12576 |     |             mstore(0x00, 0xe41b6f6f)
 12577 |     |             mstore(0x20, 0x80)
 12578 |     |             mstore(0x40, p1)
 12579 |     |             mstore(0x60, p2)
 12580 |     |             mstore(0x80, p3)
 12581 |     |             writeString(0xa0, p0)
 12582 |     |         }
 12583 |     |         _sendLogPayload(0x1c, 0xc4);
 12584 |     |         /// @solidity memory-safe-assembly
 12585 |     |         assembly {
 12586 |     |             mstore(0x00, m0)
 12587 |     |             mstore(0x20, m1)
 12588 |     |             mstore(0x40, m2)
 12589 |     |             mstore(0x60, m3)
 12590 |     |             mstore(0x80, m4)
 12591 |     |             mstore(0xa0, m5)
 12592 |     |             mstore(0xc0, m6)
 12593 |     |         }
 12594 |     |     }
 12595 |     | 
 12596 |     |     function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {
 12597 |     |         bytes32 m0;
 12598 |     |         bytes32 m1;
 12599 |     |         bytes32 m2;
 12600 |     |         bytes32 m3;
 12601 |     |         bytes32 m4;
 12602 |     |         bytes32 m5;
 12603 |     |         bytes32 m6;
 12604 |     |         bytes32 m7;
 12605 |     |         bytes32 m8;
 12606 |     |         /// @solidity memory-safe-assembly
 12607 |     |         assembly {
 12608 |     |             function writeString(pos, w) {
 12609 |     |                 let length := 0
 12610 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12611 |     |                 mstore(pos, length)
 12612 |     |                 let shift := sub(256, shl(3, length))
 12613 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12614 |     |             }
 12615 |     |             m0 := mload(0x00)
 12616 |     |             m1 := mload(0x20)
 12617 |     |             m2 := mload(0x40)
 12618 |     |             m3 := mload(0x60)
 12619 |     |             m4 := mload(0x80)
 12620 |     |             m5 := mload(0xa0)
 12621 |     |             m6 := mload(0xc0)
 12622 |     |             m7 := mload(0xe0)
 12623 |     |             m8 := mload(0x100)
 12624 |     |             // Selector of `log(string,uint256,bool,string)`.
 12625 |     |             mstore(0x00, 0xabf73a98)
 12626 |     |             mstore(0x20, 0x80)
 12627 |     |             mstore(0x40, p1)
 12628 |     |             mstore(0x60, p2)
 12629 |     |             mstore(0x80, 0xc0)
 12630 |     |             writeString(0xa0, p0)
 12631 |     |             writeString(0xe0, p3)
 12632 |     |         }
 12633 |     |         _sendLogPayload(0x1c, 0x104);
 12634 |     |         /// @solidity memory-safe-assembly
 12635 |     |         assembly {
 12636 |     |             mstore(0x00, m0)
 12637 |     |             mstore(0x20, m1)
 12638 |     |             mstore(0x40, m2)
 12639 |     |             mstore(0x60, m3)
 12640 |     |             mstore(0x80, m4)
 12641 |     |             mstore(0xa0, m5)
 12642 |     |             mstore(0xc0, m6)
 12643 |     |             mstore(0xe0, m7)
 12644 |     |             mstore(0x100, m8)
 12645 |     |         }
 12646 |     |     }
 12647 |     | 
 12648 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {
 12649 |     |         bytes32 m0;
 12650 |     |         bytes32 m1;
 12651 |     |         bytes32 m2;
 12652 |     |         bytes32 m3;
 12653 |     |         bytes32 m4;
 12654 |     |         bytes32 m5;
 12655 |     |         bytes32 m6;
 12656 |     |         /// @solidity memory-safe-assembly
 12657 |     |         assembly {
 12658 |     |             function writeString(pos, w) {
 12659 |     |                 let length := 0
 12660 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12661 |     |                 mstore(pos, length)
 12662 |     |                 let shift := sub(256, shl(3, length))
 12663 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12664 |     |             }
 12665 |     |             m0 := mload(0x00)
 12666 |     |             m1 := mload(0x20)
 12667 |     |             m2 := mload(0x40)
 12668 |     |             m3 := mload(0x60)
 12669 |     |             m4 := mload(0x80)
 12670 |     |             m5 := mload(0xa0)
 12671 |     |             m6 := mload(0xc0)
 12672 |     |             // Selector of `log(string,uint256,uint256,address)`.
 12673 |     |             mstore(0x00, 0xe21de278)
 12674 |     |             mstore(0x20, 0x80)
 12675 |     |             mstore(0x40, p1)
 12676 |     |             mstore(0x60, p2)
 12677 |     |             mstore(0x80, p3)
 12678 |     |             writeString(0xa0, p0)
 12679 |     |         }
 12680 |     |         _sendLogPayload(0x1c, 0xc4);
 12681 |     |         /// @solidity memory-safe-assembly
 12682 |     |         assembly {
 12683 |     |             mstore(0x00, m0)
 12684 |     |             mstore(0x20, m1)
 12685 |     |             mstore(0x40, m2)
 12686 |     |             mstore(0x60, m3)
 12687 |     |             mstore(0x80, m4)
 12688 |     |             mstore(0xa0, m5)
 12689 |     |             mstore(0xc0, m6)
 12690 |     |         }
 12691 |     |     }
 12692 |     | 
 12693 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {
 12694 |     |         bytes32 m0;
 12695 |     |         bytes32 m1;
 12696 |     |         bytes32 m2;
 12697 |     |         bytes32 m3;
 12698 |     |         bytes32 m4;
 12699 |     |         bytes32 m5;
 12700 |     |         bytes32 m6;
 12701 |     |         /// @solidity memory-safe-assembly
 12702 |     |         assembly {
 12703 |     |             function writeString(pos, w) {
 12704 |     |                 let length := 0
 12705 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12706 |     |                 mstore(pos, length)
 12707 |     |                 let shift := sub(256, shl(3, length))
 12708 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12709 |     |             }
 12710 |     |             m0 := mload(0x00)
 12711 |     |             m1 := mload(0x20)
 12712 |     |             m2 := mload(0x40)
 12713 |     |             m3 := mload(0x60)
 12714 |     |             m4 := mload(0x80)
 12715 |     |             m5 := mload(0xa0)
 12716 |     |             m6 := mload(0xc0)
 12717 |     |             // Selector of `log(string,uint256,uint256,bool)`.
 12718 |     |             mstore(0x00, 0x7626db92)
 12719 |     |             mstore(0x20, 0x80)
 12720 |     |             mstore(0x40, p1)
 12721 |     |             mstore(0x60, p2)
 12722 |     |             mstore(0x80, p3)
 12723 |     |             writeString(0xa0, p0)
 12724 |     |         }
 12725 |     |         _sendLogPayload(0x1c, 0xc4);
 12726 |     |         /// @solidity memory-safe-assembly
 12727 |     |         assembly {
 12728 |     |             mstore(0x00, m0)
 12729 |     |             mstore(0x20, m1)
 12730 |     |             mstore(0x40, m2)
 12731 |     |             mstore(0x60, m3)
 12732 |     |             mstore(0x80, m4)
 12733 |     |             mstore(0xa0, m5)
 12734 |     |             mstore(0xc0, m6)
 12735 |     |         }
 12736 |     |     }
 12737 |     | 
 12738 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {
 12739 |     |         bytes32 m0;
 12740 |     |         bytes32 m1;
 12741 |     |         bytes32 m2;
 12742 |     |         bytes32 m3;
 12743 |     |         bytes32 m4;
 12744 |     |         bytes32 m5;
 12745 |     |         bytes32 m6;
 12746 |     |         /// @solidity memory-safe-assembly
 12747 |     |         assembly {
 12748 |     |             function writeString(pos, w) {
 12749 |     |                 let length := 0
 12750 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12751 |     |                 mstore(pos, length)
 12752 |     |                 let shift := sub(256, shl(3, length))
 12753 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12754 |     |             }
 12755 |     |             m0 := mload(0x00)
 12756 |     |             m1 := mload(0x20)
 12757 |     |             m2 := mload(0x40)
 12758 |     |             m3 := mload(0x60)
 12759 |     |             m4 := mload(0x80)
 12760 |     |             m5 := mload(0xa0)
 12761 |     |             m6 := mload(0xc0)
 12762 |     |             // Selector of `log(string,uint256,uint256,uint256)`.
 12763 |     |             mstore(0x00, 0xa7a87853)
 12764 |     |             mstore(0x20, 0x80)
 12765 |     |             mstore(0x40, p1)
 12766 |     |             mstore(0x60, p2)
 12767 |     |             mstore(0x80, p3)
 12768 |     |             writeString(0xa0, p0)
 12769 |     |         }
 12770 |     |         _sendLogPayload(0x1c, 0xc4);
 12771 |     |         /// @solidity memory-safe-assembly
 12772 |     |         assembly {
 12773 |     |             mstore(0x00, m0)
 12774 |     |             mstore(0x20, m1)
 12775 |     |             mstore(0x40, m2)
 12776 |     |             mstore(0x60, m3)
 12777 |     |             mstore(0x80, m4)
 12778 |     |             mstore(0xa0, m5)
 12779 |     |             mstore(0xc0, m6)
 12780 |     |         }
 12781 |     |     }
 12782 |     | 
 12783 |     |     function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {
 12784 |     |         bytes32 m0;
 12785 |     |         bytes32 m1;
 12786 |     |         bytes32 m2;
 12787 |     |         bytes32 m3;
 12788 |     |         bytes32 m4;
 12789 |     |         bytes32 m5;
 12790 |     |         bytes32 m6;
 12791 |     |         bytes32 m7;
 12792 |     |         bytes32 m8;
 12793 |     |         /// @solidity memory-safe-assembly
 12794 |     |         assembly {
 12795 |     |             function writeString(pos, w) {
 12796 |     |                 let length := 0
 12797 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12798 |     |                 mstore(pos, length)
 12799 |     |                 let shift := sub(256, shl(3, length))
 12800 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12801 |     |             }
 12802 |     |             m0 := mload(0x00)
 12803 |     |             m1 := mload(0x20)
 12804 |     |             m2 := mload(0x40)
 12805 |     |             m3 := mload(0x60)
 12806 |     |             m4 := mload(0x80)
 12807 |     |             m5 := mload(0xa0)
 12808 |     |             m6 := mload(0xc0)
 12809 |     |             m7 := mload(0xe0)
 12810 |     |             m8 := mload(0x100)
 12811 |     |             // Selector of `log(string,uint256,uint256,string)`.
 12812 |     |             mstore(0x00, 0x854b3496)
 12813 |     |             mstore(0x20, 0x80)
 12814 |     |             mstore(0x40, p1)
 12815 |     |             mstore(0x60, p2)
 12816 |     |             mstore(0x80, 0xc0)
 12817 |     |             writeString(0xa0, p0)
 12818 |     |             writeString(0xe0, p3)
 12819 |     |         }
 12820 |     |         _sendLogPayload(0x1c, 0x104);
 12821 |     |         /// @solidity memory-safe-assembly
 12822 |     |         assembly {
 12823 |     |             mstore(0x00, m0)
 12824 |     |             mstore(0x20, m1)
 12825 |     |             mstore(0x40, m2)
 12826 |     |             mstore(0x60, m3)
 12827 |     |             mstore(0x80, m4)
 12828 |     |             mstore(0xa0, m5)
 12829 |     |             mstore(0xc0, m6)
 12830 |     |             mstore(0xe0, m7)
 12831 |     |             mstore(0x100, m8)
 12832 |     |         }
 12833 |     |     }
 12834 |     | 
 12835 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {
 12836 |     |         bytes32 m0;
 12837 |     |         bytes32 m1;
 12838 |     |         bytes32 m2;
 12839 |     |         bytes32 m3;
 12840 |     |         bytes32 m4;
 12841 |     |         bytes32 m5;
 12842 |     |         bytes32 m6;
 12843 |     |         bytes32 m7;
 12844 |     |         bytes32 m8;
 12845 |     |         /// @solidity memory-safe-assembly
 12846 |     |         assembly {
 12847 |     |             function writeString(pos, w) {
 12848 |     |                 let length := 0
 12849 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12850 |     |                 mstore(pos, length)
 12851 |     |                 let shift := sub(256, shl(3, length))
 12852 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12853 |     |             }
 12854 |     |             m0 := mload(0x00)
 12855 |     |             m1 := mload(0x20)
 12856 |     |             m2 := mload(0x40)
 12857 |     |             m3 := mload(0x60)
 12858 |     |             m4 := mload(0x80)
 12859 |     |             m5 := mload(0xa0)
 12860 |     |             m6 := mload(0xc0)
 12861 |     |             m7 := mload(0xe0)
 12862 |     |             m8 := mload(0x100)
 12863 |     |             // Selector of `log(string,uint256,string,address)`.
 12864 |     |             mstore(0x00, 0x7c4632a4)
 12865 |     |             mstore(0x20, 0x80)
 12866 |     |             mstore(0x40, p1)
 12867 |     |             mstore(0x60, 0xc0)
 12868 |     |             mstore(0x80, p3)
 12869 |     |             writeString(0xa0, p0)
 12870 |     |             writeString(0xe0, p2)
 12871 |     |         }
 12872 |     |         _sendLogPayload(0x1c, 0x104);
 12873 |     |         /// @solidity memory-safe-assembly
 12874 |     |         assembly {
 12875 |     |             mstore(0x00, m0)
 12876 |     |             mstore(0x20, m1)
 12877 |     |             mstore(0x40, m2)
 12878 |     |             mstore(0x60, m3)
 12879 |     |             mstore(0x80, m4)
 12880 |     |             mstore(0xa0, m5)
 12881 |     |             mstore(0xc0, m6)
 12882 |     |             mstore(0xe0, m7)
 12883 |     |             mstore(0x100, m8)
 12884 |     |         }
 12885 |     |     }
 12886 |     | 
 12887 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {
 12888 |     |         bytes32 m0;
 12889 |     |         bytes32 m1;
 12890 |     |         bytes32 m2;
 12891 |     |         bytes32 m3;
 12892 |     |         bytes32 m4;
 12893 |     |         bytes32 m5;
 12894 |     |         bytes32 m6;
 12895 |     |         bytes32 m7;
 12896 |     |         bytes32 m8;
 12897 |     |         /// @solidity memory-safe-assembly
 12898 |     |         assembly {
 12899 |     |             function writeString(pos, w) {
 12900 |     |                 let length := 0
 12901 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12902 |     |                 mstore(pos, length)
 12903 |     |                 let shift := sub(256, shl(3, length))
 12904 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12905 |     |             }
 12906 |     |             m0 := mload(0x00)
 12907 |     |             m1 := mload(0x20)
 12908 |     |             m2 := mload(0x40)
 12909 |     |             m3 := mload(0x60)
 12910 |     |             m4 := mload(0x80)
 12911 |     |             m5 := mload(0xa0)
 12912 |     |             m6 := mload(0xc0)
 12913 |     |             m7 := mload(0xe0)
 12914 |     |             m8 := mload(0x100)
 12915 |     |             // Selector of `log(string,uint256,string,bool)`.
 12916 |     |             mstore(0x00, 0x7d24491d)
 12917 |     |             mstore(0x20, 0x80)
 12918 |     |             mstore(0x40, p1)
 12919 |     |             mstore(0x60, 0xc0)
 12920 |     |             mstore(0x80, p3)
 12921 |     |             writeString(0xa0, p0)
 12922 |     |             writeString(0xe0, p2)
 12923 |     |         }
 12924 |     |         _sendLogPayload(0x1c, 0x104);
 12925 |     |         /// @solidity memory-safe-assembly
 12926 |     |         assembly {
 12927 |     |             mstore(0x00, m0)
 12928 |     |             mstore(0x20, m1)
 12929 |     |             mstore(0x40, m2)
 12930 |     |             mstore(0x60, m3)
 12931 |     |             mstore(0x80, m4)
 12932 |     |             mstore(0xa0, m5)
 12933 |     |             mstore(0xc0, m6)
 12934 |     |             mstore(0xe0, m7)
 12935 |     |             mstore(0x100, m8)
 12936 |     |         }
 12937 |     |     }
 12938 |     | 
 12939 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {
 12940 |     |         bytes32 m0;
 12941 |     |         bytes32 m1;
 12942 |     |         bytes32 m2;
 12943 |     |         bytes32 m3;
 12944 |     |         bytes32 m4;
 12945 |     |         bytes32 m5;
 12946 |     |         bytes32 m6;
 12947 |     |         bytes32 m7;
 12948 |     |         bytes32 m8;
 12949 |     |         /// @solidity memory-safe-assembly
 12950 |     |         assembly {
 12951 |     |             function writeString(pos, w) {
 12952 |     |                 let length := 0
 12953 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 12954 |     |                 mstore(pos, length)
 12955 |     |                 let shift := sub(256, shl(3, length))
 12956 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 12957 |     |             }
 12958 |     |             m0 := mload(0x00)
 12959 |     |             m1 := mload(0x20)
 12960 |     |             m2 := mload(0x40)
 12961 |     |             m3 := mload(0x60)
 12962 |     |             m4 := mload(0x80)
 12963 |     |             m5 := mload(0xa0)
 12964 |     |             m6 := mload(0xc0)
 12965 |     |             m7 := mload(0xe0)
 12966 |     |             m8 := mload(0x100)
 12967 |     |             // Selector of `log(string,uint256,string,uint256)`.
 12968 |     |             mstore(0x00, 0xc67ea9d1)
 12969 |     |             mstore(0x20, 0x80)
 12970 |     |             mstore(0x40, p1)
 12971 |     |             mstore(0x60, 0xc0)
 12972 |     |             mstore(0x80, p3)
 12973 |     |             writeString(0xa0, p0)
 12974 |     |             writeString(0xe0, p2)
 12975 |     |         }
 12976 |     |         _sendLogPayload(0x1c, 0x104);
 12977 |     |         /// @solidity memory-safe-assembly
 12978 |     |         assembly {
 12979 |     |             mstore(0x00, m0)
 12980 |     |             mstore(0x20, m1)
 12981 |     |             mstore(0x40, m2)
 12982 |     |             mstore(0x60, m3)
 12983 |     |             mstore(0x80, m4)
 12984 |     |             mstore(0xa0, m5)
 12985 |     |             mstore(0xc0, m6)
 12986 |     |             mstore(0xe0, m7)
 12987 |     |             mstore(0x100, m8)
 12988 |     |         }
 12989 |     |     }
 12990 |     | 
 12991 |     |     function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {
 12992 |     |         bytes32 m0;
 12993 |     |         bytes32 m1;
 12994 |     |         bytes32 m2;
 12995 |     |         bytes32 m3;
 12996 |     |         bytes32 m4;
 12997 |     |         bytes32 m5;
 12998 |     |         bytes32 m6;
 12999 |     |         bytes32 m7;
 13000 |     |         bytes32 m8;
 13001 |     |         bytes32 m9;
 13002 |     |         bytes32 m10;
 13003 |     |         /// @solidity memory-safe-assembly
 13004 |     |         assembly {
 13005 |     |             function writeString(pos, w) {
 13006 |     |                 let length := 0
 13007 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13008 |     |                 mstore(pos, length)
 13009 |     |                 let shift := sub(256, shl(3, length))
 13010 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13011 |     |             }
 13012 |     |             m0 := mload(0x00)
 13013 |     |             m1 := mload(0x20)
 13014 |     |             m2 := mload(0x40)
 13015 |     |             m3 := mload(0x60)
 13016 |     |             m4 := mload(0x80)
 13017 |     |             m5 := mload(0xa0)
 13018 |     |             m6 := mload(0xc0)
 13019 |     |             m7 := mload(0xe0)
 13020 |     |             m8 := mload(0x100)
 13021 |     |             m9 := mload(0x120)
 13022 |     |             m10 := mload(0x140)
 13023 |     |             // Selector of `log(string,uint256,string,string)`.
 13024 |     |             mstore(0x00, 0x5ab84e1f)
 13025 |     |             mstore(0x20, 0x80)
 13026 |     |             mstore(0x40, p1)
 13027 |     |             mstore(0x60, 0xc0)
 13028 |     |             mstore(0x80, 0x100)
 13029 |     |             writeString(0xa0, p0)
 13030 |     |             writeString(0xe0, p2)
 13031 |     |             writeString(0x120, p3)
 13032 |     |         }
 13033 |     |         _sendLogPayload(0x1c, 0x144);
 13034 |     |         /// @solidity memory-safe-assembly
 13035 |     |         assembly {
 13036 |     |             mstore(0x00, m0)
 13037 |     |             mstore(0x20, m1)
 13038 |     |             mstore(0x40, m2)
 13039 |     |             mstore(0x60, m3)
 13040 |     |             mstore(0x80, m4)
 13041 |     |             mstore(0xa0, m5)
 13042 |     |             mstore(0xc0, m6)
 13043 |     |             mstore(0xe0, m7)
 13044 |     |             mstore(0x100, m8)
 13045 |     |             mstore(0x120, m9)
 13046 |     |             mstore(0x140, m10)
 13047 |     |         }
 13048 |     |     }
 13049 |     | 
 13050 |     |     function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {
 13051 |     |         bytes32 m0;
 13052 |     |         bytes32 m1;
 13053 |     |         bytes32 m2;
 13054 |     |         bytes32 m3;
 13055 |     |         bytes32 m4;
 13056 |     |         bytes32 m5;
 13057 |     |         bytes32 m6;
 13058 |     |         bytes32 m7;
 13059 |     |         bytes32 m8;
 13060 |     |         /// @solidity memory-safe-assembly
 13061 |     |         assembly {
 13062 |     |             function writeString(pos, w) {
 13063 |     |                 let length := 0
 13064 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13065 |     |                 mstore(pos, length)
 13066 |     |                 let shift := sub(256, shl(3, length))
 13067 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13068 |     |             }
 13069 |     |             m0 := mload(0x00)
 13070 |     |             m1 := mload(0x20)
 13071 |     |             m2 := mload(0x40)
 13072 |     |             m3 := mload(0x60)
 13073 |     |             m4 := mload(0x80)
 13074 |     |             m5 := mload(0xa0)
 13075 |     |             m6 := mload(0xc0)
 13076 |     |             m7 := mload(0xe0)
 13077 |     |             m8 := mload(0x100)
 13078 |     |             // Selector of `log(string,string,address,address)`.
 13079 |     |             mstore(0x00, 0x439c7bef)
 13080 |     |             mstore(0x20, 0x80)
 13081 |     |             mstore(0x40, 0xc0)
 13082 |     |             mstore(0x60, p2)
 13083 |     |             mstore(0x80, p3)
 13084 |     |             writeString(0xa0, p0)
 13085 |     |             writeString(0xe0, p1)
 13086 |     |         }
 13087 |     |         _sendLogPayload(0x1c, 0x104);
 13088 |     |         /// @solidity memory-safe-assembly
 13089 |     |         assembly {
 13090 |     |             mstore(0x00, m0)
 13091 |     |             mstore(0x20, m1)
 13092 |     |             mstore(0x40, m2)
 13093 |     |             mstore(0x60, m3)
 13094 |     |             mstore(0x80, m4)
 13095 |     |             mstore(0xa0, m5)
 13096 |     |             mstore(0xc0, m6)
 13097 |     |             mstore(0xe0, m7)
 13098 |     |             mstore(0x100, m8)
 13099 |     |         }
 13100 |     |     }
 13101 |     | 
 13102 |     |     function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {
 13103 |     |         bytes32 m0;
 13104 |     |         bytes32 m1;
 13105 |     |         bytes32 m2;
 13106 |     |         bytes32 m3;
 13107 |     |         bytes32 m4;
 13108 |     |         bytes32 m5;
 13109 |     |         bytes32 m6;
 13110 |     |         bytes32 m7;
 13111 |     |         bytes32 m8;
 13112 |     |         /// @solidity memory-safe-assembly
 13113 |     |         assembly {
 13114 |     |             function writeString(pos, w) {
 13115 |     |                 let length := 0
 13116 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13117 |     |                 mstore(pos, length)
 13118 |     |                 let shift := sub(256, shl(3, length))
 13119 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13120 |     |             }
 13121 |     |             m0 := mload(0x00)
 13122 |     |             m1 := mload(0x20)
 13123 |     |             m2 := mload(0x40)
 13124 |     |             m3 := mload(0x60)
 13125 |     |             m4 := mload(0x80)
 13126 |     |             m5 := mload(0xa0)
 13127 |     |             m6 := mload(0xc0)
 13128 |     |             m7 := mload(0xe0)
 13129 |     |             m8 := mload(0x100)
 13130 |     |             // Selector of `log(string,string,address,bool)`.
 13131 |     |             mstore(0x00, 0x5ccd4e37)
 13132 |     |             mstore(0x20, 0x80)
 13133 |     |             mstore(0x40, 0xc0)
 13134 |     |             mstore(0x60, p2)
 13135 |     |             mstore(0x80, p3)
 13136 |     |             writeString(0xa0, p0)
 13137 |     |             writeString(0xe0, p1)
 13138 |     |         }
 13139 |     |         _sendLogPayload(0x1c, 0x104);
 13140 |     |         /// @solidity memory-safe-assembly
 13141 |     |         assembly {
 13142 |     |             mstore(0x00, m0)
 13143 |     |             mstore(0x20, m1)
 13144 |     |             mstore(0x40, m2)
 13145 |     |             mstore(0x60, m3)
 13146 |     |             mstore(0x80, m4)
 13147 |     |             mstore(0xa0, m5)
 13148 |     |             mstore(0xc0, m6)
 13149 |     |             mstore(0xe0, m7)
 13150 |     |             mstore(0x100, m8)
 13151 |     |         }
 13152 |     |     }
 13153 |     | 
 13154 |     |     function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {
 13155 |     |         bytes32 m0;
 13156 |     |         bytes32 m1;
 13157 |     |         bytes32 m2;
 13158 |     |         bytes32 m3;
 13159 |     |         bytes32 m4;
 13160 |     |         bytes32 m5;
 13161 |     |         bytes32 m6;
 13162 |     |         bytes32 m7;
 13163 |     |         bytes32 m8;
 13164 |     |         /// @solidity memory-safe-assembly
 13165 |     |         assembly {
 13166 |     |             function writeString(pos, w) {
 13167 |     |                 let length := 0
 13168 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13169 |     |                 mstore(pos, length)
 13170 |     |                 let shift := sub(256, shl(3, length))
 13171 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13172 |     |             }
 13173 |     |             m0 := mload(0x00)
 13174 |     |             m1 := mload(0x20)
 13175 |     |             m2 := mload(0x40)
 13176 |     |             m3 := mload(0x60)
 13177 |     |             m4 := mload(0x80)
 13178 |     |             m5 := mload(0xa0)
 13179 |     |             m6 := mload(0xc0)
 13180 |     |             m7 := mload(0xe0)
 13181 |     |             m8 := mload(0x100)
 13182 |     |             // Selector of `log(string,string,address,uint256)`.
 13183 |     |             mstore(0x00, 0x7cc3c607)
 13184 |     |             mstore(0x20, 0x80)
 13185 |     |             mstore(0x40, 0xc0)
 13186 |     |             mstore(0x60, p2)
 13187 |     |             mstore(0x80, p3)
 13188 |     |             writeString(0xa0, p0)
 13189 |     |             writeString(0xe0, p1)
 13190 |     |         }
 13191 |     |         _sendLogPayload(0x1c, 0x104);
 13192 |     |         /// @solidity memory-safe-assembly
 13193 |     |         assembly {
 13194 |     |             mstore(0x00, m0)
 13195 |     |             mstore(0x20, m1)
 13196 |     |             mstore(0x40, m2)
 13197 |     |             mstore(0x60, m3)
 13198 |     |             mstore(0x80, m4)
 13199 |     |             mstore(0xa0, m5)
 13200 |     |             mstore(0xc0, m6)
 13201 |     |             mstore(0xe0, m7)
 13202 |     |             mstore(0x100, m8)
 13203 |     |         }
 13204 |     |     }
 13205 |     | 
 13206 |     |     function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {
 13207 |     |         bytes32 m0;
 13208 |     |         bytes32 m1;
 13209 |     |         bytes32 m2;
 13210 |     |         bytes32 m3;
 13211 |     |         bytes32 m4;
 13212 |     |         bytes32 m5;
 13213 |     |         bytes32 m6;
 13214 |     |         bytes32 m7;
 13215 |     |         bytes32 m8;
 13216 |     |         bytes32 m9;
 13217 |     |         bytes32 m10;
 13218 |     |         /// @solidity memory-safe-assembly
 13219 |     |         assembly {
 13220 |     |             function writeString(pos, w) {
 13221 |     |                 let length := 0
 13222 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13223 |     |                 mstore(pos, length)
 13224 |     |                 let shift := sub(256, shl(3, length))
 13225 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13226 |     |             }
 13227 |     |             m0 := mload(0x00)
 13228 |     |             m1 := mload(0x20)
 13229 |     |             m2 := mload(0x40)
 13230 |     |             m3 := mload(0x60)
 13231 |     |             m4 := mload(0x80)
 13232 |     |             m5 := mload(0xa0)
 13233 |     |             m6 := mload(0xc0)
 13234 |     |             m7 := mload(0xe0)
 13235 |     |             m8 := mload(0x100)
 13236 |     |             m9 := mload(0x120)
 13237 |     |             m10 := mload(0x140)
 13238 |     |             // Selector of `log(string,string,address,string)`.
 13239 |     |             mstore(0x00, 0xeb1bff80)
 13240 |     |             mstore(0x20, 0x80)
 13241 |     |             mstore(0x40, 0xc0)
 13242 |     |             mstore(0x60, p2)
 13243 |     |             mstore(0x80, 0x100)
 13244 |     |             writeString(0xa0, p0)
 13245 |     |             writeString(0xe0, p1)
 13246 |     |             writeString(0x120, p3)
 13247 |     |         }
 13248 |     |         _sendLogPayload(0x1c, 0x144);
 13249 |     |         /// @solidity memory-safe-assembly
 13250 |     |         assembly {
 13251 |     |             mstore(0x00, m0)
 13252 |     |             mstore(0x20, m1)
 13253 |     |             mstore(0x40, m2)
 13254 |     |             mstore(0x60, m3)
 13255 |     |             mstore(0x80, m4)
 13256 |     |             mstore(0xa0, m5)
 13257 |     |             mstore(0xc0, m6)
 13258 |     |             mstore(0xe0, m7)
 13259 |     |             mstore(0x100, m8)
 13260 |     |             mstore(0x120, m9)
 13261 |     |             mstore(0x140, m10)
 13262 |     |         }
 13263 |     |     }
 13264 |     | 
 13265 |     |     function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {
 13266 |     |         bytes32 m0;
 13267 |     |         bytes32 m1;
 13268 |     |         bytes32 m2;
 13269 |     |         bytes32 m3;
 13270 |     |         bytes32 m4;
 13271 |     |         bytes32 m5;
 13272 |     |         bytes32 m6;
 13273 |     |         bytes32 m7;
 13274 |     |         bytes32 m8;
 13275 |     |         /// @solidity memory-safe-assembly
 13276 |     |         assembly {
 13277 |     |             function writeString(pos, w) {
 13278 |     |                 let length := 0
 13279 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13280 |     |                 mstore(pos, length)
 13281 |     |                 let shift := sub(256, shl(3, length))
 13282 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13283 |     |             }
 13284 |     |             m0 := mload(0x00)
 13285 |     |             m1 := mload(0x20)
 13286 |     |             m2 := mload(0x40)
 13287 |     |             m3 := mload(0x60)
 13288 |     |             m4 := mload(0x80)
 13289 |     |             m5 := mload(0xa0)
 13290 |     |             m6 := mload(0xc0)
 13291 |     |             m7 := mload(0xe0)
 13292 |     |             m8 := mload(0x100)
 13293 |     |             // Selector of `log(string,string,bool,address)`.
 13294 |     |             mstore(0x00, 0xc371c7db)
 13295 |     |             mstore(0x20, 0x80)
 13296 |     |             mstore(0x40, 0xc0)
 13297 |     |             mstore(0x60, p2)
 13298 |     |             mstore(0x80, p3)
 13299 |     |             writeString(0xa0, p0)
 13300 |     |             writeString(0xe0, p1)
 13301 |     |         }
 13302 |     |         _sendLogPayload(0x1c, 0x104);
 13303 |     |         /// @solidity memory-safe-assembly
 13304 |     |         assembly {
 13305 |     |             mstore(0x00, m0)
 13306 |     |             mstore(0x20, m1)
 13307 |     |             mstore(0x40, m2)
 13308 |     |             mstore(0x60, m3)
 13309 |     |             mstore(0x80, m4)
 13310 |     |             mstore(0xa0, m5)
 13311 |     |             mstore(0xc0, m6)
 13312 |     |             mstore(0xe0, m7)
 13313 |     |             mstore(0x100, m8)
 13314 |     |         }
 13315 |     |     }
 13316 |     | 
 13317 |     |     function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {
 13318 |     |         bytes32 m0;
 13319 |     |         bytes32 m1;
 13320 |     |         bytes32 m2;
 13321 |     |         bytes32 m3;
 13322 |     |         bytes32 m4;
 13323 |     |         bytes32 m5;
 13324 |     |         bytes32 m6;
 13325 |     |         bytes32 m7;
 13326 |     |         bytes32 m8;
 13327 |     |         /// @solidity memory-safe-assembly
 13328 |     |         assembly {
 13329 |     |             function writeString(pos, w) {
 13330 |     |                 let length := 0
 13331 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13332 |     |                 mstore(pos, length)
 13333 |     |                 let shift := sub(256, shl(3, length))
 13334 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13335 |     |             }
 13336 |     |             m0 := mload(0x00)
 13337 |     |             m1 := mload(0x20)
 13338 |     |             m2 := mload(0x40)
 13339 |     |             m3 := mload(0x60)
 13340 |     |             m4 := mload(0x80)
 13341 |     |             m5 := mload(0xa0)
 13342 |     |             m6 := mload(0xc0)
 13343 |     |             m7 := mload(0xe0)
 13344 |     |             m8 := mload(0x100)
 13345 |     |             // Selector of `log(string,string,bool,bool)`.
 13346 |     |             mstore(0x00, 0x40785869)
 13347 |     |             mstore(0x20, 0x80)
 13348 |     |             mstore(0x40, 0xc0)
 13349 |     |             mstore(0x60, p2)
 13350 |     |             mstore(0x80, p3)
 13351 |     |             writeString(0xa0, p0)
 13352 |     |             writeString(0xe0, p1)
 13353 |     |         }
 13354 |     |         _sendLogPayload(0x1c, 0x104);
 13355 |     |         /// @solidity memory-safe-assembly
 13356 |     |         assembly {
 13357 |     |             mstore(0x00, m0)
 13358 |     |             mstore(0x20, m1)
 13359 |     |             mstore(0x40, m2)
 13360 |     |             mstore(0x60, m3)
 13361 |     |             mstore(0x80, m4)
 13362 |     |             mstore(0xa0, m5)
 13363 |     |             mstore(0xc0, m6)
 13364 |     |             mstore(0xe0, m7)
 13365 |     |             mstore(0x100, m8)
 13366 |     |         }
 13367 |     |     }
 13368 |     | 
 13369 |     |     function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {
 13370 |     |         bytes32 m0;
 13371 |     |         bytes32 m1;
 13372 |     |         bytes32 m2;
 13373 |     |         bytes32 m3;
 13374 |     |         bytes32 m4;
 13375 |     |         bytes32 m5;
 13376 |     |         bytes32 m6;
 13377 |     |         bytes32 m7;
 13378 |     |         bytes32 m8;
 13379 |     |         /// @solidity memory-safe-assembly
 13380 |     |         assembly {
 13381 |     |             function writeString(pos, w) {
 13382 |     |                 let length := 0
 13383 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13384 |     |                 mstore(pos, length)
 13385 |     |                 let shift := sub(256, shl(3, length))
 13386 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13387 |     |             }
 13388 |     |             m0 := mload(0x00)
 13389 |     |             m1 := mload(0x20)
 13390 |     |             m2 := mload(0x40)
 13391 |     |             m3 := mload(0x60)
 13392 |     |             m4 := mload(0x80)
 13393 |     |             m5 := mload(0xa0)
 13394 |     |             m6 := mload(0xc0)
 13395 |     |             m7 := mload(0xe0)
 13396 |     |             m8 := mload(0x100)
 13397 |     |             // Selector of `log(string,string,bool,uint256)`.
 13398 |     |             mstore(0x00, 0xd6aefad2)
 13399 |     |             mstore(0x20, 0x80)
 13400 |     |             mstore(0x40, 0xc0)
 13401 |     |             mstore(0x60, p2)
 13402 |     |             mstore(0x80, p3)
 13403 |     |             writeString(0xa0, p0)
 13404 |     |             writeString(0xe0, p1)
 13405 |     |         }
 13406 |     |         _sendLogPayload(0x1c, 0x104);
 13407 |     |         /// @solidity memory-safe-assembly
 13408 |     |         assembly {
 13409 |     |             mstore(0x00, m0)
 13410 |     |             mstore(0x20, m1)
 13411 |     |             mstore(0x40, m2)
 13412 |     |             mstore(0x60, m3)
 13413 |     |             mstore(0x80, m4)
 13414 |     |             mstore(0xa0, m5)
 13415 |     |             mstore(0xc0, m6)
 13416 |     |             mstore(0xe0, m7)
 13417 |     |             mstore(0x100, m8)
 13418 |     |         }
 13419 |     |     }
 13420 |     | 
 13421 |     |     function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {
 13422 |     |         bytes32 m0;
 13423 |     |         bytes32 m1;
 13424 |     |         bytes32 m2;
 13425 |     |         bytes32 m3;
 13426 |     |         bytes32 m4;
 13427 |     |         bytes32 m5;
 13428 |     |         bytes32 m6;
 13429 |     |         bytes32 m7;
 13430 |     |         bytes32 m8;
 13431 |     |         bytes32 m9;
 13432 |     |         bytes32 m10;
 13433 |     |         /// @solidity memory-safe-assembly
 13434 |     |         assembly {
 13435 |     |             function writeString(pos, w) {
 13436 |     |                 let length := 0
 13437 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13438 |     |                 mstore(pos, length)
 13439 |     |                 let shift := sub(256, shl(3, length))
 13440 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13441 |     |             }
 13442 |     |             m0 := mload(0x00)
 13443 |     |             m1 := mload(0x20)
 13444 |     |             m2 := mload(0x40)
 13445 |     |             m3 := mload(0x60)
 13446 |     |             m4 := mload(0x80)
 13447 |     |             m5 := mload(0xa0)
 13448 |     |             m6 := mload(0xc0)
 13449 |     |             m7 := mload(0xe0)
 13450 |     |             m8 := mload(0x100)
 13451 |     |             m9 := mload(0x120)
 13452 |     |             m10 := mload(0x140)
 13453 |     |             // Selector of `log(string,string,bool,string)`.
 13454 |     |             mstore(0x00, 0x5e84b0ea)
 13455 |     |             mstore(0x20, 0x80)
 13456 |     |             mstore(0x40, 0xc0)
 13457 |     |             mstore(0x60, p2)
 13458 |     |             mstore(0x80, 0x100)
 13459 |     |             writeString(0xa0, p0)
 13460 |     |             writeString(0xe0, p1)
 13461 |     |             writeString(0x120, p3)
 13462 |     |         }
 13463 |     |         _sendLogPayload(0x1c, 0x144);
 13464 |     |         /// @solidity memory-safe-assembly
 13465 |     |         assembly {
 13466 |     |             mstore(0x00, m0)
 13467 |     |             mstore(0x20, m1)
 13468 |     |             mstore(0x40, m2)
 13469 |     |             mstore(0x60, m3)
 13470 |     |             mstore(0x80, m4)
 13471 |     |             mstore(0xa0, m5)
 13472 |     |             mstore(0xc0, m6)
 13473 |     |             mstore(0xe0, m7)
 13474 |     |             mstore(0x100, m8)
 13475 |     |             mstore(0x120, m9)
 13476 |     |             mstore(0x140, m10)
 13477 |     |         }
 13478 |     |     }
 13479 |     | 
 13480 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {
 13481 |     |         bytes32 m0;
 13482 |     |         bytes32 m1;
 13483 |     |         bytes32 m2;
 13484 |     |         bytes32 m3;
 13485 |     |         bytes32 m4;
 13486 |     |         bytes32 m5;
 13487 |     |         bytes32 m6;
 13488 |     |         bytes32 m7;
 13489 |     |         bytes32 m8;
 13490 |     |         /// @solidity memory-safe-assembly
 13491 |     |         assembly {
 13492 |     |             function writeString(pos, w) {
 13493 |     |                 let length := 0
 13494 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13495 |     |                 mstore(pos, length)
 13496 |     |                 let shift := sub(256, shl(3, length))
 13497 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13498 |     |             }
 13499 |     |             m0 := mload(0x00)
 13500 |     |             m1 := mload(0x20)
 13501 |     |             m2 := mload(0x40)
 13502 |     |             m3 := mload(0x60)
 13503 |     |             m4 := mload(0x80)
 13504 |     |             m5 := mload(0xa0)
 13505 |     |             m6 := mload(0xc0)
 13506 |     |             m7 := mload(0xe0)
 13507 |     |             m8 := mload(0x100)
 13508 |     |             // Selector of `log(string,string,uint256,address)`.
 13509 |     |             mstore(0x00, 0x1023f7b2)
 13510 |     |             mstore(0x20, 0x80)
 13511 |     |             mstore(0x40, 0xc0)
 13512 |     |             mstore(0x60, p2)
 13513 |     |             mstore(0x80, p3)
 13514 |     |             writeString(0xa0, p0)
 13515 |     |             writeString(0xe0, p1)
 13516 |     |         }
 13517 |     |         _sendLogPayload(0x1c, 0x104);
 13518 |     |         /// @solidity memory-safe-assembly
 13519 |     |         assembly {
 13520 |     |             mstore(0x00, m0)
 13521 |     |             mstore(0x20, m1)
 13522 |     |             mstore(0x40, m2)
 13523 |     |             mstore(0x60, m3)
 13524 |     |             mstore(0x80, m4)
 13525 |     |             mstore(0xa0, m5)
 13526 |     |             mstore(0xc0, m6)
 13527 |     |             mstore(0xe0, m7)
 13528 |     |             mstore(0x100, m8)
 13529 |     |         }
 13530 |     |     }
 13531 |     | 
 13532 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {
 13533 |     |         bytes32 m0;
 13534 |     |         bytes32 m1;
 13535 |     |         bytes32 m2;
 13536 |     |         bytes32 m3;
 13537 |     |         bytes32 m4;
 13538 |     |         bytes32 m5;
 13539 |     |         bytes32 m6;
 13540 |     |         bytes32 m7;
 13541 |     |         bytes32 m8;
 13542 |     |         /// @solidity memory-safe-assembly
 13543 |     |         assembly {
 13544 |     |             function writeString(pos, w) {
 13545 |     |                 let length := 0
 13546 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13547 |     |                 mstore(pos, length)
 13548 |     |                 let shift := sub(256, shl(3, length))
 13549 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13550 |     |             }
 13551 |     |             m0 := mload(0x00)
 13552 |     |             m1 := mload(0x20)
 13553 |     |             m2 := mload(0x40)
 13554 |     |             m3 := mload(0x60)
 13555 |     |             m4 := mload(0x80)
 13556 |     |             m5 := mload(0xa0)
 13557 |     |             m6 := mload(0xc0)
 13558 |     |             m7 := mload(0xe0)
 13559 |     |             m8 := mload(0x100)
 13560 |     |             // Selector of `log(string,string,uint256,bool)`.
 13561 |     |             mstore(0x00, 0xc3a8a654)
 13562 |     |             mstore(0x20, 0x80)
 13563 |     |             mstore(0x40, 0xc0)
 13564 |     |             mstore(0x60, p2)
 13565 |     |             mstore(0x80, p3)
 13566 |     |             writeString(0xa0, p0)
 13567 |     |             writeString(0xe0, p1)
 13568 |     |         }
 13569 |     |         _sendLogPayload(0x1c, 0x104);
 13570 |     |         /// @solidity memory-safe-assembly
 13571 |     |         assembly {
 13572 |     |             mstore(0x00, m0)
 13573 |     |             mstore(0x20, m1)
 13574 |     |             mstore(0x40, m2)
 13575 |     |             mstore(0x60, m3)
 13576 |     |             mstore(0x80, m4)
 13577 |     |             mstore(0xa0, m5)
 13578 |     |             mstore(0xc0, m6)
 13579 |     |             mstore(0xe0, m7)
 13580 |     |             mstore(0x100, m8)
 13581 |     |         }
 13582 |     |     }
 13583 |     | 
 13584 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {
 13585 |     |         bytes32 m0;
 13586 |     |         bytes32 m1;
 13587 |     |         bytes32 m2;
 13588 |     |         bytes32 m3;
 13589 |     |         bytes32 m4;
 13590 |     |         bytes32 m5;
 13591 |     |         bytes32 m6;
 13592 |     |         bytes32 m7;
 13593 |     |         bytes32 m8;
 13594 |     |         /// @solidity memory-safe-assembly
 13595 |     |         assembly {
 13596 |     |             function writeString(pos, w) {
 13597 |     |                 let length := 0
 13598 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13599 |     |                 mstore(pos, length)
 13600 |     |                 let shift := sub(256, shl(3, length))
 13601 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13602 |     |             }
 13603 |     |             m0 := mload(0x00)
 13604 |     |             m1 := mload(0x20)
 13605 |     |             m2 := mload(0x40)
 13606 |     |             m3 := mload(0x60)
 13607 |     |             m4 := mload(0x80)
 13608 |     |             m5 := mload(0xa0)
 13609 |     |             m6 := mload(0xc0)
 13610 |     |             m7 := mload(0xe0)
 13611 |     |             m8 := mload(0x100)
 13612 |     |             // Selector of `log(string,string,uint256,uint256)`.
 13613 |     |             mstore(0x00, 0xf45d7d2c)
 13614 |     |             mstore(0x20, 0x80)
 13615 |     |             mstore(0x40, 0xc0)
 13616 |     |             mstore(0x60, p2)
 13617 |     |             mstore(0x80, p3)
 13618 |     |             writeString(0xa0, p0)
 13619 |     |             writeString(0xe0, p1)
 13620 |     |         }
 13621 |     |         _sendLogPayload(0x1c, 0x104);
 13622 |     |         /// @solidity memory-safe-assembly
 13623 |     |         assembly {
 13624 |     |             mstore(0x00, m0)
 13625 |     |             mstore(0x20, m1)
 13626 |     |             mstore(0x40, m2)
 13627 |     |             mstore(0x60, m3)
 13628 |     |             mstore(0x80, m4)
 13629 |     |             mstore(0xa0, m5)
 13630 |     |             mstore(0xc0, m6)
 13631 |     |             mstore(0xe0, m7)
 13632 |     |             mstore(0x100, m8)
 13633 |     |         }
 13634 |     |     }
 13635 |     | 
 13636 |     |     function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {
 13637 |     |         bytes32 m0;
 13638 |     |         bytes32 m1;
 13639 |     |         bytes32 m2;
 13640 |     |         bytes32 m3;
 13641 |     |         bytes32 m4;
 13642 |     |         bytes32 m5;
 13643 |     |         bytes32 m6;
 13644 |     |         bytes32 m7;
 13645 |     |         bytes32 m8;
 13646 |     |         bytes32 m9;
 13647 |     |         bytes32 m10;
 13648 |     |         /// @solidity memory-safe-assembly
 13649 |     |         assembly {
 13650 |     |             function writeString(pos, w) {
 13651 |     |                 let length := 0
 13652 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13653 |     |                 mstore(pos, length)
 13654 |     |                 let shift := sub(256, shl(3, length))
 13655 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13656 |     |             }
 13657 |     |             m0 := mload(0x00)
 13658 |     |             m1 := mload(0x20)
 13659 |     |             m2 := mload(0x40)
 13660 |     |             m3 := mload(0x60)
 13661 |     |             m4 := mload(0x80)
 13662 |     |             m5 := mload(0xa0)
 13663 |     |             m6 := mload(0xc0)
 13664 |     |             m7 := mload(0xe0)
 13665 |     |             m8 := mload(0x100)
 13666 |     |             m9 := mload(0x120)
 13667 |     |             m10 := mload(0x140)
 13668 |     |             // Selector of `log(string,string,uint256,string)`.
 13669 |     |             mstore(0x00, 0x5d1a971a)
 13670 |     |             mstore(0x20, 0x80)
 13671 |     |             mstore(0x40, 0xc0)
 13672 |     |             mstore(0x60, p2)
 13673 |     |             mstore(0x80, 0x100)
 13674 |     |             writeString(0xa0, p0)
 13675 |     |             writeString(0xe0, p1)
 13676 |     |             writeString(0x120, p3)
 13677 |     |         }
 13678 |     |         _sendLogPayload(0x1c, 0x144);
 13679 |     |         /// @solidity memory-safe-assembly
 13680 |     |         assembly {
 13681 |     |             mstore(0x00, m0)
 13682 |     |             mstore(0x20, m1)
 13683 |     |             mstore(0x40, m2)
 13684 |     |             mstore(0x60, m3)
 13685 |     |             mstore(0x80, m4)
 13686 |     |             mstore(0xa0, m5)
 13687 |     |             mstore(0xc0, m6)
 13688 |     |             mstore(0xe0, m7)
 13689 |     |             mstore(0x100, m8)
 13690 |     |             mstore(0x120, m9)
 13691 |     |             mstore(0x140, m10)
 13692 |     |         }
 13693 |     |     }
 13694 |     | 
 13695 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {
 13696 |     |         bytes32 m0;
 13697 |     |         bytes32 m1;
 13698 |     |         bytes32 m2;
 13699 |     |         bytes32 m3;
 13700 |     |         bytes32 m4;
 13701 |     |         bytes32 m5;
 13702 |     |         bytes32 m6;
 13703 |     |         bytes32 m7;
 13704 |     |         bytes32 m8;
 13705 |     |         bytes32 m9;
 13706 |     |         bytes32 m10;
 13707 |     |         /// @solidity memory-safe-assembly
 13708 |     |         assembly {
 13709 |     |             function writeString(pos, w) {
 13710 |     |                 let length := 0
 13711 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13712 |     |                 mstore(pos, length)
 13713 |     |                 let shift := sub(256, shl(3, length))
 13714 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13715 |     |             }
 13716 |     |             m0 := mload(0x00)
 13717 |     |             m1 := mload(0x20)
 13718 |     |             m2 := mload(0x40)
 13719 |     |             m3 := mload(0x60)
 13720 |     |             m4 := mload(0x80)
 13721 |     |             m5 := mload(0xa0)
 13722 |     |             m6 := mload(0xc0)
 13723 |     |             m7 := mload(0xe0)
 13724 |     |             m8 := mload(0x100)
 13725 |     |             m9 := mload(0x120)
 13726 |     |             m10 := mload(0x140)
 13727 |     |             // Selector of `log(string,string,string,address)`.
 13728 |     |             mstore(0x00, 0x6d572f44)
 13729 |     |             mstore(0x20, 0x80)
 13730 |     |             mstore(0x40, 0xc0)
 13731 |     |             mstore(0x60, 0x100)
 13732 |     |             mstore(0x80, p3)
 13733 |     |             writeString(0xa0, p0)
 13734 |     |             writeString(0xe0, p1)
 13735 |     |             writeString(0x120, p2)
 13736 |     |         }
 13737 |     |         _sendLogPayload(0x1c, 0x144);
 13738 |     |         /// @solidity memory-safe-assembly
 13739 |     |         assembly {
 13740 |     |             mstore(0x00, m0)
 13741 |     |             mstore(0x20, m1)
 13742 |     |             mstore(0x40, m2)
 13743 |     |             mstore(0x60, m3)
 13744 |     |             mstore(0x80, m4)
 13745 |     |             mstore(0xa0, m5)
 13746 |     |             mstore(0xc0, m6)
 13747 |     |             mstore(0xe0, m7)
 13748 |     |             mstore(0x100, m8)
 13749 |     |             mstore(0x120, m9)
 13750 |     |             mstore(0x140, m10)
 13751 |     |         }
 13752 |     |     }
 13753 |     | 
 13754 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {
 13755 |     |         bytes32 m0;
 13756 |     |         bytes32 m1;
 13757 |     |         bytes32 m2;
 13758 |     |         bytes32 m3;
 13759 |     |         bytes32 m4;
 13760 |     |         bytes32 m5;
 13761 |     |         bytes32 m6;
 13762 |     |         bytes32 m7;
 13763 |     |         bytes32 m8;
 13764 |     |         bytes32 m9;
 13765 |     |         bytes32 m10;
 13766 |     |         /// @solidity memory-safe-assembly
 13767 |     |         assembly {
 13768 |     |             function writeString(pos, w) {
 13769 |     |                 let length := 0
 13770 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13771 |     |                 mstore(pos, length)
 13772 |     |                 let shift := sub(256, shl(3, length))
 13773 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13774 |     |             }
 13775 |     |             m0 := mload(0x00)
 13776 |     |             m1 := mload(0x20)
 13777 |     |             m2 := mload(0x40)
 13778 |     |             m3 := mload(0x60)
 13779 |     |             m4 := mload(0x80)
 13780 |     |             m5 := mload(0xa0)
 13781 |     |             m6 := mload(0xc0)
 13782 |     |             m7 := mload(0xe0)
 13783 |     |             m8 := mload(0x100)
 13784 |     |             m9 := mload(0x120)
 13785 |     |             m10 := mload(0x140)
 13786 |     |             // Selector of `log(string,string,string,bool)`.
 13787 |     |             mstore(0x00, 0x2c1754ed)
 13788 |     |             mstore(0x20, 0x80)
 13789 |     |             mstore(0x40, 0xc0)
 13790 |     |             mstore(0x60, 0x100)
 13791 |     |             mstore(0x80, p3)
 13792 |     |             writeString(0xa0, p0)
 13793 |     |             writeString(0xe0, p1)
 13794 |     |             writeString(0x120, p2)
 13795 |     |         }
 13796 |     |         _sendLogPayload(0x1c, 0x144);
 13797 |     |         /// @solidity memory-safe-assembly
 13798 |     |         assembly {
 13799 |     |             mstore(0x00, m0)
 13800 |     |             mstore(0x20, m1)
 13801 |     |             mstore(0x40, m2)
 13802 |     |             mstore(0x60, m3)
 13803 |     |             mstore(0x80, m4)
 13804 |     |             mstore(0xa0, m5)
 13805 |     |             mstore(0xc0, m6)
 13806 |     |             mstore(0xe0, m7)
 13807 |     |             mstore(0x100, m8)
 13808 |     |             mstore(0x120, m9)
 13809 |     |             mstore(0x140, m10)
 13810 |     |         }
 13811 |     |     }
 13812 |     | 
 13813 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {
 13814 |     |         bytes32 m0;
 13815 |     |         bytes32 m1;
 13816 |     |         bytes32 m2;
 13817 |     |         bytes32 m3;
 13818 |     |         bytes32 m4;
 13819 |     |         bytes32 m5;
 13820 |     |         bytes32 m6;
 13821 |     |         bytes32 m7;
 13822 |     |         bytes32 m8;
 13823 |     |         bytes32 m9;
 13824 |     |         bytes32 m10;
 13825 |     |         /// @solidity memory-safe-assembly
 13826 |     |         assembly {
 13827 |     |             function writeString(pos, w) {
 13828 |     |                 let length := 0
 13829 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13830 |     |                 mstore(pos, length)
 13831 |     |                 let shift := sub(256, shl(3, length))
 13832 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13833 |     |             }
 13834 |     |             m0 := mload(0x00)
 13835 |     |             m1 := mload(0x20)
 13836 |     |             m2 := mload(0x40)
 13837 |     |             m3 := mload(0x60)
 13838 |     |             m4 := mload(0x80)
 13839 |     |             m5 := mload(0xa0)
 13840 |     |             m6 := mload(0xc0)
 13841 |     |             m7 := mload(0xe0)
 13842 |     |             m8 := mload(0x100)
 13843 |     |             m9 := mload(0x120)
 13844 |     |             m10 := mload(0x140)
 13845 |     |             // Selector of `log(string,string,string,uint256)`.
 13846 |     |             mstore(0x00, 0x8eafb02b)
 13847 |     |             mstore(0x20, 0x80)
 13848 |     |             mstore(0x40, 0xc0)
 13849 |     |             mstore(0x60, 0x100)
 13850 |     |             mstore(0x80, p3)
 13851 |     |             writeString(0xa0, p0)
 13852 |     |             writeString(0xe0, p1)
 13853 |     |             writeString(0x120, p2)
 13854 |     |         }
 13855 |     |         _sendLogPayload(0x1c, 0x144);
 13856 |     |         /// @solidity memory-safe-assembly
 13857 |     |         assembly {
 13858 |     |             mstore(0x00, m0)
 13859 |     |             mstore(0x20, m1)
 13860 |     |             mstore(0x40, m2)
 13861 |     |             mstore(0x60, m3)
 13862 |     |             mstore(0x80, m4)
 13863 |     |             mstore(0xa0, m5)
 13864 |     |             mstore(0xc0, m6)
 13865 |     |             mstore(0xe0, m7)
 13866 |     |             mstore(0x100, m8)
 13867 |     |             mstore(0x120, m9)
 13868 |     |             mstore(0x140, m10)
 13869 |     |         }
 13870 |     |     }
 13871 |     | 
 13872 |     |     function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {
 13873 |     |         bytes32 m0;
 13874 |     |         bytes32 m1;
 13875 |     |         bytes32 m2;
 13876 |     |         bytes32 m3;
 13877 |     |         bytes32 m4;
 13878 |     |         bytes32 m5;
 13879 |     |         bytes32 m6;
 13880 |     |         bytes32 m7;
 13881 |     |         bytes32 m8;
 13882 |     |         bytes32 m9;
 13883 |     |         bytes32 m10;
 13884 |     |         bytes32 m11;
 13885 |     |         bytes32 m12;
 13886 |     |         /// @solidity memory-safe-assembly
 13887 |     |         assembly {
 13888 |     |             function writeString(pos, w) {
 13889 |     |                 let length := 0
 13890 |     |                 for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }
 13891 |     |                 mstore(pos, length)
 13892 |     |                 let shift := sub(256, shl(3, length))
 13893 |     |                 mstore(add(pos, 0x20), shl(shift, shr(shift, w)))
 13894 |     |             }
 13895 |     |             m0 := mload(0x00)
 13896 |     |             m1 := mload(0x20)
 13897 |     |             m2 := mload(0x40)
 13898 |     |             m3 := mload(0x60)
 13899 |     |             m4 := mload(0x80)
 13900 |     |             m5 := mload(0xa0)
 13901 |     |             m6 := mload(0xc0)
 13902 |     |             m7 := mload(0xe0)
 13903 |     |             m8 := mload(0x100)
 13904 |     |             m9 := mload(0x120)
 13905 |     |             m10 := mload(0x140)
 13906 |     |             m11 := mload(0x160)
 13907 |     |             m12 := mload(0x180)
 13908 |     |             // Selector of `log(string,string,string,string)`.
 13909 |     |             mstore(0x00, 0xde68f20a)
 13910 |     |             mstore(0x20, 0x80)
 13911 |     |             mstore(0x40, 0xc0)
 13912 |     |             mstore(0x60, 0x100)
 13913 |     |             mstore(0x80, 0x140)
 13914 |     |             writeString(0xa0, p0)
 13915 |     |             writeString(0xe0, p1)
 13916 |     |             writeString(0x120, p2)
 13917 |     |             writeString(0x160, p3)
 13918 |     |         }
 13919 |     |         _sendLogPayload(0x1c, 0x184);
 13920 |     |         /// @solidity memory-safe-assembly
 13921 |     |         assembly {
 13922 |     |             mstore(0x00, m0)
 13923 |     |             mstore(0x20, m1)
 13924 |     |             mstore(0x40, m2)
 13925 |     |             mstore(0x60, m3)
 13926 |     |             mstore(0x80, m4)
 13927 |     |             mstore(0xa0, m5)
 13928 |     |             mstore(0xc0, m6)
 13929 |     |             mstore(0xe0, m7)
 13930 |     |             mstore(0x100, m8)
 13931 |     |             mstore(0x120, m9)
 13932 |     |             mstore(0x140, m10)
 13933 |     |             mstore(0x160, m11)
 13934 |     |             mstore(0x180, m12)
 13935 |     |         }
 13936 |     |     }
 13937 |     | }
 13938 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/access/AccessControl.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IAccessControl} from "./IAccessControl.sol";
   7 |     | import {Context} from "../utils/Context.sol";
   8 |     | import {ERC165} from "../utils/introspection/ERC165.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev Contract module that allows children to implement role-based access
  12 |     |  * control mechanisms. This is a lightweight version that doesn't allow enumerating role
  13 |     |  * members except through off-chain means by accessing the contract event logs. Some
  14 |     |  * applications may benefit from on-chain enumerability, for those cases see
  15 |     |  * {AccessControlEnumerable}.
  16 |     |  *
  17 |     |  * Roles are referred to by their `bytes32` identifier. These should be exposed
  18 |     |  * in the external API and be unique. The best way to achieve this is by
  19 |     |  * using `public constant` hash digests:
  20 |     |  *
  21 |     |  * ```solidity
  22 |     |  * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
  23 |     |  * ```
  24 |     |  *
  25 |     |  * Roles can be used to represent a set of permissions. To restrict access to a
  26 |     |  * function call, use {hasRole}:
  27 |     |  *
  28 |     |  * ```solidity
  29 |     |  * function foo() public {
  30 |     |  *     require(hasRole(MY_ROLE, msg.sender));
  31 |     |  *     ...
  32 |     |  * }
  33 |     |  * ```
  34 |     |  *
  35 |     |  * Roles can be granted and revoked dynamically via the {grantRole} and
  36 |     |  * {revokeRole} functions. Each role has an associated admin role, and only
  37 |     |  * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
  38 |     |  *
  39 |     |  * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
  40 |     |  * that only accounts with this role will be able to grant or revoke other
  41 |     |  * roles. More complex role relationships can be created by using
  42 |     |  * {_setRoleAdmin}.
  43 |     |  *
  44 |     |  * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
  45 |     |  * grant and revoke this role. Extra precautions should be taken to secure
  46 |     |  * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
  47 |     |  * to enforce additional security measures for this role.
  48 |     |  */
  49 |     | abstract contract AccessControl is Context, IAccessControl, ERC165 {
  50 |     |     struct RoleData {
  51 |     |         mapping(address account => bool) hasRole;
  52 |     |         bytes32 adminRole;
  53 |     |     }
  54 |     | 
  55 |     |     mapping(bytes32 role => RoleData) private _roles;
  56 |     | 
  57 |     |     bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Modifier that checks that an account has a specific role. Reverts
  61 |     |      * with an {AccessControlUnauthorizedAccount} error including the required role.
  62 |     |      */
  63 |     |     modifier onlyRole(bytes32 role) {
  64 |     |         _checkRole(role);
  65 |     |         _;
  66 |     |     }
  67 |     | 
  68 |     |     /**
  69 |     |      * @dev See {IERC165-supportsInterface}.
  70 |     |      */
  71 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
  72 |     |         return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
  73 |     |     }
  74 |     | 
  75 |     |     /**
  76 |     |      * @dev Returns `true` if `account` has been granted `role`.
  77 |     |      */
  78 |     |     function hasRole(bytes32 role, address account) public view virtual returns (bool) {
  79 |     |         return _roles[role].hasRole[account];
  80 |     |     }
  81 |     | 
  82 |     |     /**
  83 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`
  84 |     |      * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.
  85 |     |      */
  86 |     |     function _checkRole(bytes32 role) internal view virtual {
  87 |     |         _checkRole(role, _msgSender());
  88 |     |     }
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`
  92 |     |      * is missing `role`.
  93 |     |      */
  94 |     |     function _checkRole(bytes32 role, address account) internal view virtual {
  95 |     |         if (!hasRole(role, account)) {
  96 |     |             revert AccessControlUnauthorizedAccount(account, role);
  97 |     |         }
  98 |     |     }
  99 |     | 
 100 |     |     /**
 101 |     |      * @dev Returns the admin role that controls `role`. See {grantRole} and
 102 |     |      * {revokeRole}.
 103 |     |      *
 104 |     |      * To change a role's admin, use {_setRoleAdmin}.
 105 |     |      */
 106 |     |     function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {
 107 |     |         return _roles[role].adminRole;
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev Grants `role` to `account`.
 112 |     |      *
 113 |     |      * If `account` had not been already granted `role`, emits a {RoleGranted}
 114 |     |      * event.
 115 |     |      *
 116 |     |      * Requirements:
 117 |     |      *
 118 |     |      * - the caller must have ``role``'s admin role.
 119 |     |      *
 120 |     |      * May emit a {RoleGranted} event.
 121 |     |      */
 122 |     |     function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 123 |     |         _grantRole(role, account);
 124 |     |     }
 125 |     | 
 126 |     |     /**
 127 |     |      * @dev Revokes `role` from `account`.
 128 |     |      *
 129 |     |      * If `account` had been granted `role`, emits a {RoleRevoked} event.
 130 |     |      *
 131 |     |      * Requirements:
 132 |     |      *
 133 |     |      * - the caller must have ``role``'s admin role.
 134 |     |      *
 135 |     |      * May emit a {RoleRevoked} event.
 136 |     |      */
 137 |     |     function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 138 |     |         _revokeRole(role, account);
 139 |     |     }
 140 |     | 
 141 |     |     /**
 142 |     |      * @dev Revokes `role` from the calling account.
 143 |     |      *
 144 |     |      * Roles are often managed via {grantRole} and {revokeRole}: this function's
 145 |     |      * purpose is to provide a mechanism for accounts to lose their privileges
 146 |     |      * if they are compromised (such as when a trusted device is misplaced).
 147 |     |      *
 148 |     |      * If the calling account had been revoked `role`, emits a {RoleRevoked}
 149 |     |      * event.
 150 |     |      *
 151 |     |      * Requirements:
 152 |     |      *
 153 |     |      * - the caller must be `callerConfirmation`.
 154 |     |      *
 155 |     |      * May emit a {RoleRevoked} event.
 156 |     |      */
 157 |     |     function renounceRole(bytes32 role, address callerConfirmation) public virtual {
 158 |     |         if (callerConfirmation != _msgSender()) {
 159 |     |             revert AccessControlBadConfirmation();
 160 |     |         }
 161 |     | 
 162 |     |         _revokeRole(role, callerConfirmation);
 163 |     |     }
 164 |     | 
 165 |     |     /**
 166 |     |      * @dev Sets `adminRole` as ``role``'s admin role.
 167 |     |      *
 168 |     |      * Emits a {RoleAdminChanged} event.
 169 |     |      */
 170 |     |     function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
 171 |     |         bytes32 previousAdminRole = getRoleAdmin(role);
 172 |     |         _roles[role].adminRole = adminRole;
 173 |     |         emit RoleAdminChanged(role, previousAdminRole, adminRole);
 174 |     |     }
 175 |     | 
 176 |     |     /**
 177 |     |      * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.
 178 |     |      *
 179 |     |      * Internal function without access restriction.
 180 |     |      *
 181 |     |      * May emit a {RoleGranted} event.
 182 |     |      */
 183 |     |     function _grantRole(bytes32 role, address account) internal virtual returns (bool) {
 184 |     |         if (!hasRole(role, account)) {
 185 |     |             _roles[role].hasRole[account] = true;
 186 |     |             emit RoleGranted(role, account, _msgSender());
 187 |     |             return true;
 188 |     |         } else {
 189 |     |             return false;
 190 |     |         }
 191 |     |     }
 192 |     | 
 193 |     |     /**
 194 |     |      * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.
 195 |     |      *
 196 |     |      * Internal function without access restriction.
 197 |     |      *
 198 |     |      * May emit a {RoleRevoked} event.
 199 |     |      */
 200 |     |     function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {
 201 |     |         if (hasRole(role, account)) {
 202 |     |             _roles[role].hasRole[account] = false;
 203 |     |             emit RoleRevoked(role, account, _msgSender());
 204 |     |             return true;
 205 |     |         } else {
 206 |     |             return false;
 207 |     |         }
 208 |     |     }
 209 |     | }
 210 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev External interface of AccessControl declared to support ERC-165 detection.
   8 |     |  */
   9 |     | interface IAccessControl {
  10 |     |     /**
  11 |     |      * @dev The `account` is missing a role.
  12 |     |      */
  13 |     |     error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
  14 |     | 
  15 |     |     /**
  16 |     |      * @dev The caller of a function is not the expected one.
  17 |     |      *
  18 |     |      * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
  19 |     |      */
  20 |     |     error AccessControlBadConfirmation();
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
  24 |     |      *
  25 |     |      * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
  26 |     |      * {RoleAdminChanged} not being emitted signaling this.
  27 |     |      */
  28 |     |     event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Emitted when `account` is granted `role`.
  32 |     |      *
  33 |     |      * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).
  34 |     |      * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.
  35 |     |      */
  36 |     |     event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Emitted when `account` is revoked `role`.
  40 |     |      *
  41 |     |      * `sender` is the account that originated the contract call:
  42 |     |      *   - if using `revokeRole`, it is the admin role bearer
  43 |     |      *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
  44 |     |      */
  45 |     |     event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
  46 |     | 
  47 |     |     /**
  48 |     |      * @dev Returns `true` if `account` has been granted `role`.
  49 |     |      */
  50 |     |     function hasRole(bytes32 role, address account) external view returns (bool);
  51 |     | 
  52 |     |     /**
  53 |     |      * @dev Returns the admin role that controls `role`. See {grantRole} and
  54 |     |      * {revokeRole}.
  55 |     |      *
  56 |     |      * To change a role's admin, use {AccessControl-_setRoleAdmin}.
  57 |     |      */
  58 |     |     function getRoleAdmin(bytes32 role) external view returns (bytes32);
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Grants `role` to `account`.
  62 |     |      *
  63 |     |      * If `account` had not been already granted `role`, emits a {RoleGranted}
  64 |     |      * event.
  65 |     |      *
  66 |     |      * Requirements:
  67 |     |      *
  68 |     |      * - the caller must have ``role``'s admin role.
  69 |     |      */
  70 |     |     function grantRole(bytes32 role, address account) external;
  71 |     | 
  72 |     |     /**
  73 |     |      * @dev Revokes `role` from `account`.
  74 |     |      *
  75 |     |      * If `account` had been granted `role`, emits a {RoleRevoked} event.
  76 |     |      *
  77 |     |      * Requirements:
  78 |     |      *
  79 |     |      * - the caller must have ``role``'s admin role.
  80 |     |      */
  81 |     |     function revokeRole(bytes32 role, address account) external;
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Revokes `role` from the calling account.
  85 |     |      *
  86 |     |      * Roles are often managed via {grantRole} and {revokeRole}: this function's
  87 |     |      * purpose is to provide a mechanism for accounts to lose their privileges
  88 |     |      * if they are compromised (such as when a trusted device is misplaced).
  89 |     |      *
  90 |     |      * If the calling account had been granted `role`, emits a {RoleRevoked}
  91 |     |      * event.
  92 |     |      *
  93 |     |      * Requirements:
  94 |     |      *
  95 |     |      * - the caller must be `callerConfirmation`.
  96 |     |      */
  97 |     |     function renounceRole(bytes32 role, address callerConfirmation) external;
  98 |     | }
  99 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/access/Ownable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Context} from "../utils/Context.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Contract module which provides a basic access control mechanism, where
  10 |     |  * there is an account (an owner) that can be granted exclusive access to
  11 |     |  * specific functions.
  12 |     |  *
  13 |     |  * The initial owner is set to the address provided by the deployer. This can
  14 |     |  * later be changed with {transferOwnership}.
  15 |     |  *
  16 |     |  * This module is used through inheritance. It will make available the modifier
  17 |     |  * `onlyOwner`, which can be applied to your functions to restrict their use to
  18 |     |  * the owner.
  19 |     |  */
  20 |     | abstract contract Ownable is Context {
  21 |     |     address private _owner;
  22 |     | 
  23 |     |     /**
  24 |     |      * @dev The caller account is not authorized to perform an operation.
  25 |     |      */
  26 |     |     error OwnableUnauthorizedAccount(address account);
  27 |     | 
  28 |     |     /**
  29 |     |      * @dev The owner is not a valid owner account. (eg. `address(0)`)
  30 |     |      */
  31 |     |     error OwnableInvalidOwner(address owner);
  32 |     | 
  33 |     |     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  34 |     | 
  35 |     |     /**
  36 |     |      * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
  37 |     |      */
  38 |     |     constructor(address initialOwner) {
  39 |     |         if (initialOwner == address(0)) {
  40 |     |             revert OwnableInvalidOwner(address(0));
  41 |     |         }
  42 |     |         _transferOwnership(initialOwner);
  43 |     |     }
  44 |     | 
  45 |     |     /**
  46 |     |      * @dev Throws if called by any account other than the owner.
  47 |     |      */
  48 |     |     modifier onlyOwner() {
  49 |     |         _checkOwner();
  50 |     |         _;
  51 |     |     }
  52 |     | 
  53 |     |     /**
  54 |     |      * @dev Returns the address of the current owner.
  55 |     |      */
  56 |     |     function owner() public view virtual returns (address) {
  57 |     |         return _owner;
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Throws if the sender is not the owner.
  62 |     |      */
  63 |     |     function _checkOwner() internal view virtual {
  64 |     |         if (owner() != _msgSender()) {
  65 |     |             revert OwnableUnauthorizedAccount(_msgSender());
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Leaves the contract without owner. It will not be possible to call
  71 |     |      * `onlyOwner` functions. Can only be called by the current owner.
  72 |     |      *
  73 |     |      * NOTE: Renouncing ownership will leave the contract without an owner,
  74 |     |      * thereby disabling any functionality that is only available to the owner.
  75 |     |      */
  76 |     |     function renounceOwnership() public virtual onlyOwner {
  77 |     |         _transferOwnership(address(0));
  78 |     |     }
  79 |     | 
  80 |     |     /**
  81 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  82 |     |      * Can only be called by the current owner.
  83 |     |      */
  84 |     |     function transferOwnership(address newOwner) public virtual onlyOwner {
  85 |     |         if (newOwner == address(0)) {
  86 |     |             revert OwnableInvalidOwner(address(0));
  87 |     |         }
  88 |     |         _transferOwnership(newOwner);
  89 |     |     }
  90 |     | 
  91 |     |     /**
  92 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  93 |     |      * Internal function without access restriction.
  94 |     |      */
  95 |     |     function _transferOwnership(address newOwner) internal virtual {
  96 |     |         address oldOwner = _owner;
  97 |     |         _owner = newOwner;
  98 |     |         emit OwnershipTransferred(oldOwner, newOwner);
  99 |     |     }
 100 |     | }
 101 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20} from "./IERC20.sol";
  7 |     | import {IERC165} from "./IERC165.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @title IERC1363
 11 |     |  * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].
 12 |     |  *
 13 |     |  * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract
 14 |     |  * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.
 15 |     |  */
 16 |     | interface IERC1363 is IERC20, IERC165 {
 17 |     |     /*
 18 |     |      * Note: the ERC-165 identifier for this interface is 0xb0202a11.
 19 |     |      * 0xb0202a11 ===
 20 |     |      *   bytes4(keccak256('transferAndCall(address,uint256)')) ^
 21 |     |      *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^
 22 |     |      *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^
 23 |     |      *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^
 24 |     |      *   bytes4(keccak256('approveAndCall(address,uint256)')) ^
 25 |     |      *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))
 26 |     |      */
 27 |     | 
 28 |     |     /**
 29 |     |      * @dev Moves a `value` amount of tokens from the caller's account to `to`
 30 |     |      * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
 31 |     |      * @param to The address which you want to transfer to.
 32 |     |      * @param value The amount of tokens to be transferred.
 33 |     |      * @return A boolean value indicating whether the operation succeeded unless throwing.
 34 |     |      */
 35 |     |     function transferAndCall(address to, uint256 value) external returns (bool);
 36 |     | 
 37 |     |     /**
 38 |     |      * @dev Moves a `value` amount of tokens from the caller's account to `to`
 39 |     |      * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
 40 |     |      * @param to The address which you want to transfer to.
 41 |     |      * @param value The amount of tokens to be transferred.
 42 |     |      * @param data Additional data with no specified format, sent in call to `to`.
 43 |     |      * @return A boolean value indicating whether the operation succeeded unless throwing.
 44 |     |      */
 45 |     |     function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);
 46 |     | 
 47 |     |     /**
 48 |     |      * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism
 49 |     |      * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
 50 |     |      * @param from The address which you want to send tokens from.
 51 |     |      * @param to The address which you want to transfer to.
 52 |     |      * @param value The amount of tokens to be transferred.
 53 |     |      * @return A boolean value indicating whether the operation succeeded unless throwing.
 54 |     |      */
 55 |     |     function transferFromAndCall(address from, address to, uint256 value) external returns (bool);
 56 |     | 
 57 |     |     /**
 58 |     |      * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism
 59 |     |      * and then calls {IERC1363Receiver-onTransferReceived} on `to`.
 60 |     |      * @param from The address which you want to send tokens from.
 61 |     |      * @param to The address which you want to transfer to.
 62 |     |      * @param value The amount of tokens to be transferred.
 63 |     |      * @param data Additional data with no specified format, sent in call to `to`.
 64 |     |      * @return A boolean value indicating whether the operation succeeded unless throwing.
 65 |     |      */
 66 |     |     function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);
 67 |     | 
 68 |     |     /**
 69 |     |      * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
 70 |     |      * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.
 71 |     |      * @param spender The address which will spend the funds.
 72 |     |      * @param value The amount of tokens to be spent.
 73 |     |      * @return A boolean value indicating whether the operation succeeded unless throwing.
 74 |     |      */
 75 |     |     function approveAndCall(address spender, uint256 value) external returns (bool);
 76 |     | 
 77 |     |     /**
 78 |     |      * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
 79 |     |      * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.
 80 |     |      * @param spender The address which will spend the funds.
 81 |     |      * @param value The amount of tokens to be spent.
 82 |     |      * @param data Additional data with no specified format, sent in call to `spender`.
 83 |     |      * @return A boolean value indicating whether the operation succeeded unless throwing.
 84 |     |      */
 85 |     |     function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);
 86 |     | }
 87 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)
 3 |     | 
 4 |     | pragma solidity ^0.8.20;
 5 |     | 
 6 |     | import {IERC165} from "../utils/introspection/IERC165.sol";
 7 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)
 3 |     | 
 4 |     | pragma solidity ^0.8.20;
 5 |     | 
 6 |     | import {IERC20} from "../token/ERC20/IERC20.sol";
 7 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
   3 |     | pragma solidity ^0.8.20;
   4 |     | 
   5 |     | /**
   6 |     |  * @dev Standard ERC-20 Errors
   7 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.
   8 |     |  */
   9 |     | interface IERC20Errors {
  10 |     |     /**
  11 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
  12 |     |      * @param sender Address whose tokens are being transferred.
  13 |     |      * @param balance Current balance for the interacting account.
  14 |     |      * @param needed Minimum amount required to perform a transfer.
  15 |     |      */
  16 |     |     error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
  17 |     | 
  18 |     |     /**
  19 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  20 |     |      * @param sender Address whose tokens are being transferred.
  21 |     |      */
  22 |     |     error ERC20InvalidSender(address sender);
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  26 |     |      * @param receiver Address to which tokens are being transferred.
  27 |     |      */
  28 |     |     error ERC20InvalidReceiver(address receiver);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
  32 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  33 |     |      * @param allowance Amount of tokens a `spender` is allowed to operate with.
  34 |     |      * @param needed Minimum amount required to perform a transfer.
  35 |     |      */
  36 |     |     error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  40 |     |      * @param approver Address initiating an approval operation.
  41 |     |      */
  42 |     |     error ERC20InvalidApprover(address approver);
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
  46 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  47 |     |      */
  48 |     |     error ERC20InvalidSpender(address spender);
  49 |     | }
  50 |     | 
  51 |     | /**
  52 |     |  * @dev Standard ERC-721 Errors
  53 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.
  54 |     |  */
  55 |     | interface IERC721Errors {
  56 |     |     /**
  57 |     |      * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.
  58 |     |      * Used in balance queries.
  59 |     |      * @param owner Address of the current owner of a token.
  60 |     |      */
  61 |     |     error ERC721InvalidOwner(address owner);
  62 |     | 
  63 |     |     /**
  64 |     |      * @dev Indicates a `tokenId` whose `owner` is the zero address.
  65 |     |      * @param tokenId Identifier number of a token.
  66 |     |      */
  67 |     |     error ERC721NonexistentToken(uint256 tokenId);
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
  71 |     |      * @param sender Address whose tokens are being transferred.
  72 |     |      * @param tokenId Identifier number of a token.
  73 |     |      * @param owner Address of the current owner of a token.
  74 |     |      */
  75 |     |     error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  79 |     |      * @param sender Address whose tokens are being transferred.
  80 |     |      */
  81 |     |     error ERC721InvalidSender(address sender);
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  85 |     |      * @param receiver Address to which tokens are being transferred.
  86 |     |      */
  87 |     |     error ERC721InvalidReceiver(address receiver);
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
  91 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
  92 |     |      * @param tokenId Identifier number of a token.
  93 |     |      */
  94 |     |     error ERC721InsufficientApproval(address operator, uint256 tokenId);
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  98 |     |      * @param approver Address initiating an approval operation.
  99 |     |      */
 100 |     |     error ERC721InvalidApprover(address approver);
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 104 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 105 |     |      */
 106 |     |     error ERC721InvalidOperator(address operator);
 107 |     | }
 108 |     | 
 109 |     | /**
 110 |     |  * @dev Standard ERC-1155 Errors
 111 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.
 112 |     |  */
 113 |     | interface IERC1155Errors {
 114 |     |     /**
 115 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
 116 |     |      * @param sender Address whose tokens are being transferred.
 117 |     |      * @param balance Current balance for the interacting account.
 118 |     |      * @param needed Minimum amount required to perform a transfer.
 119 |     |      * @param tokenId Identifier number of a token.
 120 |     |      */
 121 |     |     error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
 122 |     | 
 123 |     |     /**
 124 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
 125 |     |      * @param sender Address whose tokens are being transferred.
 126 |     |      */
 127 |     |     error ERC1155InvalidSender(address sender);
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
 131 |     |      * @param receiver Address to which tokens are being transferred.
 132 |     |      */
 133 |     |     error ERC1155InvalidReceiver(address receiver);
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
 137 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 138 |     |      * @param owner Address of the current owner of a token.
 139 |     |      */
 140 |     |     error ERC1155MissingApprovalForAll(address operator, address owner);
 141 |     | 
 142 |     |     /**
 143 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
 144 |     |      * @param approver Address initiating an approval operation.
 145 |     |      */
 146 |     |     error ERC1155InvalidApprover(address approver);
 147 |     | 
 148 |     |     /**
 149 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 150 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 151 |     |      */
 152 |     |     error ERC1155InvalidOperator(address operator);
 153 |     | 
 154 |     |     /**
 155 |     |      * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
 156 |     |      * Used in batch transfers.
 157 |     |      * @param idsLength Length of the array of token identifiers
 158 |     |      * @param valuesLength Length of the array of token amounts
 159 |     |      */
 160 |     |     error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
 161 |     | }
 162 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "./IERC20.sol";
   7 |     | import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
   8 |     | import {Context} from "../../utils/Context.sol";
   9 |     | import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @dev Implementation of the {IERC20} interface.
  13 |     |  *
  14 |     |  * This implementation is agnostic to the way tokens are created. This means
  15 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  16 |     |  *
  17 |     |  * TIP: For a detailed writeup see our guide
  18 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  19 |     |  * to implement supply mechanisms].
  20 |     |  *
  21 |     |  * The default value of {decimals} is 18. To change this, you should override
  22 |     |  * this function so it returns a different value.
  23 |     |  *
  24 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  25 |     |  * instead returning `false` on failure. This behavior is nonetheless
  26 |     |  * conventional and does not conflict with the expectations of ERC-20
  27 |     |  * applications.
  28 |     |  */
  29 |     | abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
  30 |     |     mapping(address account => uint256) private _balances;
  31 |     | 
  32 |     |     mapping(address account => mapping(address spender => uint256)) private _allowances;
  33 |     | 
  34 |     |     uint256 private _totalSupply;
  35 |     | 
  36 |     |     string private _name;
  37 |     |     string private _symbol;
  38 |     | 
  39 |     |     /**
  40 |     |      * @dev Sets the values for {name} and {symbol}.
  41 |     |      *
  42 |     |      * All two of these values are immutable: they can only be set once during
  43 |     |      * construction.
  44 |     |      */
  45 |     |     constructor(string memory name_, string memory symbol_) {
  46 |     |         _name = name_;
  47 |     |         _symbol = symbol_;
  48 |     |     }
  49 |     | 
  50 |     |     /**
  51 |     |      * @dev Returns the name of the token.
  52 |     |      */
  53 |     |     function name() public view virtual returns (string memory) {
  54 |     |         return _name;
  55 |     |     }
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  59 |     |      * name.
  60 |     |      */
  61 |     |     function symbol() public view virtual returns (string memory) {
  62 |     |         return _symbol;
  63 |     |     }
  64 |     | 
  65 |     |     /**
  66 |     |      * @dev Returns the number of decimals used to get its user representation.
  67 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  68 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  69 |     |      *
  70 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  71 |     |      * Ether and Wei. This is the default value returned by this function, unless
  72 |     |      * it's overridden.
  73 |     |      *
  74 |     |      * NOTE: This information is only used for _display_ purposes: it in
  75 |     |      * no way affects any of the arithmetic of the contract, including
  76 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
  77 |     |      */
  78 |     |     function decimals() public view virtual returns (uint8) {
  79 |     |         return 18;
  80 |     |     }
  81 |     | 
  82 |     |     /**
  83 |     |      * @dev See {IERC20-totalSupply}.
  84 |     |      */
  85 |     |     function totalSupply() public view virtual returns (uint256) {
  86 |     |         return _totalSupply;
  87 |     |     }
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev See {IERC20-balanceOf}.
  91 |     |      */
  92 |     |     function balanceOf(address account) public view virtual returns (uint256) {
  93 |     |         return _balances[account];
  94 |     |     }
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev See {IERC20-transfer}.
  98 |     |      *
  99 |     |      * Requirements:
 100 |     |      *
 101 |     |      * - `to` cannot be the zero address.
 102 |     |      * - the caller must have a balance of at least `value`.
 103 |     |      */
 104 |     |     function transfer(address to, uint256 value) public virtual returns (bool) {
 105 |     |         address owner = _msgSender();
 106 |     |         _transfer(owner, to, value);
 107 |     |         return true;
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev See {IERC20-allowance}.
 112 |     |      */
 113 |     |     function allowance(address owner, address spender) public view virtual returns (uint256) {
 114 |     |         return _allowances[owner][spender];
 115 |     |     }
 116 |     | 
 117 |     |     /**
 118 |     |      * @dev See {IERC20-approve}.
 119 |     |      *
 120 |     |      * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
 121 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 122 |     |      *
 123 |     |      * Requirements:
 124 |     |      *
 125 |     |      * - `spender` cannot be the zero address.
 126 |     |      */
 127 |     |     function approve(address spender, uint256 value) public virtual returns (bool) {
 128 |     |         address owner = _msgSender();
 129 |     |         _approve(owner, spender, value);
 130 |     |         return true;
 131 |     |     }
 132 |     | 
 133 |     |     /**
 134 |     |      * @dev See {IERC20-transferFrom}.
 135 |     |      *
 136 |     |      * Skips emitting an {Approval} event indicating an allowance update. This is not
 137 |     |      * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].
 138 |     |      *
 139 |     |      * NOTE: Does not update the allowance if the current allowance
 140 |     |      * is the maximum `uint256`.
 141 |     |      *
 142 |     |      * Requirements:
 143 |     |      *
 144 |     |      * - `from` and `to` cannot be the zero address.
 145 |     |      * - `from` must have a balance of at least `value`.
 146 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 147 |     |      * `value`.
 148 |     |      */
 149 |     |     function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
 150 |     |         address spender = _msgSender();
 151 |     |         _spendAllowance(from, spender, value);
 152 |     |         _transfer(from, to, value);
 153 |     |         return true;
 154 |     |     }
 155 |     | 
 156 |     |     /**
 157 |     |      * @dev Moves a `value` amount of tokens from `from` to `to`.
 158 |     |      *
 159 |     |      * This internal function is equivalent to {transfer}, and can be used to
 160 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 161 |     |      *
 162 |     |      * Emits a {Transfer} event.
 163 |     |      *
 164 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 165 |     |      */
 166 |     |     function _transfer(address from, address to, uint256 value) internal {
 167 |     |         if (from == address(0)) {
 168 |     |             revert ERC20InvalidSender(address(0));
 169 |     |         }
 170 |     |         if (to == address(0)) {
 171 |     |             revert ERC20InvalidReceiver(address(0));
 172 |     |         }
 173 |     |         _update(from, to, value);
 174 |     |     }
 175 |     | 
 176 |     |     /**
 177 |     |      * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
 178 |     |      * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
 179 |     |      * this function.
 180 |     |      *
 181 |     |      * Emits a {Transfer} event.
 182 |     |      */
 183 |     |     function _update(address from, address to, uint256 value) internal virtual {
 184 |     |         if (from == address(0)) {
 185 |     |             // Overflow check required: The rest of the code assumes that totalSupply never overflows
 186 |     |             _totalSupply += value;
 187 |     |         } else {
 188 |     |             uint256 fromBalance = _balances[from];
 189 |     |             if (fromBalance < value) {
 190 |     |                 revert ERC20InsufficientBalance(from, fromBalance, value);
 191 |     |             }
 192 |     |             unchecked {
 193 |     |                 // Overflow not possible: value <= fromBalance <= totalSupply.
 194 |     |                 _balances[from] = fromBalance - value;
 195 |     |             }
 196 |     |         }
 197 |     | 
 198 |     |         if (to == address(0)) {
 199 |     |             unchecked {
 200 |     |                 // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
 201 |     |                 _totalSupply -= value;
 202 |     |             }
 203 |     |         } else {
 204 |     |             unchecked {
 205 |     |                 // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
 206 |     |                 _balances[to] += value;
 207 |     |             }
 208 |     |         }
 209 |     | 
 210 |     |         emit Transfer(from, to, value);
 211 |     |     }
 212 |     | 
 213 |     |     /**
 214 |     |      * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
 215 |     |      * Relies on the `_update` mechanism
 216 |     |      *
 217 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 218 |     |      *
 219 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 220 |     |      */
 221 |     |     function _mint(address account, uint256 value) internal {
 222 |     |         if (account == address(0)) {
 223 |     |             revert ERC20InvalidReceiver(address(0));
 224 |     |         }
 225 |     |         _update(address(0), account, value);
 226 |     |     }
 227 |     | 
 228 |     |     /**
 229 |     |      * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
 230 |     |      * Relies on the `_update` mechanism.
 231 |     |      *
 232 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 233 |     |      *
 234 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead
 235 |     |      */
 236 |     |     function _burn(address account, uint256 value) internal {
 237 |     |         if (account == address(0)) {
 238 |     |             revert ERC20InvalidSender(address(0));
 239 |     |         }
 240 |     |         _update(account, address(0), value);
 241 |     |     }
 242 |     | 
 243 |     |     /**
 244 |     |      * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
 245 |     |      *
 246 |     |      * This internal function is equivalent to `approve`, and can be used to
 247 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 248 |     |      *
 249 |     |      * Emits an {Approval} event.
 250 |     |      *
 251 |     |      * Requirements:
 252 |     |      *
 253 |     |      * - `owner` cannot be the zero address.
 254 |     |      * - `spender` cannot be the zero address.
 255 |     |      *
 256 |     |      * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
 257 |     |      */
 258 |     |     function _approve(address owner, address spender, uint256 value) internal {
 259 |     |         _approve(owner, spender, value, true);
 260 |     |     }
 261 |     | 
 262 |     |     /**
 263 |     |      * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
 264 |     |      *
 265 |     |      * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
 266 |     |      * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
 267 |     |      * `Approval` event during `transferFrom` operations.
 268 |     |      *
 269 |     |      * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
 270 |     |      * true using the following override:
 271 |     |      *
 272 |     |      * ```solidity
 273 |     |      * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
 274 |     |      *     super._approve(owner, spender, value, true);
 275 |     |      * }
 276 |     |      * ```
 277 |     |      *
 278 |     |      * Requirements are the same as {_approve}.
 279 |     |      */
 280 |     |     function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
 281 |     |         if (owner == address(0)) {
 282 |     |             revert ERC20InvalidApprover(address(0));
 283 |     |         }
 284 |     |         if (spender == address(0)) {
 285 |     |             revert ERC20InvalidSpender(address(0));
 286 |     |         }
 287 |     |         _allowances[owner][spender] = value;
 288 |     |         if (emitEvent) {
 289 |     |             emit Approval(owner, spender, value);
 290 |     |         }
 291 |     |     }
 292 |     | 
 293 |     |     /**
 294 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `value`.
 295 |     |      *
 296 |     |      * Does not update the allowance value in case of infinite allowance.
 297 |     |      * Revert if not enough allowance is available.
 298 |     |      *
 299 |     |      * Does not emit an {Approval} event.
 300 |     |      */
 301 |     |     function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
 302 |     |         uint256 currentAllowance = allowance(owner, spender);
 303 |     |         if (currentAllowance != type(uint256).max) {
 304 |     |             if (currentAllowance < value) {
 305 |     |                 revert ERC20InsufficientAllowance(spender, currentAllowance, value);
 306 |     |             }
 307 |     |             unchecked {
 308 |     |                 _approve(owner, spender, currentAllowance - value, false);
 309 |     |             }
 310 |     |         }
 311 |     |     }
 312 |     | }
 313 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC-20 standard as defined in the ERC.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the value of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the value of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves a `value` amount of tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 value) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
 54 |     |      * caller's tokens.
 55 |     |      *
 56 |     |      * Returns a boolean value indicating whether the operation succeeded.
 57 |     |      *
 58 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 59 |     |      * that someone may use both the old and the new allowance by unfortunate
 60 |     |      * transaction ordering. One possible solution to mitigate this race
 61 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 62 |     |      * desired value afterwards:
 63 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 64 |     |      *
 65 |     |      * Emits an {Approval} event.
 66 |     |      */
 67 |     |     function approve(address spender, uint256 value) external returns (bool);
 68 |     | 
 69 |     |     /**
 70 |     |      * @dev Moves a `value` amount of tokens from `from` to `to` using the
 71 |     |      * allowance mechanism. `value` is then deducted from the caller's
 72 |     |      * allowance.
 73 |     |      *
 74 |     |      * Returns a boolean value indicating whether the operation succeeded.
 75 |     |      *
 76 |     |      * Emits a {Transfer} event.
 77 |     |      */
 78 |     |     function transferFrom(address from, address to, uint256 value) external returns (bool);
 79 |     | }
 80 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20} from "../IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Interface for the optional metadata functions from the ERC-20 standard.
 10 |     |  */
 11 |     | interface IERC20Metadata is IERC20 {
 12 |     |     /**
 13 |     |      * @dev Returns the name of the token.
 14 |     |      */
 15 |     |     function name() external view returns (string memory);
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the symbol of the token.
 19 |     |      */
 20 |     |     function symbol() external view returns (string memory);
 21 |     | 
 22 |     |     /**
 23 |     |      * @dev Returns the decimals places of the token.
 24 |     |      */
 25 |     |     function decimals() external view returns (uint8);
 26 |     | }
 27 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "../IERC20.sol";
   7 |     | import {IERC1363} from "../../../interfaces/IERC1363.sol";
   8 |     | import {Address} from "../../../utils/Address.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @title SafeERC20
  12 |     |  * @dev Wrappers around ERC-20 operations that throw on failure (when the token
  13 |     |  * contract returns false). Tokens that return no value (and instead revert or
  14 |     |  * throw on failure) are also supported, non-reverting calls are assumed to be
  15 |     |  * successful.
  16 |     |  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
  17 |     |  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
  18 |     |  */
  19 |     | library SafeERC20 {
  20 |     |     /**
  21 |     |      * @dev An operation with an ERC-20 token failed.
  22 |     |      */
  23 |     |     error SafeERC20FailedOperation(address token);
  24 |     | 
  25 |     |     /**
  26 |     |      * @dev Indicates a failed `decreaseAllowance` request.
  27 |     |      */
  28 |     |     error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
  32 |     |      * non-reverting calls are assumed to be successful.
  33 |     |      */
  34 |     |     function safeTransfer(IERC20 token, address to, uint256 value) internal {
  35 |     |         _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
  36 |     |     }
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
  40 |     |      * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
  41 |     |      */
  42 |     |     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
  43 |     |         _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
  44 |     |     }
  45 |     | 
  46 |     |     /**
  47 |     |      * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
  48 |     |      * non-reverting calls are assumed to be successful.
  49 |     |      */
  50 |     |     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
  51 |     |         uint256 oldAllowance = token.allowance(address(this), spender);
  52 |     |         forceApprove(token, spender, oldAllowance + value);
  53 |     |     }
  54 |     | 
  55 |     |     /**
  56 |     |      * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
  57 |     |      * value, non-reverting calls are assumed to be successful.
  58 |     |      */
  59 |     |     function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
  60 |     |         unchecked {
  61 |     |             uint256 currentAllowance = token.allowance(address(this), spender);
  62 |     |             if (currentAllowance < requestedDecrease) {
  63 |     |                 revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
  64 |     |             }
  65 |     |             forceApprove(token, spender, currentAllowance - requestedDecrease);
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
  71 |     |      * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
  72 |     |      * to be set to zero before setting it to a non-zero value, such as USDT.
  73 |     |      */
  74 |     |     function forceApprove(IERC20 token, address spender, uint256 value) internal {
  75 |     |         bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));
  76 |     | 
  77 |     |         if (!_callOptionalReturnBool(token, approvalCall)) {
  78 |     |             _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
  79 |     |             _callOptionalReturn(token, approvalCall);
  80 |     |         }
  81 |     |     }
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no
  85 |     |      * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
  86 |     |      * targeting contracts.
  87 |     |      *
  88 |     |      * Reverts if the returned value is other than `true`.
  89 |     |      */
  90 |     |     function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {
  91 |     |         if (to.code.length == 0) {
  92 |     |             safeTransfer(token, to, value);
  93 |     |         } else if (!token.transferAndCall(to, value, data)) {
  94 |     |             revert SafeERC20FailedOperation(address(token));
  95 |     |         }
  96 |     |     }
  97 |     | 
  98 |     |     /**
  99 |     |      * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target
 100 |     |      * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
 101 |     |      * targeting contracts.
 102 |     |      *
 103 |     |      * Reverts if the returned value is other than `true`.
 104 |     |      */
 105 |     |     function transferFromAndCallRelaxed(
 106 |     |         IERC1363 token,
 107 |     |         address from,
 108 |     |         address to,
 109 |     |         uint256 value,
 110 |     |         bytes memory data
 111 |     |     ) internal {
 112 |     |         if (to.code.length == 0) {
 113 |     |             safeTransferFrom(token, from, to, value);
 114 |     |         } else if (!token.transferFromAndCall(from, to, value, data)) {
 115 |     |             revert SafeERC20FailedOperation(address(token));
 116 |     |         }
 117 |     |     }
 118 |     | 
 119 |     |     /**
 120 |     |      * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no
 121 |     |      * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when
 122 |     |      * targeting contracts.
 123 |     |      *
 124 |     |      * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.
 125 |     |      * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}
 126 |     |      * once without retrying, and relies on the returned value to be true.
 127 |     |      *
 128 |     |      * Reverts if the returned value is other than `true`.
 129 |     |      */
 130 |     |     function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {
 131 |     |         if (to.code.length == 0) {
 132 |     |             forceApprove(token, to, value);
 133 |     |         } else if (!token.approveAndCall(to, value, data)) {
 134 |     |             revert SafeERC20FailedOperation(address(token));
 135 |     |         }
 136 |     |     }
 137 |     | 
 138 |     |     /**
 139 |     |      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
 140 |     |      * on the return value: the return value is optional (but if data is returned, it must not be false).
 141 |     |      * @param token The token targeted by the call.
 142 |     |      * @param data The call data (encoded using abi.encode or one of its variants).
 143 |     |      *
 144 |     |      * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.
 145 |     |      */
 146 |     |     function _callOptionalReturn(IERC20 token, bytes memory data) private {
 147 |     |         uint256 returnSize;
 148 |     |         uint256 returnValue;
 149 |     |         assembly ("memory-safe") {
 150 |     |             let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)
 151 |     |             // bubble errors
 152 |     |             if iszero(success) {
 153 |     |                 let ptr := mload(0x40)
 154 |     |                 returndatacopy(ptr, 0, returndatasize())
 155 |     |                 revert(ptr, returndatasize())
 156 |     |             }
 157 |     |             returnSize := returndatasize()
 158 |     |             returnValue := mload(0)
 159 |     |         }
 160 |     | 
 161 |     |         if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {
 162 |     |             revert SafeERC20FailedOperation(address(token));
 163 |     |         }
 164 |     |     }
 165 |     | 
 166 |     |     /**
 167 |     |      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
 168 |     |      * on the return value: the return value is optional (but if data is returned, it must not be false).
 169 |     |      * @param token The token targeted by the call.
 170 |     |      * @param data The call data (encoded using abi.encode or one of its variants).
 171 |     |      *
 172 |     |      * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.
 173 |     |      */
 174 |     |     function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
 175 |     |         bool success;
 176 |     |         uint256 returnSize;
 177 |     |         uint256 returnValue;
 178 |     |         assembly ("memory-safe") {
 179 |     |             success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)
 180 |     |             returnSize := returndatasize()
 181 |     |             returnValue := mload(0)
 182 |     |         }
 183 |     |         return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);
 184 |     |     }
 185 |     | }
 186 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC721} from "./IERC721.sol";
   7 |     | import {IERC721Metadata} from "./extensions/IERC721Metadata.sol";
   8 |     | import {ERC721Utils} from "./utils/ERC721Utils.sol";
   9 |     | import {Context} from "../../utils/Context.sol";
  10 |     | import {Strings} from "../../utils/Strings.sol";
  11 |     | import {IERC165, ERC165} from "../../utils/introspection/ERC165.sol";
  12 |     | import {IERC721Errors} from "../../interfaces/draft-IERC6093.sol";
  13 |     | 
  14 |     | /**
  15 |     |  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including
  16 |     |  * the Metadata extension, but not including the Enumerable extension, which is available separately as
  17 |     |  * {ERC721Enumerable}.
  18 |     |  */
  19 |     | abstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {
  20 |     |     using Strings for uint256;
  21 |     | 
  22 |     |     // Token name
  23 |     |     string private _name;
  24 |     | 
  25 |     |     // Token symbol
  26 |     |     string private _symbol;
  27 |     | 
  28 |     |     mapping(uint256 tokenId => address) private _owners;
  29 |     | 
  30 |     |     mapping(address owner => uint256) private _balances;
  31 |     | 
  32 |     |     mapping(uint256 tokenId => address) private _tokenApprovals;
  33 |     | 
  34 |     |     mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;
  35 |     | 
  36 |     |     /**
  37 |     |      * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
  38 |     |      */
  39 |     |     constructor(string memory name_, string memory symbol_) {
  40 |     |         _name = name_;
  41 |     |         _symbol = symbol_;
  42 |     |     }
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev See {IERC165-supportsInterface}.
  46 |     |      */
  47 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
  48 |     |         return
  49 |     |             interfaceId == type(IERC721).interfaceId ||
  50 |     |             interfaceId == type(IERC721Metadata).interfaceId ||
  51 |     |             super.supportsInterface(interfaceId);
  52 |     |     }
  53 |     | 
  54 |     |     /**
  55 |     |      * @dev See {IERC721-balanceOf}.
  56 |     |      */
  57 |     |     function balanceOf(address owner) public view virtual returns (uint256) {
  58 |     |         if (owner == address(0)) {
  59 |     |             revert ERC721InvalidOwner(address(0));
  60 |     |         }
  61 |     |         return _balances[owner];
  62 |     |     }
  63 |     | 
  64 |     |     /**
  65 |     |      * @dev See {IERC721-ownerOf}.
  66 |     |      */
  67 |     |     function ownerOf(uint256 tokenId) public view virtual returns (address) {
  68 |     |         return _requireOwned(tokenId);
  69 |     |     }
  70 |     | 
  71 |     |     /**
  72 |     |      * @dev See {IERC721Metadata-name}.
  73 |     |      */
  74 |     |     function name() public view virtual returns (string memory) {
  75 |     |         return _name;
  76 |     |     }
  77 |     | 
  78 |     |     /**
  79 |     |      * @dev See {IERC721Metadata-symbol}.
  80 |     |      */
  81 |     |     function symbol() public view virtual returns (string memory) {
  82 |     |         return _symbol;
  83 |     |     }
  84 |     | 
  85 |     |     /**
  86 |     |      * @dev See {IERC721Metadata-tokenURI}.
  87 |     |      */
  88 |     |     function tokenURI(uint256 tokenId) public view virtual returns (string memory) {
  89 |     |         _requireOwned(tokenId);
  90 |     | 
  91 |     |         string memory baseURI = _baseURI();
  92 |     |         return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : "";
  93 |     |     }
  94 |     | 
  95 |     |     /**
  96 |     |      * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
  97 |     |      * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
  98 |     |      * by default, can be overridden in child contracts.
  99 |     |      */
 100 |     |     function _baseURI() internal view virtual returns (string memory) {
 101 |     |         return "";
 102 |     |     }
 103 |     | 
 104 |     |     /**
 105 |     |      * @dev See {IERC721-approve}.
 106 |     |      */
 107 |     |     function approve(address to, uint256 tokenId) public virtual {
 108 |     |         _approve(to, tokenId, _msgSender());
 109 |     |     }
 110 |     | 
 111 |     |     /**
 112 |     |      * @dev See {IERC721-getApproved}.
 113 |     |      */
 114 |     |     function getApproved(uint256 tokenId) public view virtual returns (address) {
 115 |     |         _requireOwned(tokenId);
 116 |     | 
 117 |     |         return _getApproved(tokenId);
 118 |     |     }
 119 |     | 
 120 |     |     /**
 121 |     |      * @dev See {IERC721-setApprovalForAll}.
 122 |     |      */
 123 |     |     function setApprovalForAll(address operator, bool approved) public virtual {
 124 |     |         _setApprovalForAll(_msgSender(), operator, approved);
 125 |     |     }
 126 |     | 
 127 |     |     /**
 128 |     |      * @dev See {IERC721-isApprovedForAll}.
 129 |     |      */
 130 |     |     function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {
 131 |     |         return _operatorApprovals[owner][operator];
 132 |     |     }
 133 |     | 
 134 |     |     /**
 135 |     |      * @dev See {IERC721-transferFrom}.
 136 |     |      */
 137 |     |     function transferFrom(address from, address to, uint256 tokenId) public virtual {
 138 |     |         if (to == address(0)) {
 139 |     |             revert ERC721InvalidReceiver(address(0));
 140 |     |         }
 141 |     |         // Setting an "auth" arguments enables the `_isAuthorized` check which verifies that the token exists
 142 |     |         // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.
 143 |     |         address previousOwner = _update(to, tokenId, _msgSender());
 144 |     |         if (previousOwner != from) {
 145 |     |             revert ERC721IncorrectOwner(from, tokenId, previousOwner);
 146 |     |         }
 147 |     |     }
 148 |     | 
 149 |     |     /**
 150 |     |      * @dev See {IERC721-safeTransferFrom}.
 151 |     |      */
 152 |     |     function safeTransferFrom(address from, address to, uint256 tokenId) public {
 153 |     |         safeTransferFrom(from, to, tokenId, "");
 154 |     |     }
 155 |     | 
 156 |     |     /**
 157 |     |      * @dev See {IERC721-safeTransferFrom}.
 158 |     |      */
 159 |     |     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {
 160 |     |         transferFrom(from, to, tokenId);
 161 |     |         ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);
 162 |     |     }
 163 |     | 
 164 |     |     /**
 165 |     |      * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
 166 |     |      *
 167 |     |      * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the
 168 |     |      * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances
 169 |     |      * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by
 170 |     |      * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.
 171 |     |      */
 172 |     |     function _ownerOf(uint256 tokenId) internal view virtual returns (address) {
 173 |     |         return _owners[tokenId];
 174 |     |     }
 175 |     | 
 176 |     |     /**
 177 |     |      * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.
 178 |     |      */
 179 |     |     function _getApproved(uint256 tokenId) internal view virtual returns (address) {
 180 |     |         return _tokenApprovals[tokenId];
 181 |     |     }
 182 |     | 
 183 |     |     /**
 184 |     |      * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in
 185 |     |      * particular (ignoring whether it is owned by `owner`).
 186 |     |      *
 187 |     |      * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
 188 |     |      * assumption.
 189 |     |      */
 190 |     |     function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {
 191 |     |         return
 192 |     |             spender != address(0) &&
 193 |     |             (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);
 194 |     |     }
 195 |     | 
 196 |     |     /**
 197 |     |      * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.
 198 |     |      * Reverts if:
 199 |     |      * - `spender` does not have approval from `owner` for `tokenId`.
 200 |     |      * - `spender` does not have approval to manage all of `owner`'s assets.
 201 |     |      *
 202 |     |      * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
 203 |     |      * assumption.
 204 |     |      */
 205 |     |     function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {
 206 |     |         if (!_isAuthorized(owner, spender, tokenId)) {
 207 |     |             if (owner == address(0)) {
 208 |     |                 revert ERC721NonexistentToken(tokenId);
 209 |     |             } else {
 210 |     |                 revert ERC721InsufficientApproval(spender, tokenId);
 211 |     |             }
 212 |     |         }
 213 |     |     }
 214 |     | 
 215 |     |     /**
 216 |     |      * @dev Unsafe write access to the balances, used by extensions that "mint" tokens using an {ownerOf} override.
 217 |     |      *
 218 |     |      * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that
 219 |     |      * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.
 220 |     |      *
 221 |     |      * WARNING: Increasing an account's balance using this function tends to be paired with an override of the
 222 |     |      * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership
 223 |     |      * remain consistent with one another.
 224 |     |      */
 225 |     |     function _increaseBalance(address account, uint128 value) internal virtual {
 226 |     |         unchecked {
 227 |     |             _balances[account] += value;
 228 |     |         }
 229 |     |     }
 230 |     | 
 231 |     |     /**
 232 |     |      * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner
 233 |     |      * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.
 234 |     |      *
 235 |     |      * The `auth` argument is optional. If the value passed is non 0, then this function will check that
 236 |     |      * `auth` is either the owner of the token, or approved to operate on the token (by the owner).
 237 |     |      *
 238 |     |      * Emits a {Transfer} event.
 239 |     |      *
 240 |     |      * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.
 241 |     |      */
 242 |     |     function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {
 243 |     |         address from = _ownerOf(tokenId);
 244 |     | 
 245 |     |         // Perform (optional) operator check
 246 |     |         if (auth != address(0)) {
 247 |     |             _checkAuthorized(from, auth, tokenId);
 248 |     |         }
 249 |     | 
 250 |     |         // Execute the update
 251 |     |         if (from != address(0)) {
 252 |     |             // Clear approval. No need to re-authorize or emit the Approval event
 253 |     |             _approve(address(0), tokenId, address(0), false);
 254 |     | 
 255 |     |             unchecked {
 256 |     |                 _balances[from] -= 1;
 257 |     |             }
 258 |     |         }
 259 |     | 
 260 |     |         if (to != address(0)) {
 261 |     |             unchecked {
 262 |     |                 _balances[to] += 1;
 263 |     |             }
 264 |     |         }
 265 |     | 
 266 |     |         _owners[tokenId] = to;
 267 |     | 
 268 |     |         emit Transfer(from, to, tokenId);
 269 |     | 
 270 |     |         return from;
 271 |     |     }
 272 |     | 
 273 |     |     /**
 274 |     |      * @dev Mints `tokenId` and transfers it to `to`.
 275 |     |      *
 276 |     |      * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
 277 |     |      *
 278 |     |      * Requirements:
 279 |     |      *
 280 |     |      * - `tokenId` must not exist.
 281 |     |      * - `to` cannot be the zero address.
 282 |     |      *
 283 |     |      * Emits a {Transfer} event.
 284 |     |      */
 285 |     |     function _mint(address to, uint256 tokenId) internal {
 286 |     |         if (to == address(0)) {
 287 |     |             revert ERC721InvalidReceiver(address(0));
 288 |     |         }
 289 |     |         address previousOwner = _update(to, tokenId, address(0));
 290 |     |         if (previousOwner != address(0)) {
 291 |     |             revert ERC721InvalidSender(address(0));
 292 |     |         }
 293 |     |     }
 294 |     | 
 295 |     |     /**
 296 |     |      * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.
 297 |     |      *
 298 |     |      * Requirements:
 299 |     |      *
 300 |     |      * - `tokenId` must not exist.
 301 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
 302 |     |      *
 303 |     |      * Emits a {Transfer} event.
 304 |     |      */
 305 |     |     function _safeMint(address to, uint256 tokenId) internal {
 306 |     |         _safeMint(to, tokenId, "");
 307 |     |     }
 308 |     | 
 309 |     |     /**
 310 |     |      * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
 311 |     |      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
 312 |     |      */
 313 |     |     function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {
 314 |     |         _mint(to, tokenId);
 315 |     |         ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);
 316 |     |     }
 317 |     | 
 318 |     |     /**
 319 |     |      * @dev Destroys `tokenId`.
 320 |     |      * The approval is cleared when the token is burned.
 321 |     |      * This is an internal function that does not check if the sender is authorized to operate on the token.
 322 |     |      *
 323 |     |      * Requirements:
 324 |     |      *
 325 |     |      * - `tokenId` must exist.
 326 |     |      *
 327 |     |      * Emits a {Transfer} event.
 328 |     |      */
 329 |     |     function _burn(uint256 tokenId) internal {
 330 |     |         address previousOwner = _update(address(0), tokenId, address(0));
 331 |     |         if (previousOwner == address(0)) {
 332 |     |             revert ERC721NonexistentToken(tokenId);
 333 |     |         }
 334 |     |     }
 335 |     | 
 336 |     |     /**
 337 |     |      * @dev Transfers `tokenId` from `from` to `to`.
 338 |     |      *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
 339 |     |      *
 340 |     |      * Requirements:
 341 |     |      *
 342 |     |      * - `to` cannot be the zero address.
 343 |     |      * - `tokenId` token must be owned by `from`.
 344 |     |      *
 345 |     |      * Emits a {Transfer} event.
 346 |     |      */
 347 |     |     function _transfer(address from, address to, uint256 tokenId) internal {
 348 |     |         if (to == address(0)) {
 349 |     |             revert ERC721InvalidReceiver(address(0));
 350 |     |         }
 351 |     |         address previousOwner = _update(to, tokenId, address(0));
 352 |     |         if (previousOwner == address(0)) {
 353 |     |             revert ERC721NonexistentToken(tokenId);
 354 |     |         } else if (previousOwner != from) {
 355 |     |             revert ERC721IncorrectOwner(from, tokenId, previousOwner);
 356 |     |         }
 357 |     |     }
 358 |     | 
 359 |     |     /**
 360 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients
 361 |     |      * are aware of the ERC-721 standard to prevent tokens from being forever locked.
 362 |     |      *
 363 |     |      * `data` is additional data, it has no specified format and it is sent in call to `to`.
 364 |     |      *
 365 |     |      * This internal function is like {safeTransferFrom} in the sense that it invokes
 366 |     |      * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.
 367 |     |      * implement alternative mechanisms to perform token transfer, such as signature-based.
 368 |     |      *
 369 |     |      * Requirements:
 370 |     |      *
 371 |     |      * - `tokenId` token must exist and be owned by `from`.
 372 |     |      * - `to` cannot be the zero address.
 373 |     |      * - `from` cannot be the zero address.
 374 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
 375 |     |      *
 376 |     |      * Emits a {Transfer} event.
 377 |     |      */
 378 |     |     function _safeTransfer(address from, address to, uint256 tokenId) internal {
 379 |     |         _safeTransfer(from, to, tokenId, "");
 380 |     |     }
 381 |     | 
 382 |     |     /**
 383 |     |      * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is
 384 |     |      * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
 385 |     |      */
 386 |     |     function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {
 387 |     |         _transfer(from, to, tokenId);
 388 |     |         ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);
 389 |     |     }
 390 |     | 
 391 |     |     /**
 392 |     |      * @dev Approve `to` to operate on `tokenId`
 393 |     |      *
 394 |     |      * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is
 395 |     |      * either the owner of the token, or approved to operate on all tokens held by this owner.
 396 |     |      *
 397 |     |      * Emits an {Approval} event.
 398 |     |      *
 399 |     |      * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
 400 |     |      */
 401 |     |     function _approve(address to, uint256 tokenId, address auth) internal {
 402 |     |         _approve(to, tokenId, auth, true);
 403 |     |     }
 404 |     | 
 405 |     |     /**
 406 |     |      * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not
 407 |     |      * emitted in the context of transfers.
 408 |     |      */
 409 |     |     function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {
 410 |     |         // Avoid reading the owner unless necessary
 411 |     |         if (emitEvent || auth != address(0)) {
 412 |     |             address owner = _requireOwned(tokenId);
 413 |     | 
 414 |     |             // We do not use _isAuthorized because single-token approvals should not be able to call approve
 415 |     |             if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {
 416 |     |                 revert ERC721InvalidApprover(auth);
 417 |     |             }
 418 |     | 
 419 |     |             if (emitEvent) {
 420 |     |                 emit Approval(owner, to, tokenId);
 421 |     |             }
 422 |     |         }
 423 |     | 
 424 |     |         _tokenApprovals[tokenId] = to;
 425 |     |     }
 426 |     | 
 427 |     |     /**
 428 |     |      * @dev Approve `operator` to operate on all of `owner` tokens
 429 |     |      *
 430 |     |      * Requirements:
 431 |     |      * - operator can't be the address zero.
 432 |     |      *
 433 |     |      * Emits an {ApprovalForAll} event.
 434 |     |      */
 435 |     |     function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {
 436 |     |         if (operator == address(0)) {
 437 |     |             revert ERC721InvalidOperator(operator);
 438 |     |         }
 439 |     |         _operatorApprovals[owner][operator] = approved;
 440 |     |         emit ApprovalForAll(owner, operator, approved);
 441 |     |     }
 442 |     | 
 443 |     |     /**
 444 |     |      * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).
 445 |     |      * Returns the owner.
 446 |     |      *
 447 |     |      * Overrides to ownership logic should be done to {_ownerOf}.
 448 |     |      */
 449 |     |     function _requireOwned(uint256 tokenId) internal view returns (address) {
 450 |     |         address owner = _ownerOf(tokenId);
 451 |     |         if (owner == address(0)) {
 452 |     |             revert ERC721NonexistentToken(tokenId);
 453 |     |         }
 454 |     |         return owner;
 455 |     |     }
 456 |     | }
 457 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC165} from "../../utils/introspection/IERC165.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Required interface of an ERC-721 compliant contract.
  10 |     |  */
  11 |     | interface IERC721 is IERC165 {
  12 |     |     /**
  13 |     |      * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
  14 |     |      */
  15 |     |     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
  16 |     | 
  17 |     |     /**
  18 |     |      * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
  19 |     |      */
  20 |     |     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
  24 |     |      */
  25 |     |     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev Returns the number of tokens in ``owner``'s account.
  29 |     |      */
  30 |     |     function balanceOf(address owner) external view returns (uint256 balance);
  31 |     | 
  32 |     |     /**
  33 |     |      * @dev Returns the owner of the `tokenId` token.
  34 |     |      *
  35 |     |      * Requirements:
  36 |     |      *
  37 |     |      * - `tokenId` must exist.
  38 |     |      */
  39 |     |     function ownerOf(uint256 tokenId) external view returns (address owner);
  40 |     | 
  41 |     |     /**
  42 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`.
  43 |     |      *
  44 |     |      * Requirements:
  45 |     |      *
  46 |     |      * - `from` cannot be the zero address.
  47 |     |      * - `to` cannot be the zero address.
  48 |     |      * - `tokenId` token must exist and be owned by `from`.
  49 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
  50 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
  51 |     |      *   a safe transfer.
  52 |     |      *
  53 |     |      * Emits a {Transfer} event.
  54 |     |      */
  55 |     |     function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
  59 |     |      * are aware of the ERC-721 protocol to prevent tokens from being forever locked.
  60 |     |      *
  61 |     |      * Requirements:
  62 |     |      *
  63 |     |      * - `from` cannot be the zero address.
  64 |     |      * - `to` cannot be the zero address.
  65 |     |      * - `tokenId` token must exist and be owned by `from`.
  66 |     |      * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or
  67 |     |      *   {setApprovalForAll}.
  68 |     |      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
  69 |     |      *   a safe transfer.
  70 |     |      *
  71 |     |      * Emits a {Transfer} event.
  72 |     |      */
  73 |     |     function safeTransferFrom(address from, address to, uint256 tokenId) external;
  74 |     | 
  75 |     |     /**
  76 |     |      * @dev Transfers `tokenId` token from `from` to `to`.
  77 |     |      *
  78 |     |      * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721
  79 |     |      * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
  80 |     |      * understand this adds an external call which potentially creates a reentrancy vulnerability.
  81 |     |      *
  82 |     |      * Requirements:
  83 |     |      *
  84 |     |      * - `from` cannot be the zero address.
  85 |     |      * - `to` cannot be the zero address.
  86 |     |      * - `tokenId` token must be owned by `from`.
  87 |     |      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
  88 |     |      *
  89 |     |      * Emits a {Transfer} event.
  90 |     |      */
  91 |     |     function transferFrom(address from, address to, uint256 tokenId) external;
  92 |     | 
  93 |     |     /**
  94 |     |      * @dev Gives permission to `to` to transfer `tokenId` token to another account.
  95 |     |      * The approval is cleared when the token is transferred.
  96 |     |      *
  97 |     |      * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
  98 |     |      *
  99 |     |      * Requirements:
 100 |     |      *
 101 |     |      * - The caller must own the token or be an approved operator.
 102 |     |      * - `tokenId` must exist.
 103 |     |      *
 104 |     |      * Emits an {Approval} event.
 105 |     |      */
 106 |     |     function approve(address to, uint256 tokenId) external;
 107 |     | 
 108 |     |     /**
 109 |     |      * @dev Approve or remove `operator` as an operator for the caller.
 110 |     |      * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
 111 |     |      *
 112 |     |      * Requirements:
 113 |     |      *
 114 |     |      * - The `operator` cannot be the address zero.
 115 |     |      *
 116 |     |      * Emits an {ApprovalForAll} event.
 117 |     |      */
 118 |     |     function setApprovalForAll(address operator, bool approved) external;
 119 |     | 
 120 |     |     /**
 121 |     |      * @dev Returns the account approved for `tokenId` token.
 122 |     |      *
 123 |     |      * Requirements:
 124 |     |      *
 125 |     |      * - `tokenId` must exist.
 126 |     |      */
 127 |     |     function getApproved(uint256 tokenId) external view returns (address operator);
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
 131 |     |      *
 132 |     |      * See {setApprovalForAll}
 133 |     |      */
 134 |     |     function isApprovedForAll(address owner, address operator) external view returns (bool);
 135 |     | }
 136 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @title ERC-721 token receiver interface
  8 |     |  * @dev Interface for any contract that wants to support safeTransfers
  9 |     |  * from ERC-721 asset contracts.
 10 |     |  */
 11 |     | interface IERC721Receiver {
 12 |     |     /**
 13 |     |      * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
 14 |     |      * by `operator` from `from`, this function is called.
 15 |     |      *
 16 |     |      * It must return its Solidity selector to confirm the token transfer.
 17 |     |      * If any other value is returned or the interface is not implemented by the recipient, the transfer will be
 18 |     |      * reverted.
 19 |     |      *
 20 |     |      * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
 21 |     |      */
 22 |     |     function onERC721Received(
 23 |     |         address operator,
 24 |     |         address from,
 25 |     |         uint256 tokenId,
 26 |     |         bytes calldata data
 27 |     |     ) external returns (bytes4);
 28 |     | }
 29 | *   | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {ERC721} from "../ERC721.sol";
   7 |     | import {IERC721Enumerable} from "./IERC721Enumerable.sol";
   8 |     | import {IERC165} from "../../../utils/introspection/ERC165.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability
  12 |     |  * of all the token ids in the contract as well as all token ids owned by each account.
  13 |     |  *
  14 |     |  * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},
  15 |     |  * interfere with enumerability and should not be used together with {ERC721Enumerable}.
  16 |     |  */
  17 |     | abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
  18 |     |     mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;
  19 |     |     mapping(uint256 tokenId => uint256) private _ownedTokensIndex;
  20 |     | 
  21 |     |     uint256[] private _allTokens;
  22 |     |     mapping(uint256 tokenId => uint256) private _allTokensIndex;
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev An `owner`'s token query was out of bounds for `index`.
  26 |     |      *
  27 |     |      * NOTE: The owner being `address(0)` indicates a global out of bounds index.
  28 |     |      */
  29 |     |     error ERC721OutOfBoundsIndex(address owner, uint256 index);
  30 |     | 
  31 |     |     /**
  32 |     |      * @dev Batch mint is not allowed.
  33 |     |      */
  34 |     |     error ERC721EnumerableForbiddenBatchMint();
  35 |     | 
  36 |     |     /**
  37 |     |      * @dev See {IERC165-supportsInterface}.
  38 |     |      */
  39 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
  40 |     |         return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
  41 |     |     }
  42 |     | 
  43 |     |     /**
  44 |     |      * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
  45 |     |      */
  46 |     |     function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {
  47 |     |         if (index >= balanceOf(owner)) {
  48 |     |             revert ERC721OutOfBoundsIndex(owner, index);
  49 |     |         }
  50 |     |         return _ownedTokens[owner][index];
  51 |     |     }
  52 |     | 
  53 |     |     /**
  54 |     |      * @dev See {IERC721Enumerable-totalSupply}.
  55 |     |      */
  56 |     |     function totalSupply() public view virtual returns (uint256) {
  57 |     |         return _allTokens.length;
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev See {IERC721Enumerable-tokenByIndex}.
  62 |     |      */
  63 |     |     function tokenByIndex(uint256 index) public view virtual returns (uint256) {
  64 |     |         if (index >= totalSupply()) {
  65 |     |             revert ERC721OutOfBoundsIndex(address(0), index);
  66 |     |         }
  67 |     |         return _allTokens[index];
  68 |     |     }
  69 |     | 
  70 |     |     /**
  71 |     |      * @dev See {ERC721-_update}.
  72 |     |      */
  73 |     |     function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {
  74 |     |         address previousOwner = super._update(to, tokenId, auth);
  75 |     | 
  76 |     |         if (previousOwner == address(0)) {
  77 |     |             _addTokenToAllTokensEnumeration(tokenId);
  78 |     |         } else if (previousOwner != to) {
  79 |     |             _removeTokenFromOwnerEnumeration(previousOwner, tokenId);
  80 |     |         }
  81 |     |         if (to == address(0)) {
  82 |     |             _removeTokenFromAllTokensEnumeration(tokenId);
  83 |     |         } else if (previousOwner != to) {
  84 |     |             _addTokenToOwnerEnumeration(to, tokenId);
  85 |     |         }
  86 |     | 
  87 |     |         return previousOwner;
  88 |     |     }
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev Private function to add a token to this extension's ownership-tracking data structures.
  92 |     |      * @param to address representing the new owner of the given token ID
  93 |     |      * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
  94 |     |      */
  95 |     |     function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
  96 |     |         uint256 length = balanceOf(to) - 1;
  97 |     |         _ownedTokens[to][length] = tokenId;
  98 |     |         _ownedTokensIndex[tokenId] = length;
  99 |     |     }
 100 |     | 
 101 |     |     /**
 102 |     |      * @dev Private function to add a token to this extension's token tracking data structures.
 103 |     |      * @param tokenId uint256 ID of the token to be added to the tokens list
 104 |     |      */
 105 |     |     function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
 106 |     |         _allTokensIndex[tokenId] = _allTokens.length;
 107 |     |         _allTokens.push(tokenId);
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
 112 |     |      * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
 113 |     |      * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
 114 |     |      * This has O(1) time complexity, but alters the order of the _ownedTokens array.
 115 |     |      * @param from address representing the previous owner of the given token ID
 116 |     |      * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
 117 |     |      */
 118 |     |     function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
 119 |     |         // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
 120 |     |         // then delete the last slot (swap and pop).
 121 |     | 
 122 |     |         uint256 lastTokenIndex = balanceOf(from);
 123 |     |         uint256 tokenIndex = _ownedTokensIndex[tokenId];
 124 |     | 
 125 |     |         mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];
 126 |     | 
 127 |     |         // When the token to delete is the last token, the swap operation is unnecessary
 128 |     |         if (tokenIndex != lastTokenIndex) {
 129 |     |             uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];
 130 |     | 
 131 |     |             _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
 132 |     |             _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
 133 |     |         }
 134 |     | 
 135 |     |         // This also deletes the contents at the last position of the array
 136 |     |         delete _ownedTokensIndex[tokenId];
 137 |     |         delete _ownedTokensByOwner[lastTokenIndex];
 138 |     |     }
 139 |     | 
 140 |     |     /**
 141 |     |      * @dev Private function to remove a token from this extension's token tracking data structures.
 142 |     |      * This has O(1) time complexity, but alters the order of the _allTokens array.
 143 |     |      * @param tokenId uint256 ID of the token to be removed from the tokens list
 144 |     |      */
 145 |     |     function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
 146 |     |         // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
 147 |     |         // then delete the last slot (swap and pop).
 148 |     | 
 149 |     |         uint256 lastTokenIndex = _allTokens.length - 1;
 150 |     |         uint256 tokenIndex = _allTokensIndex[tokenId];
 151 |     | 
 152 |     |         // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
 153 |     |         // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
 154 |     |         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
 155 |     |         uint256 lastTokenId = _allTokens[lastTokenIndex];
 156 |     | 
 157 |     |         _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
 158 |     |         _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
 159 |     | 
 160 |     |         // This also deletes the contents at the last position of the array
 161 |     |         delete _allTokensIndex[tokenId];
 162 |     |         _allTokens.pop();
 163 |     |     }
 164 |     | 
 165 |     |     /**
 166 |     |      * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch
 167 |     |      */
 168 |     |     function _increaseBalance(address account, uint128 amount) internal virtual override {
 169 |     |         if (amount > 0) {
 170 |     |             revert ERC721EnumerableForbiddenBatchMint();
 171 |     |         }
 172 |     |         super._increaseBalance(account, amount);
 173 |     |     }
 174 |     | }
 175 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC721} from "../IERC721.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 10 |     |  * @dev See https://eips.ethereum.org/EIPS/eip-721
 11 |     |  */
 12 |     | interface IERC721Enumerable is IERC721 {
 13 |     |     /**
 14 |     |      * @dev Returns the total amount of tokens stored by the contract.
 15 |     |      */
 16 |     |     function totalSupply() external view returns (uint256);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
 20 |     |      * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
 21 |     |      */
 22 |     |     function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
 26 |     |      * Use along with {totalSupply} to enumerate all tokens.
 27 |     |      */
 28 |     |     function tokenByIndex(uint256 index) external view returns (uint256);
 29 |     | }
 30 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC721} from "../IERC721.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 10 |     |  * @dev See https://eips.ethereum.org/EIPS/eip-721
 11 |     |  */
 12 |     | interface IERC721Metadata is IERC721 {
 13 |     |     /**
 14 |     |      * @dev Returns the token collection name.
 15 |     |      */
 16 |     |     function name() external view returns (string memory);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Returns the token collection symbol.
 20 |     |      */
 21 |     |     function symbol() external view returns (string memory);
 22 |     | 
 23 |     |     /**
 24 |     |      * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
 25 |     |      */
 26 |     |     function tokenURI(uint256 tokenId) external view returns (string memory);
 27 |     | }
 28 | *   | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Utils.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | import {IERC721Receiver} from "../IERC721Receiver.sol";
  6 |     | import {IERC721Errors} from "../../../interfaces/draft-IERC6093.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Library that provide common ERC-721 utility functions.
 10 |     |  *
 11 |     |  * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].
 12 |     |  *
 13 |     |  * _Available since v5.1._
 14 |     |  */
 15 |     | library ERC721Utils {
 16 |     |     /**
 17 |     |      * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}
 18 |     |      * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).
 19 |     |      *
 20 |     |      * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).
 21 |     |      * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept
 22 |     |      * the transfer.
 23 |     |      */
 24 |     |     function checkOnERC721Received(
 25 |     |         address operator,
 26 |     |         address from,
 27 |     |         address to,
 28 |     |         uint256 tokenId,
 29 |     |         bytes memory data
 30 |     |     ) internal {
 31 |     |         if (to.code.length > 0) {
 32 |     |             try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {
 33 |     |                 if (retval != IERC721Receiver.onERC721Received.selector) {
 34 |     |                     // Token rejected
 35 |     |                     revert IERC721Errors.ERC721InvalidReceiver(to);
 36 |     |                 }
 37 |     |             } catch (bytes memory reason) {
 38 |     |                 if (reason.length == 0) {
 39 |     |                     // non-IERC721Receiver implementer
 40 |     |                     revert IERC721Errors.ERC721InvalidReceiver(to);
 41 |     |                 } else {
 42 |     |                     assembly ("memory-safe") {
 43 |     |                         revert(add(32, reason), mload(reason))
 44 |     |                     }
 45 |     |                 }
 46 |     |             }
 47 |     |         }
 48 |     |     }
 49 |     | }
 50 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/Address.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Errors} from "./Errors.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Collection of functions related to the address type
  10 |     |  */
  11 |     | library Address {
  12 |     |     /**
  13 |     |      * @dev There's no code at `target` (it is not a contract).
  14 |     |      */
  15 |     |     error AddressEmptyCode(address target);
  16 |     | 
  17 |     |     /**
  18 |     |      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
  19 |     |      * `recipient`, forwarding all available gas and reverting on errors.
  20 |     |      *
  21 |     |      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
  22 |     |      * of certain opcodes, possibly making contracts go over the 2300 gas limit
  23 |     |      * imposed by `transfer`, making them unable to receive funds via
  24 |     |      * `transfer`. {sendValue} removes this limitation.
  25 |     |      *
  26 |     |      * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
  27 |     |      *
  28 |     |      * IMPORTANT: because control is transferred to `recipient`, care must be
  29 |     |      * taken to not create reentrancy vulnerabilities. Consider using
  30 |     |      * {ReentrancyGuard} or the
  31 |     |      * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
  32 |     |      */
  33 |     |     function sendValue(address payable recipient, uint256 amount) internal {
  34 |     |         if (address(this).balance < amount) {
  35 |     |             revert Errors.InsufficientBalance(address(this).balance, amount);
  36 |     |         }
  37 |     | 
  38 |     |         (bool success, ) = recipient.call{value: amount}("");
  39 |     |         if (!success) {
  40 |     |             revert Errors.FailedCall();
  41 |     |         }
  42 |     |     }
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Performs a Solidity function call using a low level `call`. A
  46 |     |      * plain `call` is an unsafe replacement for a function call: use this
  47 |     |      * function instead.
  48 |     |      *
  49 |     |      * If `target` reverts with a revert reason or custom error, it is bubbled
  50 |     |      * up by this function (like regular Solidity function calls). However, if
  51 |     |      * the call reverted with no returned reason, this function reverts with a
  52 |     |      * {Errors.FailedCall} error.
  53 |     |      *
  54 |     |      * Returns the raw returned data. To convert to the expected return value,
  55 |     |      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
  56 |     |      *
  57 |     |      * Requirements:
  58 |     |      *
  59 |     |      * - `target` must be a contract.
  60 |     |      * - calling `target` with `data` must not revert.
  61 |     |      */
  62 |     |     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
  63 |     |         return functionCallWithValue(target, data, 0);
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  68 |     |      * but also transferring `value` wei to `target`.
  69 |     |      *
  70 |     |      * Requirements:
  71 |     |      *
  72 |     |      * - the calling contract must have an ETH balance of at least `value`.
  73 |     |      * - the called Solidity function must be `payable`.
  74 |     |      */
  75 |     |     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
  76 |     |         if (address(this).balance < value) {
  77 |     |             revert Errors.InsufficientBalance(address(this).balance, value);
  78 |     |         }
  79 |     |         (bool success, bytes memory returndata) = target.call{value: value}(data);
  80 |     |         return verifyCallResultFromTarget(target, success, returndata);
  81 |     |     }
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  85 |     |      * but performing a static call.
  86 |     |      */
  87 |     |     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
  88 |     |         (bool success, bytes memory returndata) = target.staticcall(data);
  89 |     |         return verifyCallResultFromTarget(target, success, returndata);
  90 |     |     }
  91 |     | 
  92 |     |     /**
  93 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  94 |     |      * but performing a delegate call.
  95 |     |      */
  96 |     |     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
  97 |     |         (bool success, bytes memory returndata) = target.delegatecall(data);
  98 |     |         return verifyCallResultFromTarget(target, success, returndata);
  99 |     |     }
 100 |     | 
 101 |     |     /**
 102 |     |      * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
 103 |     |      * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case
 104 |     |      * of an unsuccessful call.
 105 |     |      */
 106 |     |     function verifyCallResultFromTarget(
 107 |     |         address target,
 108 |     |         bool success,
 109 |     |         bytes memory returndata
 110 |     |     ) internal view returns (bytes memory) {
 111 |     |         if (!success) {
 112 |     |             _revert(returndata);
 113 |     |         } else {
 114 |     |             // only check if target is a contract if the call was successful and the return data is empty
 115 |     |             // otherwise we already know that it was a contract
 116 |     |             if (returndata.length == 0 && target.code.length == 0) {
 117 |     |                 revert AddressEmptyCode(target);
 118 |     |             }
 119 |     |             return returndata;
 120 |     |         }
 121 |     |     }
 122 |     | 
 123 |     |     /**
 124 |     |      * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
 125 |     |      * revert reason or with a default {Errors.FailedCall} error.
 126 |     |      */
 127 |     |     function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
 128 |     |         if (!success) {
 129 |     |             _revert(returndata);
 130 |     |         } else {
 131 |     |             return returndata;
 132 |     |         }
 133 |     |     }
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.
 137 |     |      */
 138 |     |     function _revert(bytes memory returndata) private pure {
 139 |     |         // Look for revert reason and bubble it up if present
 140 |     |         if (returndata.length > 0) {
 141 |     |             // The easiest way to bubble the revert reason is using memory via assembly
 142 |     |             assembly ("memory-safe") {
 143 |     |                 let returndata_size := mload(returndata)
 144 |     |                 revert(add(32, returndata), returndata_size)
 145 |     |             }
 146 |     |         } else {
 147 |     |             revert Errors.FailedCall();
 148 |     |         }
 149 |     |     }
 150 |     | }
 151 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 |     |     function _msgSender() internal view virtual returns (address) {
 18 |     |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | 
 25 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 26 |     |         return 0;
 27 |     |     }
 28 |     | }
 29 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/Errors.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | /**
  6 |     |  * @dev Collection of common custom errors used in multiple contracts
  7 |     |  *
  8 |     |  * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.
  9 |     |  * It is recommended to avoid relying on the error API for critical functionality.
 10 |     |  *
 11 |     |  * _Available since v5.1._
 12 |     |  */
 13 |     | library Errors {
 14 |     |     /**
 15 |     |      * @dev The ETH balance of the account is not enough to perform the operation.
 16 |     |      */
 17 |     |     error InsufficientBalance(uint256 balance, uint256 needed);
 18 |     | 
 19 |     |     /**
 20 |     |      * @dev A call to an address target failed. The target may have reverted.
 21 |     |      */
 22 |     |     error FailedCall();
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev The deployment failed.
 26 |     |      */
 27 |     |     error FailedDeployment();
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev A necessary precompile is missing.
 31 |     |      */
 32 |     |     error MissingPrecompile(address);
 33 |     | }
 34 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/Panic.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | /**
  6 |     |  * @dev Helper library for emitting standardized panic codes.
  7 |     |  *
  8 |     |  * ```solidity
  9 |     |  * contract Example {
 10 |     |  *      using Panic for uint256;
 11 |     |  *
 12 |     |  *      // Use any of the declared internal constants
 13 |     |  *      function foo() { Panic.GENERIC.panic(); }
 14 |     |  *
 15 |     |  *      // Alternatively
 16 |     |  *      function foo() { Panic.panic(Panic.GENERIC); }
 17 |     |  * }
 18 |     |  * ```
 19 |     |  *
 20 |     |  * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].
 21 |     |  *
 22 |     |  * _Available since v5.1._
 23 |     |  */
 24 |     | // slither-disable-next-line unused-state
 25 |     | library Panic {
 26 |     |     /// @dev generic / unspecified error
 27 |     |     uint256 internal constant GENERIC = 0x00;
 28 |     |     /// @dev used by the assert() builtin
 29 |     |     uint256 internal constant ASSERT = 0x01;
 30 |     |     /// @dev arithmetic underflow or overflow
 31 |     |     uint256 internal constant UNDER_OVERFLOW = 0x11;
 32 |     |     /// @dev division or modulo by zero
 33 |     |     uint256 internal constant DIVISION_BY_ZERO = 0x12;
 34 |     |     /// @dev enum conversion error
 35 |     |     uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;
 36 |     |     /// @dev invalid encoding in storage
 37 |     |     uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;
 38 |     |     /// @dev empty array pop
 39 |     |     uint256 internal constant EMPTY_ARRAY_POP = 0x31;
 40 |     |     /// @dev array out of bounds access
 41 |     |     uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;
 42 |     |     /// @dev resource error (too large allocation or too large array)
 43 |     |     uint256 internal constant RESOURCE_ERROR = 0x41;
 44 |     |     /// @dev calling invalid internal function
 45 |     |     uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;
 46 |     | 
 47 |     |     /// @dev Reverts with a panic code. Recommended to use with
 48 |     |     /// the internal constants with predefined codes.
 49 |     |     function panic(uint256 code) internal pure {
 50 |     |         assembly ("memory-safe") {
 51 |     |             mstore(0x00, 0x4e487b71)
 52 |     |             mstore(0x20, code)
 53 |     |             revert(0x1c, 0x24)
 54 |     |         }
 55 |     |     }
 56 |     | }
 57 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Contract module that helps prevent reentrant calls to a function.
  8 |     |  *
  9 |     |  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 10 |     |  * available, which can be applied to functions to make sure there are no nested
 11 |     |  * (reentrant) calls to them.
 12 |     |  *
 13 |     |  * Note that because there is a single `nonReentrant` guard, functions marked as
 14 |     |  * `nonReentrant` may not call one another. This can be worked around by making
 15 |     |  * those functions `private`, and then adding `external` `nonReentrant` entry
 16 |     |  * points to them.
 17 |     |  *
 18 |     |  * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,
 19 |     |  * consider using {ReentrancyGuardTransient} instead.
 20 |     |  *
 21 |     |  * TIP: If you would like to learn more about reentrancy and alternative ways
 22 |     |  * to protect against it, check out our blog post
 23 |     |  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 24 |     |  */
 25 |     | abstract contract ReentrancyGuard {
 26 |     |     // Booleans are more expensive than uint256 or any type that takes up a full
 27 |     |     // word because each write operation emits an extra SLOAD to first read the
 28 |     |     // slot's contents, replace the bits taken up by the boolean, and then write
 29 |     |     // back. This is the compiler's defense against contract upgrades and
 30 |     |     // pointer aliasing, and it cannot be disabled.
 31 |     | 
 32 |     |     // The values being non-zero value makes deployment a bit more expensive,
 33 |     |     // but in exchange the refund on every call to nonReentrant will be lower in
 34 |     |     // amount. Since refunds are capped to a percentage of the total
 35 |     |     // transaction's gas, it is best to keep them low in cases like this one, to
 36 |     |     // increase the likelihood of the full refund coming into effect.
 37 |     |     uint256 private constant NOT_ENTERED = 1;
 38 |     |     uint256 private constant ENTERED = 2;
 39 |     | 
 40 |     |     uint256 private _status;
 41 |     | 
 42 |     |     /**
 43 |     |      * @dev Unauthorized reentrant call.
 44 |     |      */
 45 |     |     error ReentrancyGuardReentrantCall();
 46 |     | 
 47 |     |     constructor() {
 48 |     |         _status = NOT_ENTERED;
 49 |     |     }
 50 |     | 
 51 |     |     /**
 52 |     |      * @dev Prevents a contract from calling itself, directly or indirectly.
 53 |     |      * Calling a `nonReentrant` function from another `nonReentrant`
 54 |     |      * function is not supported. It is possible to prevent this from happening
 55 |     |      * by making the `nonReentrant` function external, and making it call a
 56 |     |      * `private` function that does the actual work.
 57 |     |      */
 58 |     |     modifier nonReentrant() {
 59 |     |         _nonReentrantBefore();
 60 |     |         _;
 61 |     |         _nonReentrantAfter();
 62 |     |     }
 63 |     | 
 64 |     |     function _nonReentrantBefore() private {
 65 |     |         // On the first call to nonReentrant, _status will be NOT_ENTERED
 66 |     |         if (_status == ENTERED) {
 67 |     |             revert ReentrancyGuardReentrantCall();
 68 |     |         }
 69 |     | 
 70 |     |         // Any calls to nonReentrant after this point will fail
 71 |     |         _status = ENTERED;
 72 |     |     }
 73 |     | 
 74 |     |     function _nonReentrantAfter() private {
 75 |     |         // By storing the original value once again, a refund is triggered (see
 76 |     |         // https://eips.ethereum.org/EIPS/eip-2200)
 77 |     |         _status = NOT_ENTERED;
 78 |     |     }
 79 |     | 
 80 |     |     /**
 81 |     |      * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
 82 |     |      * `nonReentrant` function in the call stack.
 83 |     |      */
 84 |     |     function _reentrancyGuardEntered() internal view returns (bool) {
 85 |     |         return _status == ENTERED;
 86 |     |     }
 87 |     | }
 88 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/Strings.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Math} from "./math/Math.sol";
   7 |     | import {SignedMath} from "./math/SignedMath.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev String operations.
  11 |     |  */
  12 |     | library Strings {
  13 |     |     bytes16 private constant HEX_DIGITS = "0123456789abcdef";
  14 |     |     uint8 private constant ADDRESS_LENGTH = 20;
  15 |     | 
  16 |     |     /**
  17 |     |      * @dev The `value` string doesn't fit in the specified `length`.
  18 |     |      */
  19 |     |     error StringsInsufficientHexLength(uint256 value, uint256 length);
  20 |     | 
  21 |     |     /**
  22 |     |      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
  23 |     |      */
  24 |     |     function toString(uint256 value) internal pure returns (string memory) {
  25 |     |         unchecked {
  26 |     |             uint256 length = Math.log10(value) + 1;
  27 |     |             string memory buffer = new string(length);
  28 |     |             uint256 ptr;
  29 |     |             assembly ("memory-safe") {
  30 |     |                 ptr := add(buffer, add(32, length))
  31 |     |             }
  32 |     |             while (true) {
  33 |     |                 ptr--;
  34 |     |                 assembly ("memory-safe") {
  35 |     |                     mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))
  36 |     |                 }
  37 |     |                 value /= 10;
  38 |     |                 if (value == 0) break;
  39 |     |             }
  40 |     |             return buffer;
  41 |     |         }
  42 |     |     }
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Converts a `int256` to its ASCII `string` decimal representation.
  46 |     |      */
  47 |     |     function toStringSigned(int256 value) internal pure returns (string memory) {
  48 |     |         return string.concat(value < 0 ? "-" : "", toString(SignedMath.abs(value)));
  49 |     |     }
  50 |     | 
  51 |     |     /**
  52 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
  53 |     |      */
  54 |     |     function toHexString(uint256 value) internal pure returns (string memory) {
  55 |     |         unchecked {
  56 |     |             return toHexString(value, Math.log256(value) + 1);
  57 |     |         }
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
  62 |     |      */
  63 |     |     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
  64 |     |         uint256 localValue = value;
  65 |     |         bytes memory buffer = new bytes(2 * length + 2);
  66 |     |         buffer[0] = "0";
  67 |     |         buffer[1] = "x";
  68 |     |         for (uint256 i = 2 * length + 1; i > 1; --i) {
  69 |     |             buffer[i] = HEX_DIGITS[localValue & 0xf];
  70 |     |             localValue >>= 4;
  71 |     |         }
  72 |     |         if (localValue != 0) {
  73 |     |             revert StringsInsufficientHexLength(value, length);
  74 |     |         }
  75 |     |         return string(buffer);
  76 |     |     }
  77 |     | 
  78 |     |     /**
  79 |     |      * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal
  80 |     |      * representation.
  81 |     |      */
  82 |     |     function toHexString(address addr) internal pure returns (string memory) {
  83 |     |         return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);
  84 |     |     }
  85 |     | 
  86 |     |     /**
  87 |     |      * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal
  88 |     |      * representation, according to EIP-55.
  89 |     |      */
  90 |     |     function toChecksumHexString(address addr) internal pure returns (string memory) {
  91 |     |         bytes memory buffer = bytes(toHexString(addr));
  92 |     | 
  93 |     |         // hash the hex part of buffer (skip length + 2 bytes, length 40)
  94 |     |         uint256 hashValue;
  95 |     |         assembly ("memory-safe") {
  96 |     |             hashValue := shr(96, keccak256(add(buffer, 0x22), 40))
  97 |     |         }
  98 |     | 
  99 |     |         for (uint256 i = 41; i > 1; --i) {
 100 |     |             // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)
 101 |     |             if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {
 102 |     |                 // case shift by xoring with 0x20
 103 |     |                 buffer[i] ^= 0x20;
 104 |     |             }
 105 |     |             hashValue >>= 4;
 106 |     |         }
 107 |     |         return string(buffer);
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev Returns true if the two strings are equal.
 112 |     |      */
 113 |     |     function equal(string memory a, string memory b) internal pure returns (bool) {
 114 |     |         return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));
 115 |     |     }
 116 |     | }
 117 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC165} from "./IERC165.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Implementation of the {IERC165} interface.
 10 |     |  *
 11 |     |  * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check
 12 |     |  * for the additional interface id that will be supported. For example:
 13 |     |  *
 14 |     |  * ```solidity
 15 |     |  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 16 |     |  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 17 |     |  * }
 18 |     |  * ```
 19 |     |  */
 20 |     | abstract contract ERC165 is IERC165 {
 21 |     |     /**
 22 |     |      * @dev See {IERC165-supportsInterface}.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
 25 |     |         return interfaceId == type(IERC165).interfaceId;
 26 |     |     }
 27 |     | }
 28 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC-165 standard, as defined in the
  8 |     |  * https://eips.ethereum.org/EIPS/eip-165[ERC].
  9 |     |  *
 10 |     |  * Implementers can declare support of contract interfaces, which can then be
 11 |     |  * queried by others ({ERC165Checker}).
 12 |     |  *
 13 |     |  * For an implementation, see {ERC165}.
 14 |     |  */
 15 |     | interface IERC165 {
 16 |     |     /**
 17 |     |      * @dev Returns true if this contract implements the interface defined by
 18 |     |      * `interfaceId`. See the corresponding
 19 |     |      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]
 20 |     |      * to learn more about how these ids are created.
 21 |     |      *
 22 |     |      * This function call must use less than 30 000 gas.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) external view returns (bool);
 25 |     | }
 26 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/math/Math.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Panic} from "../Panic.sol";
   7 |     | import {SafeCast} from "./SafeCast.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev Standard math utilities missing in the Solidity language.
  11 |     |  */
  12 |     | library Math {
  13 |     |     enum Rounding {
  14 |     |         Floor, // Toward negative infinity
  15 |     |         Ceil, // Toward positive infinity
  16 |     |         Trunc, // Toward zero
  17 |     |         Expand // Away from zero
  18 |     |     }
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).
  22 |     |      */
  23 |     |     function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  24 |     |         unchecked {
  25 |     |             uint256 c = a + b;
  26 |     |             if (c < a) return (false, 0);
  27 |     |             return (true, c);
  28 |     |         }
  29 |     |     }
  30 |     | 
  31 |     |     /**
  32 |     |      * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).
  33 |     |      */
  34 |     |     function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  35 |     |         unchecked {
  36 |     |             if (b > a) return (false, 0);
  37 |     |             return (true, a - b);
  38 |     |         }
  39 |     |     }
  40 |     | 
  41 |     |     /**
  42 |     |      * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).
  43 |     |      */
  44 |     |     function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  45 |     |         unchecked {
  46 |     |             // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
  47 |     |             // benefit is lost if 'b' is also tested.
  48 |     |             // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
  49 |     |             if (a == 0) return (true, 0);
  50 |     |             uint256 c = a * b;
  51 |     |             if (c / a != b) return (false, 0);
  52 |     |             return (true, c);
  53 |     |         }
  54 |     |     }
  55 |     | 
  56 |     |     /**
  57 |     |      * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).
  58 |     |      */
  59 |     |     function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  60 |     |         unchecked {
  61 |     |             if (b == 0) return (false, 0);
  62 |     |             return (true, a / b);
  63 |     |         }
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).
  68 |     |      */
  69 |     |     function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  70 |     |         unchecked {
  71 |     |             if (b == 0) return (false, 0);
  72 |     |             return (true, a % b);
  73 |     |         }
  74 |     |     }
  75 |     | 
  76 |     |     /**
  77 |     |      * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.
  78 |     |      *
  79 |     |      * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
  80 |     |      * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute
  81 |     |      * one branch when needed, making this function more expensive.
  82 |     |      */
  83 |     |     function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {
  84 |     |         unchecked {
  85 |     |             // branchless ternary works because:
  86 |     |             // b ^ (a ^ b) == a
  87 |     |             // b ^ 0 == b
  88 |     |             return b ^ ((a ^ b) * SafeCast.toUint(condition));
  89 |     |         }
  90 |     |     }
  91 |     | 
  92 |     |     /**
  93 |     |      * @dev Returns the largest of two numbers.
  94 |     |      */
  95 |     |     function max(uint256 a, uint256 b) internal pure returns (uint256) {
  96 |     |         return ternary(a > b, a, b);
  97 |     |     }
  98 |     | 
  99 |     |     /**
 100 |     |      * @dev Returns the smallest of two numbers.
 101 |     |      */
 102 |     |     function min(uint256 a, uint256 b) internal pure returns (uint256) {
 103 |     |         return ternary(a < b, a, b);
 104 |     |     }
 105 |     | 
 106 |     |     /**
 107 |     |      * @dev Returns the average of two numbers. The result is rounded towards
 108 |     |      * zero.
 109 |     |      */
 110 |     |     function average(uint256 a, uint256 b) internal pure returns (uint256) {
 111 |     |         // (a + b) / 2 can overflow.
 112 |     |         return (a & b) + (a ^ b) / 2;
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev Returns the ceiling of the division of two numbers.
 117 |     |      *
 118 |     |      * This differs from standard division with `/` in that it rounds towards infinity instead
 119 |     |      * of rounding towards zero.
 120 |     |      */
 121 |     |     function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
 122 |     |         if (b == 0) {
 123 |     |             // Guarantee the same behavior as in a regular Solidity division.
 124 |     |             Panic.panic(Panic.DIVISION_BY_ZERO);
 125 |     |         }
 126 |     | 
 127 |     |         // The following calculation ensures accurate ceiling division without overflow.
 128 |     |         // Since a is non-zero, (a - 1) / b will not overflow.
 129 |     |         // The largest possible result occurs when (a - 1) / b is type(uint256).max,
 130 |     |         // but the largest value we can obtain is type(uint256).max - 1, which happens
 131 |     |         // when a = type(uint256).max and b = 1.
 132 |     |         unchecked {
 133 |     |             return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);
 134 |     |         }
 135 |     |     }
 136 |     | 
 137 |     |     /**
 138 |     |      * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
 139 |     |      * denominator == 0.
 140 |     |      *
 141 |     |      * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
 142 |     |      * Uniswap Labs also under MIT license.
 143 |     |      */
 144 |     |     function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
 145 |     |         unchecked {
 146 |     |             // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use
 147 |     |             // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
 148 |     |             // variables such that product = prod1 * 2²⁵⁶ + prod0.
 149 |     |             uint256 prod0 = x * y; // Least significant 256 bits of the product
 150 |     |             uint256 prod1; // Most significant 256 bits of the product
 151 |     |             assembly {
 152 |     |                 let mm := mulmod(x, y, not(0))
 153 |     |                 prod1 := sub(sub(mm, prod0), lt(mm, prod0))
 154 |     |             }
 155 |     | 
 156 |     |             // Handle non-overflow cases, 256 by 256 division.
 157 |     |             if (prod1 == 0) {
 158 |     |                 // Solidity will revert if denominator == 0, unlike the div opcode on its own.
 159 |     |                 // The surrounding unchecked block does not change this fact.
 160 |     |                 // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
 161 |     |                 return prod0 / denominator;
 162 |     |             }
 163 |     | 
 164 |     |             // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.
 165 |     |             if (denominator <= prod1) {
 166 |     |                 Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));
 167 |     |             }
 168 |     | 
 169 |     |             ///////////////////////////////////////////////
 170 |     |             // 512 by 256 division.
 171 |     |             ///////////////////////////////////////////////
 172 |     | 
 173 |     |             // Make division exact by subtracting the remainder from [prod1 prod0].
 174 |     |             uint256 remainder;
 175 |     |             assembly {
 176 |     |                 // Compute remainder using mulmod.
 177 |     |                 remainder := mulmod(x, y, denominator)
 178 |     | 
 179 |     |                 // Subtract 256 bit number from 512 bit number.
 180 |     |                 prod1 := sub(prod1, gt(remainder, prod0))
 181 |     |                 prod0 := sub(prod0, remainder)
 182 |     |             }
 183 |     | 
 184 |     |             // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
 185 |     |             // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.
 186 |     | 
 187 |     |             uint256 twos = denominator & (0 - denominator);
 188 |     |             assembly {
 189 |     |                 // Divide denominator by twos.
 190 |     |                 denominator := div(denominator, twos)
 191 |     | 
 192 |     |                 // Divide [prod1 prod0] by twos.
 193 |     |                 prod0 := div(prod0, twos)
 194 |     | 
 195 |     |                 // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.
 196 |     |                 twos := add(div(sub(0, twos), twos), 1)
 197 |     |             }
 198 |     | 
 199 |     |             // Shift in bits from prod1 into prod0.
 200 |     |             prod0 |= prod1 * twos;
 201 |     | 
 202 |     |             // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such
 203 |     |             // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for
 204 |     |             // four bits. That is, denominator * inv ≡ 1 mod 2⁴.
 205 |     |             uint256 inverse = (3 * denominator) ^ 2;
 206 |     | 
 207 |     |             // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
 208 |     |             // works in modular arithmetic, doubling the correct bits in each step.
 209 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2⁸
 210 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶
 211 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2³²
 212 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴
 213 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸
 214 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶
 215 |     | 
 216 |     |             // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
 217 |     |             // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is
 218 |     |             // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1
 219 |     |             // is no longer required.
 220 |     |             result = prod0 * inverse;
 221 |     |             return result;
 222 |     |         }
 223 |     |     }
 224 |     | 
 225 |     |     /**
 226 |     |      * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.
 227 |     |      */
 228 |     |     function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
 229 |     |         return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);
 230 |     |     }
 231 |     | 
 232 |     |     /**
 233 |     |      * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.
 234 |     |      *
 235 |     |      * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.
 236 |     |      * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.
 237 |     |      *
 238 |     |      * If the input value is not inversible, 0 is returned.
 239 |     |      *
 240 |     |      * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the
 241 |     |      * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.
 242 |     |      */
 243 |     |     function invMod(uint256 a, uint256 n) internal pure returns (uint256) {
 244 |     |         unchecked {
 245 |     |             if (n == 0) return 0;
 246 |     | 
 247 |     |             // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)
 248 |     |             // Used to compute integers x and y such that: ax + ny = gcd(a, n).
 249 |     |             // When the gcd is 1, then the inverse of a modulo n exists and it's x.
 250 |     |             // ax + ny = 1
 251 |     |             // ax = 1 + (-y)n
 252 |     |             // ax ≡ 1 (mod n) # x is the inverse of a modulo n
 253 |     | 
 254 |     |             // If the remainder is 0 the gcd is n right away.
 255 |     |             uint256 remainder = a % n;
 256 |     |             uint256 gcd = n;
 257 |     | 
 258 |     |             // Therefore the initial coefficients are:
 259 |     |             // ax + ny = gcd(a, n) = n
 260 |     |             // 0a + 1n = n
 261 |     |             int256 x = 0;
 262 |     |             int256 y = 1;
 263 |     | 
 264 |     |             while (remainder != 0) {
 265 |     |                 uint256 quotient = gcd / remainder;
 266 |     | 
 267 |     |                 (gcd, remainder) = (
 268 |     |                     // The old remainder is the next gcd to try.
 269 |     |                     remainder,
 270 |     |                     // Compute the next remainder.
 271 |     |                     // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd
 272 |     |                     // where gcd is at most n (capped to type(uint256).max)
 273 |     |                     gcd - remainder * quotient
 274 |     |                 );
 275 |     | 
 276 |     |                 (x, y) = (
 277 |     |                     // Increment the coefficient of a.
 278 |     |                     y,
 279 |     |                     // Decrement the coefficient of n.
 280 |     |                     // Can overflow, but the result is casted to uint256 so that the
 281 |     |                     // next value of y is "wrapped around" to a value between 0 and n - 1.
 282 |     |                     x - y * int256(quotient)
 283 |     |                 );
 284 |     |             }
 285 |     | 
 286 |     |             if (gcd != 1) return 0; // No inverse exists.
 287 |     |             return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.
 288 |     |         }
 289 |     |     }
 290 |     | 
 291 |     |     /**
 292 |     |      * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.
 293 |     |      *
 294 |     |      * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is
 295 |     |      * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that
 296 |     |      * `a**(p-2)` is the modular multiplicative inverse of a in Fp.
 297 |     |      *
 298 |     |      * NOTE: this function does NOT check that `p` is a prime greater than `2`.
 299 |     |      */
 300 |     |     function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {
 301 |     |         unchecked {
 302 |     |             return Math.modExp(a, p - 2, p);
 303 |     |         }
 304 |     |     }
 305 |     | 
 306 |     |     /**
 307 |     |      * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)
 308 |     |      *
 309 |     |      * Requirements:
 310 |     |      * - modulus can't be zero
 311 |     |      * - underlying staticcall to precompile must succeed
 312 |     |      *
 313 |     |      * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make
 314 |     |      * sure the chain you're using it on supports the precompiled contract for modular exponentiation
 315 |     |      * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,
 316 |     |      * the underlying function will succeed given the lack of a revert, but the result may be incorrectly
 317 |     |      * interpreted as 0.
 318 |     |      */
 319 |     |     function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {
 320 |     |         (bool success, uint256 result) = tryModExp(b, e, m);
 321 |     |         if (!success) {
 322 |     |             Panic.panic(Panic.DIVISION_BY_ZERO);
 323 |     |         }
 324 |     |         return result;
 325 |     |     }
 326 |     | 
 327 |     |     /**
 328 |     |      * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).
 329 |     |      * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying
 330 |     |      * to operate modulo 0 or if the underlying precompile reverted.
 331 |     |      *
 332 |     |      * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain
 333 |     |      * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in
 334 |     |      * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack
 335 |     |      * of a revert, but the result may be incorrectly interpreted as 0.
 336 |     |      */
 337 |     |     function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {
 338 |     |         if (m == 0) return (false, 0);
 339 |     |         assembly ("memory-safe") {
 340 |     |             let ptr := mload(0x40)
 341 |     |             // | Offset    | Content    | Content (Hex)                                                      |
 342 |     |             // |-----------|------------|--------------------------------------------------------------------|
 343 |     |             // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
 344 |     |             // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
 345 |     |             // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
 346 |     |             // | 0x60:0x7f | value of b | 0x<.............................................................b> |
 347 |     |             // | 0x80:0x9f | value of e | 0x<.............................................................e> |
 348 |     |             // | 0xa0:0xbf | value of m | 0x<.............................................................m> |
 349 |     |             mstore(ptr, 0x20)
 350 |     |             mstore(add(ptr, 0x20), 0x20)
 351 |     |             mstore(add(ptr, 0x40), 0x20)
 352 |     |             mstore(add(ptr, 0x60), b)
 353 |     |             mstore(add(ptr, 0x80), e)
 354 |     |             mstore(add(ptr, 0xa0), m)
 355 |     | 
 356 |     |             // Given the result < m, it's guaranteed to fit in 32 bytes,
 357 |     |             // so we can use the memory scratch space located at offset 0.
 358 |     |             success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)
 359 |     |             result := mload(0x00)
 360 |     |         }
 361 |     |     }
 362 |     | 
 363 |     |     /**
 364 |     |      * @dev Variant of {modExp} that supports inputs of arbitrary length.
 365 |     |      */
 366 |     |     function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {
 367 |     |         (bool success, bytes memory result) = tryModExp(b, e, m);
 368 |     |         if (!success) {
 369 |     |             Panic.panic(Panic.DIVISION_BY_ZERO);
 370 |     |         }
 371 |     |         return result;
 372 |     |     }
 373 |     | 
 374 |     |     /**
 375 |     |      * @dev Variant of {tryModExp} that supports inputs of arbitrary length.
 376 |     |      */
 377 |     |     function tryModExp(
 378 |     |         bytes memory b,
 379 |     |         bytes memory e,
 380 |     |         bytes memory m
 381 |     |     ) internal view returns (bool success, bytes memory result) {
 382 |     |         if (_zeroBytes(m)) return (false, new bytes(0));
 383 |     | 
 384 |     |         uint256 mLen = m.length;
 385 |     | 
 386 |     |         // Encode call args in result and move the free memory pointer
 387 |     |         result = abi.encodePacked(b.length, e.length, mLen, b, e, m);
 388 |     | 
 389 |     |         assembly ("memory-safe") {
 390 |     |             let dataPtr := add(result, 0x20)
 391 |     |             // Write result on top of args to avoid allocating extra memory.
 392 |     |             success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)
 393 |     |             // Overwrite the length.
 394 |     |             // result.length > returndatasize() is guaranteed because returndatasize() == m.length
 395 |     |             mstore(result, mLen)
 396 |     |             // Set the memory pointer after the returned data.
 397 |     |             mstore(0x40, add(dataPtr, mLen))
 398 |     |         }
 399 |     |     }
 400 |     | 
 401 |     |     /**
 402 |     |      * @dev Returns whether the provided byte array is zero.
 403 |     |      */
 404 |     |     function _zeroBytes(bytes memory byteArray) private pure returns (bool) {
 405 |     |         for (uint256 i = 0; i < byteArray.length; ++i) {
 406 |     |             if (byteArray[i] != 0) {
 407 |     |                 return false;
 408 |     |             }
 409 |     |         }
 410 |     |         return true;
 411 |     |     }
 412 |     | 
 413 |     |     /**
 414 |     |      * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
 415 |     |      * towards zero.
 416 |     |      *
 417 |     |      * This method is based on Newton's method for computing square roots; the algorithm is restricted to only
 418 |     |      * using integer operations.
 419 |     |      */
 420 |     |     function sqrt(uint256 a) internal pure returns (uint256) {
 421 |     |         unchecked {
 422 |     |             // Take care of easy edge cases when a == 0 or a == 1
 423 |     |             if (a <= 1) {
 424 |     |                 return a;
 425 |     |             }
 426 |     | 
 427 |     |             // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a
 428 |     |             // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between
 429 |     |             // the current value as `ε_n = | x_n - sqrt(a) |`.
 430 |     |             //
 431 |     |             // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root
 432 |     |             // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is
 433 |     |             // bigger than any uint256.
 434 |     |             //
 435 |     |             // By noticing that
 436 |     |             // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`
 437 |     |             // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar
 438 |     |             // to the msb function.
 439 |     |             uint256 aa = a;
 440 |     |             uint256 xn = 1;
 441 |     | 
 442 |     |             if (aa >= (1 << 128)) {
 443 |     |                 aa >>= 128;
 444 |     |                 xn <<= 64;
 445 |     |             }
 446 |     |             if (aa >= (1 << 64)) {
 447 |     |                 aa >>= 64;
 448 |     |                 xn <<= 32;
 449 |     |             }
 450 |     |             if (aa >= (1 << 32)) {
 451 |     |                 aa >>= 32;
 452 |     |                 xn <<= 16;
 453 |     |             }
 454 |     |             if (aa >= (1 << 16)) {
 455 |     |                 aa >>= 16;
 456 |     |                 xn <<= 8;
 457 |     |             }
 458 |     |             if (aa >= (1 << 8)) {
 459 |     |                 aa >>= 8;
 460 |     |                 xn <<= 4;
 461 |     |             }
 462 |     |             if (aa >= (1 << 4)) {
 463 |     |                 aa >>= 4;
 464 |     |                 xn <<= 2;
 465 |     |             }
 466 |     |             if (aa >= (1 << 2)) {
 467 |     |                 xn <<= 1;
 468 |     |             }
 469 |     | 
 470 |     |             // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).
 471 |     |             //
 472 |     |             // We can refine our estimation by noticing that the middle of that interval minimizes the error.
 473 |     |             // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).
 474 |     |             // This is going to be our x_0 (and ε_0)
 475 |     |             xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)
 476 |     | 
 477 |     |             // From here, Newton's method give us:
 478 |     |             // x_{n+1} = (x_n + a / x_n) / 2
 479 |     |             //
 480 |     |             // One should note that:
 481 |     |             // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a
 482 |     |             //              = ((x_n² + a) / (2 * x_n))² - a
 483 |     |             //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a
 484 |     |             //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)
 485 |     |             //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)
 486 |     |             //              = (x_n² - a)² / (2 * x_n)²
 487 |     |             //              = ((x_n² - a) / (2 * x_n))²
 488 |     |             //              ≥ 0
 489 |     |             // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n
 490 |     |             //
 491 |     |             // This gives us the proof of quadratic convergence of the sequence:
 492 |     |             // ε_{n+1} = | x_{n+1} - sqrt(a) |
 493 |     |             //         = | (x_n + a / x_n) / 2 - sqrt(a) |
 494 |     |             //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |
 495 |     |             //         = | (x_n - sqrt(a))² / (2 * x_n) |
 496 |     |             //         = | ε_n² / (2 * x_n) |
 497 |     |             //         = ε_n² / | (2 * x_n) |
 498 |     |             //
 499 |     |             // For the first iteration, we have a special case where x_0 is known:
 500 |     |             // ε_1 = ε_0² / | (2 * x_0) |
 501 |     |             //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))
 502 |     |             //     ≤ 2**(2*e-4) / (3 * 2**(e-1))
 503 |     |             //     ≤ 2**(e-3) / 3
 504 |     |             //     ≤ 2**(e-3-log2(3))
 505 |     |             //     ≤ 2**(e-4.5)
 506 |     |             //
 507 |     |             // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:
 508 |     |             // ε_{n+1} = ε_n² / | (2 * x_n) |
 509 |     |             //         ≤ (2**(e-k))² / (2 * 2**(e-1))
 510 |     |             //         ≤ 2**(2*e-2*k) / 2**e
 511 |     |             //         ≤ 2**(e-2*k)
 512 |     |             xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above
 513 |     |             xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5
 514 |     |             xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9
 515 |     |             xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18
 516 |     |             xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36
 517 |     |             xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72
 518 |     | 
 519 |     |             // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision
 520 |     |             // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either
 521 |     |             // sqrt(a) or sqrt(a) + 1.
 522 |     |             return xn - SafeCast.toUint(xn > a / xn);
 523 |     |         }
 524 |     |     }
 525 |     | 
 526 |     |     /**
 527 |     |      * @dev Calculates sqrt(a), following the selected rounding direction.
 528 |     |      */
 529 |     |     function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
 530 |     |         unchecked {
 531 |     |             uint256 result = sqrt(a);
 532 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);
 533 |     |         }
 534 |     |     }
 535 |     | 
 536 |     |     /**
 537 |     |      * @dev Return the log in base 2 of a positive value rounded towards zero.
 538 |     |      * Returns 0 if given 0.
 539 |     |      */
 540 |     |     function log2(uint256 value) internal pure returns (uint256) {
 541 |     |         uint256 result = 0;
 542 |     |         uint256 exp;
 543 |     |         unchecked {
 544 |     |             exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);
 545 |     |             value >>= exp;
 546 |     |             result += exp;
 547 |     | 
 548 |     |             exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);
 549 |     |             value >>= exp;
 550 |     |             result += exp;
 551 |     | 
 552 |     |             exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);
 553 |     |             value >>= exp;
 554 |     |             result += exp;
 555 |     | 
 556 |     |             exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);
 557 |     |             value >>= exp;
 558 |     |             result += exp;
 559 |     | 
 560 |     |             exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);
 561 |     |             value >>= exp;
 562 |     |             result += exp;
 563 |     | 
 564 |     |             exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);
 565 |     |             value >>= exp;
 566 |     |             result += exp;
 567 |     | 
 568 |     |             exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);
 569 |     |             value >>= exp;
 570 |     |             result += exp;
 571 |     | 
 572 |     |             result += SafeCast.toUint(value > 1);
 573 |     |         }
 574 |     |         return result;
 575 |     |     }
 576 |     | 
 577 |     |     /**
 578 |     |      * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
 579 |     |      * Returns 0 if given 0.
 580 |     |      */
 581 |     |     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
 582 |     |         unchecked {
 583 |     |             uint256 result = log2(value);
 584 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);
 585 |     |         }
 586 |     |     }
 587 |     | 
 588 |     |     /**
 589 |     |      * @dev Return the log in base 10 of a positive value rounded towards zero.
 590 |     |      * Returns 0 if given 0.
 591 |     |      */
 592 |     |     function log10(uint256 value) internal pure returns (uint256) {
 593 |     |         uint256 result = 0;
 594 |     |         unchecked {
 595 |     |             if (value >= 10 ** 64) {
 596 |     |                 value /= 10 ** 64;
 597 |     |                 result += 64;
 598 |     |             }
 599 |     |             if (value >= 10 ** 32) {
 600 |     |                 value /= 10 ** 32;
 601 |     |                 result += 32;
 602 |     |             }
 603 |     |             if (value >= 10 ** 16) {
 604 |     |                 value /= 10 ** 16;
 605 |     |                 result += 16;
 606 |     |             }
 607 |     |             if (value >= 10 ** 8) {
 608 |     |                 value /= 10 ** 8;
 609 |     |                 result += 8;
 610 |     |             }
 611 |     |             if (value >= 10 ** 4) {
 612 |     |                 value /= 10 ** 4;
 613 |     |                 result += 4;
 614 |     |             }
 615 |     |             if (value >= 10 ** 2) {
 616 |     |                 value /= 10 ** 2;
 617 |     |                 result += 2;
 618 |     |             }
 619 |     |             if (value >= 10 ** 1) {
 620 |     |                 result += 1;
 621 |     |             }
 622 |     |         }
 623 |     |         return result;
 624 |     |     }
 625 |     | 
 626 |     |     /**
 627 |     |      * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
 628 |     |      * Returns 0 if given 0.
 629 |     |      */
 630 |     |     function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
 631 |     |         unchecked {
 632 |     |             uint256 result = log10(value);
 633 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);
 634 |     |         }
 635 |     |     }
 636 |     | 
 637 |     |     /**
 638 |     |      * @dev Return the log in base 256 of a positive value rounded towards zero.
 639 |     |      * Returns 0 if given 0.
 640 |     |      *
 641 |     |      * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
 642 |     |      */
 643 |     |     function log256(uint256 value) internal pure returns (uint256) {
 644 |     |         uint256 result = 0;
 645 |     |         uint256 isGt;
 646 |     |         unchecked {
 647 |     |             isGt = SafeCast.toUint(value > (1 << 128) - 1);
 648 |     |             value >>= isGt * 128;
 649 |     |             result += isGt * 16;
 650 |     | 
 651 |     |             isGt = SafeCast.toUint(value > (1 << 64) - 1);
 652 |     |             value >>= isGt * 64;
 653 |     |             result += isGt * 8;
 654 |     | 
 655 |     |             isGt = SafeCast.toUint(value > (1 << 32) - 1);
 656 |     |             value >>= isGt * 32;
 657 |     |             result += isGt * 4;
 658 |     | 
 659 |     |             isGt = SafeCast.toUint(value > (1 << 16) - 1);
 660 |     |             value >>= isGt * 16;
 661 |     |             result += isGt * 2;
 662 |     | 
 663 |     |             result += SafeCast.toUint(value > (1 << 8) - 1);
 664 |     |         }
 665 |     |         return result;
 666 |     |     }
 667 |     | 
 668 |     |     /**
 669 |     |      * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
 670 |     |      * Returns 0 if given 0.
 671 |     |      */
 672 |     |     function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
 673 |     |         unchecked {
 674 |     |             uint256 result = log256(value);
 675 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);
 676 |     |         }
 677 |     |     }
 678 |     | 
 679 |     |     /**
 680 |     |      * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
 681 |     |      */
 682 |     |     function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
 683 |     |         return uint8(rounding) % 2 == 1;
 684 |     |     }
 685 |     | }
 686 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol
    1 |     | // SPDX-License-Identifier: MIT
    2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)
    3 |     | // This file was procedurally generated from scripts/generate/templates/SafeCast.js.
    4 |     | 
    5 |     | pragma solidity ^0.8.20;
    6 |     | 
    7 |     | /**
    8 |     |  * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow
    9 |     |  * checks.
   10 |     |  *
   11 |     |  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
   12 |     |  * easily result in undesired exploitation or bugs, since developers usually
   13 |     |  * assume that overflows raise errors. `SafeCast` restores this intuition by
   14 |     |  * reverting the transaction when such an operation overflows.
   15 |     |  *
   16 |     |  * Using this library instead of the unchecked operations eliminates an entire
   17 |     |  * class of bugs, so it's recommended to use it always.
   18 |     |  */
   19 |     | library SafeCast {
   20 |     |     /**
   21 |     |      * @dev Value doesn't fit in an uint of `bits` size.
   22 |     |      */
   23 |     |     error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
   24 |     | 
   25 |     |     /**
   26 |     |      * @dev An int value doesn't fit in an uint of `bits` size.
   27 |     |      */
   28 |     |     error SafeCastOverflowedIntToUint(int256 value);
   29 |     | 
   30 |     |     /**
   31 |     |      * @dev Value doesn't fit in an int of `bits` size.
   32 |     |      */
   33 |     |     error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);
   34 |     | 
   35 |     |     /**
   36 |     |      * @dev An uint value doesn't fit in an int of `bits` size.
   37 |     |      */
   38 |     |     error SafeCastOverflowedUintToInt(uint256 value);
   39 |     | 
   40 |     |     /**
   41 |     |      * @dev Returns the downcasted uint248 from uint256, reverting on
   42 |     |      * overflow (when the input is greater than largest uint248).
   43 |     |      *
   44 |     |      * Counterpart to Solidity's `uint248` operator.
   45 |     |      *
   46 |     |      * Requirements:
   47 |     |      *
   48 |     |      * - input must fit into 248 bits
   49 |     |      */
   50 |     |     function toUint248(uint256 value) internal pure returns (uint248) {
   51 |     |         if (value > type(uint248).max) {
   52 |     |             revert SafeCastOverflowedUintDowncast(248, value);
   53 |     |         }
   54 |     |         return uint248(value);
   55 |     |     }
   56 |     | 
   57 |     |     /**
   58 |     |      * @dev Returns the downcasted uint240 from uint256, reverting on
   59 |     |      * overflow (when the input is greater than largest uint240).
   60 |     |      *
   61 |     |      * Counterpart to Solidity's `uint240` operator.
   62 |     |      *
   63 |     |      * Requirements:
   64 |     |      *
   65 |     |      * - input must fit into 240 bits
   66 |     |      */
   67 |     |     function toUint240(uint256 value) internal pure returns (uint240) {
   68 |     |         if (value > type(uint240).max) {
   69 |     |             revert SafeCastOverflowedUintDowncast(240, value);
   70 |     |         }
   71 |     |         return uint240(value);
   72 |     |     }
   73 |     | 
   74 |     |     /**
   75 |     |      * @dev Returns the downcasted uint232 from uint256, reverting on
   76 |     |      * overflow (when the input is greater than largest uint232).
   77 |     |      *
   78 |     |      * Counterpart to Solidity's `uint232` operator.
   79 |     |      *
   80 |     |      * Requirements:
   81 |     |      *
   82 |     |      * - input must fit into 232 bits
   83 |     |      */
   84 |     |     function toUint232(uint256 value) internal pure returns (uint232) {
   85 |     |         if (value > type(uint232).max) {
   86 |     |             revert SafeCastOverflowedUintDowncast(232, value);
   87 |     |         }
   88 |     |         return uint232(value);
   89 |     |     }
   90 |     | 
   91 |     |     /**
   92 |     |      * @dev Returns the downcasted uint224 from uint256, reverting on
   93 |     |      * overflow (when the input is greater than largest uint224).
   94 |     |      *
   95 |     |      * Counterpart to Solidity's `uint224` operator.
   96 |     |      *
   97 |     |      * Requirements:
   98 |     |      *
   99 |     |      * - input must fit into 224 bits
  100 |     |      */
  101 |     |     function toUint224(uint256 value) internal pure returns (uint224) {
  102 |     |         if (value > type(uint224).max) {
  103 |     |             revert SafeCastOverflowedUintDowncast(224, value);
  104 |     |         }
  105 |     |         return uint224(value);
  106 |     |     }
  107 |     | 
  108 |     |     /**
  109 |     |      * @dev Returns the downcasted uint216 from uint256, reverting on
  110 |     |      * overflow (when the input is greater than largest uint216).
  111 |     |      *
  112 |     |      * Counterpart to Solidity's `uint216` operator.
  113 |     |      *
  114 |     |      * Requirements:
  115 |     |      *
  116 |     |      * - input must fit into 216 bits
  117 |     |      */
  118 |     |     function toUint216(uint256 value) internal pure returns (uint216) {
  119 |     |         if (value > type(uint216).max) {
  120 |     |             revert SafeCastOverflowedUintDowncast(216, value);
  121 |     |         }
  122 |     |         return uint216(value);
  123 |     |     }
  124 |     | 
  125 |     |     /**
  126 |     |      * @dev Returns the downcasted uint208 from uint256, reverting on
  127 |     |      * overflow (when the input is greater than largest uint208).
  128 |     |      *
  129 |     |      * Counterpart to Solidity's `uint208` operator.
  130 |     |      *
  131 |     |      * Requirements:
  132 |     |      *
  133 |     |      * - input must fit into 208 bits
  134 |     |      */
  135 |     |     function toUint208(uint256 value) internal pure returns (uint208) {
  136 |     |         if (value > type(uint208).max) {
  137 |     |             revert SafeCastOverflowedUintDowncast(208, value);
  138 |     |         }
  139 |     |         return uint208(value);
  140 |     |     }
  141 |     | 
  142 |     |     /**
  143 |     |      * @dev Returns the downcasted uint200 from uint256, reverting on
  144 |     |      * overflow (when the input is greater than largest uint200).
  145 |     |      *
  146 |     |      * Counterpart to Solidity's `uint200` operator.
  147 |     |      *
  148 |     |      * Requirements:
  149 |     |      *
  150 |     |      * - input must fit into 200 bits
  151 |     |      */
  152 |     |     function toUint200(uint256 value) internal pure returns (uint200) {
  153 |     |         if (value > type(uint200).max) {
  154 |     |             revert SafeCastOverflowedUintDowncast(200, value);
  155 |     |         }
  156 |     |         return uint200(value);
  157 |     |     }
  158 |     | 
  159 |     |     /**
  160 |     |      * @dev Returns the downcasted uint192 from uint256, reverting on
  161 |     |      * overflow (when the input is greater than largest uint192).
  162 |     |      *
  163 |     |      * Counterpart to Solidity's `uint192` operator.
  164 |     |      *
  165 |     |      * Requirements:
  166 |     |      *
  167 |     |      * - input must fit into 192 bits
  168 |     |      */
  169 |     |     function toUint192(uint256 value) internal pure returns (uint192) {
  170 |     |         if (value > type(uint192).max) {
  171 |     |             revert SafeCastOverflowedUintDowncast(192, value);
  172 |     |         }
  173 |     |         return uint192(value);
  174 |     |     }
  175 |     | 
  176 |     |     /**
  177 |     |      * @dev Returns the downcasted uint184 from uint256, reverting on
  178 |     |      * overflow (when the input is greater than largest uint184).
  179 |     |      *
  180 |     |      * Counterpart to Solidity's `uint184` operator.
  181 |     |      *
  182 |     |      * Requirements:
  183 |     |      *
  184 |     |      * - input must fit into 184 bits
  185 |     |      */
  186 |     |     function toUint184(uint256 value) internal pure returns (uint184) {
  187 |     |         if (value > type(uint184).max) {
  188 |     |             revert SafeCastOverflowedUintDowncast(184, value);
  189 |     |         }
  190 |     |         return uint184(value);
  191 |     |     }
  192 |     | 
  193 |     |     /**
  194 |     |      * @dev Returns the downcasted uint176 from uint256, reverting on
  195 |     |      * overflow (when the input is greater than largest uint176).
  196 |     |      *
  197 |     |      * Counterpart to Solidity's `uint176` operator.
  198 |     |      *
  199 |     |      * Requirements:
  200 |     |      *
  201 |     |      * - input must fit into 176 bits
  202 |     |      */
  203 |     |     function toUint176(uint256 value) internal pure returns (uint176) {
  204 |     |         if (value > type(uint176).max) {
  205 |     |             revert SafeCastOverflowedUintDowncast(176, value);
  206 |     |         }
  207 |     |         return uint176(value);
  208 |     |     }
  209 |     | 
  210 |     |     /**
  211 |     |      * @dev Returns the downcasted uint168 from uint256, reverting on
  212 |     |      * overflow (when the input is greater than largest uint168).
  213 |     |      *
  214 |     |      * Counterpart to Solidity's `uint168` operator.
  215 |     |      *
  216 |     |      * Requirements:
  217 |     |      *
  218 |     |      * - input must fit into 168 bits
  219 |     |      */
  220 |     |     function toUint168(uint256 value) internal pure returns (uint168) {
  221 |     |         if (value > type(uint168).max) {
  222 |     |             revert SafeCastOverflowedUintDowncast(168, value);
  223 |     |         }
  224 |     |         return uint168(value);
  225 |     |     }
  226 |     | 
  227 |     |     /**
  228 |     |      * @dev Returns the downcasted uint160 from uint256, reverting on
  229 |     |      * overflow (when the input is greater than largest uint160).
  230 |     |      *
  231 |     |      * Counterpart to Solidity's `uint160` operator.
  232 |     |      *
  233 |     |      * Requirements:
  234 |     |      *
  235 |     |      * - input must fit into 160 bits
  236 |     |      */
  237 |     |     function toUint160(uint256 value) internal pure returns (uint160) {
  238 |     |         if (value > type(uint160).max) {
  239 |     |             revert SafeCastOverflowedUintDowncast(160, value);
  240 |     |         }
  241 |     |         return uint160(value);
  242 |     |     }
  243 |     | 
  244 |     |     /**
  245 |     |      * @dev Returns the downcasted uint152 from uint256, reverting on
  246 |     |      * overflow (when the input is greater than largest uint152).
  247 |     |      *
  248 |     |      * Counterpart to Solidity's `uint152` operator.
  249 |     |      *
  250 |     |      * Requirements:
  251 |     |      *
  252 |     |      * - input must fit into 152 bits
  253 |     |      */
  254 |     |     function toUint152(uint256 value) internal pure returns (uint152) {
  255 |     |         if (value > type(uint152).max) {
  256 |     |             revert SafeCastOverflowedUintDowncast(152, value);
  257 |     |         }
  258 |     |         return uint152(value);
  259 |     |     }
  260 |     | 
  261 |     |     /**
  262 |     |      * @dev Returns the downcasted uint144 from uint256, reverting on
  263 |     |      * overflow (when the input is greater than largest uint144).
  264 |     |      *
  265 |     |      * Counterpart to Solidity's `uint144` operator.
  266 |     |      *
  267 |     |      * Requirements:
  268 |     |      *
  269 |     |      * - input must fit into 144 bits
  270 |     |      */
  271 |     |     function toUint144(uint256 value) internal pure returns (uint144) {
  272 |     |         if (value > type(uint144).max) {
  273 |     |             revert SafeCastOverflowedUintDowncast(144, value);
  274 |     |         }
  275 |     |         return uint144(value);
  276 |     |     }
  277 |     | 
  278 |     |     /**
  279 |     |      * @dev Returns the downcasted uint136 from uint256, reverting on
  280 |     |      * overflow (when the input is greater than largest uint136).
  281 |     |      *
  282 |     |      * Counterpart to Solidity's `uint136` operator.
  283 |     |      *
  284 |     |      * Requirements:
  285 |     |      *
  286 |     |      * - input must fit into 136 bits
  287 |     |      */
  288 |     |     function toUint136(uint256 value) internal pure returns (uint136) {
  289 |     |         if (value > type(uint136).max) {
  290 |     |             revert SafeCastOverflowedUintDowncast(136, value);
  291 |     |         }
  292 |     |         return uint136(value);
  293 |     |     }
  294 |     | 
  295 |     |     /**
  296 |     |      * @dev Returns the downcasted uint128 from uint256, reverting on
  297 |     |      * overflow (when the input is greater than largest uint128).
  298 |     |      *
  299 |     |      * Counterpart to Solidity's `uint128` operator.
  300 |     |      *
  301 |     |      * Requirements:
  302 |     |      *
  303 |     |      * - input must fit into 128 bits
  304 |     |      */
  305 |     |     function toUint128(uint256 value) internal pure returns (uint128) {
  306 |     |         if (value > type(uint128).max) {
  307 |     |             revert SafeCastOverflowedUintDowncast(128, value);
  308 |     |         }
  309 |     |         return uint128(value);
  310 |     |     }
  311 |     | 
  312 |     |     /**
  313 |     |      * @dev Returns the downcasted uint120 from uint256, reverting on
  314 |     |      * overflow (when the input is greater than largest uint120).
  315 |     |      *
  316 |     |      * Counterpart to Solidity's `uint120` operator.
  317 |     |      *
  318 |     |      * Requirements:
  319 |     |      *
  320 |     |      * - input must fit into 120 bits
  321 |     |      */
  322 |     |     function toUint120(uint256 value) internal pure returns (uint120) {
  323 |     |         if (value > type(uint120).max) {
  324 |     |             revert SafeCastOverflowedUintDowncast(120, value);
  325 |     |         }
  326 |     |         return uint120(value);
  327 |     |     }
  328 |     | 
  329 |     |     /**
  330 |     |      * @dev Returns the downcasted uint112 from uint256, reverting on
  331 |     |      * overflow (when the input is greater than largest uint112).
  332 |     |      *
  333 |     |      * Counterpart to Solidity's `uint112` operator.
  334 |     |      *
  335 |     |      * Requirements:
  336 |     |      *
  337 |     |      * - input must fit into 112 bits
  338 |     |      */
  339 |     |     function toUint112(uint256 value) internal pure returns (uint112) {
  340 |     |         if (value > type(uint112).max) {
  341 |     |             revert SafeCastOverflowedUintDowncast(112, value);
  342 |     |         }
  343 |     |         return uint112(value);
  344 |     |     }
  345 |     | 
  346 |     |     /**
  347 |     |      * @dev Returns the downcasted uint104 from uint256, reverting on
  348 |     |      * overflow (when the input is greater than largest uint104).
  349 |     |      *
  350 |     |      * Counterpart to Solidity's `uint104` operator.
  351 |     |      *
  352 |     |      * Requirements:
  353 |     |      *
  354 |     |      * - input must fit into 104 bits
  355 |     |      */
  356 |     |     function toUint104(uint256 value) internal pure returns (uint104) {
  357 |     |         if (value > type(uint104).max) {
  358 |     |             revert SafeCastOverflowedUintDowncast(104, value);
  359 |     |         }
  360 |     |         return uint104(value);
  361 |     |     }
  362 |     | 
  363 |     |     /**
  364 |     |      * @dev Returns the downcasted uint96 from uint256, reverting on
  365 |     |      * overflow (when the input is greater than largest uint96).
  366 |     |      *
  367 |     |      * Counterpart to Solidity's `uint96` operator.
  368 |     |      *
  369 |     |      * Requirements:
  370 |     |      *
  371 |     |      * - input must fit into 96 bits
  372 |     |      */
  373 |     |     function toUint96(uint256 value) internal pure returns (uint96) {
  374 |     |         if (value > type(uint96).max) {
  375 |     |             revert SafeCastOverflowedUintDowncast(96, value);
  376 |     |         }
  377 |     |         return uint96(value);
  378 |     |     }
  379 |     | 
  380 |     |     /**
  381 |     |      * @dev Returns the downcasted uint88 from uint256, reverting on
  382 |     |      * overflow (when the input is greater than largest uint88).
  383 |     |      *
  384 |     |      * Counterpart to Solidity's `uint88` operator.
  385 |     |      *
  386 |     |      * Requirements:
  387 |     |      *
  388 |     |      * - input must fit into 88 bits
  389 |     |      */
  390 |     |     function toUint88(uint256 value) internal pure returns (uint88) {
  391 |     |         if (value > type(uint88).max) {
  392 |     |             revert SafeCastOverflowedUintDowncast(88, value);
  393 |     |         }
  394 |     |         return uint88(value);
  395 |     |     }
  396 |     | 
  397 |     |     /**
  398 |     |      * @dev Returns the downcasted uint80 from uint256, reverting on
  399 |     |      * overflow (when the input is greater than largest uint80).
  400 |     |      *
  401 |     |      * Counterpart to Solidity's `uint80` operator.
  402 |     |      *
  403 |     |      * Requirements:
  404 |     |      *
  405 |     |      * - input must fit into 80 bits
  406 |     |      */
  407 |     |     function toUint80(uint256 value) internal pure returns (uint80) {
  408 |     |         if (value > type(uint80).max) {
  409 |     |             revert SafeCastOverflowedUintDowncast(80, value);
  410 |     |         }
  411 |     |         return uint80(value);
  412 |     |     }
  413 |     | 
  414 |     |     /**
  415 |     |      * @dev Returns the downcasted uint72 from uint256, reverting on
  416 |     |      * overflow (when the input is greater than largest uint72).
  417 |     |      *
  418 |     |      * Counterpart to Solidity's `uint72` operator.
  419 |     |      *
  420 |     |      * Requirements:
  421 |     |      *
  422 |     |      * - input must fit into 72 bits
  423 |     |      */
  424 |     |     function toUint72(uint256 value) internal pure returns (uint72) {
  425 |     |         if (value > type(uint72).max) {
  426 |     |             revert SafeCastOverflowedUintDowncast(72, value);
  427 |     |         }
  428 |     |         return uint72(value);
  429 |     |     }
  430 |     | 
  431 |     |     /**
  432 |     |      * @dev Returns the downcasted uint64 from uint256, reverting on
  433 |     |      * overflow (when the input is greater than largest uint64).
  434 |     |      *
  435 |     |      * Counterpart to Solidity's `uint64` operator.
  436 |     |      *
  437 |     |      * Requirements:
  438 |     |      *
  439 |     |      * - input must fit into 64 bits
  440 |     |      */
  441 |     |     function toUint64(uint256 value) internal pure returns (uint64) {
  442 |     |         if (value > type(uint64).max) {
  443 |     |             revert SafeCastOverflowedUintDowncast(64, value);
  444 |     |         }
  445 |     |         return uint64(value);
  446 |     |     }
  447 |     | 
  448 |     |     /**
  449 |     |      * @dev Returns the downcasted uint56 from uint256, reverting on
  450 |     |      * overflow (when the input is greater than largest uint56).
  451 |     |      *
  452 |     |      * Counterpart to Solidity's `uint56` operator.
  453 |     |      *
  454 |     |      * Requirements:
  455 |     |      *
  456 |     |      * - input must fit into 56 bits
  457 |     |      */
  458 |     |     function toUint56(uint256 value) internal pure returns (uint56) {
  459 |     |         if (value > type(uint56).max) {
  460 |     |             revert SafeCastOverflowedUintDowncast(56, value);
  461 |     |         }
  462 |     |         return uint56(value);
  463 |     |     }
  464 |     | 
  465 |     |     /**
  466 |     |      * @dev Returns the downcasted uint48 from uint256, reverting on
  467 |     |      * overflow (when the input is greater than largest uint48).
  468 |     |      *
  469 |     |      * Counterpart to Solidity's `uint48` operator.
  470 |     |      *
  471 |     |      * Requirements:
  472 |     |      *
  473 |     |      * - input must fit into 48 bits
  474 |     |      */
  475 |     |     function toUint48(uint256 value) internal pure returns (uint48) {
  476 |     |         if (value > type(uint48).max) {
  477 |     |             revert SafeCastOverflowedUintDowncast(48, value);
  478 |     |         }
  479 |     |         return uint48(value);
  480 |     |     }
  481 |     | 
  482 |     |     /**
  483 |     |      * @dev Returns the downcasted uint40 from uint256, reverting on
  484 |     |      * overflow (when the input is greater than largest uint40).
  485 |     |      *
  486 |     |      * Counterpart to Solidity's `uint40` operator.
  487 |     |      *
  488 |     |      * Requirements:
  489 |     |      *
  490 |     |      * - input must fit into 40 bits
  491 |     |      */
  492 |     |     function toUint40(uint256 value) internal pure returns (uint40) {
  493 |     |         if (value > type(uint40).max) {
  494 |     |             revert SafeCastOverflowedUintDowncast(40, value);
  495 |     |         }
  496 |     |         return uint40(value);
  497 |     |     }
  498 |     | 
  499 |     |     /**
  500 |     |      * @dev Returns the downcasted uint32 from uint256, reverting on
  501 |     |      * overflow (when the input is greater than largest uint32).
  502 |     |      *
  503 |     |      * Counterpart to Solidity's `uint32` operator.
  504 |     |      *
  505 |     |      * Requirements:
  506 |     |      *
  507 |     |      * - input must fit into 32 bits
  508 |     |      */
  509 |     |     function toUint32(uint256 value) internal pure returns (uint32) {
  510 |     |         if (value > type(uint32).max) {
  511 |     |             revert SafeCastOverflowedUintDowncast(32, value);
  512 |     |         }
  513 |     |         return uint32(value);
  514 |     |     }
  515 |     | 
  516 |     |     /**
  517 |     |      * @dev Returns the downcasted uint24 from uint256, reverting on
  518 |     |      * overflow (when the input is greater than largest uint24).
  519 |     |      *
  520 |     |      * Counterpart to Solidity's `uint24` operator.
  521 |     |      *
  522 |     |      * Requirements:
  523 |     |      *
  524 |     |      * - input must fit into 24 bits
  525 |     |      */
  526 |     |     function toUint24(uint256 value) internal pure returns (uint24) {
  527 |     |         if (value > type(uint24).max) {
  528 |     |             revert SafeCastOverflowedUintDowncast(24, value);
  529 |     |         }
  530 |     |         return uint24(value);
  531 |     |     }
  532 |     | 
  533 |     |     /**
  534 |     |      * @dev Returns the downcasted uint16 from uint256, reverting on
  535 |     |      * overflow (when the input is greater than largest uint16).
  536 |     |      *
  537 |     |      * Counterpart to Solidity's `uint16` operator.
  538 |     |      *
  539 |     |      * Requirements:
  540 |     |      *
  541 |     |      * - input must fit into 16 bits
  542 |     |      */
  543 |     |     function toUint16(uint256 value) internal pure returns (uint16) {
  544 |     |         if (value > type(uint16).max) {
  545 |     |             revert SafeCastOverflowedUintDowncast(16, value);
  546 |     |         }
  547 |     |         return uint16(value);
  548 |     |     }
  549 |     | 
  550 |     |     /**
  551 |     |      * @dev Returns the downcasted uint8 from uint256, reverting on
  552 |     |      * overflow (when the input is greater than largest uint8).
  553 |     |      *
  554 |     |      * Counterpart to Solidity's `uint8` operator.
  555 |     |      *
  556 |     |      * Requirements:
  557 |     |      *
  558 |     |      * - input must fit into 8 bits
  559 |     |      */
  560 |     |     function toUint8(uint256 value) internal pure returns (uint8) {
  561 |     |         if (value > type(uint8).max) {
  562 |     |             revert SafeCastOverflowedUintDowncast(8, value);
  563 |     |         }
  564 |     |         return uint8(value);
  565 |     |     }
  566 |     | 
  567 |     |     /**
  568 |     |      * @dev Converts a signed int256 into an unsigned uint256.
  569 |     |      *
  570 |     |      * Requirements:
  571 |     |      *
  572 |     |      * - input must be greater than or equal to 0.
  573 |     |      */
  574 |     |     function toUint256(int256 value) internal pure returns (uint256) {
  575 |     |         if (value < 0) {
  576 |     |             revert SafeCastOverflowedIntToUint(value);
  577 |     |         }
  578 |     |         return uint256(value);
  579 |     |     }
  580 |     | 
  581 |     |     /**
  582 |     |      * @dev Returns the downcasted int248 from int256, reverting on
  583 |     |      * overflow (when the input is less than smallest int248 or
  584 |     |      * greater than largest int248).
  585 |     |      *
  586 |     |      * Counterpart to Solidity's `int248` operator.
  587 |     |      *
  588 |     |      * Requirements:
  589 |     |      *
  590 |     |      * - input must fit into 248 bits
  591 |     |      */
  592 |     |     function toInt248(int256 value) internal pure returns (int248 downcasted) {
  593 |     |         downcasted = int248(value);
  594 |     |         if (downcasted != value) {
  595 |     |             revert SafeCastOverflowedIntDowncast(248, value);
  596 |     |         }
  597 |     |     }
  598 |     | 
  599 |     |     /**
  600 |     |      * @dev Returns the downcasted int240 from int256, reverting on
  601 |     |      * overflow (when the input is less than smallest int240 or
  602 |     |      * greater than largest int240).
  603 |     |      *
  604 |     |      * Counterpart to Solidity's `int240` operator.
  605 |     |      *
  606 |     |      * Requirements:
  607 |     |      *
  608 |     |      * - input must fit into 240 bits
  609 |     |      */
  610 |     |     function toInt240(int256 value) internal pure returns (int240 downcasted) {
  611 |     |         downcasted = int240(value);
  612 |     |         if (downcasted != value) {
  613 |     |             revert SafeCastOverflowedIntDowncast(240, value);
  614 |     |         }
  615 |     |     }
  616 |     | 
  617 |     |     /**
  618 |     |      * @dev Returns the downcasted int232 from int256, reverting on
  619 |     |      * overflow (when the input is less than smallest int232 or
  620 |     |      * greater than largest int232).
  621 |     |      *
  622 |     |      * Counterpart to Solidity's `int232` operator.
  623 |     |      *
  624 |     |      * Requirements:
  625 |     |      *
  626 |     |      * - input must fit into 232 bits
  627 |     |      */
  628 |     |     function toInt232(int256 value) internal pure returns (int232 downcasted) {
  629 |     |         downcasted = int232(value);
  630 |     |         if (downcasted != value) {
  631 |     |             revert SafeCastOverflowedIntDowncast(232, value);
  632 |     |         }
  633 |     |     }
  634 |     | 
  635 |     |     /**
  636 |     |      * @dev Returns the downcasted int224 from int256, reverting on
  637 |     |      * overflow (when the input is less than smallest int224 or
  638 |     |      * greater than largest int224).
  639 |     |      *
  640 |     |      * Counterpart to Solidity's `int224` operator.
  641 |     |      *
  642 |     |      * Requirements:
  643 |     |      *
  644 |     |      * - input must fit into 224 bits
  645 |     |      */
  646 |     |     function toInt224(int256 value) internal pure returns (int224 downcasted) {
  647 |     |         downcasted = int224(value);
  648 |     |         if (downcasted != value) {
  649 |     |             revert SafeCastOverflowedIntDowncast(224, value);
  650 |     |         }
  651 |     |     }
  652 |     | 
  653 |     |     /**
  654 |     |      * @dev Returns the downcasted int216 from int256, reverting on
  655 |     |      * overflow (when the input is less than smallest int216 or
  656 |     |      * greater than largest int216).
  657 |     |      *
  658 |     |      * Counterpart to Solidity's `int216` operator.
  659 |     |      *
  660 |     |      * Requirements:
  661 |     |      *
  662 |     |      * - input must fit into 216 bits
  663 |     |      */
  664 |     |     function toInt216(int256 value) internal pure returns (int216 downcasted) {
  665 |     |         downcasted = int216(value);
  666 |     |         if (downcasted != value) {
  667 |     |             revert SafeCastOverflowedIntDowncast(216, value);
  668 |     |         }
  669 |     |     }
  670 |     | 
  671 |     |     /**
  672 |     |      * @dev Returns the downcasted int208 from int256, reverting on
  673 |     |      * overflow (when the input is less than smallest int208 or
  674 |     |      * greater than largest int208).
  675 |     |      *
  676 |     |      * Counterpart to Solidity's `int208` operator.
  677 |     |      *
  678 |     |      * Requirements:
  679 |     |      *
  680 |     |      * - input must fit into 208 bits
  681 |     |      */
  682 |     |     function toInt208(int256 value) internal pure returns (int208 downcasted) {
  683 |     |         downcasted = int208(value);
  684 |     |         if (downcasted != value) {
  685 |     |             revert SafeCastOverflowedIntDowncast(208, value);
  686 |     |         }
  687 |     |     }
  688 |     | 
  689 |     |     /**
  690 |     |      * @dev Returns the downcasted int200 from int256, reverting on
  691 |     |      * overflow (when the input is less than smallest int200 or
  692 |     |      * greater than largest int200).
  693 |     |      *
  694 |     |      * Counterpart to Solidity's `int200` operator.
  695 |     |      *
  696 |     |      * Requirements:
  697 |     |      *
  698 |     |      * - input must fit into 200 bits
  699 |     |      */
  700 |     |     function toInt200(int256 value) internal pure returns (int200 downcasted) {
  701 |     |         downcasted = int200(value);
  702 |     |         if (downcasted != value) {
  703 |     |             revert SafeCastOverflowedIntDowncast(200, value);
  704 |     |         }
  705 |     |     }
  706 |     | 
  707 |     |     /**
  708 |     |      * @dev Returns the downcasted int192 from int256, reverting on
  709 |     |      * overflow (when the input is less than smallest int192 or
  710 |     |      * greater than largest int192).
  711 |     |      *
  712 |     |      * Counterpart to Solidity's `int192` operator.
  713 |     |      *
  714 |     |      * Requirements:
  715 |     |      *
  716 |     |      * - input must fit into 192 bits
  717 |     |      */
  718 |     |     function toInt192(int256 value) internal pure returns (int192 downcasted) {
  719 |     |         downcasted = int192(value);
  720 |     |         if (downcasted != value) {
  721 |     |             revert SafeCastOverflowedIntDowncast(192, value);
  722 |     |         }
  723 |     |     }
  724 |     | 
  725 |     |     /**
  726 |     |      * @dev Returns the downcasted int184 from int256, reverting on
  727 |     |      * overflow (when the input is less than smallest int184 or
  728 |     |      * greater than largest int184).
  729 |     |      *
  730 |     |      * Counterpart to Solidity's `int184` operator.
  731 |     |      *
  732 |     |      * Requirements:
  733 |     |      *
  734 |     |      * - input must fit into 184 bits
  735 |     |      */
  736 |     |     function toInt184(int256 value) internal pure returns (int184 downcasted) {
  737 |     |         downcasted = int184(value);
  738 |     |         if (downcasted != value) {
  739 |     |             revert SafeCastOverflowedIntDowncast(184, value);
  740 |     |         }
  741 |     |     }
  742 |     | 
  743 |     |     /**
  744 |     |      * @dev Returns the downcasted int176 from int256, reverting on
  745 |     |      * overflow (when the input is less than smallest int176 or
  746 |     |      * greater than largest int176).
  747 |     |      *
  748 |     |      * Counterpart to Solidity's `int176` operator.
  749 |     |      *
  750 |     |      * Requirements:
  751 |     |      *
  752 |     |      * - input must fit into 176 bits
  753 |     |      */
  754 |     |     function toInt176(int256 value) internal pure returns (int176 downcasted) {
  755 |     |         downcasted = int176(value);
  756 |     |         if (downcasted != value) {
  757 |     |             revert SafeCastOverflowedIntDowncast(176, value);
  758 |     |         }
  759 |     |     }
  760 |     | 
  761 |     |     /**
  762 |     |      * @dev Returns the downcasted int168 from int256, reverting on
  763 |     |      * overflow (when the input is less than smallest int168 or
  764 |     |      * greater than largest int168).
  765 |     |      *
  766 |     |      * Counterpart to Solidity's `int168` operator.
  767 |     |      *
  768 |     |      * Requirements:
  769 |     |      *
  770 |     |      * - input must fit into 168 bits
  771 |     |      */
  772 |     |     function toInt168(int256 value) internal pure returns (int168 downcasted) {
  773 |     |         downcasted = int168(value);
  774 |     |         if (downcasted != value) {
  775 |     |             revert SafeCastOverflowedIntDowncast(168, value);
  776 |     |         }
  777 |     |     }
  778 |     | 
  779 |     |     /**
  780 |     |      * @dev Returns the downcasted int160 from int256, reverting on
  781 |     |      * overflow (when the input is less than smallest int160 or
  782 |     |      * greater than largest int160).
  783 |     |      *
  784 |     |      * Counterpart to Solidity's `int160` operator.
  785 |     |      *
  786 |     |      * Requirements:
  787 |     |      *
  788 |     |      * - input must fit into 160 bits
  789 |     |      */
  790 |     |     function toInt160(int256 value) internal pure returns (int160 downcasted) {
  791 |     |         downcasted = int160(value);
  792 |     |         if (downcasted != value) {
  793 |     |             revert SafeCastOverflowedIntDowncast(160, value);
  794 |     |         }
  795 |     |     }
  796 |     | 
  797 |     |     /**
  798 |     |      * @dev Returns the downcasted int152 from int256, reverting on
  799 |     |      * overflow (when the input is less than smallest int152 or
  800 |     |      * greater than largest int152).
  801 |     |      *
  802 |     |      * Counterpart to Solidity's `int152` operator.
  803 |     |      *
  804 |     |      * Requirements:
  805 |     |      *
  806 |     |      * - input must fit into 152 bits
  807 |     |      */
  808 |     |     function toInt152(int256 value) internal pure returns (int152 downcasted) {
  809 |     |         downcasted = int152(value);
  810 |     |         if (downcasted != value) {
  811 |     |             revert SafeCastOverflowedIntDowncast(152, value);
  812 |     |         }
  813 |     |     }
  814 |     | 
  815 |     |     /**
  816 |     |      * @dev Returns the downcasted int144 from int256, reverting on
  817 |     |      * overflow (when the input is less than smallest int144 or
  818 |     |      * greater than largest int144).
  819 |     |      *
  820 |     |      * Counterpart to Solidity's `int144` operator.
  821 |     |      *
  822 |     |      * Requirements:
  823 |     |      *
  824 |     |      * - input must fit into 144 bits
  825 |     |      */
  826 |     |     function toInt144(int256 value) internal pure returns (int144 downcasted) {
  827 |     |         downcasted = int144(value);
  828 |     |         if (downcasted != value) {
  829 |     |             revert SafeCastOverflowedIntDowncast(144, value);
  830 |     |         }
  831 |     |     }
  832 |     | 
  833 |     |     /**
  834 |     |      * @dev Returns the downcasted int136 from int256, reverting on
  835 |     |      * overflow (when the input is less than smallest int136 or
  836 |     |      * greater than largest int136).
  837 |     |      *
  838 |     |      * Counterpart to Solidity's `int136` operator.
  839 |     |      *
  840 |     |      * Requirements:
  841 |     |      *
  842 |     |      * - input must fit into 136 bits
  843 |     |      */
  844 |     |     function toInt136(int256 value) internal pure returns (int136 downcasted) {
  845 |     |         downcasted = int136(value);
  846 |     |         if (downcasted != value) {
  847 |     |             revert SafeCastOverflowedIntDowncast(136, value);
  848 |     |         }
  849 |     |     }
  850 |     | 
  851 |     |     /**
  852 |     |      * @dev Returns the downcasted int128 from int256, reverting on
  853 |     |      * overflow (when the input is less than smallest int128 or
  854 |     |      * greater than largest int128).
  855 |     |      *
  856 |     |      * Counterpart to Solidity's `int128` operator.
  857 |     |      *
  858 |     |      * Requirements:
  859 |     |      *
  860 |     |      * - input must fit into 128 bits
  861 |     |      */
  862 |     |     function toInt128(int256 value) internal pure returns (int128 downcasted) {
  863 |     |         downcasted = int128(value);
  864 |     |         if (downcasted != value) {
  865 |     |             revert SafeCastOverflowedIntDowncast(128, value);
  866 |     |         }
  867 |     |     }
  868 |     | 
  869 |     |     /**
  870 |     |      * @dev Returns the downcasted int120 from int256, reverting on
  871 |     |      * overflow (when the input is less than smallest int120 or
  872 |     |      * greater than largest int120).
  873 |     |      *
  874 |     |      * Counterpart to Solidity's `int120` operator.
  875 |     |      *
  876 |     |      * Requirements:
  877 |     |      *
  878 |     |      * - input must fit into 120 bits
  879 |     |      */
  880 |     |     function toInt120(int256 value) internal pure returns (int120 downcasted) {
  881 |     |         downcasted = int120(value);
  882 |     |         if (downcasted != value) {
  883 |     |             revert SafeCastOverflowedIntDowncast(120, value);
  884 |     |         }
  885 |     |     }
  886 |     | 
  887 |     |     /**
  888 |     |      * @dev Returns the downcasted int112 from int256, reverting on
  889 |     |      * overflow (when the input is less than smallest int112 or
  890 |     |      * greater than largest int112).
  891 |     |      *
  892 |     |      * Counterpart to Solidity's `int112` operator.
  893 |     |      *
  894 |     |      * Requirements:
  895 |     |      *
  896 |     |      * - input must fit into 112 bits
  897 |     |      */
  898 |     |     function toInt112(int256 value) internal pure returns (int112 downcasted) {
  899 |     |         downcasted = int112(value);
  900 |     |         if (downcasted != value) {
  901 |     |             revert SafeCastOverflowedIntDowncast(112, value);
  902 |     |         }
  903 |     |     }
  904 |     | 
  905 |     |     /**
  906 |     |      * @dev Returns the downcasted int104 from int256, reverting on
  907 |     |      * overflow (when the input is less than smallest int104 or
  908 |     |      * greater than largest int104).
  909 |     |      *
  910 |     |      * Counterpart to Solidity's `int104` operator.
  911 |     |      *
  912 |     |      * Requirements:
  913 |     |      *
  914 |     |      * - input must fit into 104 bits
  915 |     |      */
  916 |     |     function toInt104(int256 value) internal pure returns (int104 downcasted) {
  917 |     |         downcasted = int104(value);
  918 |     |         if (downcasted != value) {
  919 |     |             revert SafeCastOverflowedIntDowncast(104, value);
  920 |     |         }
  921 |     |     }
  922 |     | 
  923 |     |     /**
  924 |     |      * @dev Returns the downcasted int96 from int256, reverting on
  925 |     |      * overflow (when the input is less than smallest int96 or
  926 |     |      * greater than largest int96).
  927 |     |      *
  928 |     |      * Counterpart to Solidity's `int96` operator.
  929 |     |      *
  930 |     |      * Requirements:
  931 |     |      *
  932 |     |      * - input must fit into 96 bits
  933 |     |      */
  934 |     |     function toInt96(int256 value) internal pure returns (int96 downcasted) {
  935 |     |         downcasted = int96(value);
  936 |     |         if (downcasted != value) {
  937 |     |             revert SafeCastOverflowedIntDowncast(96, value);
  938 |     |         }
  939 |     |     }
  940 |     | 
  941 |     |     /**
  942 |     |      * @dev Returns the downcasted int88 from int256, reverting on
  943 |     |      * overflow (when the input is less than smallest int88 or
  944 |     |      * greater than largest int88).
  945 |     |      *
  946 |     |      * Counterpart to Solidity's `int88` operator.
  947 |     |      *
  948 |     |      * Requirements:
  949 |     |      *
  950 |     |      * - input must fit into 88 bits
  951 |     |      */
  952 |     |     function toInt88(int256 value) internal pure returns (int88 downcasted) {
  953 |     |         downcasted = int88(value);
  954 |     |         if (downcasted != value) {
  955 |     |             revert SafeCastOverflowedIntDowncast(88, value);
  956 |     |         }
  957 |     |     }
  958 |     | 
  959 |     |     /**
  960 |     |      * @dev Returns the downcasted int80 from int256, reverting on
  961 |     |      * overflow (when the input is less than smallest int80 or
  962 |     |      * greater than largest int80).
  963 |     |      *
  964 |     |      * Counterpart to Solidity's `int80` operator.
  965 |     |      *
  966 |     |      * Requirements:
  967 |     |      *
  968 |     |      * - input must fit into 80 bits
  969 |     |      */
  970 |     |     function toInt80(int256 value) internal pure returns (int80 downcasted) {
  971 |     |         downcasted = int80(value);
  972 |     |         if (downcasted != value) {
  973 |     |             revert SafeCastOverflowedIntDowncast(80, value);
  974 |     |         }
  975 |     |     }
  976 |     | 
  977 |     |     /**
  978 |     |      * @dev Returns the downcasted int72 from int256, reverting on
  979 |     |      * overflow (when the input is less than smallest int72 or
  980 |     |      * greater than largest int72).
  981 |     |      *
  982 |     |      * Counterpart to Solidity's `int72` operator.
  983 |     |      *
  984 |     |      * Requirements:
  985 |     |      *
  986 |     |      * - input must fit into 72 bits
  987 |     |      */
  988 |     |     function toInt72(int256 value) internal pure returns (int72 downcasted) {
  989 |     |         downcasted = int72(value);
  990 |     |         if (downcasted != value) {
  991 |     |             revert SafeCastOverflowedIntDowncast(72, value);
  992 |     |         }
  993 |     |     }
  994 |     | 
  995 |     |     /**
  996 |     |      * @dev Returns the downcasted int64 from int256, reverting on
  997 |     |      * overflow (when the input is less than smallest int64 or
  998 |     |      * greater than largest int64).
  999 |     |      *
 1000 |     |      * Counterpart to Solidity's `int64` operator.
 1001 |     |      *
 1002 |     |      * Requirements:
 1003 |     |      *
 1004 |     |      * - input must fit into 64 bits
 1005 |     |      */
 1006 |     |     function toInt64(int256 value) internal pure returns (int64 downcasted) {
 1007 |     |         downcasted = int64(value);
 1008 |     |         if (downcasted != value) {
 1009 |     |             revert SafeCastOverflowedIntDowncast(64, value);
 1010 |     |         }
 1011 |     |     }
 1012 |     | 
 1013 |     |     /**
 1014 |     |      * @dev Returns the downcasted int56 from int256, reverting on
 1015 |     |      * overflow (when the input is less than smallest int56 or
 1016 |     |      * greater than largest int56).
 1017 |     |      *
 1018 |     |      * Counterpart to Solidity's `int56` operator.
 1019 |     |      *
 1020 |     |      * Requirements:
 1021 |     |      *
 1022 |     |      * - input must fit into 56 bits
 1023 |     |      */
 1024 |     |     function toInt56(int256 value) internal pure returns (int56 downcasted) {
 1025 |     |         downcasted = int56(value);
 1026 |     |         if (downcasted != value) {
 1027 |     |             revert SafeCastOverflowedIntDowncast(56, value);
 1028 |     |         }
 1029 |     |     }
 1030 |     | 
 1031 |     |     /**
 1032 |     |      * @dev Returns the downcasted int48 from int256, reverting on
 1033 |     |      * overflow (when the input is less than smallest int48 or
 1034 |     |      * greater than largest int48).
 1035 |     |      *
 1036 |     |      * Counterpart to Solidity's `int48` operator.
 1037 |     |      *
 1038 |     |      * Requirements:
 1039 |     |      *
 1040 |     |      * - input must fit into 48 bits
 1041 |     |      */
 1042 |     |     function toInt48(int256 value) internal pure returns (int48 downcasted) {
 1043 |     |         downcasted = int48(value);
 1044 |     |         if (downcasted != value) {
 1045 |     |             revert SafeCastOverflowedIntDowncast(48, value);
 1046 |     |         }
 1047 |     |     }
 1048 |     | 
 1049 |     |     /**
 1050 |     |      * @dev Returns the downcasted int40 from int256, reverting on
 1051 |     |      * overflow (when the input is less than smallest int40 or
 1052 |     |      * greater than largest int40).
 1053 |     |      *
 1054 |     |      * Counterpart to Solidity's `int40` operator.
 1055 |     |      *
 1056 |     |      * Requirements:
 1057 |     |      *
 1058 |     |      * - input must fit into 40 bits
 1059 |     |      */
 1060 |     |     function toInt40(int256 value) internal pure returns (int40 downcasted) {
 1061 |     |         downcasted = int40(value);
 1062 |     |         if (downcasted != value) {
 1063 |     |             revert SafeCastOverflowedIntDowncast(40, value);
 1064 |     |         }
 1065 |     |     }
 1066 |     | 
 1067 |     |     /**
 1068 |     |      * @dev Returns the downcasted int32 from int256, reverting on
 1069 |     |      * overflow (when the input is less than smallest int32 or
 1070 |     |      * greater than largest int32).
 1071 |     |      *
 1072 |     |      * Counterpart to Solidity's `int32` operator.
 1073 |     |      *
 1074 |     |      * Requirements:
 1075 |     |      *
 1076 |     |      * - input must fit into 32 bits
 1077 |     |      */
 1078 |     |     function toInt32(int256 value) internal pure returns (int32 downcasted) {
 1079 |     |         downcasted = int32(value);
 1080 |     |         if (downcasted != value) {
 1081 |     |             revert SafeCastOverflowedIntDowncast(32, value);
 1082 |     |         }
 1083 |     |     }
 1084 |     | 
 1085 |     |     /**
 1086 |     |      * @dev Returns the downcasted int24 from int256, reverting on
 1087 |     |      * overflow (when the input is less than smallest int24 or
 1088 |     |      * greater than largest int24).
 1089 |     |      *
 1090 |     |      * Counterpart to Solidity's `int24` operator.
 1091 |     |      *
 1092 |     |      * Requirements:
 1093 |     |      *
 1094 |     |      * - input must fit into 24 bits
 1095 |     |      */
 1096 |     |     function toInt24(int256 value) internal pure returns (int24 downcasted) {
 1097 |     |         downcasted = int24(value);
 1098 |     |         if (downcasted != value) {
 1099 |     |             revert SafeCastOverflowedIntDowncast(24, value);
 1100 |     |         }
 1101 |     |     }
 1102 |     | 
 1103 |     |     /**
 1104 |     |      * @dev Returns the downcasted int16 from int256, reverting on
 1105 |     |      * overflow (when the input is less than smallest int16 or
 1106 |     |      * greater than largest int16).
 1107 |     |      *
 1108 |     |      * Counterpart to Solidity's `int16` operator.
 1109 |     |      *
 1110 |     |      * Requirements:
 1111 |     |      *
 1112 |     |      * - input must fit into 16 bits
 1113 |     |      */
 1114 |     |     function toInt16(int256 value) internal pure returns (int16 downcasted) {
 1115 |     |         downcasted = int16(value);
 1116 |     |         if (downcasted != value) {
 1117 |     |             revert SafeCastOverflowedIntDowncast(16, value);
 1118 |     |         }
 1119 |     |     }
 1120 |     | 
 1121 |     |     /**
 1122 |     |      * @dev Returns the downcasted int8 from int256, reverting on
 1123 |     |      * overflow (when the input is less than smallest int8 or
 1124 |     |      * greater than largest int8).
 1125 |     |      *
 1126 |     |      * Counterpart to Solidity's `int8` operator.
 1127 |     |      *
 1128 |     |      * Requirements:
 1129 |     |      *
 1130 |     |      * - input must fit into 8 bits
 1131 |     |      */
 1132 |     |     function toInt8(int256 value) internal pure returns (int8 downcasted) {
 1133 |     |         downcasted = int8(value);
 1134 |     |         if (downcasted != value) {
 1135 |     |             revert SafeCastOverflowedIntDowncast(8, value);
 1136 |     |         }
 1137 |     |     }
 1138 |     | 
 1139 |     |     /**
 1140 |     |      * @dev Converts an unsigned uint256 into a signed int256.
 1141 |     |      *
 1142 |     |      * Requirements:
 1143 |     |      *
 1144 |     |      * - input must be less than or equal to maxInt256.
 1145 |     |      */
 1146 |     |     function toInt256(uint256 value) internal pure returns (int256) {
 1147 |     |         // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
 1148 |     |         if (value > uint256(type(int256).max)) {
 1149 |     |             revert SafeCastOverflowedUintToInt(value);
 1150 |     |         }
 1151 |     |         return int256(value);
 1152 |     |     }
 1153 |     | 
 1154 |     |     /**
 1155 |     |      * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.
 1156 |     |      */
 1157 |     |     function toUint(bool b) internal pure returns (uint256 u) {
 1158 |     |         assembly ("memory-safe") {
 1159 |     |             u := iszero(iszero(b))
 1160 |     |         }
 1161 |     |     }
 1162 |     | }
 1163 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {SafeCast} from "./SafeCast.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Standard signed math utilities missing in the Solidity language.
 10 |     |  */
 11 |     | library SignedMath {
 12 |     |     /**
 13 |     |      * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.
 14 |     |      *
 15 |     |      * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
 16 |     |      * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute
 17 |     |      * one branch when needed, making this function more expensive.
 18 |     |      */
 19 |     |     function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {
 20 |     |         unchecked {
 21 |     |             // branchless ternary works because:
 22 |     |             // b ^ (a ^ b) == a
 23 |     |             // b ^ 0 == b
 24 |     |             return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));
 25 |     |         }
 26 |     |     }
 27 |     | 
 28 |     |     /**
 29 |     |      * @dev Returns the largest of two signed numbers.
 30 |     |      */
 31 |     |     function max(int256 a, int256 b) internal pure returns (int256) {
 32 |     |         return ternary(a > b, a, b);
 33 |     |     }
 34 |     | 
 35 |     |     /**
 36 |     |      * @dev Returns the smallest of two signed numbers.
 37 |     |      */
 38 |     |     function min(int256 a, int256 b) internal pure returns (int256) {
 39 |     |         return ternary(a < b, a, b);
 40 |     |     }
 41 |     | 
 42 |     |     /**
 43 |     |      * @dev Returns the average of two signed numbers without overflow.
 44 |     |      * The result is rounded towards zero.
 45 |     |      */
 46 |     |     function average(int256 a, int256 b) internal pure returns (int256) {
 47 |     |         // Formula from the book "Hacker's Delight"
 48 |     |         int256 x = (a & b) + ((a ^ b) >> 1);
 49 |     |         return x + (int256(uint256(x) >> 255) & (a ^ b));
 50 |     |     }
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Returns the absolute unsigned value of a signed value.
 54 |     |      */
 55 |     |     function abs(int256 n) internal pure returns (uint256) {
 56 |     |         unchecked {
 57 |     |             // Formula from the "Bit Twiddling Hacks" by Sean Eron Anderson.
 58 |     |             // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,
 59 |     |             // taking advantage of the most significant (or "sign" bit) in two's complement representation.
 60 |     |             // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,
 61 |     |             // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).
 62 |     |             int256 mask = n >> 255;
 63 |     | 
 64 |     |             // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.
 65 |     |             return uint256((n + mask) ^ mask);
 66 |     |         }
 67 |     |     }
 68 |     | }
 69 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)
   3 |     | // This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.
   4 |     | 
   5 |     | pragma solidity ^0.8.20;
   6 |     | 
   7 |     | /**
   8 |     |  * @dev Library for managing
   9 |     |  * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
  10 |     |  * types.
  11 |     |  *
  12 |     |  * Sets have the following properties:
  13 |     |  *
  14 |     |  * - Elements are added, removed, and checked for existence in constant time
  15 |     |  * (O(1)).
  16 |     |  * - Elements are enumerated in O(n). No guarantees are made on the ordering.
  17 |     |  *
  18 |     |  * ```solidity
  19 |     |  * contract Example {
  20 |     |  *     // Add the library methods
  21 |     |  *     using EnumerableSet for EnumerableSet.AddressSet;
  22 |     |  *
  23 |     |  *     // Declare a set state variable
  24 |     |  *     EnumerableSet.AddressSet private mySet;
  25 |     |  * }
  26 |     |  * ```
  27 |     |  *
  28 |     |  * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
  29 |     |  * and `uint256` (`UintSet`) are supported.
  30 |     |  *
  31 |     |  * [WARNING]
  32 |     |  * ====
  33 |     |  * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure
  34 |     |  * unusable.
  35 |     |  * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.
  36 |     |  *
  37 |     |  * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an
  38 |     |  * array of EnumerableSet.
  39 |     |  * ====
  40 |     |  */
  41 |     | library EnumerableSet {
  42 |     |     // To implement this library for multiple types with as little code
  43 |     |     // repetition as possible, we write it in terms of a generic Set type with
  44 |     |     // bytes32 values.
  45 |     |     // The Set implementation uses private functions, and user-facing
  46 |     |     // implementations (such as AddressSet) are just wrappers around the
  47 |     |     // underlying Set.
  48 |     |     // This means that we can only create new EnumerableSets for types that fit
  49 |     |     // in bytes32.
  50 |     | 
  51 |     |     struct Set {
  52 |     |         // Storage of set values
  53 |     |         bytes32[] _values;
  54 |     |         // Position is the index of the value in the `values` array plus 1.
  55 |     |         // Position 0 is used to mean a value is not in the set.
  56 |     |         mapping(bytes32 value => uint256) _positions;
  57 |     |     }
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Add a value to a set. O(1).
  61 |     |      *
  62 |     |      * Returns true if the value was added to the set, that is if it was not
  63 |     |      * already present.
  64 |     |      */
  65 |     |     function _add(Set storage set, bytes32 value) private returns (bool) {
  66 |     |         if (!_contains(set, value)) {
  67 |     |             set._values.push(value);
  68 |     |             // The value is stored at length-1, but we add 1 to all indexes
  69 |     |             // and use 0 as a sentinel value
  70 |     |             set._positions[value] = set._values.length;
  71 |     |             return true;
  72 |     |         } else {
  73 |     |             return false;
  74 |     |         }
  75 |     |     }
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Removes a value from a set. O(1).
  79 |     |      *
  80 |     |      * Returns true if the value was removed from the set, that is if it was
  81 |     |      * present.
  82 |     |      */
  83 |     |     function _remove(Set storage set, bytes32 value) private returns (bool) {
  84 |     |         // We cache the value's position to prevent multiple reads from the same storage slot
  85 |     |         uint256 position = set._positions[value];
  86 |     | 
  87 |     |         if (position != 0) {
  88 |     |             // Equivalent to contains(set, value)
  89 |     |             // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
  90 |     |             // the array, and then remove the last element (sometimes called as 'swap and pop').
  91 |     |             // This modifies the order of the array, as noted in {at}.
  92 |     | 
  93 |     |             uint256 valueIndex = position - 1;
  94 |     |             uint256 lastIndex = set._values.length - 1;
  95 |     | 
  96 |     |             if (valueIndex != lastIndex) {
  97 |     |                 bytes32 lastValue = set._values[lastIndex];
  98 |     | 
  99 |     |                 // Move the lastValue to the index where the value to delete is
 100 |     |                 set._values[valueIndex] = lastValue;
 101 |     |                 // Update the tracked position of the lastValue (that was just moved)
 102 |     |                 set._positions[lastValue] = position;
 103 |     |             }
 104 |     | 
 105 |     |             // Delete the slot where the moved value was stored
 106 |     |             set._values.pop();
 107 |     | 
 108 |     |             // Delete the tracked position for the deleted slot
 109 |     |             delete set._positions[value];
 110 |     | 
 111 |     |             return true;
 112 |     |         } else {
 113 |     |             return false;
 114 |     |         }
 115 |     |     }
 116 |     | 
 117 |     |     /**
 118 |     |      * @dev Returns true if the value is in the set. O(1).
 119 |     |      */
 120 |     |     function _contains(Set storage set, bytes32 value) private view returns (bool) {
 121 |     |         return set._positions[value] != 0;
 122 |     |     }
 123 |     | 
 124 |     |     /**
 125 |     |      * @dev Returns the number of values on the set. O(1).
 126 |     |      */
 127 |     |     function _length(Set storage set) private view returns (uint256) {
 128 |     |         return set._values.length;
 129 |     |     }
 130 |     | 
 131 |     |     /**
 132 |     |      * @dev Returns the value stored at position `index` in the set. O(1).
 133 |     |      *
 134 |     |      * Note that there are no guarantees on the ordering of values inside the
 135 |     |      * array, and it may change when more values are added or removed.
 136 |     |      *
 137 |     |      * Requirements:
 138 |     |      *
 139 |     |      * - `index` must be strictly less than {length}.
 140 |     |      */
 141 |     |     function _at(Set storage set, uint256 index) private view returns (bytes32) {
 142 |     |         return set._values[index];
 143 |     |     }
 144 |     | 
 145 |     |     /**
 146 |     |      * @dev Return the entire set in an array
 147 |     |      *
 148 |     |      * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
 149 |     |      * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
 150 |     |      * this function has an unbounded cost, and using it as part of a state-changing function may render the function
 151 |     |      * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
 152 |     |      */
 153 |     |     function _values(Set storage set) private view returns (bytes32[] memory) {
 154 |     |         return set._values;
 155 |     |     }
 156 |     | 
 157 |     |     // Bytes32Set
 158 |     | 
 159 |     |     struct Bytes32Set {
 160 |     |         Set _inner;
 161 |     |     }
 162 |     | 
 163 |     |     /**
 164 |     |      * @dev Add a value to a set. O(1).
 165 |     |      *
 166 |     |      * Returns true if the value was added to the set, that is if it was not
 167 |     |      * already present.
 168 |     |      */
 169 |     |     function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
 170 |     |         return _add(set._inner, value);
 171 |     |     }
 172 |     | 
 173 |     |     /**
 174 |     |      * @dev Removes a value from a set. O(1).
 175 |     |      *
 176 |     |      * Returns true if the value was removed from the set, that is if it was
 177 |     |      * present.
 178 |     |      */
 179 |     |     function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
 180 |     |         return _remove(set._inner, value);
 181 |     |     }
 182 |     | 
 183 |     |     /**
 184 |     |      * @dev Returns true if the value is in the set. O(1).
 185 |     |      */
 186 |     |     function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
 187 |     |         return _contains(set._inner, value);
 188 |     |     }
 189 |     | 
 190 |     |     /**
 191 |     |      * @dev Returns the number of values in the set. O(1).
 192 |     |      */
 193 |     |     function length(Bytes32Set storage set) internal view returns (uint256) {
 194 |     |         return _length(set._inner);
 195 |     |     }
 196 |     | 
 197 |     |     /**
 198 |     |      * @dev Returns the value stored at position `index` in the set. O(1).
 199 |     |      *
 200 |     |      * Note that there are no guarantees on the ordering of values inside the
 201 |     |      * array, and it may change when more values are added or removed.
 202 |     |      *
 203 |     |      * Requirements:
 204 |     |      *
 205 |     |      * - `index` must be strictly less than {length}.
 206 |     |      */
 207 |     |     function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
 208 |     |         return _at(set._inner, index);
 209 |     |     }
 210 |     | 
 211 |     |     /**
 212 |     |      * @dev Return the entire set in an array
 213 |     |      *
 214 |     |      * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
 215 |     |      * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
 216 |     |      * this function has an unbounded cost, and using it as part of a state-changing function may render the function
 217 |     |      * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
 218 |     |      */
 219 |     |     function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
 220 |     |         bytes32[] memory store = _values(set._inner);
 221 |     |         bytes32[] memory result;
 222 |     | 
 223 |     |         assembly ("memory-safe") {
 224 |     |             result := store
 225 |     |         }
 226 |     | 
 227 |     |         return result;
 228 |     |     }
 229 |     | 
 230 |     |     // AddressSet
 231 |     | 
 232 |     |     struct AddressSet {
 233 |     |         Set _inner;
 234 |     |     }
 235 |     | 
 236 |     |     /**
 237 |     |      * @dev Add a value to a set. O(1).
 238 |     |      *
 239 |     |      * Returns true if the value was added to the set, that is if it was not
 240 |     |      * already present.
 241 |     |      */
 242 |     |     function add(AddressSet storage set, address value) internal returns (bool) {
 243 |     |         return _add(set._inner, bytes32(uint256(uint160(value))));
 244 |     |     }
 245 |     | 
 246 |     |     /**
 247 |     |      * @dev Removes a value from a set. O(1).
 248 |     |      *
 249 |     |      * Returns true if the value was removed from the set, that is if it was
 250 |     |      * present.
 251 |     |      */
 252 |     |     function remove(AddressSet storage set, address value) internal returns (bool) {
 253 |     |         return _remove(set._inner, bytes32(uint256(uint160(value))));
 254 |     |     }
 255 |     | 
 256 |     |     /**
 257 |     |      * @dev Returns true if the value is in the set. O(1).
 258 |     |      */
 259 |     |     function contains(AddressSet storage set, address value) internal view returns (bool) {
 260 |     |         return _contains(set._inner, bytes32(uint256(uint160(value))));
 261 |     |     }
 262 |     | 
 263 |     |     /**
 264 |     |      * @dev Returns the number of values in the set. O(1).
 265 |     |      */
 266 |     |     function length(AddressSet storage set) internal view returns (uint256) {
 267 |     |         return _length(set._inner);
 268 |     |     }
 269 |     | 
 270 |     |     /**
 271 |     |      * @dev Returns the value stored at position `index` in the set. O(1).
 272 |     |      *
 273 |     |      * Note that there are no guarantees on the ordering of values inside the
 274 |     |      * array, and it may change when more values are added or removed.
 275 |     |      *
 276 |     |      * Requirements:
 277 |     |      *
 278 |     |      * - `index` must be strictly less than {length}.
 279 |     |      */
 280 |     |     function at(AddressSet storage set, uint256 index) internal view returns (address) {
 281 |     |         return address(uint160(uint256(_at(set._inner, index))));
 282 |     |     }
 283 |     | 
 284 |     |     /**
 285 |     |      * @dev Return the entire set in an array
 286 |     |      *
 287 |     |      * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
 288 |     |      * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
 289 |     |      * this function has an unbounded cost, and using it as part of a state-changing function may render the function
 290 |     |      * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
 291 |     |      */
 292 |     |     function values(AddressSet storage set) internal view returns (address[] memory) {
 293 |     |         bytes32[] memory store = _values(set._inner);
 294 |     |         address[] memory result;
 295 |     | 
 296 |     |         assembly ("memory-safe") {
 297 |     |             result := store
 298 |     |         }
 299 |     | 
 300 |     |         return result;
 301 |     |     }
 302 |     | 
 303 |     |     // UintSet
 304 |     | 
 305 |     |     struct UintSet {
 306 |     |         Set _inner;
 307 |     |     }
 308 |     | 
 309 |     |     /**
 310 |     |      * @dev Add a value to a set. O(1).
 311 |     |      *
 312 |     |      * Returns true if the value was added to the set, that is if it was not
 313 |     |      * already present.
 314 |     |      */
 315 |     |     function add(UintSet storage set, uint256 value) internal returns (bool) {
 316 |     |         return _add(set._inner, bytes32(value));
 317 |     |     }
 318 |     | 
 319 |     |     /**
 320 |     |      * @dev Removes a value from a set. O(1).
 321 |     |      *
 322 |     |      * Returns true if the value was removed from the set, that is if it was
 323 |     |      * present.
 324 |     |      */
 325 |     |     function remove(UintSet storage set, uint256 value) internal returns (bool) {
 326 |     |         return _remove(set._inner, bytes32(value));
 327 |     |     }
 328 |     | 
 329 |     |     /**
 330 |     |      * @dev Returns true if the value is in the set. O(1).
 331 |     |      */
 332 |     |     function contains(UintSet storage set, uint256 value) internal view returns (bool) {
 333 |     |         return _contains(set._inner, bytes32(value));
 334 |     |     }
 335 |     | 
 336 |     |     /**
 337 |     |      * @dev Returns the number of values in the set. O(1).
 338 |     |      */
 339 |     |     function length(UintSet storage set) internal view returns (uint256) {
 340 |     |         return _length(set._inner);
 341 |     |     }
 342 |     | 
 343 |     |     /**
 344 |     |      * @dev Returns the value stored at position `index` in the set. O(1).
 345 |     |      *
 346 |     |      * Note that there are no guarantees on the ordering of values inside the
 347 |     |      * array, and it may change when more values are added or removed.
 348 |     |      *
 349 |     |      * Requirements:
 350 |     |      *
 351 |     |      * - `index` must be strictly less than {length}.
 352 |     |      */
 353 |     |     function at(UintSet storage set, uint256 index) internal view returns (uint256) {
 354 |     |         return uint256(_at(set._inner, index));
 355 |     |     }
 356 |     | 
 357 |     |     /**
 358 |     |      * @dev Return the entire set in an array
 359 |     |      *
 360 |     |      * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
 361 |     |      * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
 362 |     |      * this function has an unbounded cost, and using it as part of a state-changing function may render the function
 363 |     |      * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
 364 |     |      */
 365 |     |     function values(UintSet storage set) internal view returns (uint256[] memory) {
 366 |     |         bytes32[] memory store = _values(set._inner);
 367 |     |         uint256[] memory result;
 368 |     | 
 369 |     |         assembly ("memory-safe") {
 370 |     |             result := store
 371 |     |         }
 372 |     | 
 373 |     |         return result;
 374 |     |     }
 375 |     | }
 376 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IAccessControl} from "@openzeppelin/contracts/access/IAccessControl.sol";
   7 |     | import {ContextUpgradeable} from "../utils/ContextUpgradeable.sol";
   8 |     | import {ERC165Upgradeable} from "../utils/introspection/ERC165Upgradeable.sol";
   9 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @dev Contract module that allows children to implement role-based access
  13 |     |  * control mechanisms. This is a lightweight version that doesn't allow enumerating role
  14 |     |  * members except through off-chain means by accessing the contract event logs. Some
  15 |     |  * applications may benefit from on-chain enumerability, for those cases see
  16 |     |  * {AccessControlEnumerable}.
  17 |     |  *
  18 |     |  * Roles are referred to by their `bytes32` identifier. These should be exposed
  19 |     |  * in the external API and be unique. The best way to achieve this is by
  20 |     |  * using `public constant` hash digests:
  21 |     |  *
  22 |     |  * ```solidity
  23 |     |  * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
  24 |     |  * ```
  25 |     |  *
  26 |     |  * Roles can be used to represent a set of permissions. To restrict access to a
  27 |     |  * function call, use {hasRole}:
  28 |     |  *
  29 |     |  * ```solidity
  30 |     |  * function foo() public {
  31 |     |  *     require(hasRole(MY_ROLE, msg.sender));
  32 |     |  *     ...
  33 |     |  * }
  34 |     |  * ```
  35 |     |  *
  36 |     |  * Roles can be granted and revoked dynamically via the {grantRole} and
  37 |     |  * {revokeRole} functions. Each role has an associated admin role, and only
  38 |     |  * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
  39 |     |  *
  40 |     |  * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
  41 |     |  * that only accounts with this role will be able to grant or revoke other
  42 |     |  * roles. More complex role relationships can be created by using
  43 |     |  * {_setRoleAdmin}.
  44 |     |  *
  45 |     |  * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
  46 |     |  * grant and revoke this role. Extra precautions should be taken to secure
  47 |     |  * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
  48 |     |  * to enforce additional security measures for this role.
  49 |     |  */
  50 |     | abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {
  51 |     |     struct RoleData {
  52 |     |         mapping(address account => bool) hasRole;
  53 |     |         bytes32 adminRole;
  54 |     |     }
  55 |     | 
  56 |     |     bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
  57 |     | 
  58 |     | 
  59 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl
  60 |     |     struct AccessControlStorage {
  61 |     |         mapping(bytes32 role => RoleData) _roles;
  62 |     |     }
  63 |     | 
  64 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.AccessControl")) - 1)) & ~bytes32(uint256(0xff))
  65 |     |     bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;
  66 |     | 
  67 |     |     function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {
  68 |     |         assembly {
  69 |     |             $.slot := AccessControlStorageLocation
  70 |     |         }
  71 |     |     }
  72 |     | 
  73 |     |     /**
  74 |     |      * @dev Modifier that checks that an account has a specific role. Reverts
  75 |     |      * with an {AccessControlUnauthorizedAccount} error including the required role.
  76 |     |      */
  77 |     |     modifier onlyRole(bytes32 role) {
  78 |     |         _checkRole(role);
  79 |     |         _;
  80 |     |     }
  81 |     | 
  82 |     |     function __AccessControl_init() internal onlyInitializing {
  83 |     |     }
  84 |     | 
  85 |     |     function __AccessControl_init_unchained() internal onlyInitializing {
  86 |     |     }
  87 |     |     /**
  88 |     |      * @dev See {IERC165-supportsInterface}.
  89 |     |      */
  90 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
  91 |     |         return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
  92 |     |     }
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev Returns `true` if `account` has been granted `role`.
  96 |     |      */
  97 |     |     function hasRole(bytes32 role, address account) public view virtual returns (bool) {
  98 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
  99 |     |         return $._roles[role].hasRole[account];
 100 |     |     }
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`
 104 |     |      * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.
 105 |     |      */
 106 |     |     function _checkRole(bytes32 role) internal view virtual {
 107 |     |         _checkRole(role, _msgSender());
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`
 112 |     |      * is missing `role`.
 113 |     |      */
 114 |     |     function _checkRole(bytes32 role, address account) internal view virtual {
 115 |     |         if (!hasRole(role, account)) {
 116 |     |             revert AccessControlUnauthorizedAccount(account, role);
 117 |     |         }
 118 |     |     }
 119 |     | 
 120 |     |     /**
 121 |     |      * @dev Returns the admin role that controls `role`. See {grantRole} and
 122 |     |      * {revokeRole}.
 123 |     |      *
 124 |     |      * To change a role's admin, use {_setRoleAdmin}.
 125 |     |      */
 126 |     |     function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {
 127 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 128 |     |         return $._roles[role].adminRole;
 129 |     |     }
 130 |     | 
 131 |     |     /**
 132 |     |      * @dev Grants `role` to `account`.
 133 |     |      *
 134 |     |      * If `account` had not been already granted `role`, emits a {RoleGranted}
 135 |     |      * event.
 136 |     |      *
 137 |     |      * Requirements:
 138 |     |      *
 139 |     |      * - the caller must have ``role``'s admin role.
 140 |     |      *
 141 |     |      * May emit a {RoleGranted} event.
 142 |     |      */
 143 |     |     function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 144 |     |         _grantRole(role, account);
 145 |     |     }
 146 |     | 
 147 |     |     /**
 148 |     |      * @dev Revokes `role` from `account`.
 149 |     |      *
 150 |     |      * If `account` had been granted `role`, emits a {RoleRevoked} event.
 151 |     |      *
 152 |     |      * Requirements:
 153 |     |      *
 154 |     |      * - the caller must have ``role``'s admin role.
 155 |     |      *
 156 |     |      * May emit a {RoleRevoked} event.
 157 |     |      */
 158 |     |     function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 159 |     |         _revokeRole(role, account);
 160 |     |     }
 161 |     | 
 162 |     |     /**
 163 |     |      * @dev Revokes `role` from the calling account.
 164 |     |      *
 165 |     |      * Roles are often managed via {grantRole} and {revokeRole}: this function's
 166 |     |      * purpose is to provide a mechanism for accounts to lose their privileges
 167 |     |      * if they are compromised (such as when a trusted device is misplaced).
 168 |     |      *
 169 |     |      * If the calling account had been revoked `role`, emits a {RoleRevoked}
 170 |     |      * event.
 171 |     |      *
 172 |     |      * Requirements:
 173 |     |      *
 174 |     |      * - the caller must be `callerConfirmation`.
 175 |     |      *
 176 |     |      * May emit a {RoleRevoked} event.
 177 |     |      */
 178 |     |     function renounceRole(bytes32 role, address callerConfirmation) public virtual {
 179 |     |         if (callerConfirmation != _msgSender()) {
 180 |     |             revert AccessControlBadConfirmation();
 181 |     |         }
 182 |     | 
 183 |     |         _revokeRole(role, callerConfirmation);
 184 |     |     }
 185 |     | 
 186 |     |     /**
 187 |     |      * @dev Sets `adminRole` as ``role``'s admin role.
 188 |     |      *
 189 |     |      * Emits a {RoleAdminChanged} event.
 190 |     |      */
 191 |     |     function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
 192 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 193 |     |         bytes32 previousAdminRole = getRoleAdmin(role);
 194 |     |         $._roles[role].adminRole = adminRole;
 195 |     |         emit RoleAdminChanged(role, previousAdminRole, adminRole);
 196 |     |     }
 197 |     | 
 198 |     |     /**
 199 |     |      * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.
 200 |     |      *
 201 |     |      * Internal function without access restriction.
 202 |     |      *
 203 |     |      * May emit a {RoleGranted} event.
 204 |     |      */
 205 |     |     function _grantRole(bytes32 role, address account) internal virtual returns (bool) {
 206 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 207 |     |         if (!hasRole(role, account)) {
 208 |     |             $._roles[role].hasRole[account] = true;
 209 |     |             emit RoleGranted(role, account, _msgSender());
 210 |     |             return true;
 211 |     |         } else {
 212 |     |             return false;
 213 |     |         }
 214 |     |     }
 215 |     | 
 216 |     |     /**
 217 |     |      * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.
 218 |     |      *
 219 |     |      * Internal function without access restriction.
 220 |     |      *
 221 |     |      * May emit a {RoleRevoked} event.
 222 |     |      */
 223 |     |     function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {
 224 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 225 |     |         if (hasRole(role, account)) {
 226 |     |             $._roles[role].hasRole[account] = false;
 227 |     |             emit RoleRevoked(role, account, _msgSender());
 228 |     |             return true;
 229 |     |         } else {
 230 |     |             return false;
 231 |     |         }
 232 |     |     }
 233 |     | }
 234 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
   8 |     |  * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
   9 |     |  * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
  10 |     |  * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
  11 |     |  *
  12 |     |  * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
  13 |     |  * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
  14 |     |  * case an upgrade adds a module that needs to be initialized.
  15 |     |  *
  16 |     |  * For example:
  17 |     |  *
  18 |     |  * [.hljs-theme-light.nopadding]
  19 |     |  * ```solidity
  20 |     |  * contract MyToken is ERC20Upgradeable {
  21 |     |  *     function initialize() initializer public {
  22 |     |  *         __ERC20_init("MyToken", "MTK");
  23 |     |  *     }
  24 |     |  * }
  25 |     |  *
  26 |     |  * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
  27 |     |  *     function initializeV2() reinitializer(2) public {
  28 |     |  *         __ERC20Permit_init("MyToken");
  29 |     |  *     }
  30 |     |  * }
  31 |     |  * ```
  32 |     |  *
  33 |     |  * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
  34 |     |  * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
  35 |     |  *
  36 |     |  * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
  37 |     |  * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
  38 |     |  *
  39 |     |  * [CAUTION]
  40 |     |  * ====
  41 |     |  * Avoid leaving a contract uninitialized.
  42 |     |  *
  43 |     |  * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
  44 |     |  * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
  45 |     |  * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
  46 |     |  *
  47 |     |  * [.hljs-theme-light.nopadding]
  48 |     |  * ```
  49 |     |  * /// @custom:oz-upgrades-unsafe-allow constructor
  50 |     |  * constructor() {
  51 |     |  *     _disableInitializers();
  52 |     |  * }
  53 |     |  * ```
  54 |     |  * ====
  55 |     |  */
  56 |     | abstract contract Initializable {
  57 |     |     /**
  58 |     |      * @dev Storage of the initializable contract.
  59 |     |      *
  60 |     |      * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions
  61 |     |      * when using with upgradeable contracts.
  62 |     |      *
  63 |     |      * @custom:storage-location erc7201:openzeppelin.storage.Initializable
  64 |     |      */
  65 |     |     struct InitializableStorage {
  66 |     |         /**
  67 |     |          * @dev Indicates that the contract has been initialized.
  68 |     |          */
  69 |     |         uint64 _initialized;
  70 |     |         /**
  71 |     |          * @dev Indicates that the contract is in the process of being initialized.
  72 |     |          */
  73 |     |         bool _initializing;
  74 |     |     }
  75 |     | 
  76 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))
  77 |     |     bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;
  78 |     | 
  79 |     |     /**
  80 |     |      * @dev The contract is already initialized.
  81 |     |      */
  82 |     |     error InvalidInitialization();
  83 |     | 
  84 |     |     /**
  85 |     |      * @dev The contract is not initializing.
  86 |     |      */
  87 |     |     error NotInitializing();
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Triggered when the contract has been initialized or reinitialized.
  91 |     |      */
  92 |     |     event Initialized(uint64 version);
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
  96 |     |      * `onlyInitializing` functions can be used to initialize parent contracts.
  97 |     |      *
  98 |     |      * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any
  99 |     |      * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in
 100 |     |      * production.
 101 |     |      *
 102 |     |      * Emits an {Initialized} event.
 103 |     |      */
 104 |     |     modifier initializer() {
 105 |     |         // solhint-disable-next-line var-name-mixedcase
 106 |     |         InitializableStorage storage $ = _getInitializableStorage();
 107 |     | 
 108 |     |         // Cache values to avoid duplicated sloads
 109 |     |         bool isTopLevelCall = !$._initializing;
 110 |     |         uint64 initialized = $._initialized;
 111 |     | 
 112 |     |         // Allowed calls:
 113 |     |         // - initialSetup: the contract is not in the initializing state and no previous version was
 114 |     |         //                 initialized
 115 |     |         // - construction: the contract is initialized at version 1 (no reininitialization) and the
 116 |     |         //                 current contract is just being deployed
 117 |     |         bool initialSetup = initialized == 0 && isTopLevelCall;
 118 |     |         bool construction = initialized == 1 && address(this).code.length == 0;
 119 |     | 
 120 |     |         if (!initialSetup && !construction) {
 121 |     |             revert InvalidInitialization();
 122 |     |         }
 123 |     |         $._initialized = 1;
 124 |     |         if (isTopLevelCall) {
 125 |     |             $._initializing = true;
 126 |     |         }
 127 |     |         _;
 128 |     |         if (isTopLevelCall) {
 129 |     |             $._initializing = false;
 130 |     |             emit Initialized(1);
 131 |     |         }
 132 |     |     }
 133 |     | 
 134 |     |     /**
 135 |     |      * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
 136 |     |      * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
 137 |     |      * used to initialize parent contracts.
 138 |     |      *
 139 |     |      * A reinitializer may be used after the original initialization step. This is essential to configure modules that
 140 |     |      * are added through upgrades and that require initialization.
 141 |     |      *
 142 |     |      * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
 143 |     |      * cannot be nested. If one is invoked in the context of another, execution will revert.
 144 |     |      *
 145 |     |      * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
 146 |     |      * a contract, executing them in the right order is up to the developer or operator.
 147 |     |      *
 148 |     |      * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.
 149 |     |      *
 150 |     |      * Emits an {Initialized} event.
 151 |     |      */
 152 |     |     modifier reinitializer(uint64 version) {
 153 |     |         // solhint-disable-next-line var-name-mixedcase
 154 |     |         InitializableStorage storage $ = _getInitializableStorage();
 155 |     | 
 156 |     |         if ($._initializing || $._initialized >= version) {
 157 |     |             revert InvalidInitialization();
 158 |     |         }
 159 |     |         $._initialized = version;
 160 |     |         $._initializing = true;
 161 |     |         _;
 162 |     |         $._initializing = false;
 163 |     |         emit Initialized(version);
 164 |     |     }
 165 |     | 
 166 |     |     /**
 167 |     |      * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
 168 |     |      * {initializer} and {reinitializer} modifiers, directly or indirectly.
 169 |     |      */
 170 |     |     modifier onlyInitializing() {
 171 |     |         _checkInitializing();
 172 |     |         _;
 173 |     |     }
 174 |     | 
 175 |     |     /**
 176 |     |      * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.
 177 |     |      */
 178 |     |     function _checkInitializing() internal view virtual {
 179 |     |         if (!_isInitializing()) {
 180 |     |             revert NotInitializing();
 181 |     |         }
 182 |     |     }
 183 |     | 
 184 |     |     /**
 185 |     |      * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
 186 |     |      * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
 187 |     |      * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
 188 |     |      * through proxies.
 189 |     |      *
 190 |     |      * Emits an {Initialized} event the first time it is successfully executed.
 191 |     |      */
 192 |     |     function _disableInitializers() internal virtual {
 193 |     |         // solhint-disable-next-line var-name-mixedcase
 194 |     |         InitializableStorage storage $ = _getInitializableStorage();
 195 |     | 
 196 |     |         if ($._initializing) {
 197 |     |             revert InvalidInitialization();
 198 |     |         }
 199 |     |         if ($._initialized != type(uint64).max) {
 200 |     |             $._initialized = type(uint64).max;
 201 |     |             emit Initialized(type(uint64).max);
 202 |     |         }
 203 |     |     }
 204 |     | 
 205 |     |     /**
 206 |     |      * @dev Returns the highest version that has been initialized. See {reinitializer}.
 207 |     |      */
 208 |     |     function _getInitializedVersion() internal view returns (uint64) {
 209 |     |         return _getInitializableStorage()._initialized;
 210 |     |     }
 211 |     | 
 212 |     |     /**
 213 |     |      * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
 214 |     |      */
 215 |     |     function _isInitializing() internal view returns (bool) {
 216 |     |         return _getInitializableStorage()._initializing;
 217 |     |     }
 218 |     | 
 219 |     |     /**
 220 |     |      * @dev Returns a pointer to the storage namespace.
 221 |     |      */
 222 |     |     // solhint-disable-next-line var-name-mixedcase
 223 |     |     function _getInitializableStorage() private pure returns (InitializableStorage storage $) {
 224 |     |         assembly {
 225 |     |             $.slot := INITIALIZABLE_STORAGE
 226 |     |         }
 227 |     |     }
 228 |     | }
 229 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @dev Provides information about the current execution context, including the
  9 |     |  * sender of the transaction and its data. While these are generally available
 10 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 11 |     |  * manner, since when dealing with meta-transactions the account sending and
 12 |     |  * paying for execution may not be the actual sender (as far as an application
 13 |     |  * is concerned).
 14 |     |  *
 15 |     |  * This contract is only required for intermediate, library-like contracts.
 16 |     |  */
 17 |     | abstract contract ContextUpgradeable is Initializable {
 18 |     |     function __Context_init() internal onlyInitializing {
 19 |     |     }
 20 |     | 
 21 |     |     function __Context_init_unchained() internal onlyInitializing {
 22 |     |     }
 23 |     |     function _msgSender() internal view virtual returns (address) {
 24 |     |         return msg.sender;
 25 |     |     }
 26 |     | 
 27 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 28 |     |         return msg.data;
 29 |     |     }
 30 |     | 
 31 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 32 |     |         return 0;
 33 |     |     }
 34 |     | }
 35 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {ContextUpgradeable} from "../utils/ContextUpgradeable.sol";
   7 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev Contract module which allows children to implement an emergency stop
  11 |     |  * mechanism that can be triggered by an authorized account.
  12 |     |  *
  13 |     |  * This module is used through inheritance. It will make available the
  14 |     |  * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
  15 |     |  * the functions of your contract. Note that they will not be pausable by
  16 |     |  * simply including this module, only once the modifiers are put in place.
  17 |     |  */
  18 |     | abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {
  19 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.Pausable
  20 |     |     struct PausableStorage {
  21 |     |         bool _paused;
  22 |     |     }
  23 |     | 
  24 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Pausable")) - 1)) & ~bytes32(uint256(0xff))
  25 |     |     bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;
  26 |     | 
  27 |     |     function _getPausableStorage() private pure returns (PausableStorage storage $) {
  28 |     |         assembly {
  29 |     |             $.slot := PausableStorageLocation
  30 |     |         }
  31 |     |     }
  32 |     | 
  33 |     |     /**
  34 |     |      * @dev Emitted when the pause is triggered by `account`.
  35 |     |      */
  36 |     |     event Paused(address account);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Emitted when the pause is lifted by `account`.
  40 |     |      */
  41 |     |     event Unpaused(address account);
  42 |     | 
  43 |     |     /**
  44 |     |      * @dev The operation failed because the contract is paused.
  45 |     |      */
  46 |     |     error EnforcedPause();
  47 |     | 
  48 |     |     /**
  49 |     |      * @dev The operation failed because the contract is not paused.
  50 |     |      */
  51 |     |     error ExpectedPause();
  52 |     | 
  53 |     |     /**
  54 |     |      * @dev Initializes the contract in unpaused state.
  55 |     |      */
  56 |     |     function __Pausable_init() internal onlyInitializing {
  57 |     |         __Pausable_init_unchained();
  58 |     |     }
  59 |     | 
  60 |     |     function __Pausable_init_unchained() internal onlyInitializing {
  61 |     |         PausableStorage storage $ = _getPausableStorage();
  62 |     |         $._paused = false;
  63 |     |     }
  64 |     | 
  65 |     |     /**
  66 |     |      * @dev Modifier to make a function callable only when the contract is not paused.
  67 |     |      *
  68 |     |      * Requirements:
  69 |     |      *
  70 |     |      * - The contract must not be paused.
  71 |     |      */
  72 |     |     modifier whenNotPaused() {
  73 |     |         _requireNotPaused();
  74 |     |         _;
  75 |     |     }
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Modifier to make a function callable only when the contract is paused.
  79 |     |      *
  80 |     |      * Requirements:
  81 |     |      *
  82 |     |      * - The contract must be paused.
  83 |     |      */
  84 |     |     modifier whenPaused() {
  85 |     |         _requirePaused();
  86 |     |         _;
  87 |     |     }
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Returns true if the contract is paused, and false otherwise.
  91 |     |      */
  92 |     |     function paused() public view virtual returns (bool) {
  93 |     |         PausableStorage storage $ = _getPausableStorage();
  94 |     |         return $._paused;
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Throws if the contract is paused.
  99 |     |      */
 100 |     |     function _requireNotPaused() internal view virtual {
 101 |     |         if (paused()) {
 102 |     |             revert EnforcedPause();
 103 |     |         }
 104 |     |     }
 105 |     | 
 106 |     |     /**
 107 |     |      * @dev Throws if the contract is not paused.
 108 |     |      */
 109 |     |     function _requirePaused() internal view virtual {
 110 |     |         if (!paused()) {
 111 |     |             revert ExpectedPause();
 112 |     |         }
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev Triggers stopped state.
 117 |     |      *
 118 |     |      * Requirements:
 119 |     |      *
 120 |     |      * - The contract must not be paused.
 121 |     |      */
 122 |     |     function _pause() internal virtual whenNotPaused {
 123 |     |         PausableStorage storage $ = _getPausableStorage();
 124 |     |         $._paused = true;
 125 |     |         emit Paused(_msgSender());
 126 |     |     }
 127 |     | 
 128 |     |     /**
 129 |     |      * @dev Returns to normal state.
 130 |     |      *
 131 |     |      * Requirements:
 132 |     |      *
 133 |     |      * - The contract must be paused.
 134 |     |      */
 135 |     |     function _unpause() internal virtual whenPaused {
 136 |     |         PausableStorage storage $ = _getPausableStorage();
 137 |     |         $._paused = false;
 138 |     |         emit Unpaused(_msgSender());
 139 |     |     }
 140 |     | }
 141 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
   6 |     | 
   7 |     | /**
   8 |     |  * @dev Contract module that helps prevent reentrant calls to a function.
   9 |     |  *
  10 |     |  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
  11 |     |  * available, which can be applied to functions to make sure there are no nested
  12 |     |  * (reentrant) calls to them.
  13 |     |  *
  14 |     |  * Note that because there is a single `nonReentrant` guard, functions marked as
  15 |     |  * `nonReentrant` may not call one another. This can be worked around by making
  16 |     |  * those functions `private`, and then adding `external` `nonReentrant` entry
  17 |     |  * points to them.
  18 |     |  *
  19 |     |  * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,
  20 |     |  * consider using {ReentrancyGuardTransient} instead.
  21 |     |  *
  22 |     |  * TIP: If you would like to learn more about reentrancy and alternative ways
  23 |     |  * to protect against it, check out our blog post
  24 |     |  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
  25 |     |  */
  26 |     | abstract contract ReentrancyGuardUpgradeable is Initializable {
  27 |     |     // Booleans are more expensive than uint256 or any type that takes up a full
  28 |     |     // word because each write operation emits an extra SLOAD to first read the
  29 |     |     // slot's contents, replace the bits taken up by the boolean, and then write
  30 |     |     // back. This is the compiler's defense against contract upgrades and
  31 |     |     // pointer aliasing, and it cannot be disabled.
  32 |     | 
  33 |     |     // The values being non-zero value makes deployment a bit more expensive,
  34 |     |     // but in exchange the refund on every call to nonReentrant will be lower in
  35 |     |     // amount. Since refunds are capped to a percentage of the total
  36 |     |     // transaction's gas, it is best to keep them low in cases like this one, to
  37 |     |     // increase the likelihood of the full refund coming into effect.
  38 |     |     uint256 private constant NOT_ENTERED = 1;
  39 |     |     uint256 private constant ENTERED = 2;
  40 |     | 
  41 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard
  42 |     |     struct ReentrancyGuardStorage {
  43 |     |         uint256 _status;
  44 |     |     }
  45 |     | 
  46 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ReentrancyGuard")) - 1)) & ~bytes32(uint256(0xff))
  47 |     |     bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;
  48 |     | 
  49 |     |     function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {
  50 |     |         assembly {
  51 |     |             $.slot := ReentrancyGuardStorageLocation
  52 |     |         }
  53 |     |     }
  54 |     | 
  55 |     |     /**
  56 |     |      * @dev Unauthorized reentrant call.
  57 |     |      */
  58 |     |     error ReentrancyGuardReentrantCall();
  59 |     | 
  60 |     |     function __ReentrancyGuard_init() internal onlyInitializing {
  61 |     |         __ReentrancyGuard_init_unchained();
  62 |     |     }
  63 |     | 
  64 |     |     function __ReentrancyGuard_init_unchained() internal onlyInitializing {
  65 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  66 |     |         $._status = NOT_ENTERED;
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Prevents a contract from calling itself, directly or indirectly.
  71 |     |      * Calling a `nonReentrant` function from another `nonReentrant`
  72 |     |      * function is not supported. It is possible to prevent this from happening
  73 |     |      * by making the `nonReentrant` function external, and making it call a
  74 |     |      * `private` function that does the actual work.
  75 |     |      */
  76 |     |     modifier nonReentrant() {
  77 |     |         _nonReentrantBefore();
  78 |     |         _;
  79 |     |         _nonReentrantAfter();
  80 |     |     }
  81 |     | 
  82 |     |     function _nonReentrantBefore() private {
  83 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  84 |     |         // On the first call to nonReentrant, _status will be NOT_ENTERED
  85 |     |         if ($._status == ENTERED) {
  86 |     |             revert ReentrancyGuardReentrantCall();
  87 |     |         }
  88 |     | 
  89 |     |         // Any calls to nonReentrant after this point will fail
  90 |     |         $._status = ENTERED;
  91 |     |     }
  92 |     | 
  93 |     |     function _nonReentrantAfter() private {
  94 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  95 |     |         // By storing the original value once again, a refund is triggered (see
  96 |     |         // https://eips.ethereum.org/EIPS/eip-2200)
  97 |     |         $._status = NOT_ENTERED;
  98 |     |     }
  99 |     | 
 100 |     |     /**
 101 |     |      * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
 102 |     |      * `nonReentrant` function in the call stack.
 103 |     |      */
 104 |     |     function _reentrancyGuardEntered() internal view returns (bool) {
 105 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
 106 |     |         return $._status == ENTERED;
 107 |     |     }
 108 |     | }
 109 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";
  7 |     | import {Initializable} from "../../proxy/utils/Initializable.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @dev Implementation of the {IERC165} interface.
 11 |     |  *
 12 |     |  * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check
 13 |     |  * for the additional interface id that will be supported. For example:
 14 |     |  *
 15 |     |  * ```solidity
 16 |     |  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 17 |     |  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 18 |     |  * }
 19 |     |  * ```
 20 |     |  */
 21 |     | abstract contract ERC165Upgradeable is Initializable, IERC165 {
 22 |     |     function __ERC165_init() internal onlyInitializing {
 23 |     |     }
 24 |     | 
 25 |     |     function __ERC165_init_unchained() internal onlyInitializing {
 26 |     |     }
 27 |     |     /**
 28 |     |      * @dev See {IERC165-supportsInterface}.
 29 |     |      */
 30 |     |     function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
 31 |     |         return interfaceId == type(IERC165).interfaceId;
 32 |     |     }
 33 |     | }
 34 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/01-naive-receiver/FlashLoanReceiver.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.23;
  4 |     | 
  5 |     | import "@openzeppelin/contracts/utils/Address.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @title FlashLoanReceiver
  9 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 10 |     |  */
 11 |     | contract FlashLoanReceiver {
 12 |     |     using Address for address payable;
 13 |     | 
 14 |     |     address payable private pool;
 15 |     | 
 16 |     |     constructor(address payable poolAddress) {
 17 |     |         pool = poolAddress;
 18 |     |     }
 19 |     | 
 20 |     |     // Function called by the pool during flash loan
 21 |     |     function receiveEther(uint256 fee) public payable {
 22 |     |         require(msg.sender == pool, "Sender must be pool");
 23 |     | 
 24 |     |         uint256 amountToBeRepaid = msg.value + fee;
 25 |     | 
 26 |     |         require(address(this).balance >= amountToBeRepaid, "Cannot borrow that much");
 27 |     |         
 28 |     |         _executeActionDuringFlashLoan();
 29 |     |         
 30 |     |         // Return funds to pool
 31 |     |         pool.sendValue(amountToBeRepaid);
 32 |     |     }
 33 |     | 
 34 |     |     // Internal function where the funds received are used
 35 |     |     function _executeActionDuringFlashLoan() internal { }
 36 |     | 
 37 |     |     // Allow deposits of ETH
 38 |     |     receive () external payable {}
 39 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/01-naive-receiver/NaiveReceiverLenderPool.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
  5 |     | import "@openzeppelin/contracts/utils/Address.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @title NaiveReceiverLenderPool
  9 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 10 |     |  */
 11 |     | contract NaiveReceiverLenderPool is ReentrancyGuard {
 12 |     | 
 13 |     |     using Address for address;
 14 |     | 
 15 |     |     uint256 private constant FIXED_FEE = 1 ether; // not the cheapest flash loan
 16 |     | 
 17 |     |     function fixedFee() external pure returns (uint256) {
 18 |     |         return FIXED_FEE;
 19 |     |     }
 20 |     | 
 21 |     |     function flashLoan(address borrower, uint256 borrowAmount) external nonReentrant {
 22 |     | 
 23 |     |         uint256 balanceBefore = address(this).balance;
 24 |     |         require(balanceBefore >= borrowAmount, "Not enough ETH in pool");
 25 |     | 
 26 |     | 
 27 |     |         require(borrower.code.length > 0, "Borrower must be a deployed contract");
 28 |     |         // Transfer ETH and handle control to receiver
 29 |     |         borrower.functionCallWithValue(
 30 |     |             abi.encodeWithSignature(
 31 |     |                 "receiveEther(uint256)",
 32 |     |                 FIXED_FEE
 33 |     |             ),
 34 |     |             borrowAmount
 35 |     |         );
 36 |     |         
 37 |     |         require(
 38 |     |             address(this).balance >= balanceBefore + FIXED_FEE,
 39 |     |             "Flash loan hasn't been paid back"
 40 |     |         );
 41 |     |     }
 42 |     | 
 43 |     |     // Allow deposits of ETH
 44 |     |     receive () external payable {}
 45 |     | }
 46 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/02-unstoppable/ReceiverUnstoppable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.23;
  4 |     | 
  5 |     | import "./UnstoppableLender.sol";
  6 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @title ReceiverUnstoppable
 10 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 11 |     |  */
 12 |     | contract ReceiverUnstoppable {
 13 |     | 
 14 |     |     UnstoppableLender private immutable pool;
 15 |     |     address private immutable owner;
 16 |     | 
 17 |     |     constructor(address poolAddress) {
 18 |     |         pool = UnstoppableLender(poolAddress);
 19 |     |         owner = msg.sender;
 20 |     |     }
 21 |     | 
 22 |     |     // Pool will call this function during the flash loan
 23 |     |     function receiveTokens(address tokenAddress, uint256 amount) external {
 24 |     |         require(msg.sender == address(pool), "Sender must be pool");
 25 |     |         // Return all tokens to the pool
 26 |     |         require(IERC20(tokenAddress).transfer(msg.sender, amount), "Transfer of tokens failed");
 27 |     |     }
 28 |     | 
 29 |     |     function executeFlashLoan(uint256 amount) external {
 30 |     |         require(msg.sender == owner, "Only owner can execute flash loan");
 31 |     |         pool.flashLoan(amount);
 32 |     |     }
 33 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/02-unstoppable/UnstoppableLender.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.23;
  4 |     | 
  5 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  6 |     | import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
  7 |     | 
  8 |     | interface IReceiver {
  9 |     |     function receiveTokens(address tokenAddress, uint256 amount) external;
 10 |     | }
 11 |     | 
 12 |     | /**
 13 |     |  * @title UnstoppableLender
 14 |     |  * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 15 |     |  */
 16 |     | contract UnstoppableLender is ReentrancyGuard {
 17 |     | 
 18 |     |     IERC20 public immutable damnValuableToken;
 19 |     |     uint256 public poolBalance;
 20 |     | 
 21 |     |     constructor(address tokenAddress) {
 22 |     |         require(tokenAddress != address(0), "Token address cannot be zero");
 23 |     |         damnValuableToken = IERC20(tokenAddress);
 24 |     |     }
 25 |     | 
 26 |     |     function depositTokens(uint256 amount) external nonReentrant {
 27 |     |         require(amount > 0, "Must deposit at least one token");
 28 |     |         // Transfer token from sender. Sender must have first approved them.
 29 |     |         damnValuableToken.transferFrom(msg.sender, address(this), amount);
 30 |     |         poolBalance = poolBalance + amount;
 31 |     |     }
 32 |     | 
 33 |     |     function flashLoan(uint256 borrowAmount) external nonReentrant {
 34 |     |         require(borrowAmount > 0, "Must borrow at least one token");
 35 |     | 
 36 |     |         uint256 balanceBefore = damnValuableToken.balanceOf(address(this));
 37 |     |         require(balanceBefore >= borrowAmount, "Not enough tokens in pool");
 38 |     | 
 39 |     |         // Ensured by the protocol via the `depositTokens` function
 40 |     |         assert(poolBalance == balanceBefore);
 41 |     |         
 42 |     |         damnValuableToken.transfer(msg.sender, borrowAmount);
 43 |     |         
 44 |     |         IReceiver(msg.sender).receiveTokens(address(damnValuableToken), borrowAmount);
 45 |     |         
 46 |     |         uint256 balanceAfter = damnValuableToken.balanceOf(address(this));
 47 |     |         require(balanceAfter >= balanceBefore, "Flash loan hasn't been paid back");
 48 |     |     }
 49 |     | }
 50 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/03-proposal/EchidnaProposal.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./Proposal.sol";
  5 |     | // import "forge-std/Test.sol";
  6 |     | 
  7 |     | 
  8 |     | contract EchidnaProposal {
  9 |     | 
 10 |     |     address[] public votersList;
 11 |     |     Proposal public proposal;
 12 |     |     uint256 public MSG_VALUE = 10000000000000000000;
 13 |     |     event ProposalBalanceBefore(uint256 balance_Before);
 14 |     |     event ProposalBalanceAfter(uint256 balance_After);
 15 |     | 
 16 |     |     constructor() payable {
 17 |     |         votersList.push(address(0x1000000000000000000000000000000000000000));
 18 |     |         votersList.push(address(0x2000000000000000000000000000000000000000));
 19 |     |         votersList.push(address(0x3000000000000000000000000000000000000000));
 20 |     |         votersList.push(address(0x4000000000000000000000000000000000000000));
 21 |     |         votersList.push(address(0x5000000000000000000000000000000000000000));
 22 |     | 
 23 |     |         proposal = new Proposal{value: MSG_VALUE}(votersList);
 24 |     | 
 25 |     |         assert(proposal.getTotalAllowedVoters() == votersList.length);
 26 |     |         assert(address(proposal).balance == MSG_VALUE);
 27 |     |         // console.log("This is the bal" , address(proposal).balance);
 28 |     |     }
 29 |     | 
 30 |     |     // function test_checkBal() public view {
 31 |     |     //     assert(proposal.getTotalAllowedVoters() == votersList.length);
 32 |     |     // }
 33 |     | 
 34 |     |     function echidna_check_Balance() public returns(bool) {
 35 |     |         uint256  balance = address(proposal).balance;
 36 |     |         emit ProposalBalanceBefore(balance);
 37 |     | 
 38 |     |         if(proposal.isActive()){
 39 |     |             uint256  balanceAfter = address(proposal).balance;
 40 |     |             emit ProposalBalanceAfter(balanceAfter);
 41 |     |             return (address(proposal).balance == MSG_VALUE);
 42 |     |         }
 43 |     |         else{
 44 |     |             uint256  balanceAfter = address(proposal).balance;
 45 |     |             emit ProposalBalanceAfter(balanceAfter);
 46 |     |             return (address(proposal).balance == 0);
 47 |     |         }
 48 |     |     }
 49 |     | 
 50 |     |     receive() external payable {}
 51 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/03-proposal/EchidnaProposalModified.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./ProposalModified.sol";
  5 |     | // import "forge-std/Test.sol";
  6 |     | 
  7 |     | 
  8 |     | contract EchidnaProposalModified {
  9 |     | 
 10 |     |     address[] public votersList;
 11 |     |     ProposalModified public proposal;
 12 |     |     uint256 public MSG_VALUE = 10000000000000000000;
 13 |     | 
 14 |     |     event ProposalBalance(uint256);
 15 |     | 
 16 |     |     constructor() payable {
 17 |     |         votersList.push(address(0x1000000000000000000000000000000000000000));
 18 |     |         votersList.push(address(0x2000000000000000000000000000000000000000));
 19 |     |         votersList.push(address(0x3000000000000000000000000000000000000000));
 20 |     |         votersList.push(address(0x4000000000000000000000000000000000000000));
 21 |     |         votersList.push(address(0x5000000000000000000000000000000000000000));
 22 |     | 
 23 |     |         proposal = new ProposalModified{value: MSG_VALUE}(votersList);
 24 |     | 
 25 |     |         assert(proposal.getTotalAllowedVoters() == votersList.length);
 26 |     |         assert(address(proposal).balance == MSG_VALUE);
 27 |     |         // console.log("This is the bal" , address(proposal).balance);
 28 |     |     }
 29 |     | 
 30 |     |     // function test_checkBal() public view {
 31 |     |     //     assert(proposal.getTotalAllowedVoters() == votersList.length);
 32 |     |     // }
 33 |     | 
 34 |     |     function echidna_check_Balance() public  returns(bool) {
 35 |     |         uint256  balance = address(proposal).balance;
 36 |     |         emit ProposalBalance(balance);
 37 |     | 
 38 |     |         if(proposal.isActive()){
 39 |     |             return (address(proposal).balance == MSG_VALUE);
 40 |     |         }
 41 |     |         else{
 42 |     |             return (address(proposal).balance == 0);
 43 |     |         }
 44 |     |     }
 45 |     | 
 46 |     | 
 47 |     |     function echidna_check_Votes() public  returns(bool){
 48 |     |         uint256  balance = address(proposal).balance;
 49 |     |         emit ProposalBalance(balance);
 50 |     |         
 51 |     |         if(!proposal.isActive()){
 52 |     |             address[] memory votesFor = proposal.votersFor();
 53 |     |             address[] memory votesAgainst = proposal.votersAgainst();
 54 |     | 
 55 |     |             if(votesFor.length > votesAgainst.length){
 56 |     |                 for(uint256 i =0; i < votesAgainst.length; i++){
 57 |     |                     return votesAgainst[i].balance == 0;
 58 |     |                 }
 59 |     |             }
 60 |     |             // (votesFor.length < votesAgainst.length)
 61 |     |             else{
 62 |     |                 return (proposal.s_creator().balance == MSG_VALUE);
 63 |     |             }
 64 |     |         }
 65 |     |         return true;
 66 |     |     }
 67 |     | 
 68 |     | 
 69 |     |     receive() external payable {}
 70 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/03-proposal/EchidnaProposalSolution.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./ProposalSolution.sol";
  5 |     | // import "forge-std/Test.sol";
  6 |     | 
  7 |     | 
  8 |     | contract EchidnaProposalSolution {
  9 |     | 
 10 |     |     address[] public votersList;
 11 |     |     ProposalSolution public proposal;
 12 |     |     uint256 public MSG_VALUE = 10000000000000000000;
 13 |     |     event ProposalBalanceBefore(uint256 balance_Before);
 14 |     |     event ProposalBalanceAfter(uint256 balance_After);
 15 |     | 
 16 |     |     constructor() payable {
 17 |     |         votersList.push(address(0x1000000000000000000000000000000000000000));
 18 |     |         votersList.push(address(0x2000000000000000000000000000000000000000));
 19 |     |         votersList.push(address(0x3000000000000000000000000000000000000000));
 20 |     |         votersList.push(address(0x4000000000000000000000000000000000000000));
 21 |     |         votersList.push(address(0x5000000000000000000000000000000000000000));
 22 |     | 
 23 |     |         proposal = new ProposalSolution{value: MSG_VALUE}(votersList);
 24 |     | 
 25 |     |         assert(proposal.getTotalAllowedVoters() == votersList.length);
 26 |     |         assert(address(proposal).balance == MSG_VALUE);
 27 |     |         // console.log("This is the bal" , address(proposal).balance);
 28 |     |     }
 29 |     | 
 30 |     |     // function test_checkBal() public view {
 31 |     |     //     assert(proposal.getTotalAllowedVoters() == votersList.length);
 32 |     |     // }
 33 |     | 
 34 |     |     function echidna_check_Balance() public returns(bool) {
 35 |     |         uint256  balance = address(proposal).balance;
 36 |     |         emit ProposalBalanceBefore(balance);
 37 |     | 
 38 |     |         if(proposal.isActive()){
 39 |     |             uint256  balanceAfter = address(proposal).balance;
 40 |     |             emit ProposalBalanceAfter(balanceAfter);
 41 |     |             return (address(proposal).balance == MSG_VALUE);
 42 |     |         }
 43 |     |         else{
 44 |     |             uint256  balanceAfter = address(proposal).balance;
 45 |     |             emit ProposalBalanceAfter(balanceAfter);
 46 |     |             return (address(proposal).balance == 0);
 47 |     |         }
 48 |     |     }
 49 |     | 
 50 |     |     receive() external payable {}
 51 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/03-proposal/Proposal.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   5 |     | 
   6 |     | //
   7 |     | // This contract is a simplified version of a real contract which
   8 |     | // was audited by Cyfrin in a private audit and contained the same bug.
   9 |     | //
  10 |     | // Your mission, should you choose to accept it, is to find that bug!
  11 |     | //
  12 |     | // This contract allows the creator to invite a select group of people
  13 |     | // to vote on something and provides an eth reward to the `for` voters
  14 |     | // if the proposal passes, otherwise refunds the reward to the creator.
  15 |     | // The creator of the contract is considered "Trusted".
  16 |     | //
  17 |     | // This contract has been intentionally simplified to remove much of
  18 |     | // the extra complexity in order to help you find the particular bug without
  19 |     | // other distractions. Please read the comments carefully as they note
  20 |     | // specific findings that are excluded as the implementation has been
  21 |     | // purposefully kept simple to help you focus on finding the harder
  22 |     | // to find and more interesting bug.
  23 |     | //
  24 |     | // This contract intentionally has no time-out period for the voting
  25 |     | // to complete; lack of a time-out period resulting in voting never
  26 |     | // completing is not a valid finding as this has been intentionally 
  27 |     | // omitted to simplify the codebase.
  28 |     | //
  29 |     | // This contract should only contain 1 intentional High finding, but
  30 |     | // if you find others they were not intentional :-) This contract should
  31 |     | // not be used in any live/production environment; it is purely an
  32 |     | // educational bug-hunting exercise based on a real-world example.
  33 |     | //
  34 |     | contract Proposal {
  35 |     |     // smallest amount proposal creator can fund contract with
  36 |     |     uint256 private constant MIN_FUNDING = 1 ether;
  37 |     | 
  38 |     |     // min/max number of voters
  39 |     |     uint256 private constant MIN_VOTERS  = 3;
  40 |     |     uint256 private constant MAX_VOTERS  = 9;
  41 |     | 
  42 |     |     // min quorum
  43 |     |     uint256 private constant MIN_QUORUM  = 51;
  44 |     | 
  45 |     |     // constants used for `voterState` in `s_voters` mapping
  46 |     |     uint8 private constant DISALLOWED    = 0;
  47 |     |     uint8 private constant ALLOWED       = 1;
  48 |     |     uint8 private constant VOTED         = 2;
  49 |     | 
  50 |     |     // only permitted addresses can vote, each address gets 1 vote
  51 |     |     mapping(address voter => uint8 voterState) private s_voters;
  52 |     | 
  53 |     |     // creator of this proposal. Any findings related to the creator
  54 |     |     // not being able to update this address are invalid; this has
  55 |     |     // intentionally been omitted to simplify the contract so you can
  56 |     |     // focus on finding the cool bug instead of lame/easy stuff. Proposal
  57 |     |     // creator is trusted to create the proposal from an address that
  58 |     |     // can receive eth
  59 |     |     address private s_creator;
  60 |     | 
  61 |     |     // total number of allowed voters
  62 |     |     uint256 private s_totalAllowedVoters;
  63 |     | 
  64 |     |     // total number of current votes
  65 |     |     uint256 private s_totalCurrentVotes;
  66 |     | 
  67 |     |     // list of users who voted for
  68 |     |     address[] private s_votersFor;
  69 |     | 
  70 |     |     // list of users who votes against
  71 |     |     address[] private s_votersAgainst;
  72 |     | 
  73 |     |     // whether voting has been completed
  74 |     |     bool private s_votingComplete;
  75 |     | 
  76 |     |     // create the contract
  77 |     |     constructor(address[] memory allowList) payable {
  78 |     |         // require minimum eth proposal reward
  79 |     |         require(msg.value >= MIN_FUNDING, "DP: Minimum 1 eth proposal reward required");
  80 |     | 
  81 |     |         // cache list length
  82 |     |         uint256 allowListLength = allowList.length;
  83 |     | 
  84 |     |         // perform some sanity checks. NOTE: checks for duplicate inputs
  85 |     |         // are performed by entity creating the proposal who is
  86 |     |         // supplying the eth and is trusted, so the contract intentionally
  87 |     |         // does not re-check for duplicate inputs. Findings related to
  88 |     |         // not checking for duplicate inputs are invalid.
  89 |     |         require(allowListLength >= MIN_VOTERS, "DP: Minimum 3 voters required");
  90 |     |         require(allowListLength <= MAX_VOTERS, "DP: Maximum 9 voters allowed");
  91 |     | 
  92 |     |         // odd number of voters required to simplify quorum check
  93 |     |         require(allowListLength % 2 != 0, "DP: Odd number of voters required");
  94 |     | 
  95 |     |         // cache total voters to prevent multiple storage writes
  96 |     |         uint256 totalVoters;
  97 |     | 
  98 |     |         // store addresses allowed to vote on this proposal
  99 |     |         for(; totalVoters<allowListLength; ++totalVoters) {
 100 |     |             // sanity check to prevent address(0) as a valid voter
 101 |     |             address voter = allowList[totalVoters];
 102 |     |             require(voter != address(0), "DP: address(0) not a valid voter");
 103 |     | 
 104 |     |             s_voters[voter] = ALLOWED;
 105 |     |         }
 106 |     | 
 107 |     |         // update storage of total voters only once
 108 |     |         s_totalAllowedVoters = totalVoters;
 109 |     | 
 110 |     |         // update the proposal creator
 111 |     |         s_creator = msg.sender;
 112 |     | 
 113 |     |         // eth stored in this contract to be distributed once
 114 |     |         // voting is complete
 115 |     |     }
 116 |     | 
 117 |     |     // record a vote
 118 |     |     function vote(bool voteInput) external {
 119 |     |         // prevent voting if already completed
 120 |     |         require(isActive(), "DP: voting has been completed on this proposal");
 121 |     | 
 122 |     |         // current voter
 123 |     |         address voter = msg.sender;
 124 |     | 
 125 |     |         // prevent voting if not allowed or already voted
 126 |     |         require(s_voters[voter] == ALLOWED, "DP: voter not allowed or already voted");
 127 |     | 
 128 |     |         // update storage to record that this user has voted
 129 |     |         s_voters[voter] = VOTED;
 130 |     | 
 131 |     |         // update storage to increment total current votes
 132 |     |         // and store new value on the stack
 133 |     |         uint256 totalCurrentVotes = ++s_totalCurrentVotes;
 134 |     | 
 135 |     |         // add user to either the `for` or `against` list
 136 |     |         if(voteInput) s_votersFor.push(voter);
 137 |     |         else s_votersAgainst.push(voter);
 138 |     | 
 139 |     |         // check if quorum has been reached. Quorum is reached
 140 |     |         // when at least 51% of the total allowed voters have cast
 141 |     |         // their vote. For example if there are 5 allowed voters:
 142 |     |         //
 143 |     |         // first votes For
 144 |     |         // second votes For
 145 |     |         // third votes Against
 146 |     |         //
 147 |     |         // Quorum has now been reached (3/5) and the vote will pass as
 148 |     |         // votesFor (2) > votesAgainst (1).
 149 |     |         //
 150 |     |         // This system of voting doesn't require a strict majority to
 151 |     |         // pass the proposal (it didn't require 3 For votes), it just
 152 |     |         // requires the quorum to be reached (enough people to vote)
 153 |     |         //
 154 |     |         if(totalCurrentVotes * 100 / s_totalAllowedVoters >= MIN_QUORUM) {
 155 |     |             // mark voting as having been completed
 156 |     |             s_votingComplete = true;
 157 |     | 
 158 |     |             // distribute the voting rewards
 159 |     |             _distributeRewards();
 160 |     |         }
 161 |     |     }
 162 |     | 
 163 |     |     // distributes rewards to the `for` voters if the proposal has
 164 |     |     // passed or refunds the rewards back to the creator if the proposal
 165 |     |     // failed
 166 |     |     function _distributeRewards() private {
 167 |     |         // get number of voters for & against
 168 |     |         uint256 totalVotesFor     = s_votersFor.length;
 169 |     |         uint256 totalVotesAgainst = s_votersAgainst.length;
 170 |     |         uint256 totalVotes        = totalVotesFor + totalVotesAgainst;
 171 |     | 
 172 |     |         // rewards to distribute or refund. This is guaranteed to be
 173 |     |         // greater or equal to the minimum funding amount by a check
 174 |     |         // in the constructor, and there is intentionally by design
 175 |     |         // no way to decrease or increase this amount. Any findings
 176 |     |         // related to not being able to increase/decrease the total
 177 |     |         // reward amount are invalid
 178 |     |         uint256 totalRewards = address(this).balance;
 179 |     | 
 180 |     |         // if the proposal was defeated refund reward back to the creator
 181 |     |         // for the proposal to be successful it must have had more `For` votes
 182 |     |         // than `Against` votes
 183 |     |         if(totalVotesAgainst >= totalVotesFor) {
 184 |     |             // proposal creator is trusted to create a proposal from an address
 185 |     |             // that can receive ETH. See comment before declaration of `s_creator`
 186 |     |             _sendEth(s_creator, totalRewards);
 187 |     |         }
 188 |     |         // otherwise the proposal passed so distribute rewards to the `For` voters
 189 |     |         else{
 190 |     |             uint256 rewardPerVoter = totalRewards / totalVotes;
 191 |     | 
 192 |     |             for(uint256 i; i<totalVotesFor; ++i) {
 193 |     |                 // proposal creator is trusted when creating allowed list of voters,
 194 |     |                 // findings related to gas griefing attacks or sending eth
 195 |     |                 // to an address reverting thereby stopping the reward payouts are
 196 |     |                 // invalid. Yes pull is to be preferred to push but this
 197 |     |                 // has not been implemented in this simplified version to
 198 |     |                 // reduce complexity & help you focus on finding the
 199 |     |                 // harder to find bug
 200 |     | 
 201 |     |                 // if at the last voter round up to avoid leaving dust; this means that
 202 |     |                 // the last voter can get 1 wei more than the rest - this is not
 203 |     |                 // a valid finding, it is simply how we deal with imperfect division
 204 |     |                 if(i == totalVotesFor-1) {
 205 |     |                     rewardPerVoter = Math.mulDiv(totalRewards, 1, totalVotes, Math.Rounding.Ceil);
 206 |     |                 }
 207 |     |                 _sendEth(s_votersFor[i], rewardPerVoter);
 208 |     |             }
 209 |     |         }
 210 |     |     }
 211 |     | 
 212 |     |     // sends eth using low-level call as we don't care about returned data
 213 |     |     function _sendEth(address dest, uint256 amount) private {
 214 |     |         bool sendStatus;
 215 |     |         assembly {
 216 |     |             sendStatus := call(gas(), dest, amount, 0, 0, 0, 0)
 217 |     |         }
 218 |     |         require(sendStatus, "DP: failed to send eth");
 219 |     |     }
 220 |     | 
 221 |     |     // returns true if the proposal is active or false if finished,
 222 |     |     // used internally and also externally to validate setup
 223 |     |     function isActive() public view returns(bool) {
 224 |     |         return !s_votingComplete;
 225 |     |     }
 226 |     | 
 227 |     |     // returns total number of allowed voters, used externally to validate setup
 228 |     |     function getTotalAllowedVoters() external view returns(uint256) {
 229 |     |         return s_totalAllowedVoters;
 230 |     |     }
 231 |     |     
 232 |     |     // returns the proposal creator, used externally to validate setup
 233 |     |     function getCreator() external view returns(address) {
 234 |     |         return s_creator;
 235 |     |     }
 236 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/03-proposal/ProposalModified.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   5 |     | 
   6 |     | //
   7 |     | // This contract is a simplified version of a real contract which
   8 |     | // was audited by Cyfrin in a private audit and contained the same bug.
   9 |     | //
  10 |     | // Your mission, should you choose to accept it, is to find that bug!
  11 |     | //
  12 |     | // This contract allows the creator to invite a select group of people
  13 |     | // to vote on something and provides an eth reward to the `for` voters
  14 |     | // if the proposal passes, otherwise refunds the reward to the creator.
  15 |     | // The creator of the contract is considered "Trusted".
  16 |     | //
  17 |     | // This contract has been intentionally simplified to remove much of
  18 |     | // the extra complexity in order to help you find the particular bug without
  19 |     | // other distractions. Please read the comments carefully as they note
  20 |     | // specific findings that are excluded as the implementation has been
  21 |     | // purposefully kept simple to help you focus on finding the harder
  22 |     | // to find and more interesting bug.
  23 |     | //
  24 |     | // This contract intentionally has no time-out period for the voting
  25 |     | // to complete; lack of a time-out period resulting in voting never
  26 |     | // completing is not a valid finding as this has been intentionally 
  27 |     | // omitted to simplify the codebase.
  28 |     | //
  29 |     | // This contract should only contain 1 intentional High finding, but
  30 |     | // if you find others they were not intentional :-) This contract should
  31 |     | // not be used in any live/production environment; it is purely an
  32 |     | // educational bug-hunting exercise based on a real-world example.
  33 |     | //
  34 |     | contract ProposalModified {
  35 |     |     // smallest amount proposal creator can fund contract with
  36 |     |     uint256 public constant MIN_FUNDING = 1 ether;
  37 |     | 
  38 |     |     // min/max number of voters
  39 |     |     uint256 public constant MIN_VOTERS  = 3;
  40 |     |     uint256 public constant MAX_VOTERS  = 9;
  41 |     | 
  42 |     |     // min quorum
  43 |     |     uint256 public constant MIN_QUORUM  = 51;
  44 |     | 
  45 |     |     // constants used for `voterState` in `s_voters` mapping
  46 |     |     uint8 public constant DISALLOWED    = 0;
  47 |     |     uint8 public constant ALLOWED       = 1;
  48 |     |     uint8 public constant VOTED         = 2;
  49 |     | 
  50 |     |     // only permitted addresses can vote, each address gets 1 vote
  51 |     |     mapping(address voter => uint8 voterState) public s_voters;
  52 |     | 
  53 |     |     // creator of this proposal. Any findings related to the creator
  54 |     |     // not being able to update this address are invalid; this has
  55 |     |     // intentionally been omitted to simplify the contract so you can
  56 |     |     // focus on finding the cool bug instead of lame/easy stuff. Proposal
  57 |     |     // creator is trusted to create the proposal from an address that
  58 |     |     // can receive eth
  59 |     |     address public s_creator;
  60 |     | 
  61 |     |     // total number of allowed voters
  62 |     |     uint256 public s_totalAllowedVoters;
  63 |     | 
  64 |     |     // total number of current votes
  65 |     |     uint256 public s_totalCurrentVotes;
  66 |     | 
  67 |     |     // list of users who voted for
  68 |     |     address[] private s_votersFor;
  69 |     | 
  70 |     |     // list of users who votes against
  71 |     |     address[] private s_votersAgainst;
  72 |     | 
  73 |     |     // whether voting has been completed
  74 |     |     bool public s_votingComplete;
  75 |     | 
  76 |     |     // create the contract
  77 |     |     constructor(address[] memory allowList) payable {
  78 |     |         // require minimum eth proposal reward
  79 |     |         require(msg.value >= MIN_FUNDING, "DP: Minimum 1 eth proposal reward required");
  80 |     | 
  81 |     |         // cache list length
  82 |     |         uint256 allowListLength = allowList.length;
  83 |     | 
  84 |     |         // perform some sanity checks. NOTE: checks for duplicate inputs
  85 |     |         // are performed by entity creating the proposal who is
  86 |     |         // supplying the eth and is trusted, so the contract intentionally
  87 |     |         // does not re-check for duplicate inputs. Findings related to
  88 |     |         // not checking for duplicate inputs are invalid.
  89 |     |         require(allowListLength >= MIN_VOTERS, "DP: Minimum 3 voters required");
  90 |     |         require(allowListLength <= MAX_VOTERS, "DP: Maximum 9 voters allowed");
  91 |     | 
  92 |     |         // odd number of voters required to simplify quorum check
  93 |     |         require(allowListLength % 2 != 0, "DP: Odd number of voters required");
  94 |     | 
  95 |     |         // cache total voters to prevent multiple storage writes
  96 |     |         uint256 totalVoters;
  97 |     | 
  98 |     |         // store addresses allowed to vote on this proposal
  99 |     |         for(; totalVoters<allowListLength; ++totalVoters) {
 100 |     |             // sanity check to prevent address(0) as a valid voter
 101 |     |             address voter = allowList[totalVoters];
 102 |     |             require(voter != address(0), "DP: address(0) not a valid voter");
 103 |     | 
 104 |     |             s_voters[voter] = ALLOWED;
 105 |     |         }
 106 |     | 
 107 |     |         // update storage of total voters only once
 108 |     |         s_totalAllowedVoters = totalVoters;
 109 |     | 
 110 |     |         // update the proposal creator
 111 |     |         s_creator = msg.sender;
 112 |     | 
 113 |     |         // eth stored in this contract to be distributed once
 114 |     |         // voting is complete
 115 |     |     }
 116 |     | 
 117 |     |     // record a vote
 118 |     |     function vote(bool voteInput) external {
 119 |     |         // prevent voting if already completed
 120 |     |         require(isActive(), "DP: voting has been completed on this proposal");
 121 |     | 
 122 |     |         // current voter
 123 |     |         address voter = msg.sender;
 124 |     | 
 125 |     |         // prevent voting if not allowed or already voted
 126 |     |         require(s_voters[voter] == ALLOWED, "DP: voter not allowed or already voted");
 127 |     | 
 128 |     |         // update storage to record that this user has voted
 129 |     |         s_voters[voter] = VOTED;
 130 |     | 
 131 |     |         // update storage to increment total current votes
 132 |     |         // and store new value on the stack
 133 |     |         uint256 totalCurrentVotes = ++s_totalCurrentVotes;
 134 |     | 
 135 |     |         // add user to either the `for` or `against` list
 136 |     |         if(voteInput) s_votersFor.push(voter);
 137 |     |         else s_votersAgainst.push(voter);
 138 |     | 
 139 |     |         // check if quorum has been reached. Quorum is reached
 140 |     |         // when at least 51% of the total allowed voters have cast
 141 |     |         // their vote. For example if there are 5 allowed voters:
 142 |     |         //
 143 |     |         // first votes For
 144 |     |         // second votes For
 145 |     |         // third votes Against
 146 |     |         //
 147 |     |         // Quorum has now been reached (3/5) and the vote will pass as
 148 |     |         // votesFor (2) > votesAgainst (1).
 149 |     |         //
 150 |     |         // This system of voting doesn't require a strict majority to
 151 |     |         // pass the proposal (it didn't require 3 For votes), it just
 152 |     |         // requires the quorum to be reached (enough people to vote)
 153 |     |         //
 154 |     |         if(totalCurrentVotes * 100 / s_totalAllowedVoters >= MIN_QUORUM) {
 155 |     |             // mark voting as having been completed
 156 |     |             s_votingComplete = true;
 157 |     | 
 158 |     |             // distribute the voting rewards
 159 |     |             _distributeRewards();
 160 |     |         }
 161 |     |     }
 162 |     | 
 163 |     |     // distributes rewards to the `for` voters if the proposal has
 164 |     |     // passed or refunds the rewards back to the creator if the proposal
 165 |     |     // failed
 166 |     |     function _distributeRewards() private {
 167 |     |         // get number of voters for & against
 168 |     |         uint256 totalVotesFor     = s_votersFor.length;
 169 |     |         uint256 totalVotesAgainst = s_votersAgainst.length;
 170 |     |         uint256 totalVotes        = totalVotesFor + totalVotesAgainst;
 171 |     | 
 172 |     |         // rewards to distribute or refund. This is guaranteed to be
 173 |     |         // greater or equal to the minimum funding amount by a check
 174 |     |         // in the constructor, and there is intentionally by design
 175 |     |         // no way to decrease or increase this amount. Any findings
 176 |     |         // related to not being able to increase/decrease the total
 177 |     |         // reward amount are invalid
 178 |     |         uint256 totalRewards = address(this).balance;
 179 |     | 
 180 |     |         // if the proposal was defeated refund reward back to the creator
 181 |     |         // for the proposal to be successful it must have had more `For` votes
 182 |     |         // than `Against` votes
 183 |     |         if(totalVotesAgainst >= totalVotesFor) {
 184 |     |             // proposal creator is trusted to create a proposal from an address
 185 |     |             // that can receive ETH. See comment before declaration of `s_creator`
 186 |     |             _sendEth(s_creator, totalRewards);
 187 |     |         }
 188 |     |         // otherwise the proposal passed so distribute rewards to the `For` voters
 189 |     |         else{
 190 |     |             uint256 rewardPerVoter = totalRewards / totalVotes;
 191 |     | 
 192 |     |             for(uint256 i; i<totalVotesFor; ++i) {
 193 |     |                 // proposal creator is trusted when creating allowed list of voters,
 194 |     |                 // findings related to gas griefing attacks or sending eth
 195 |     |                 // to an address reverting thereby stopping the reward payouts are
 196 |     |                 // invalid. Yes pull is to be preferred to push but this
 197 |     |                 // has not been implemented in this simplified version to
 198 |     |                 // reduce complexity & help you focus on finding the
 199 |     |                 // harder to find bug
 200 |     | 
 201 |     |                 // if at the last voter round up to avoid leaving dust; this means that
 202 |     |                 // the last voter can get 1 wei more than the rest - this is not
 203 |     |                 // a valid finding, it is simply how we deal with imperfect division
 204 |     |                 if(i == totalVotesFor-1) {
 205 |     |                     rewardPerVoter = Math.mulDiv(totalRewards, 1, totalVotes, Math.Rounding.Ceil);
 206 |     |                 }
 207 |     |                 _sendEth(s_votersFor[i], rewardPerVoter);
 208 |     |             }
 209 |     |         }
 210 |     |     }
 211 |     | 
 212 |     |     // sends eth using low-level call as we don't care about returned data
 213 |     |     function _sendEth(address dest, uint256 amount) private {
 214 |     |         bool sendStatus;
 215 |     |         assembly {
 216 |     |             sendStatus := call(gas(), dest, amount, 0, 0, 0, 0)
 217 |     |         }
 218 |     |         require(sendStatus, "DP: failed to send eth");
 219 |     |     }
 220 |     | 
 221 |     |     // returns true if the proposal is active or false if finished,
 222 |     |     // used internally and also externally to validate setup
 223 |     |     function isActive() public view returns(bool) {
 224 |     |         return !s_votingComplete;
 225 |     |     }
 226 |     | 
 227 |     |     // returns total number of allowed voters, used externally to validate setup
 228 |     |     function getTotalAllowedVoters() external view returns(uint256) {
 229 |     |         return s_totalAllowedVoters;
 230 |     |     }
 231 |     |     
 232 |     |     // returns the proposal creator, used externally to validate setup
 233 |     |     function getCreator() external view returns(address) {
 234 |     |         return s_creator;
 235 |     |     }
 236 |     | 
 237 |     |     function votersFor() external view returns(address[] memory){
 238 |     |         return s_votersFor;
 239 |     |     }
 240 |     | 
 241 |     |     function votersAgainst() external view returns(address[] memory){
 242 |     |         return s_votersAgainst;
 243 |     |     }
 244 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/03-proposal/ProposalSolution.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   5 |     | 
   6 |     | //
   7 |     | // This contract is a simplified version of a real contract which
   8 |     | // was audited by Cyfrin in a private audit and contained the same bug.
   9 |     | //
  10 |     | // Your mission, should you choose to accept it, is to find that bug!
  11 |     | //
  12 |     | // This contract allows the creator to invite a select group of people
  13 |     | // to vote on something and provides an eth reward to the `for` voters
  14 |     | // if the proposal passes, otherwise refunds the reward to the creator.
  15 |     | // The creator of the contract is considered "Trusted".
  16 |     | //
  17 |     | // This contract has been intentionally simplified to remove much of
  18 |     | // the extra complexity in order to help you find the particular bug without
  19 |     | // other distractions. Please read the comments carefully as they note
  20 |     | // specific findings that are excluded as the implementation has been
  21 |     | // purposefully kept simple to help you focus on finding the harder
  22 |     | // to find and more interesting bug.
  23 |     | //
  24 |     | // This contract intentionally has no time-out period for the voting
  25 |     | // to complete; lack of a time-out period resulting in voting never
  26 |     | // completing is not a valid finding as this has been intentionally 
  27 |     | // omitted to simplify the codebase.
  28 |     | //
  29 |     | // This contract should only contain 1 intentional High finding, but
  30 |     | // if you find others they were not intentional :-) This contract should
  31 |     | // not be used in any live/production environment; it is purely an
  32 |     | // educational bug-hunting exercise based on a real-world example.
  33 |     | //
  34 |     | contract ProposalSolution {
  35 |     |     // smallest amount proposal creator can fund contract with
  36 |     |     uint256 private constant MIN_FUNDING = 1 ether;
  37 |     | 
  38 |     |     // min/max number of voters
  39 |     |     uint256 private constant MIN_VOTERS  = 3;
  40 |     |     uint256 private constant MAX_VOTERS  = 9;
  41 |     | 
  42 |     |     // min quorum
  43 |     |     uint256 private constant MIN_QUORUM  = 51;
  44 |     | 
  45 |     |     // constants used for `voterState` in `s_voters` mapping
  46 |     |     uint8 private constant DISALLOWED    = 0;
  47 |     |     uint8 private constant ALLOWED       = 1;
  48 |     |     uint8 private constant VOTED         = 2;
  49 |     | 
  50 |     |     // only permitted addresses can vote, each address gets 1 vote
  51 |     |     mapping(address voter => uint8 voterState) private s_voters;
  52 |     | 
  53 |     |     // creator of this proposal. Any findings related to the creator
  54 |     |     // not being able to update this address are invalid; this has
  55 |     |     // intentionally been omitted to simplify the contract so you can
  56 |     |     // focus on finding the cool bug instead of lame/easy stuff. Proposal
  57 |     |     // creator is trusted to create the proposal from an address that
  58 |     |     // can receive eth
  59 |     |     address private s_creator;
  60 |     | 
  61 |     |     // total number of allowed voters
  62 |     |     uint256 private s_totalAllowedVoters;
  63 |     | 
  64 |     |     // total number of current votes
  65 |     |     uint256 private s_totalCurrentVotes;
  66 |     | 
  67 |     |     // list of users who voted for
  68 |     |     address[] private s_votersFor;
  69 |     | 
  70 |     |     // list of users who votes against
  71 |     |     address[] private s_votersAgainst;
  72 |     | 
  73 |     |     // whether voting has been completed
  74 |     |     bool private s_votingComplete;
  75 |     | 
  76 |     |     // create the contract
  77 |     |     constructor(address[] memory allowList) payable {
  78 |     |         // require minimum eth proposal reward
  79 |     |         require(msg.value >= MIN_FUNDING, "DP: Minimum 1 eth proposal reward required");
  80 |     | 
  81 |     |         // cache list length
  82 |     |         uint256 allowListLength = allowList.length;
  83 |     | 
  84 |     |         // perform some sanity checks. NOTE: checks for duplicate inputs
  85 |     |         // are performed by entity creating the proposal who is
  86 |     |         // supplying the eth and is trusted, so the contract intentionally
  87 |     |         // does not re-check for duplicate inputs. Findings related to
  88 |     |         // not checking for duplicate inputs are invalid.
  89 |     |         require(allowListLength >= MIN_VOTERS, "DP: Minimum 3 voters required");
  90 |     |         require(allowListLength <= MAX_VOTERS, "DP: Maximum 9 voters allowed");
  91 |     | 
  92 |     |         // odd number of voters required to simplify quorum check
  93 |     |         require(allowListLength % 2 != 0, "DP: Odd number of voters required");
  94 |     | 
  95 |     |         // cache total voters to prevent multiple storage writes
  96 |     |         uint256 totalVoters;
  97 |     | 
  98 |     |         // store addresses allowed to vote on this proposal
  99 |     |         for(; totalVoters<allowListLength; ++totalVoters) {
 100 |     |             // sanity check to prevent address(0) as a valid voter
 101 |     |             address voter = allowList[totalVoters];
 102 |     |             require(voter != address(0), "DP: address(0) not a valid voter");
 103 |     | 
 104 |     |             s_voters[voter] = ALLOWED;
 105 |     |         }
 106 |     | 
 107 |     |         // update storage of total voters only once
 108 |     |         s_totalAllowedVoters = totalVoters;
 109 |     | 
 110 |     |         // update the proposal creator
 111 |     |         s_creator = msg.sender;
 112 |     | 
 113 |     |         // eth stored in this contract to be distributed once
 114 |     |         // voting is complete
 115 |     |     }
 116 |     | 
 117 |     |     // record a vote
 118 |     |     function vote(bool voteInput) external {
 119 |     |         // prevent voting if already completed
 120 |     |         require(isActive(), "DP: voting has been completed on this proposal");
 121 |     | 
 122 |     |         // current voter
 123 |     |         address voter = msg.sender;
 124 |     | 
 125 |     |         // prevent voting if not allowed or already voted
 126 |     |         require(s_voters[voter] == ALLOWED, "DP: voter not allowed or already voted");
 127 |     | 
 128 |     |         // update storage to record that this user has voted
 129 |     |         s_voters[voter] = VOTED;
 130 |     | 
 131 |     |         // update storage to increment total current votes
 132 |     |         // and store new value on the stack
 133 |     |         uint256 totalCurrentVotes = ++s_totalCurrentVotes;
 134 |     | 
 135 |     |         // add user to either the `for` or `against` list
 136 |     |         if(voteInput) s_votersFor.push(voter);
 137 |     |         else s_votersAgainst.push(voter);
 138 |     | 
 139 |     |         // check if quorum has been reached. Quorum is reached
 140 |     |         // when at least 51% of the total allowed voters have cast
 141 |     |         // their vote. For example if there are 5 allowed voters:
 142 |     |         //
 143 |     |         // first votes For
 144 |     |         // second votes For
 145 |     |         // third votes Against
 146 |     |         //
 147 |     |         // Quorum has now been reached (3/5) and the vote will pass as
 148 |     |         // votesFor (2) > votesAgainst (1).
 149 |     |         //
 150 |     |         // This system of voting doesn't require a strict majority to
 151 |     |         // pass the proposal (it didn't require 3 For votes), it just
 152 |     |         // requires the quorum to be reached (enough people to vote)
 153 |     |         //
 154 |     |         if(totalCurrentVotes * 100 / s_totalAllowedVoters >= MIN_QUORUM) {
 155 |     |             // mark voting as having been completed
 156 |     |             uint256 votesForPercentage = s_votersFor.length * 100 / s_totalAllowedVoters;
 157 |     |             uint256 votesAgainstPercentage = s_votersAgainst.length * 100 / s_totalAllowedVoters;
 158 |     |             if(votesForPercentage > 50  || votesAgainstPercentage > 50){
 159 |     |                 s_votingComplete = true;
 160 |     | 
 161 |     |                 // distribute the voting rewards
 162 |     |                 _distributeRewards();
 163 |     |             }
 164 |     |         }
 165 |     |     }
 166 |     | 
 167 |     |     // distributes rewards to the `for` voters if the proposal has
 168 |     |     // passed or refunds the rewards back to the creator if the proposal
 169 |     |     // failed
 170 |     |     function _distributeRewards() private {
 171 |     |         // get number of voters for & against
 172 |     |         uint256 totalVotesFor     = s_votersFor.length;
 173 |     |         uint256 totalVotesAgainst = s_votersAgainst.length;
 174 |     |         // uint256 totalVotes        = totalVotesFor + totalVotesAgainst;
 175 |     | 
 176 |     |         // rewards to distribute or refund. This is guaranteed to be
 177 |     |         // greater or equal to the minimum funding amount by a check
 178 |     |         // in the constructor, and there is intentionally by design
 179 |     |         // no way to decrease or increase this amount. Any findings
 180 |     |         // related to not being able to increase/decrease the total
 181 |     |         // reward amount are invalid
 182 |     |         uint256 totalRewards = address(this).balance;
 183 |     | 
 184 |     |         // if the proposal was defeated refund reward back to the creator
 185 |     |         // for the proposal to be successful it must have had more `For` votes
 186 |     |         // than `Against` votes
 187 |     |         if(totalVotesAgainst >= totalVotesFor) {
 188 |     |             // proposal creator is trusted to create a proposal from an address
 189 |     |             // that can receive ETH. See comment before declaration of `s_creator`
 190 |     |             _sendEth(s_creator, totalRewards);
 191 |     |         }
 192 |     |         // otherwise the proposal passed so distribute rewards to the `For` voters
 193 |     |         else{
 194 |     |             uint256 rewardPerVoter = totalRewards / totalVotesFor;
 195 |     | 
 196 |     |             for(uint256 i; i<totalVotesFor; ++i) {
 197 |     |                 // proposal creator is trusted when creating allowed list of voters,
 198 |     |                 // findings related to gas griefing attacks or sending eth
 199 |     |                 // to an address reverting thereby stopping the reward payouts are
 200 |     |                 // invalid. Yes pull is to be preferred to push but this
 201 |     |                 // has not been implemented in this simplified version to
 202 |     |                 // reduce complexity & help you focus on finding the
 203 |     |                 // harder to find bug
 204 |     | 
 205 |     |                 // if at the last voter round up to avoid leaving dust; this means that
 206 |     |                 // the last voter can get 1 wei more than the rest - this is not
 207 |     |                 // a valid finding, it is simply how we deal with imperfect division
 208 |     |                 if(i == totalVotesFor-1) {
 209 |     |                     rewardPerVoter = Math.mulDiv(totalRewards, 1, totalVotesFor, Math.Rounding.Ceil);
 210 |     |                 }
 211 |     |                 _sendEth(s_votersFor[i], rewardPerVoter);
 212 |     |             }
 213 |     |         }
 214 |     |     }
 215 |     | 
 216 |     |     // sends eth using low-level call as we don't care about returned data
 217 |     |     function _sendEth(address dest, uint256 amount) private {
 218 |     |         bool sendStatus;
 219 |     |         assembly {
 220 |     |             sendStatus := call(gas(), dest, amount, 0, 0, 0, 0)
 221 |     |         }
 222 |     |         require(sendStatus, "DP: failed to send eth");
 223 |     |     }
 224 |     | 
 225 |     |     // returns true if the proposal is active or false if finished,
 226 |     |     // used internally and also externally to validate setup
 227 |     |     function isActive() public view returns(bool) {
 228 |     |         return !s_votingComplete;
 229 |     |     }
 230 |     | 
 231 |     |     // returns total number of allowed voters, used externally to validate setup
 232 |     |     function getTotalAllowedVoters() external view returns(uint256) {
 233 |     |         return s_totalAllowedVoters;
 234 |     |     }
 235 |     |     
 236 |     |     // returns the proposal creator, used externally to validate setup
 237 |     |     function getCreator() external view returns(address) {
 238 |     |         return s_creator;
 239 |     |     }
 240 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/04-voting-nft/SetUp.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | 
  5 |     | import "./VotingNftForFuzz.sol";
  6 |     | 
  7 |     | contract SetUp {
  8 |     |     // constructor(
  9 |     |     //     uint256 requiredCollateral,
 10 |     |     //     uint256 powerCalcTimestamp,
 11 |     |     //     uint256 maxNftPower,
 12 |     |     //     uint256 nftPowerReductionPercent) 
 13 |     |     //     ERC721("VNFT", "VNFT")
 14 |     |     //     Ownable(msg.sender) {
 15 |     | 
 16 |     |     //     // input sanity checks
 17 |     |     //     require(requiredCollateral > 0, "VNFT: required collateral must be > 0");
 18 |     |     //     require(powerCalcTimestamp > block.timestamp, "VNFT: power calc timestamp must be in the future");
 19 |     |     //     require(maxNftPower > 0, "VNFT: max nft power must be > 0");
 20 |     |     //     require(nftPowerReductionPercent > 0, "VNFT: nft power reduction must be > 0");
 21 |     |     //     require(nftPowerReductionPercent < PERCENTAGE_100, "VNFT: nft power reduction too big");
 22 |     | 
 23 |     |     //     s_requiredCollateral = requiredCollateral;
 24 |     |     //     s_powerCalcTimestamp = powerCalcTimestamp;
 25 |     |     //     s_maxNftPower        = maxNftPower;
 26 |     |     //     s_nftPowerReductionPercent = nftPowerReductionPercent;
 27 |     |     // }
 28 |     | 
 29 |     |     VotingNftForFuzz public votingNft;
 30 |     | 
 31 |     |     constructor() {
 32 |     |         // uint256 requiredCollateral = 1 ether;
 33 |     |         // uint256 powerCalcTimestamp = 1 day;
 34 |     |         // uint256 maxNftPower = 50%;
 35 |     |         // uint256 nftPowerReductionPercent = 10%;
 36 |     |     }
 37 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/04-voting-nft/VotingNft.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
   5 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   6 |     | 
   7 |     | // using regular and old Ownable for simplicity, any findings
   8 |     | // related to using newer Ownable or 2-step are invalid
   9 |     | import "@openzeppelin/contracts/access/Ownable.sol";
  10 |     | 
  11 |     | //
  12 |     | // This contract is a simplified version of a real contract which
  13 |     | // was audited by Cyfrin in a private audit and contained the same bug.
  14 |     | //
  15 |     | // Your mission, should you choose to accept it, is to find that bug!
  16 |     | //
  17 |     | // This is an nft contract that allows users to have nfts which
  18 |     | // have voting power in a DAO. These nfts can lose power over time if
  19 |     | // the required collateral is not deposited. The power of these nfts
  20 |     | // can never increase, only decrease or remain the same. 
  21 |     | //
  22 |     | // This contract has been intentionally simplified to remove much of
  23 |     | // the extra complexity in order to help you find the particular bug without
  24 |     | // other distractions. Please read the comments carefully as they note
  25 |     | // specific findings that are excluded as the implementation has been
  26 |     | // purposefully kept simple to help you focus on finding the harder
  27 |     | // to find and more interesting bug.
  28 |     | //
  29 |     | // This contract should only contain 1 intentional High finding, but
  30 |     | // if you find others they were not intentional :-) This contract should
  31 |     | // not be used in any live/production environment; it is purely an
  32 |     | // educational bug-hunting exercise based on a real-world example.
  33 |     | //
  34 |     | 
  35 |     | // @audit @INVARIANT Over the time the nft power will less than or equal to the current power
  36 |     | 
  37 |     | contract VotingNft is ERC721Enumerable, Ownable {
  38 |     | 
  39 |     |     // useful constants
  40 |     |     uint256 private constant PERCENTAGE_100 = 10 ** 27;
  41 |     | 
  42 |     |     // required collateral in eth to be deposited per NFT in order to
  43 |     |     // prevent voting power from decreasing
  44 |     |     uint256 private s_requiredCollateral;
  45 |     | 
  46 |     |     // time when power calculation begins
  47 |     |     uint256 private s_powerCalcTimestamp;
  48 |     | 
  49 |     |     // max power an nft can have. Power can only decrease or stay the same
  50 |     |     uint256 private s_maxNftPower;
  51 |     | 
  52 |     |     // % by which nft power decreases if required collateral not deposited
  53 |     |     uint256 private s_nftPowerReductionPercent;
  54 |     | 
  55 |     |     // current total power; will increase before power calculation starts
  56 |     |     // as nfts are created. once power calculation starts can only decrease
  57 |     |     // if nfts don't have the required collateral deposited
  58 |     |     uint256 private s_totalPower;
  59 |     | 
  60 |     |     // current total collateral which has been deposited for nfts
  61 |     |     uint256 private s_totalCollateral;
  62 |     | 
  63 |     |     struct NftInfo {
  64 |     |         uint256 lastUpdate;
  65 |     |         uint256 currentPower;
  66 |     |         uint256 currentCollateral;
  67 |     |     }
  68 |     |     // keeps track of contract-specific nft info
  69 |     |     mapping(uint256 tokenId => NftInfo) s_nftInfo;
  70 |     | 
  71 |     | 
  72 |     |     // create the contract
  73 |     |     constructor(
  74 |     |         uint256 requiredCollateral,
  75 |     |         uint256 powerCalcTimestamp,
  76 |     |         uint256 maxNftPower,
  77 |     |         uint256 nftPowerReductionPercent) 
  78 |     |         ERC721("VNFT", "VNFT")
  79 |     |         Ownable(msg.sender) {
  80 |     | 
  81 |     |         // input sanity checks
  82 |     |         require(requiredCollateral > 0, "VNFT: required collateral must be > 0");
  83 |     |         require(powerCalcTimestamp > block.timestamp, "VNFT: power calc timestamp must be in the future");
  84 |     |         require(maxNftPower > 0, "VNFT: max nft power must be > 0");
  85 |     |         require(nftPowerReductionPercent > 0, "VNFT: nft power reduction must be > 0");
  86 |     |         require(nftPowerReductionPercent < PERCENTAGE_100, "VNFT: nft power reduction too big");
  87 |     | 
  88 |     |         s_requiredCollateral = requiredCollateral;
  89 |     |         s_powerCalcTimestamp = powerCalcTimestamp;
  90 |     |         s_maxNftPower        = maxNftPower;
  91 |     |         s_nftPowerReductionPercent = nftPowerReductionPercent;
  92 |     |     }
  93 |     | 
  94 |     | 
  95 |     |     // some operations can only be performed before
  96 |     |     // power calculation has started 
  97 |     |     modifier onlyBeforePowerCalc() {
  98 |     |         _onlyBeforePowerCalc();
  99 |     |         _;
 100 |     |     }
 101 |     |     function _onlyBeforePowerCalc() private view {
 102 |     |         require(
 103 |     |             block.timestamp < s_powerCalcTimestamp,
 104 |     |             "VNFT: power calculation has already started"
 105 |     |         );
 106 |     |     }
 107 |     |     
 108 |     |     // allows contract owner to mint nfts to an address
 109 |     |     // can only be called before power calculation starts
 110 |     |     // all new nfts start at max power
 111 |     |     function safeMint(address to, uint256 tokenId) external onlyOwner onlyBeforePowerCalc {
 112 |     |         _safeMint(to, tokenId, "");
 113 |     | 
 114 |     |         s_totalPower += s_maxNftPower;
 115 |     |     }
 116 |     | 
 117 |     |     // allows nft holders to deposit collateral for their nft
 118 |     |     // nfts which have their required collateral deposited
 119 |     |     // don't lose power
 120 |     |     function addCollateral(uint256 tokenId) external payable {
 121 |     |         // sanity checks
 122 |     |         require(ownerOf(tokenId) == msg.sender, "VNFT: only nft owner can deposit collateral");
 123 |     | 
 124 |     |         uint256 amount = msg.value;
 125 |     |         require(amount > 0, "VNFT: collateral deposit amount must be > 0");
 126 |     | 
 127 |     |         require(s_nftInfo[tokenId].currentCollateral + amount <= s_requiredCollateral,
 128 |     |         "VNFT: collateral deposit must not exceeed required collateral");
 129 |     | 
 130 |     |         // recalculation intentionally takes place before storage update
 131 |     |         recalculateNftPower(tokenId);
 132 |     | 
 133 |     |         // update storage
 134 |     |         s_nftInfo[tokenId].currentCollateral += amount;
 135 |     |         s_totalCollateral += amount;
 136 |     |     }
 137 |     | 
 138 |     |     // allows nft holders to withdraw collateral which had been
 139 |     |     // deposited for their nfts. This will cause those nfts
 140 |     |     // to subsequently lose power
 141 |     |     function removeCollateral(uint256 tokenId) external payable {
 142 |     |         // sanity checks
 143 |     |         address tokenOwner = ownerOf(tokenId);
 144 |     |         require(tokenOwner == msg.sender, "VNFT: only nft owner can remove collateral");
 145 |     | 
 146 |     |         uint256 amount = msg.value;
 147 |     |         require(amount > 0, "VNFT: collateral remove amount must be > 0");
 148 |     | 
 149 |     |         // recalculation intentionally takes place before storage update
 150 |     |         recalculateNftPower(tokenId);
 151 |     | 
 152 |     |         // update storage
 153 |     |         s_nftInfo[tokenId].currentCollateral -= amount;
 154 |     |         s_totalCollateral -= amount;
 155 |     | 
 156 |     |         // send withdrawn collateral to token owner
 157 |     |         _sendEth(tokenOwner, amount);
 158 |     |     }
 159 |     | 
 160 |     |     // recalculated nft power. Used internally and also called externally by
 161 |     |     // other operations within the DAO
 162 |     |     function recalculateNftPower(uint256 tokenId) public returns (uint256 newPower) {
 163 |     |         // nfts have no power until power calculation starts
 164 |     |         if (block.timestamp < s_powerCalcTimestamp) {
 165 |     |             return 0;
 166 |     |         }
 167 |     | 
 168 |     |         newPower = getNftPower(tokenId);
 169 |     | 
 170 |     |         NftInfo storage nftInfo = s_nftInfo[tokenId];
 171 |     | 
 172 |     |         s_totalPower -= nftInfo.lastUpdate != 0 ? nftInfo.currentPower : s_maxNftPower;
 173 |     |         s_totalPower += newPower;
 174 |     | 
 175 |     |         nftInfo.lastUpdate   = block.timestamp;
 176 |     |         nftInfo.currentPower = newPower;
 177 |     |     }
 178 |     | 
 179 |     |     // make sure to recalculate nft power if these nfts are transferred
 180 |     |     function _update(address to, uint256 tokenId, address auth) internal override returns (address) {
 181 |     |         // if users have collateral deposited for their nfts when they transfer
 182 |     |         // them to another user, the other users effectively becomes the owner
 183 |     |         // of the collateral. The nfts are mostly worthless without the collateral since
 184 |     |         // their voting power drops without it, so by design the deposited
 185 |     |         // collateral moves with the nfts
 186 |     |         recalculateNftPower(tokenId);
 187 |     | 
 188 |     |         return super._update(to, tokenId, auth);
 189 |     |     }
 190 |     | 
 191 |     |     // bunch of getter functions
 192 |     |     function getRequiredCollateral() public view returns (uint256) {
 193 |     |         return s_requiredCollateral;
 194 |     |     }
 195 |     | 
 196 |     |     function getPowerCalcTimestamp() public view returns (uint256) {
 197 |     |         return s_powerCalcTimestamp;
 198 |     |     }
 199 |     | 
 200 |     |     function getMaxNftPower() public view returns (uint256) {
 201 |     |         return s_maxNftPower;
 202 |     |     }
 203 |     | 
 204 |     |     function getNftPowerReductionPercent() public view returns (uint256) {
 205 |     |         return s_nftPowerReductionPercent;
 206 |     |     }
 207 |     | 
 208 |     |     function getTotalPower() public view returns (uint256) {
 209 |     |         return s_totalPower;
 210 |     |     }
 211 |     | 
 212 |     |     function getTotalCollateral() public view returns (uint256) {
 213 |     |         return s_totalCollateral;
 214 |     |     }
 215 |     | 
 216 |     |     function getDepositedCollateral(uint256 tokenId) public view returns (uint256) {
 217 |     |         _requireOwned(tokenId);
 218 |     | 
 219 |     |         return s_nftInfo[tokenId].currentCollateral;
 220 |     |     }
 221 |     | 
 222 |     |     function getNftPower(uint256 tokenId) public view returns (uint256) {
 223 |     |         // ensure token has already been minted
 224 |     |         _requireOwned(tokenId);
 225 |     | 
 226 |     |         if (block.timestamp <= s_powerCalcTimestamp) {
 227 |     |             return 0;
 228 |     |         }
 229 |     | 
 230 |     |         uint256 collateral   = s_nftInfo[tokenId].currentCollateral;
 231 |     | 
 232 |     |         // Calculate the minimum possible power based on the collateral of the nft
 233 |     |         uint256 maxNftPower  = s_maxNftPower;
 234 |     |         uint256 minNftPower  = maxNftPower * collateral / s_requiredCollateral;
 235 |     |         minNftPower          = Math.min(maxNftPower, minNftPower);
 236 |     | 
 237 |     |         // Get last update and current power. Or set them to default if it is first iteration
 238 |     |         uint256 lastUpdate   = s_nftInfo[tokenId].lastUpdate;
 239 |     |         uint256 currentPower = s_nftInfo[tokenId].currentPower;
 240 |     | 
 241 |     |         if (lastUpdate == 0) {
 242 |     |             lastUpdate       = s_powerCalcTimestamp;
 243 |     |             currentPower     = maxNftPower;
 244 |     |         }
 245 |     | 
 246 |     |         // Calculate reduction amount
 247 |     |         uint256 powerReductionPercent = s_nftPowerReductionPercent * (block.timestamp - lastUpdate);
 248 |     |         uint256 powerReduction = Math.min(currentPower, (maxNftPower * powerReductionPercent) / PERCENTAGE_100);
 249 |     |         uint256 newPotentialPower = currentPower - powerReduction;
 250 |     | 
 251 |     |         if (minNftPower <= newPotentialPower) {
 252 |     |             return newPotentialPower;
 253 |     |         }
 254 |     | 
 255 |     |         if (minNftPower <= currentPower) {
 256 |     |             return minNftPower;
 257 |     |         }
 258 |     | 
 259 |     |         return currentPower;
 260 |     |     }
 261 |     | 
 262 |     |     // sends eth using low-level call as we don't care about returned data
 263 |     |     function _sendEth(address dest, uint256 amount) private {
 264 |     |         bool sendStatus;
 265 |     |         assembly {
 266 |     |             sendStatus := call(gas(), dest, amount, 0, 0, 0, 0)
 267 |     |         }
 268 |     |         require(sendStatus, "VNFT: failed to send eth");
 269 |     |     }
 270 |     | 
 271 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/04-voting-nft/VotingNftForFuzz.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
   5 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   6 |     | 
   7 |     | // using regular and old Ownable for simplicity, any findings
   8 |     | // related to using newer Ownable or 2-step are invalid
   9 |     | import "@openzeppelin/contracts/access/Ownable.sol";
  10 |     | 
  11 |     | //
  12 |     | // This contract is a simplified version of a real contract which
  13 |     | // was audited by Cyfrin in a private audit and contained the same bug.
  14 |     | //
  15 |     | // Your mission, should you choose to accept it, is to find that bug!
  16 |     | //
  17 |     | // This is an nft contract that allows users to have nfts which
  18 |     | // have voting power in a DAO. These nfts can lose power over time if
  19 |     | // the required collateral is not deposited. The power of these nfts
  20 |     | // can never increase, only decrease or remain the same. 
  21 |     | //
  22 |     | // This contract has been intentionally simplified to remove much of
  23 |     | // the extra complexity in order to help you find the particular bug without
  24 |     | // other distractions. Please read the comments carefully as they note
  25 |     | // specific findings that are excluded as the implementation has been
  26 |     | // purposefully kept simple to help you focus on finding the harder
  27 |     | // to find and more interesting bug.
  28 |     | //
  29 |     | // This contract should only contain 1 intentional High finding, but
  30 |     | // if you find others they were not intentional :-) This contract should
  31 |     | // not be used in any live/production environment; it is purely an
  32 |     | // educational bug-hunting exercise based on a real-world example.
  33 |     | //
  34 |     | // This contract has had changes made for fuzzing test its initial 
  35 |     | // power calculation state; instead of using block.timestamp it uses
  36 |     | // a hard-coded value that the test setup sets. This allows a fuzzer to
  37 |     | // explore the initial power calculation state without skipping past it
  38 |     | // by changing block.timestamp
  39 |     | contract VotingNftForFuzz is ERC721, Ownable {
  40 |     | 
  41 |     |     // useful constants
  42 |     |     uint256 private constant PERCENTAGE_100 = 10 ** 27;
  43 |     | 
  44 |     |     // required collateral in eth to be deposited per NFT in order to
  45 |     |     // prevent voting power from decreasing
  46 |     |     uint256 private s_requiredCollateral;
  47 |     | 
  48 |     |     // time when power calculation begins
  49 |     |     uint256 private s_powerCalcTimestamp;
  50 |     | 
  51 |     |     // max power an nft can have. Power can only decrease or stay the same
  52 |     |     uint256 private s_maxNftPower;
  53 |     | 
  54 |     |     // % by which nft power decreases if required collateral not deposited
  55 |     |     uint256 private s_nftPowerReductionPercent;
  56 |     | 
  57 |     |     // current total power; will increase before power calculation starts
  58 |     |     // as nfts are created. once power calculation starts can only decrease
  59 |     |     // if nfts don't have the required collateral deposited
  60 |     |     uint256 private s_totalPower;
  61 |     | 
  62 |     |     // current total collateral which has been deposited for nfts
  63 |     |     uint256 private s_totalCollateral;
  64 |     | 
  65 |     |     // required for fuzz testing initial state once power calculation starts
  66 |     |     // replaces block.timestamp when fuzzing
  67 |     |     uint256 private s_FuzzerConstantBlockTimestamp;
  68 |     | 
  69 |     |     struct NftInfo {
  70 |     |         uint256 lastUpdate;
  71 |     |         uint256 currentPower;
  72 |     |         uint256 currentCollateral;
  73 |     |     }
  74 |     |     // keeps track of contract-specific nft info
  75 |     |     mapping(uint256 tokenId => NftInfo) s_nftInfo;
  76 |     | 
  77 |     | 
  78 |     |     // create the contract
  79 |     |     constructor(
  80 |     |         uint256 requiredCollateral,
  81 |     |         uint256 powerCalcTimestamp,
  82 |     |         uint256 maxNftPower,
  83 |     |         uint256 nftPowerReductionPercent) 
  84 |     |         ERC721("VNFT", "VNFT")
  85 |     |         Ownable(msg.sender) {
  86 |     | 
  87 |     |         // input sanity checks
  88 |     |         require(requiredCollateral > 0, "VNFT: required collateral must be > 0");
  89 |     |         require(powerCalcTimestamp > block.timestamp, "VNFT: power calc timestamp must be in the future");
  90 |     |         require(maxNftPower > 0, "VNFT: max nft power must be > 0");
  91 |     |         require(nftPowerReductionPercent > 0, "VNFT: nft power reduction must be > 0");
  92 |     |         require(nftPowerReductionPercent < PERCENTAGE_100, "VNFT: nft power reduction too big");
  93 |     | 
  94 |     |         s_requiredCollateral = requiredCollateral;
  95 |     |         s_powerCalcTimestamp = powerCalcTimestamp;
  96 |     |         s_maxNftPower        = maxNftPower;
  97 |     |         s_nftPowerReductionPercent = nftPowerReductionPercent;
  98 |     |     }
  99 |     | 
 100 |     | 
 101 |     |     // some operations can only be performed before
 102 |     |     // power calculation has started 
 103 |     |     modifier onlyBeforePowerCalc() {
 104 |     |         _onlyBeforePowerCalc();
 105 |     |         _;
 106 |     |     }
 107 |     |     function _onlyBeforePowerCalc() private view {
 108 |     |         require(
 109 |     |             // replace block.timestamp with constant value
 110 |     |             // for fuzzing initial power calc state
 111 |     |             //block.timestamp < s_powerCalcTimestamp,
 112 |     |             s_FuzzerConstantBlockTimestamp < s_powerCalcTimestamp,
 113 |     |             "VNFT: power calculation has already started"
 114 |     |         );
 115 |     |     }
 116 |     |     
 117 |     |     // allows contract owner to mint nfts to an address
 118 |     |     // can only be called before power calculation starts
 119 |     |     // all new nfts start at max power
 120 |     |     function safeMint(address to, uint256 tokenId) external onlyOwner onlyBeforePowerCalc {
 121 |     |         _safeMint(to, tokenId, "");
 122 |     | 
 123 |     |         s_totalPower += s_maxNftPower;
 124 |     |     }
 125 |     | 
 126 |     |     // allows nft holders to deposit collateral for their nft
 127 |     |     // nfts which have their required collateral deposited
 128 |     |     // don't lose power
 129 |     |     function addCollateral(uint256 tokenId) external payable {
 130 |     |         // sanity checks
 131 |     |         require(ownerOf(tokenId) == msg.sender, "VNFT: only nft owner can deposit collateral");
 132 |     | 
 133 |     |         uint256 amount = msg.value;
 134 |     |         require(amount > 0, "VNFT: collateral deposit amount must be > 0");
 135 |     | 
 136 |     |         require(s_nftInfo[tokenId].currentCollateral + amount <= s_requiredCollateral,
 137 |     |         "VNFT: collateral deposit must not exceeed required collateral");
 138 |     | 
 139 |     |         // recalculation intentionally takes place before storage update
 140 |     |         recalculateNftPower(tokenId);
 141 |     | 
 142 |     |         // update storage
 143 |     |         s_nftInfo[tokenId].currentCollateral += amount;
 144 |     |         s_totalCollateral += amount;
 145 |     |     }
 146 |     | 
 147 |     |     // allows nft holders to withdraw collateral which had been
 148 |     |     // deposited for their nfts. This will cause those nfts
 149 |     |     // to subsequently lose power
 150 |     |     function removeCollateral(uint256 tokenId) external payable {
 151 |     |         // sanity checks
 152 |     |         address tokenOwner = ownerOf(tokenId);
 153 |     |         require(tokenOwner == msg.sender, "VNFT: only nft owner can remove collateral");
 154 |     | 
 155 |     |         uint256 amount = msg.value;
 156 |     |         require(amount > 0, "VNFT: collateral remove amount must be > 0");
 157 |     | 
 158 |     |         // recalculation intentionally takes place before storage update
 159 |     |         recalculateNftPower(tokenId);
 160 |     | 
 161 |     |         // update storage
 162 |     |         s_nftInfo[tokenId].currentCollateral -= amount;
 163 |     |         s_totalCollateral -= amount;
 164 |     | 
 165 |     |         // send withdrawn collateral to token owner
 166 |     |         _sendEth(tokenOwner, amount);
 167 |     |     }
 168 |     | 
 169 |     |     // recalculated nft power. Used internally and also called externally by
 170 |     |     // other operations within the DAO
 171 |     |     function recalculateNftPower(uint256 tokenId) public returns (uint256 newPower) {
 172 |     |         // nfts have no power until power calculation starts
 173 |     |         // replace block.timestamp with constant value
 174 |     |         // for fuzzing initial power calc state
 175 |     |         // if (block.timestamp < s_powerCalcTimestamp) {
 176 |     |         if(s_FuzzerConstantBlockTimestamp < s_powerCalcTimestamp) {
 177 |     |             return 0;
 178 |     |         }
 179 |     | 
 180 |     |         newPower = getNftPower(tokenId);
 181 |     | 
 182 |     |         NftInfo storage nftInfo = s_nftInfo[tokenId];
 183 |     | 
 184 |     |         s_totalPower -= nftInfo.lastUpdate != 0 ? nftInfo.currentPower : s_maxNftPower;
 185 |     |         s_totalPower += newPower;
 186 |     | 
 187 |     |         // replace block.timestamp with constant value
 188 |     |         // for fuzzing initial power calc state
 189 |     |         // nftInfo.lastUpdate   = block.timestamp;
 190 |     |         nftInfo.lastUpdate   = s_FuzzerConstantBlockTimestamp;
 191 |     |         nftInfo.currentPower = newPower;
 192 |     |     }
 193 |     | 
 194 |     |     // make sure to recalculate nft power if these nfts are transferred
 195 |     |     function _update(address to, uint256 tokenId, address auth) internal override returns (address) {
 196 |     |         // if users have collateral deposited for their nfts when they transfer
 197 |     |         // them to another user, the other users effectively becomes the owner
 198 |     |         // of the collateral. The nfts are mostly worthless without the collateral since
 199 |     |         // their voting power drops without it, so by design the deposited
 200 |     |         // collateral moves with the nfts
 201 |     |         recalculateNftPower(tokenId);
 202 |     | 
 203 |     |         return super._update(to, tokenId, auth);
 204 |     |     }
 205 |     | 
 206 |     |     // bunch of getter functions
 207 |     |     function getRequiredCollateral() public view returns (uint256) {
 208 |     |         return s_requiredCollateral;
 209 |     |     }
 210 |     | 
 211 |     |     function getPowerCalcTimestamp() public view returns (uint256) {
 212 |     |         return s_powerCalcTimestamp;
 213 |     |     }
 214 |     | 
 215 |     |     function getMaxNftPower() public view returns (uint256) {
 216 |     |         return s_maxNftPower;
 217 |     |     }
 218 |     | 
 219 |     |     function getNftPowerReductionPercent() public view returns (uint256) {
 220 |     |         return s_nftPowerReductionPercent;
 221 |     |     }
 222 |     | 
 223 |     |     function getTotalPower() public view returns (uint256) {
 224 |     |         return s_totalPower;
 225 |     |     }
 226 |     | 
 227 |     |     function getTotalCollateral() public view returns (uint256) {
 228 |     |         return s_totalCollateral;
 229 |     |     }
 230 |     | 
 231 |     |     function getDepositedCollateral(uint256 tokenId) public view returns (uint256) {
 232 |     |         _requireOwned(tokenId);
 233 |     | 
 234 |     |         return s_nftInfo[tokenId].currentCollateral;
 235 |     |     }
 236 |     | 
 237 |     |     function getNftPower(uint256 tokenId) public view returns (uint256) {
 238 |     |         // ensure token has already been minted
 239 |     |         _requireOwned(tokenId);
 240 |     | 
 241 |     |         // replace block.timestamp with constant value
 242 |     |         // for fuzzing initial power calc state
 243 |     |         // if (block.timestamp <= s_powerCalcTimestamp) {
 244 |     |         if(s_FuzzerConstantBlockTimestamp <= s_powerCalcTimestamp) {
 245 |     |             return 0;
 246 |     |         }
 247 |     | 
 248 |     |         uint256 collateral   = s_nftInfo[tokenId].currentCollateral;
 249 |     | 
 250 |     |         // Calculate the minimum possible power based on the collateral of the nft
 251 |     |         uint256 maxNftPower  = s_maxNftPower;
 252 |     |         uint256 minNftPower  = maxNftPower * collateral / s_requiredCollateral;
 253 |     |         minNftPower          = Math.min(maxNftPower, minNftPower);
 254 |     | 
 255 |     |         // Get last update and current power. Or set them to default if it is first iteration
 256 |     |         uint256 lastUpdate   = s_nftInfo[tokenId].lastUpdate;
 257 |     |         uint256 currentPower = s_nftInfo[tokenId].currentPower;
 258 |     | 
 259 |     |         if (lastUpdate == 0) {
 260 |     |             lastUpdate       = s_powerCalcTimestamp;
 261 |     |             currentPower     = maxNftPower;
 262 |     |         }
 263 |     | 
 264 |     |         // Calculate reduction amount
 265 |     |         // replace block.timestamp with constant value
 266 |     |         // for fuzzing initial power calc state
 267 |     |         // uint256 powerReductionPercent = s_nftPowerReductionPercent * (block.timestamp - lastUpdate);
 268 |     |         uint256 powerReductionPercent = s_nftPowerReductionPercent * (s_FuzzerConstantBlockTimestamp - lastUpdate);
 269 |     |         uint256 powerReduction = Math.min(currentPower, (maxNftPower * powerReductionPercent) / PERCENTAGE_100);
 270 |     |         uint256 newPotentialPower = currentPower - powerReduction;
 271 |     | 
 272 |     |         if (minNftPower <= newPotentialPower) {
 273 |     |             return newPotentialPower;
 274 |     |         }
 275 |     | 
 276 |     |         if (minNftPower <= currentPower) {
 277 |     |             return minNftPower;
 278 |     |         }
 279 |     | 
 280 |     |         return currentPower;
 281 |     |     }
 282 |     | 
 283 |     |     // sends eth using low-level call as we don't care about returned data
 284 |     |     function _sendEth(address dest, uint256 amount) private {
 285 |     |         bool sendStatus;
 286 |     |         assembly {
 287 |     |             sendStatus := call(gas(), dest, amount, 0, 0, 0, 0)
 288 |     |         }
 289 |     |         require(sendStatus, "VNFT: failed to send eth");
 290 |     |     }
 291 |     | 
 292 |     |     // used by the fuzzer when fuzz testing
 293 |     |     function setFuzzerConstantBlockTimestamp(uint256 input) onlyOwner public {
 294 |     |         s_FuzzerConstantBlockTimestamp = input;
 295 |     |     }
 296 |     |     
 297 |     | 
 298 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/05-token-sale/AdvanceEchidnaTokenSale.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | 
  5 |     | import "./EchidnaTokenSale.sol";
  6 |     | 
  7 |     | contract AdvanceEchdinaTest is EchidnaTokenSale {
  8 |     | 
  9 |     |     constructor() payable EchidnaTokenSale() {
 10 |     |     }
 11 |     | 
 12 |     |     function buy(uint256 amount) public {
 13 |     |         hevm.prank(msg.sender);
 14 |     |         tSale.buy(amount);
 15 |     |     }
 16 |     | 
 17 |     |     function endSale() public {
 18 |     |         hevm.prank(msg.sender);
 19 |     |         tSale.endSale();
 20 |     |     }
 21 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/05-token-sale/EchidnaTokenSale.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | 
   5 |     | import "../TestToken3.sol";
   6 |     | import "./TokenSale.sol";
   7 |     | import "forge-std/Test.sol";
   8 |     | 
   9 |     | interface IHevm {
  10 |     |     function prank(address) external;
  11 |     | }
  12 |     | 
  13 |     | 
  14 |     | contract EchidnaTokenSale is Test{
  15 |     |     event creatorbal(uint256 bal);
  16 |     |     event soldTokens(uint256 soldtokens);
  17 |     |     event Sdecimals(uint256);
  18 |     |     event Bdecimals(uint256);
  19 |     | 
  20 |     |     IHevm hevm = IHevm(address(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D));
  21 |     | 
  22 |     |     uint256 constant MINT_S_TOKENS_AMT = 1000e18;
  23 |     |     // uint256 constant MINT_B_TOKENS_AMT = 2500e18;       // ---------------This changes from 18 to 6
  24 |     |     uint256 constant MINT_B_TOKENS_AMT = 2500e6;       // ---------------This changes from 18 to 6
  25 |     |     uint256 constant MIN_TOKENS_TO_BE_SOLD_AMT = 1000e18;
  26 |     |     uint256 constant MAX_S_TOKENS_PER_USER_SHOULD_HOLD  = 200e18;
  27 |     |     // uint256 constant MAX_B_TOKEN_BAL_PER_USER  = 500e18;        // ---------------This changes from 18 to 6
  28 |     |     uint256 constant MAX_B_TOKEN_BAL_PER_USER  = 500e6;        // ---------------This changes from 18 to 6
  29 |     | 
  30 |     |     TestToken3 public s_Token;  // This will be sent to the contract 
  31 |     |     TestToken3 public b_Token;
  32 |     | 
  33 |     |     TokenSale public tSale;
  34 |     | 
  35 |     |     address[]  public list;
  36 |     |     address public deployer = address(0x6000000000000000000000000000000000000000);
  37 |     | 
  38 |     |     /* 
  39 |     |     address[] memory allowList,
  40 |     |     address sellToken,
  41 |     |     address buyToken,
  42 |     |     uint256 maxTokensPerBuyer, == 20
  43 |     |     uint256 sellTokenAmount 
  44 |     |     */
  45 |     |     constructor () payable {
  46 |     |         list.push(address(0x1000000000000000000000000000000000000000));
  47 |     |         list.push(address(0x2000000000000000000000000000000000000000));
  48 |     |         list.push(address(0x3000000000000000000000000000000000000000));
  49 |     |         list.push(address(0x4000000000000000000000000000000000000000));
  50 |     |         list.push(address(0x5000000000000000000000000000000000000000));
  51 |     |         hevm.prank(deployer);
  52 |     |         s_Token = new TestToken3(MINT_S_TOKENS_AMT,18,"SELL TOKEN" , "ST");
  53 |     |         hevm.prank(deployer);
  54 |     |         // b_Token = new TestToken3(MINT_B_TOKENS_AMT,18,"BUY TOKEN" , "BT"); // ---------------This changes from 18 to 6
  55 |     |         b_Token = new TestToken3(MINT_B_TOKENS_AMT,6,"BUY TOKEN" , "BT"); // ---------------This changes from 18 to 6
  56 |     | 
  57 |     |         // assert(s_Token.balanceOf(address(this)) == 0);
  58 |     |         // assert(b_Token.balanceOf(address(this)) == 0);
  59 |     | 
  60 |     |         assert(s_Token.decimals()  == 18);
  61 |     |         // assert(b_Token.decimals() == 18);   // ---------------This changes from 18 to 6
  62 |     |         assert(b_Token.decimals() == 6);   // ---------------This changes from 18 to 6
  63 |     | 
  64 |     |         emit Sdecimals(s_Token.decimals());
  65 |     |         emit Bdecimals(b_Token.decimals());
  66 |     | 
  67 |     |         hevm.prank(address(this));
  68 |     |         tSale = new TokenSale(list,address(s_Token), address(b_Token), MAX_S_TOKENS_PER_USER_SHOULD_HOLD, MIN_TOKENS_TO_BE_SOLD_AMT);
  69 |     |         s_Token.approve(address(tSale), MINT_S_TOKENS_AMT);
  70 |     |         s_Token.transfer(address(tSale), MINT_S_TOKENS_AMT);
  71 |     | 
  72 |     |         assert(tSale.getTotalAllowedBuyers() == list.length);
  73 |     |         assert(tSale.getCreator() == address(this));
  74 |     |         assert(tSale.getMaxTokensPerBuyer() == MAX_S_TOKENS_PER_USER_SHOULD_HOLD);
  75 |     |         assert(tSale.getSellTokenAddress() == address(s_Token));
  76 |     |         assert(tSale.getBuyTokenAddress() == address(b_Token));
  77 |     |         assert(s_Token.balanceOf(address(tSale)) == MINT_S_TOKENS_AMT);
  78 |     |         // getSellTokenTotalAmount
  79 |     |         // getSellTokenSoldAmount
  80 |     | 
  81 |     |         for(uint256 i=0;i<list.length;i++){
  82 |     |             b_Token.approve(list[i], MAX_B_TOKEN_BAL_PER_USER);
  83 |     |             b_Token.transfer(list[i], MAX_B_TOKEN_BAL_PER_USER);
  84 |     | 
  85 |     |             assert(b_Token.balanceOf(list[i]) == MAX_B_TOKEN_BAL_PER_USER);
  86 |     |             hevm.prank(list[i]);
  87 |     |             b_Token.approve(address(tSale), type(uint256).max);
  88 |     | 
  89 |     |         }
  90 |     | 
  91 |     |     }
  92 |     | 
  93 |     | 
  94 |     |     function echidna_token_bal_should_be_zero_when_sale_ends() public view returns(bool) {
  95 |     |         if(tSale.getRemainingSellTokens() == 0){
  96 |     |             return (s_Token.balanceOf(address(tSale)) == 0);
  97 |     |         }
  98 |     |         return true;
  99 |     |     }
 100 |     | 
 101 |     |     address[] public listlocal ;
 102 |     | 
 103 |     | 
 104 |     | 
 105 |     |     function echidna_check_total_sold_tokens_equal_bought_tokens() public  returns(bool) {
 106 |     |         // address creator =  tSale.getCreator(); 
 107 |     |         // emit creatorbal(b_Token.balanceOf(address(creator)));
 108 |     |         // emit soldTokens(tSale.getSellTokenSoldAmount());
 109 |     |         // return (b_Token.balanceOf(address(creator)) == tSale.getSellTokenSoldAmount());
 110 |     | 
 111 |     |         uint256 soldAmount = tSale.getSellTokenSoldAmount();
 112 |     |         uint256 boughtBal  = b_Token.balanceOf(tSale.getCreator());
 113 |     | 
 114 |     |         // Adjust for decimal precision difference
 115 |     |         uint8 sellDecimals = s_Token.decimals();
 116 |     |         uint8 buyDecimals  = b_Token.decimals();
 117 |     | 
 118 |     |         if (sellDecimals > buyDecimals) {
 119 |     |             boughtBal *= 10 ** (sellDecimals - buyDecimals);
 120 |     |         } else if (buyDecimals > sellDecimals) {
 121 |     |             soldAmount *= 10 ** (buyDecimals - sellDecimals);
 122 |     |         }
 123 |     |         emit creatorbal(boughtBal);
 124 |     |         emit soldTokens(soldAmount);
 125 |     |         return (boughtBal == soldAmount);
 126 |     |     }
 127 |     | 
 128 |     |     function echidna_user_govt_token_bal_should_not_increase_more_than_max_tokens_per_user() public view returns(bool) {
 129 |     |         for(uint256 i=0; i<list.length;i++) {
 130 |     |             if (s_Token.balanceOf(list[i]) > MAX_S_TOKENS_PER_USER_SHOULD_HOLD) {
 131 |     |                 return false; // If any address has more than MAX_TOKENS_PER_USER, fail the test
 132 |     |             }
 133 |     |         }
 134 |     |         return true;
 135 |     |     }
 136 |     | }
 137 |     |     // function testBalance() public  {
 138 |     |         
 139 |     |     //     address user1  = makeAddr("user1");
 140 |     |     //     address user2  = makeAddr("user2");
 141 |     |     //     address user3  = makeAddr("user3");
 142 |     |     //     address deployerFoundry  = makeAddr("deployerFoundry");
 143 |     |         
 144 |     |     //     listlocal.push(user1);
 145 |     |     //     listlocal.push(user2);
 146 |     |     //     listlocal.push(user3);
 147 |     | 
 148 |     |     //     TestToken3 s_Token_Local = new TestToken3(MINT_S_TOKENS_AMT,18,"SELL TOKEN" , "ST");
 149 |     |     //     TestToken3 b_Token_Local = new TestToken3(2500e18,18,"BUY TOKEN", "BT");
 150 |     | 
 151 |     |     //     console.log("This is decimals of the sell tokens", s_Token_Local.decimals());
 152 |     |     //     console.log("This is decimals of the buy tokens", b_Token_Local.decimals());
 153 |     |         // vm.prank(deployerFoundry);
 154 |     |         // TokenSale tSale_local = new TokenSale(listlocal ,address(s_Token_Local), address(b_Token_Local), MAX_S_TOKENS_PER_USER_SHOULD_HOLD, MIN_TOKENS_TO_BE_SOLD_AMT);
 155 |     |         // s_Token_Local.approve(address(tSale_local), MINT_S_TOKENS_AMT);
 156 |     |         // s_Token_Local.transfer(address(tSale_local), MINT_S_TOKENS_AMT);
 157 |     |         // console.log("Balance Of S tokens in the contract " , s_Token_Local.balanceOf(address(tSale_local)));
 158 |     |         // b_Token_Local.approve(user1, 500);
 159 |     |         // b_Token_Local.transfer(user1, 500);
 160 |     |         // vm.startPrank(user1);
 161 |     |         // // console.log("Token sale contract address" , address(tSale_local));
 162 |     |         // b_Token_Local.approve(address(tSale_local), 200);
 163 |     |         // tSale_local.buy(200);
 164 |     |         // vm.stopPrank();
 165 |     |         // address creator =  tSale_local.getCreator();
 166 |     |         // // Have to transfer some b_tokens to user also
 167 |     |         
 168 |     |         // console.log("Balance of buy tokens for Creator", b_Token_Local.balanceOf(address(creator)));
 169 |     |         // console.log("Balance of total sold tokens",tSale_local.getSellTokenSoldAmount());
 170 |     |     // }
 171 |     |     
 172 |     |     // function testCreatorBal() public view {
 173 |     |     //     // address creator =  tSale.getCreator();
 174 |     |     //     // uint256 boughtBal = b_Token.balanceOf((creator));
 175 |     |     //     // boughtBal *= 10 ** (18 - 6);
 176 |     |     //     console.log("This is decimals of the sell tokens", s_Token.decimals());
 177 |     |     //     console.log("This is decimals of the buy tokens", b_Token.decimals());
 178 |     |     //     // console.log("This is bought bal", boughtBal);
 179 |     |     //     // console.log(b_Token.balanceOf((creator)), "Balance of creator is");
 180 |     |     //     // console.log("Address this is" , address(this));
 181 |     |     //     // console.log("Creator is", creator);
 182 |     |     // }
 183 |     | 
 184 |     | 
 185 |     | 
 186 |     | 
 187 |     | 
 188 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/05-token-sale/TokenSale.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
   5 |     | import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
   6 |     | 
   7 |     | //
   8 |     | // This contract is a simplified version of a real contract which
   9 |     | // was audited by Cyfrin in a private audit and contained the same bugs.
  10 |     | //
  11 |     | // Your mission, should you choose to accept it, is to find those bugs!
  12 |     | //
  13 |     | // This contract allows the creator to invite a select group of people
  14 |     | // to participate in a token sale. Users can exchange an allowed token
  15 |     | // for the token being sold. This could be used by a DAO to distribute
  16 |     | // their governance token in exchange for DAI, but having a lot more control
  17 |     | // over how that distribution takes place compared to using a uniswap pool.
  18 |     | //
  19 |     | // This contract has been intentionally simplified to remove much of
  20 |     | // the extra complexity in order to help you find the particular bugs without
  21 |     | // other distractions. Please read the comments carefully as they note
  22 |     | // specific findings that are excluded as the implementation has been
  23 |     | // purposefully kept simple to help you focus on finding the harder
  24 |     | // to find and more interesting bugs.
  25 |     | //
  26 |     | // This contract intentionally has no time-out period for the token sale
  27 |     | // to complete; lack of a time-out period resulting in the token sale never
  28 |     | // completing is not a valid finding as this has been intentionally 
  29 |     | // omitted to simplify the codebase.
  30 |     | //
  31 |     | // This contract intentionally does not support fee-on-transfer, rebasing
  32 |     | // ERC777 or any non-standard, weird ERC20s. It only supports ERC20s
  33 |     | // that conform to the ERC20 implementation. Any findings related to 
  34 |     | // weird/non-standard ERC20s are invalid. Any findings related to blacklists are invalid.
  35 |     | //
  36 |     | // This contract intentionally has no rescue function; any tokens that
  37 |     | // are sent to this contract are lost forever. Once this contract is
  38 |     | // created the fixed amount of tokens to be sold can't be changed. Any
  39 |     | // findings related to these issues are invalid.
  40 |     | //
  41 |     | // This contract should only contain 2 intentional High findings, but
  42 |     | // if you find others they were not intentional :-) This contract should
  43 |     | // not be used in any live/production environment; it is purely an
  44 |     | // educational bug-hunting exercise based on a real-world example.
  45 |     | //
  46 | *   | contract TokenSale {
  47 |     |     // min buy precision enforced
  48 | *   |     uint256 public constant MIN_BUY_PRECISION = 6;
  49 |     | 
  50 |     |     // sell precision always 18
  51 | *   |     uint256 public constant SELL_PRECISION = 18;
  52 |     | 
  53 |     |     // smallest amount proposal creator can fund contract with
  54 | *   |     uint256 public constant MIN_FUNDING = 100;
  55 |     | 
  56 |     |     // min number of buyers
  57 | *   |     uint256 public constant MIN_BUYERS  = 3;
  58 |     | 
  59 |     |     // creator of this proposal. Any findings related to the creator
  60 |     |     // not being able to update this address are invalid; this has
  61 |     |     // intentionally been omitted to simplify the contract so you can
  62 |     |     // focus on finding the cool bug instead of lame/easy stuff. 
  63 |     |     // Eg: all findings related to blacklists are invalid; Proposal
  64 |     |     // creator can always receive and send tokens.
  65 |     |     address private immutable s_creator;
  66 |     | 
  67 |     |     // token to be sold by creator
  68 |     |     ERC20 private immutable s_sellToken;
  69 |     | 
  70 |     |     // token which buyers can use to buy the token being sold
  71 |     |     // for simplicity sake exchange rate is always 1:1
  72 |     |     // any findings related to not having a dynamic exchange rate are invalid
  73 |     |     ERC20 private immutable s_buyToken;
  74 |     | 
  75 |     |     // maximum amount any single buyer should be able to buy
  76 |     |     uint256 private immutable s_maxTokensPerBuyer;
  77 |     | 
  78 |     |     // total amount of tokens to be sold
  79 |     |     uint256 private immutable s_sellTokenTotalAmount;
  80 |     | 
  81 |     |     // total amount of tokens currently sold
  82 |     |     uint256 private s_sellTokenSoldAmount;
  83 |     | 
  84 |     |     // total number of allowed buyers
  85 |     |     uint256 private s_totalBuyers;
  86 |     | 
  87 |     |     // only permitted addresses can buy
  88 |     |     enum BuyerState {
  89 |     |         DISALLOWED,
  90 |     |         ALLOWED
  91 |     |     }
  92 |     | 
  93 |     |     mapping(address buyer => BuyerState) private s_buyers;
  94 |     | 
  95 |     | 
  96 |     |     // create the contract
  97 | *   |     constructor(address[] memory allowList,
  98 |     |                 address sellToken,
  99 |     |                 address buyToken,
 100 |     |                 uint256 maxTokensPerBuyer,
 101 | *   |                 uint256 sellTokenAmount) {
 102 | *   |         require(sellToken != address(0), "TS: invalid sell token");
 103 | *   |         require(buyToken  != address(0), "TS: invalid sell token");
 104 |     | 
 105 |     |         // save tokens to storage
 106 | *   |         s_sellToken = ERC20(sellToken);
 107 | *   |         s_buyToken  = ERC20(buyToken);
 108 |     | 
 109 |     |         // save tokens to stack since to prevent multiple storage reads during constructor
 110 | *   |         ERC20 sToken = ERC20(sellToken);
 111 | *   |         ERC20 bToken = ERC20(buyToken);
 112 |     | 
 113 |     |         // enforce precision
 114 | *   |         require(sToken.decimals() == SELL_PRECISION, "TS: sell token invalid precision");
 115 | *   |         require(bToken.decimals() >= MIN_BUY_PRECISION, "TS: buy token invalid min precision");
 116 | *   |         require(bToken.decimals() <= SELL_PRECISION, "TS: buy token precision must <= sell token");
 117 |     | 
 118 |     |         // require minimum sell token amount
 119 | *   |         require(sellTokenAmount >= MIN_FUNDING * 10 ** sToken.decimals(), "TS: Minimum funding required");
 120 |     | 
 121 |     |         // sanity check
 122 | *   |         require(maxTokensPerBuyer <= sellTokenAmount, "TS: invalid max tokens per buyer");
 123 | *   |         s_maxTokensPerBuyer = maxTokensPerBuyer;
 124 |     | 
 125 |     |         // cache list length
 126 | *   |         uint256 allowListLength = allowList.length;
 127 |     | 
 128 |     |         // perform some sanity checks. NOTE: checks for duplicate inputs
 129 |     |         // are performed by entity creating the proposal who is trusted,
 130 |     |         // so the contract intentionally does not re-check for duplicate inputs. 
 131 |     |         // Findings related to not checking for duplicate inputs are invalid.
 132 | *   |         require(allowListLength >= MIN_BUYERS, "TS: Minimum 3 buyers required");
 133 |     | 
 134 | *   |         uint256 totalBuyers;
 135 |     | 
 136 |     |         // store addresses allowed to buy
 137 | *   |         for(; totalBuyers<allowListLength; ++totalBuyers) {
 138 |     |             // sanity check to prevent address(0)
 139 | *   |             address buyer = allowList[totalBuyers];
 140 | *   |             require(buyer != address(0), "TS: address(0) invalid");
 141 |     | 
 142 | *   |             s_buyers[buyer] = BuyerState.ALLOWED;
 143 |     |         }
 144 |     | 
 145 | *   |         s_totalBuyers = totalBuyers;
 146 |     | 
 147 |     |         // update the token sale creator
 148 | *   |         s_creator = msg.sender;
 149 |     | 
 150 |     |         // transfer the tokens to be sold into this contract
 151 |     |         //
 152 |     |         // fee-on-transfer & other weird stuff not suppported, see notes at top
 153 | *   |         s_sellTokenTotalAmount = sellTokenAmount;
 154 |     | 
 155 |     |         // contract creator is trusted to immediately fund the contract after creation
 156 |     |         // with the correct amount; more complicated funding scheme not implemented
 157 |     |         // to avoid complexity. Any findings related to improper funding of contract
 158 |     |         // are invalid.
 159 |     |     }
 160 |     | 
 161 |     | 
 162 |     |     // buy some tokens from the token sale
 163 |     |     // no slippage required since exchange rate always 1:1
 164 |     |     // caller just specifies the amount of sell tokens they want to buy
 165 | *   |     function buy(uint256 amountToBuy) external {
 166 |     |         // prevent sale if all tokens have been sold
 167 | *   |         uint256 remainingSellTokens = getRemainingSellTokens();
 168 | *   |         require(remainingSellTokens != 0, "TS: token sale is complete");
 169 |     | 
 170 |     |         // current buyer
 171 | *   |         address buyer = msg.sender;
 172 |     | 
 173 |     |         // prevent buying if not allowed
 174 | *   |         require(s_buyers[buyer] == BuyerState.ALLOWED, "TS: buyer not allowed");
 175 |     | 
 176 |     |         // if `amountToBuy` greater than remaining cap, cap it to buy the remainder
 177 | *   |         if(amountToBuy > remainingSellTokens) {
 178 | *   |             amountToBuy = remainingSellTokens;
 179 |     |         }
 180 |     | 
 181 |     |         // prevent user from buying more than max
 182 | *   |         require(amountToBuy <= s_maxTokensPerBuyer, "TS: buy over max per user");
 183 |     | 
 184 |     |         // update storage to increase total bought
 185 | *   |         s_sellTokenSoldAmount += amountToBuy;
 186 |     | 
 187 |     |         // transfer purchase tokens from buyer to creator
 188 | *   |         uint256 amount = _convert(amountToBuy, s_buyToken.decimals());
 189 | *   |         require(amount > 0, "TS: Converted amount too small");
 190 |     | 
 191 | *   |         SafeERC20.safeTransferFrom(s_buyToken, buyer, s_creator, amount);
 192 |     | 
 193 |     |         // transfer sell tokens from this contract to buyer
 194 | *   |         SafeERC20.safeTransfer(s_sellToken, buyer, amountToBuy);
 195 |     |     }
 196 |     | 
 197 |     |     
 198 |     |     // ends the sale and refunds creator remaining unsold tokens
 199 | *   |     function endSale() external {
 200 |     |         // cache creator address
 201 | *   |         address creator = s_creator;
 202 |     | 
 203 |     |         // only creator can end the sale
 204 | *   |         require(msg.sender == s_creator, "TS: only creator can end sale");
 205 |     | 
 206 |     |         // sale must not have been completed
 207 |     |         uint256 remainingSellTokens = getRemainingSellTokens();
 208 |     |         require(remainingSellTokens != 0, "TS: token sale is complete");
 209 |     | 
 210 |     |         // update storage with tokens sent to creator to mark the
 211 |     |         // sale as closed
 212 |     |         s_sellTokenSoldAmount += remainingSellTokens;
 213 |     | 
 214 |     |         // send remaining unsold tokens back to creator
 215 |     |         SafeERC20.safeTransfer(s_sellToken, creator, remainingSellTokens);
 216 |     |     }
 217 |     | 
 218 |     | 
 219 |     |     // used internally and externally to determine whether the sale
 220 |     |     // has been completed (no tokens remain unsold)
 221 | *   |     function getRemainingSellTokens() public view returns(uint256) {
 222 | *   |         return s_sellTokenTotalAmount - s_sellTokenSoldAmount;
 223 |     |     }
 224 |     | 
 225 |     | 
 226 |     |     // bunch of getters
 227 | *   |     function getBuyTokenAddress() external view returns(address) {
 228 | *   |         return address(s_buyToken);
 229 |     |     }
 230 | *   |     function getSellTokenAddress() external view returns(address) {
 231 | *   |         return address(s_sellToken);
 232 |     |     }
 233 | *   |     function getMaxTokensPerBuyer() external view returns(uint256) {
 234 | *   |         return s_maxTokensPerBuyer;
 235 |     |     }
 236 | *   |     function getSellTokenTotalAmount() external view returns(uint256) {
 237 | *   |         return s_sellTokenTotalAmount;
 238 |     |     }
 239 |     |     function getSellTokenSoldAmount() external view returns(uint256) {
 240 |     |         return s_sellTokenSoldAmount;
 241 |     |     }
 242 | *   |     function getTotalAllowedBuyers() external view returns(uint256) {
 243 | *   |         return s_totalBuyers;
 244 |     |     }
 245 | *   |     function getCreator() external view returns(address) {
 246 | *   |         return s_creator;
 247 |     |     }
 248 |     | 
 249 |     | 
 250 |     |     // handles conversions
 251 |     |     // amount 500e6, 6
 252 |     |     // if 500e6/10^(18-6) == 500e6/10^12 == 0
 253 |     |     // // amount 500e20, 20
 254 |     |     // else if 500e20 * 10^(20-18) == 500e20 * 10^(2)
 255 | *   |     function _convert(uint256 amount_, uint256 destDecimals_) internal pure returns (uint256) {
 256 | *   |         if (SELL_PRECISION > destDecimals_) {
 257 | *   |             amount_ = amount_ / 10 ** (SELL_PRECISION - destDecimals_);
 258 |     |             // uint256 factor = 10 ** (SELL_PRECISION - destDecimals_);
 259 |     |             // amount_ = (amount_ + factor - 1) / factor; 
 260 |     |         } else if (SELL_PRECISION < destDecimals_) {
 261 |     |             amount_ = amount_ * 10 ** (destDecimals_ - SELL_PRECISION);
 262 |     |         }
 263 |     | 
 264 | *   |         return amount_;
 265 |     |     }
 266 |     | 
 267 |     | 
 268 |     | 
 269 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/06-rarely-false/RarelyFalse.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity ^0.8.23;
 3 |     | //
 4 |     | //
 5 |     | // stateless tests in test/06-rarely-false
 6 |     | //
 7 |     | // placeholder so nothing else gets put in this folder

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/07-byte-battle/ByteBattle.sol
 1 |     | // SPDX-License-Identifier: MIT
 2 |     | pragma solidity ^0.8.23;
 3 |     | //
 4 |     | //
 5 |     | // stateless tests in test/07-byte-battle
 6 |     | //
 7 |     | // placeholder so nothing else gets put in this folder

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/IRM.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/access/AccessControl.sol";
   5 |     | import "@openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol";
   6 |     | 
   7 |     | import "./interfaces/IIRM.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @title Interest Rate Model (IRM) Contract
  11 |     |  * @notice This contract defines the interest rate model for different markets and tranches.
  12 |     |  * @dev It inherits from the IIRM interface and the AccessControl contract from the OpenZeppelin library.
  13 |     |  * @dev It is important that contracts that integrate this IRM appropriately scale interest rate values.
  14 |     |  */
  15 |     | contract IRM is IIRM, AccessControl, Initializable {
  16 |     |     uint256 public constant UTILIZATION_SCALE = 1e9;
  17 |     |     uint256 public constant MAX_INTEREST_RATE = 10e9; // Scale must match OmniToken.sol, 1e9
  18 |     |     mapping(address => mapping(uint8 => IRMConfig)) public marketIRMConfigs;
  19 |     | 
  20 |     |     /**
  21 |     |      * @notice Initializes the admin role with the contract deployer/upgrader.
  22 |     |      * @param _admin The address of the multisig admin.
  23 |     |      */
  24 |     |     function initialize(address _admin) external initializer {
  25 |     |         _grantRole(DEFAULT_ADMIN_ROLE, _admin);
  26 |     |     }
  27 |     | 
  28 |     |     /**
  29 |     |      * @notice Calculates the interest rate for a specific OmniToken market, tranche, total deposit and total borrow.
  30 |     |      * @param _market The address of the market
  31 |     |      * @param _tranche The tranche number
  32 |     |      * @param _totalDeposit The total amount deposited in the market
  33 |     |      * @param _totalBorrow The total amount borrowed from the market
  34 |     |      * @return The calculated interest rate
  35 |     |      */
  36 |     |     function getInterestRate(address _market, uint8 _tranche, uint256 _totalDeposit, uint256 _totalBorrow)
  37 |     |         external
  38 |     |         view
  39 |     |         returns (uint256)
  40 |     |     {
  41 |     |         uint256 utilization;
  42 |     |         if (_totalBorrow <= _totalDeposit) {
  43 |     |             utilization = _totalDeposit == 0 ? 0 : (_totalBorrow * UTILIZATION_SCALE) / _totalDeposit;
  44 |     |         } else {
  45 |     |             utilization = UTILIZATION_SCALE;
  46 |     |         }
  47 |     |         return _getInterestRateLinear(marketIRMConfigs[_market][_tranche], utilization);
  48 |     |     }
  49 |     | 
  50 |     |     /**
  51 |     |      * @notice Internal function to calculate the interest rate linearly based on utilization and IRMConfig.
  52 |     |      * @param _config The IRM configuration structure
  53 |     |      * @param _utilization The current utilization rate
  54 |     |      * @return interestRate The calculated interest rate
  55 |     |      */
  56 |     |     function _getInterestRateLinear(IRMConfig memory _config, uint256 _utilization)
  57 |     |         internal
  58 |     |         pure
  59 |     |         returns (uint256 interestRate)
  60 |     |     {
  61 |     |         if (_config.kink == 0) {
  62 |     |             revert("IRM::_getInterestRateLinear: Interest config not set.");
  63 |     |         }
  64 |     |         if (_utilization <= _config.kink) {
  65 |     |             interestRate = _config.start;
  66 |     |             interestRate += (_utilization * (_config.mid - _config.start)) / _config.kink;
  67 |     |         } else {
  68 |     |             interestRate = _config.mid;
  69 |     |             interestRate +=
  70 |     |                 ((_utilization - _config.kink) * (_config.end - _config.mid)) / (UTILIZATION_SCALE - _config.kink);
  71 |     |         }
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @notice Sets the IRM configuration for a specific OmniToken market and tranches.
  76 |     |      * @param _market The address of the market
  77 |     |      * @param _tranches An array of tranche numbers
  78 |     |      * @param _configs An array of IRMConfig configurations
  79 |     |      */
  80 |     |     function setIRMForMarket(address _market, uint8[] calldata _tranches, IRMConfig[] calldata _configs)
  81 |     |         external
  82 |     |         onlyRole(DEFAULT_ADMIN_ROLE)
  83 |     |     {
  84 |     |         if (_tranches.length != _configs.length) {
  85 |     |             revert("IRM::setIRMForMarket: Tranches and configs length mismatch.");
  86 |     |         }
  87 |     |         for (uint256 i = 0; i < _tranches.length; ++i) {
  88 |     |             if (_configs[i].kink == 0 || _configs[i].kink >= UTILIZATION_SCALE) {
  89 |     |                 revert("IRM::setIRMForMarket: Bad kink value.");
  90 |     |             }
  91 |     |             if (
  92 |     |                 _configs[i].start > _configs[i].mid || _configs[i].mid > _configs[i].end
  93 |     |                     || _configs[i].end > MAX_INTEREST_RATE
  94 |     |             ) {
  95 |     |                 revert("IRM::setIRMForMarket: Bad interest value.");
  96 |     |             }
  97 |     |             marketIRMConfigs[_market][_tranches[i]] = _configs[i];
  98 |     |         }
  99 |     |         emit SetIRMForMarket(_market, _tranches, _configs);
 100 |     |     }
 101 |     | }
 102 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/OmniOracle.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/access/AccessControl.sol";
   5 |     | import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
   6 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   7 |     | import "@openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol";
   8 |     | 
   9 |     | import "./interfaces/IBandReference.sol";
  10 |     | import "./interfaces/IChainlinkAggregator.sol";
  11 |     | import "./interfaces/ICustomOmniOracle.sol";
  12 |     | import "./interfaces/IOmniOracle.sol";
  13 |     | 
  14 |     | /**
  15 |     |  * @title OmniOracle contract
  16 |     |  * @notice This contract facilitates USD base price retrieval from Chainlink, Band, or a custom oracle integrating the IOmniOracle interface.
  17 |     |  * Special attention must be paid by the admin to ensure oracle configurations are valid given the below specifications.
  18 |     |  * @dev Inherits from AccessControl and implements IOmniOracle interface.
  19 |     |  * Makes assumptions about oracle feeds, e.g. the decimals, delay, and base currency. Configurator must pay special attention.
  20 |     |  * @dev This oracle contract does not handle Chainlink L2 Sequencer Uptime Feeds requirements, and should only be used for L1 deployments.
  21 |     |  */
  22 |     | contract OmniOracle is IOmniOracle, AccessControl, Initializable {
  23 |     |     uint256 public constant PRICE_SCALE = 1e36; // Gives enough precision for the price of one base unit of token, as most tokens have at most 18 decimals
  24 |     |     string private constant USD = "USD";
  25 |     | 
  26 |     |     mapping(address => OracleConfig) public oracleConfigs;
  27 |     |     mapping(address => string) public oracleSymbols;
  28 |     | 
  29 |     |     /**
  30 |     |      * @notice Initializes the admin role with the contract deployer/upgrader.
  31 |     |      * @param _admin The address of the multisig admin.
  32 |     |      */
  33 |     |     function initialize(address _admin) external initializer {
  34 |     |         _grantRole(DEFAULT_ADMIN_ROLE, _admin);
  35 |     |     }
  36 |     | 
  37 |     |     /**
  38 |     |      * @notice Fetches the price of the specified asset in USD for the base unit of the underlying token.
  39 |     |      * @dev Band oracle documentation says they always return price multiplied by 1e18 (https://docs.bandchain.org/products/band-standard-dataset/using-band-standard-dataset/contract#getreferencedata)
  40 |     |      * @param _underlying The address of the asset.
  41 |     |      * @return The price of the asset in USD, in the base unit of the underlying token.
  42 |     |      */
  43 |     |     function getPrice(address _underlying) external view returns (uint256) {
  44 |     |         OracleConfig memory config = oracleConfigs[_underlying];
  45 |     |         if (config.provider == Provider.Band) {
  46 |     |             IStdReference.ReferenceData memory data;
  47 |     |             data = IStdReference(config.oracleAddress).getReferenceData(oracleSymbols[_underlying], USD);
  48 |     |             require(
  49 |     |                 data.lastUpdatedBase >= block.timestamp - config.delay, "OmniOracle::getPrice: Stale price for base."
  50 |     |             );
  51 |     |             require(
  52 |     |                 data.lastUpdatedQuote >= block.timestamp - config.delayQuote,
  53 |     |                 "OmniOracle::getPrice: Stale price for quote."
  54 |     |             );
  55 |     |             return data.rate * (PRICE_SCALE / 1e18) / (10 ** config.underlyingDecimals); // Price in one base unit with 1e36 precision
  56 |     |         } else if (config.provider == Provider.Chainlink) {
  57 |     |             (, int256 answer,, uint256 updatedAt,) = IChainlinkAggregator(config.oracleAddress).latestRoundData();
  58 |     |             require(
  59 |     |                 answer > 0 && updatedAt >= block.timestamp - config.delay,
  60 |     |                 "OmniOracle::getPrice: Invalid chainlink price."
  61 |     |             );
  62 |     |             return uint256(answer) * (PRICE_SCALE / (10 ** IChainlinkAggregator(config.oracleAddress).decimals()))
  63 |     |                 / (10 ** config.underlyingDecimals);
  64 |     |         } else if (config.provider == Provider.Other) {
  65 |     |             return ICustomOmniOracle(config.oracleAddress).getPrice(_underlying) * (PRICE_SCALE / 1e18)
  66 |     |                 / (10 ** config.underlyingDecimals);
  67 |     |         } else {
  68 |     |             revert("OmniOracle::getPrice: Invalid provider.");
  69 |     |         }
  70 |     |     }
  71 |     | 
  72 |     |     /**
  73 |     |      * @notice Sets the oracle configuration for the specified asset. Chainlink addresses must use the USD price feed.
  74 |     |      * @param _underlying The address of the asset.
  75 |     |      * @param _oracleConfig The oracle configuration for the asset. Must be Chainlink, Band, or implement the IOmniOracle interface.
  76 |     |      */
  77 |     |     function setOracleConfig(address _underlying, OracleConfig calldata _oracleConfig, string calldata _symbol)
  78 |     |         external
  79 |     |         onlyRole(DEFAULT_ADMIN_ROLE)
  80 |     |     {
  81 |     |         require(
  82 |     |             _oracleConfig.oracleAddress != address(0) && _underlying != address(0),
  83 |     |             "OmniOracle::setOracleConfig: Can never use zero address."
  84 |     |         );
  85 |     |         require(_oracleConfig.provider != Provider.Invalid, "OmniOracle::setOracleConfig: Invalid provider.");
  86 |     |         require(_oracleConfig.delay > 0, "OmniOracle::setOracleConfig: Invalid delay.");
  87 |     |         require(_oracleConfig.delayQuote > 0, "OmniOracle::setOracleConfig: Invalid delay quote.");
  88 |     |         oracleConfigs[_underlying] = _oracleConfig;
  89 |     |         oracleSymbols[_underlying] = _symbol;
  90 |     |         emit SetOracle(
  91 |     |             _underlying,
  92 |     |             _oracleConfig.oracleAddress,
  93 |     |             _oracleConfig.provider,
  94 |     |             _oracleConfig.delay,
  95 |     |             _oracleConfig.delayQuote,
  96 |     |             _oracleConfig.underlyingDecimals
  97 |     |         );
  98 |     |     }
  99 |     | 
 100 |     |     /**
 101 |     |      * @notice Removes the oracle configuration for the specified asset.
 102 |     |      * @param _underlying The address of the asset.
 103 |     |      */
 104 |     |     function removeOracleConfig(address _underlying) external onlyRole(DEFAULT_ADMIN_ROLE) {
 105 |     |         delete oracleConfigs[_underlying];
 106 |     |         emit RemoveOracle(_underlying);
 107 |     |     }
 108 |     | }
 109 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/OmniPool.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin-upgradeable/contracts/access/AccessControlUpgradeable.sol";
   5 |     | import "@openzeppelin-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol";
   6 |     | import "@openzeppelin-upgradeable/contracts/utils/PausableUpgradeable.sol";
   7 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   8 |     | 
   9 |     | import "./interfaces/IOmniOracle.sol";
  10 |     | import "./interfaces/IOmniPool.sol";
  11 |     | import "./interfaces/IOmniToken.sol";
  12 |     | import "./interfaces/IOmniTokenNoBorrow.sol";
  13 |     | import "./interfaces/IWithUnderlying.sol";
  14 |     | import "./SubAccount.sol";
  15 |     | 
  16 |     | /**
  17 |     |  * @title OmniPool
  18 |     |  * @notice This contract implements a manager for handling loans, protocol market, mode, and account configurations, and liquidations.
  19 |     |  * @dev This contract implements a lending pool with various modes and market configurations.
  20 |     |  * It utilizes different structs to keep track of market, mode, account configurations, evaluations,
  21 |     |  * and liquidation bonuses. It has a variety of external and public functions to manage and interact with
  22 |     |  * the lending pool, along with internal utility functions. Includes AccessContral, Pausable, and ReentrancyGuardUpgradeable (includes Initializable)
  23 |     |  * from OpenZeppelin.
  24 |     |  */
  25 |     | contract OmniPool is IOmniPool, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {
  26 |     |     using SubAccount for address;
  27 |     | 
  28 |     |     bytes32 public constant SOFT_LIQUIDATION_ROLE = keccak256("SOFT_LIQUIDATION_ROLE");
  29 |     |     bytes32 public constant MARKET_CONFIGURATOR_ROLE = keccak256("MARKET_CONFIGURATOR_ROLE");
  30 |     | 
  31 |     |     uint256 public constant SELF_COLLATERALIZATION_FACTOR = 0.96e9; // 0.96
  32 |     |     uint256 public constant FACTOR_PRECISION_SCALE = 1e9;
  33 |     |     uint256 public constant LIQ_BONUS_PRECISION_SCALE = 1e9;
  34 |     |     uint256 public constant HEALTH_FACTOR_SCALE = 1e9;
  35 |     |     uint256 public constant MAX_BASE_SOFT_LIQUIDATION = 1.4e9;
  36 |     |     uint256 public constant MAX_LIQ_KINK = 0.2e9; // Borrow value exceeds deposit value by 20%
  37 |     |     uint256 public constant PRICE_SCALE = 1e18; // Must match up with PRICE_SCALE in OmniOracle
  38 |     |     uint256 public constant MAX_MARKETS_PER_ACCOUNT = 9; // Will be 10 including isolated collateral market
  39 |     | 
  40 |     |     mapping(bytes32 => AccountInfo) public accountInfos;
  41 |     |     mapping(bytes32 => address[]) public accountMarkets;
  42 |     | 
  43 |     |     uint256 public modeCount;
  44 |     |     mapping(uint256 => ModeConfiguration) public modeConfigurations;
  45 |     |     mapping(address => MarketConfiguration) public marketConfigurations;
  46 |     |     mapping(address => LiquidationBonusConfiguration) public liquidationBonusConfigurations;
  47 |     | 
  48 |     |     address public oracle;
  49 |     |     uint8 public pauseTranche;
  50 |     |     bytes32 public reserveReceiver;
  51 |     | 
  52 |     |     /**
  53 |     |      * @notice Initializes a new instance of the contract, setting up the oracle, reserve receiver, pause tranche, and various roles.
  54 |     |      * This constructor sets the oracle address, initializes the pause tranche to its maximum value, and sets the reserve receiver to the provided address.
  55 |     |      * It also sets up the DEFAULT_ADMIN_ROLE, SOFT_LIQUIDATION_ROLE, and MARKET_CONFIGURATOR_ROLE, assigning them to the account deploying the contract.
  56 |     |      * @param _oracle The address of the oracle contract to be used for price information.
  57 |     |      * @param _reserveReceiver The address of the reserve receiver. This address will be converted to an account with a subId of 0.
  58 |     |      * @param _admin The address of the multisig admin
  59 |     |      */
  60 |     |     function initialize(address _oracle, address _reserveReceiver, address _admin) external initializer {
  61 |     |         __ReentrancyGuard_init();
  62 |     |         __AccessControl_init();
  63 |     |         __Pausable_init();
  64 |     |         oracle = _oracle;
  65 |     |         pauseTranche = type(uint8).max;
  66 |     |         reserveReceiver = _reserveReceiver.toAccount(0);
  67 |     |         _grantRole(DEFAULT_ADMIN_ROLE, _admin); // Additionally set up other roles?
  68 |     |         _grantRole(SOFT_LIQUIDATION_ROLE, _admin);
  69 |     |         _grantRole(MARKET_CONFIGURATOR_ROLE, _admin);
  70 |     |     }
  71 |     | 
  72 |     |     /**
  73 |     |      * @notice Allows a user to enter an isolated market, the market configuration must be for isolated collateral.
  74 |     |      * @dev The function checks whether the market is valid for isolation and updates the account's isolatedCollateralMarket field.
  75 |     |      * A subaccount is only allowed to have 1 isolated collateral market at a time.
  76 |     |      * @param _subId The sub-account identifier.
  77 |     |      * @param _isolatedMarket The address of the isolated market to enter.
  78 |     |      */
  79 |     |     function enterIsolatedMarket(uint96 _subId, address _isolatedMarket) external {
  80 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
  81 |     |         AccountInfo memory account = accountInfos[accountId];
  82 |     |         require(account.modeId == 0, "OmniPool::enterIsolatedMarket: Already in a mode.");
  83 |     |         require(
  84 |     |             account.isolatedCollateralMarket == address(0),
  85 |     |             "OmniPool::enterIsolatedMarket: Already has isolated collateral."
  86 |     |         );
  87 |     |         MarketConfiguration memory marketConfig = marketConfigurations[_isolatedMarket];
  88 |     |         if (marketConfig.expirationTimestamp <= block.timestamp || !marketConfig.isIsolatedCollateral) {
  89 |     |             revert("OmniPool::enterIsolatedMarket: Isolated market invalid.");
  90 |     |         }
  91 |     |         Evaluation memory eval = evaluateAccount(accountId);
  92 |     |         require(eval.numBorrow == 0, "OmniPool::enterIsolatedMarket: Non-zero borrow count.");
  93 |     |         accountInfos[accountId].isolatedCollateralMarket = _isolatedMarket;
  94 |     |         emit EnteredIsolatedMarket(accountId, _isolatedMarket);
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @notice Allows a user to enter multiple unique markets, none of them are isolated collateral markets.
  99 |     |      * @dev The function checks the validity of each market and updates the account's market list. Markets must not already be entered.
 100 |     |      * @param _subId The sub-account identifier.
 101 |     |      * @param _markets The addresses of the markets to enter.
 102 |     |      */
 103 |     |     function enterMarkets(uint96 _subId, address[] calldata _markets) external {
 104 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 105 |     |         require(accountInfos[accountId].modeId == 0, "OmniPool::enterMarkets: Already in a mode.");
 106 |     |         address[] memory existingMarkets = accountMarkets[accountId];
 107 |     |         address[] memory newMarkets = new address[](existingMarkets.length + _markets.length);
 108 |     |         require(newMarkets.length <= MAX_MARKETS_PER_ACCOUNT, "OmniPool::enterMarkets: Too many markets.");
 109 |     |         for (uint256 i = 0; i < existingMarkets.length; ++i) {
 110 |     |             // Copy over existing markets
 111 |     |             newMarkets[i] = existingMarkets[i];
 112 |     |         }
 113 |     |         for (uint256 i = 0; i < _markets.length; ++i) {
 114 |     |             address market = _markets[i];
 115 |     |             MarketConfiguration memory marketConfig = marketConfigurations[market];
 116 |     |             require(
 117 |     |                 marketConfig.expirationTimestamp > block.timestamp && !marketConfig.isIsolatedCollateral,
 118 |     |                 "OmniPool::enterMarkets: Market invalid."
 119 |     |             );
 120 |     |             require(!_contains(newMarkets, market), "OmniPool::enterMarkets: Already in the market.");
 121 |     |             require(
 122 |     |                 IOmniToken(market).getBorrowCap(0) > 0,
 123 |     |                 "OmniPool::enterMarkets: Market has no borrow cap for 0 tranche."
 124 |     |             );
 125 |     |             newMarkets[i + existingMarkets.length] = market;
 126 |     |         }
 127 |     |         accountMarkets[accountId] = newMarkets;
 128 |     |         emit EnteredMarkets(accountId, _markets);
 129 |     |     }
 130 |     | 
 131 |     |     /**
 132 |     |      * @notice Allows a user to exit multiple markets including their isolated market. There must be no borrows active on the subaccount to exit a market.
 133 |     |      * @dev The function removes the specified markets from the account's market list after ensuring the account has no outstanding borrows.
 134 |     |      * @param _subId The sub-account identifier.
 135 |     |      * @param _market The address of the market to exit.
 136 |     |      */
 137 |     |     function exitMarket(uint96 _subId, address _market) external {
 138 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 139 |     |         AccountInfo memory account = accountInfos[accountId];
 140 |     |         require(account.modeId == 0, "OmniPool::exitMarkets: In a mode, need to call exitMode.");
 141 |     |         address[] memory markets_ = getAccountPoolMarkets(accountId, account);
 142 |     |         Evaluation memory eval = _evaluateAccountInternal(accountId, markets_, account);
 143 |     |         require(eval.numBorrow == 0, "OmniPool::exitMarkets: Non-zero borrow count.");
 144 |     |         if (_market == account.isolatedCollateralMarket) {
 145 |     |             accountInfos[accountId].isolatedCollateralMarket = address(0);
 146 |     |         } else {
 147 |     |             require(markets_.length > 0, "OmniPool::exitMarkets: No markets to exit");
 148 |     |             require(_contains(markets_, _market), "OmniPool::exitMarkets: Market not entered");
 149 |     |             uint256 newMarketsLength = markets_.length - 1;
 150 |     |             if (newMarketsLength > 0) {
 151 |     |                 address[] memory newMarkets = new address[](markets_.length - 1);
 152 |     |                 uint256 newIndex = 0;
 153 |     |                 for (uint256 i = 0; i < markets_.length; ++i) {
 154 |     |                     if (markets_[i] != _market) {
 155 |     |                         newMarkets[newIndex] = markets_[i];
 156 |     |                         ++newIndex;
 157 |     |                     }
 158 |     |                 }
 159 |     |                 delete accountMarkets[accountId]; // Gas refund?
 160 |     |                 accountMarkets[accountId] = newMarkets;
 161 |     |             } else {
 162 |     |                 delete accountMarkets[accountId];
 163 |     |             }
 164 |     |         }
 165 |     |         emit ExitedMarket(accountId, _market);
 166 |     |     }
 167 |     | 
 168 |     |     /**
 169 |     |      * @notice Clears all markets for a user including isolated collateral. The subaccount must have no active borrows to clear markets.
 170 |     |      * @dev The function checks that the account has no outstanding borrows before clearing all markets.
 171 |     |      * @param _subId The sub-account identifier.
 172 |     |      */
 173 |     |     function clearMarkets(uint96 _subId) external {
 174 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 175 |     |         AccountInfo memory account = accountInfos[accountId];
 176 |     |         require(account.modeId == 0, "OmniPool::clearMarkets: Already in a mode.");
 177 |     |         Evaluation memory eval = evaluateAccount(accountId);
 178 |     |         require(eval.numBorrow == 0, "OmniPool::clearMarkets: Non-zero borrow count.");
 179 |     |         accountInfos[accountId].isolatedCollateralMarket = address(0);
 180 |     |         delete accountMarkets[accountId];
 181 |     |         emit ClearedMarkets(accountId);
 182 |     |     }
 183 |     | 
 184 |     |     /**
 185 |     |      * @notice Allows a user to enter a mode. The subaccount must not already be in a mode. The mode must not have expired.
 186 |     |      * @dev The function sets the modeId field in the account's info and emits an EnteredMode event.
 187 |     |      * @param _subId The sub-account identifier.
 188 |     |      * @param _modeId The mode identifier to enter.
 189 |     |      */
 190 |     |     function enterMode(uint96 _subId, uint8 _modeId) external {
 191 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 192 |     |         require(_modeId > 0 && _modeId <= modeCount, "OmniPool::enterMode: Invalid mode ID.");
 193 |     |         AccountInfo memory account = accountInfos[accountId];
 194 |     |         require(account.modeId == 0, "OmniPool::enterMode: Already in a mode.");
 195 |     |         require(
 196 |     |             accountMarkets[accountId].length == 0 && account.isolatedCollateralMarket == address(0),
 197 |     |             "OmniPool::enterMode: Non-zero market count."
 198 |     |         );
 199 |     |         require(modeConfigurations[_modeId].expirationTimestamp > block.timestamp, "OmniPool::enterMode: Mode expired.");
 200 |     |         account.modeId = _modeId;
 201 |     |         accountInfos[accountId] = account;
 202 |     |         emit EnteredMode(accountId, _modeId);
 203 |     |     }
 204 |     | 
 205 |     |     /**
 206 |     |      * @notice Allows a user to exit a mode. There must be no active borrows in the subaccount to exit.
 207 |     |      * @dev The function resets the modeId field in the account's info and emits an ExitedMode event.
 208 |     |      * @param _subId The sub-account identifier.
 209 |     |      */
 210 |     |     function exitMode(uint96 _subId) external {
 211 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 212 |     |         AccountInfo memory account = accountInfos[accountId];
 213 |     |         require(account.modeId != 0, "OmniPool::exitMode: Not in a mode.");
 214 |     |         Evaluation memory eval = evaluateAccount(accountId);
 215 |     |         require(eval.numBorrow == 0, "OmniPool::exitMode: Non-zero borrow count.");
 216 |     |         account.modeId = 0;
 217 |     |         accountInfos[accountId] = account;
 218 |     |         emit ExitedMode(accountId);
 219 |     |     }
 220 |     | 
 221 |     |     /**
 222 |     |      * @notice Evaluates an account's deposits and borrows values.
 223 |     |      * @dev The function computes the true and adjusted values of deposits and borrows for the account.
 224 |     |      * @param _accountId The account identifier.
 225 |     |      * @return eval An Evaluation struct containing the account's financial information.
 226 |     |      */
 227 |     |     function evaluateAccount(bytes32 _accountId) public returns (Evaluation memory eval) {
 228 |     |         AccountInfo memory account = accountInfos[_accountId];
 229 |     |         address[] memory poolMarkets = getAccountPoolMarkets(_accountId, account);
 230 |     |         return _evaluateAccountInternal(_accountId, poolMarkets, account);
 231 |     |     }
 232 |     | 
 233 |     |     /**
 234 |     |      * @notice Evaluates an account's financial standing within a lending pool.
 235 |     |      * @dev This function accrues interest, computes market prices, deposit and borrow balances, and calculates the adjusted values of
 236 |     |      * deposits and borrows based on the account's mode and market configurations.
 237 |     |      * @param _accountId The unique identifier of the account to be evaluated.
 238 |     |      * @param _poolMarkets An array of addresses representing the markets in which the account has activity. Excludes the isolated collateral market if it exists.
 239 |     |      * @param _account The AccountInfo struct containing the account's mode, isolated collateral market, and other relevant data.
 240 |     |      * @return eval An Evaluation struct containing data on the account's deposit and borrow balances, both true and adjusted values.
 241 |     |      */
 242 |     |     function _evaluateAccountInternal(bytes32 _accountId, address[] memory _poolMarkets, AccountInfo memory _account)
 243 |     |         internal
 244 |     |         returns (Evaluation memory eval)
 245 |     |     {
 246 |     |         ModeConfiguration memory mode;
 247 |     |         if (_account.modeId != 0) mode = modeConfigurations[_account.modeId];
 248 |     |         for (uint256 i = 0; i < _poolMarkets.length; ++i) {
 249 |     |             // Accrue interest for all borrowable markets
 250 |     |             IOmniToken(_poolMarkets[i]).accrue();
 251 |     |         }
 252 |     |         uint256 marketCount = _poolMarkets.length;
 253 |     |         if (_account.isolatedCollateralMarket != address(0)) {
 254 |     |             ++marketCount;
 255 |     |         }
 256 |     |         for (uint256 i = 0; i < marketCount; ++i) {
 257 |     |             address market;
 258 |     |             // A market is either a pool market or the isolated collateral market (last index).
 259 |     |             if (i < _poolMarkets.length) {
 260 |     |                 market = _poolMarkets[i];
 261 |     |             } else {
 262 |     |                 market = _account.isolatedCollateralMarket;
 263 |     |             }
 264 |     |             MarketConfiguration memory marketConfiguration_ = marketConfigurations[market];
 265 |     |             if (marketConfiguration_.expirationTimestamp <= block.timestamp) {
 266 |     |                 eval.isExpired = true; // Must repay all debts and exit market to get rid of unhealthy account status if expired
 267 |     |             }
 268 |     |             address underlying = IWithUnderlying(market).underlying();
 269 |     |             uint256 price = IOmniOracle(oracle).getPrice(underlying); // Returns price in base units multiplied by 1e36
 270 |     |             uint256 depositAmount = IOmniTokenBase(market).getAccountDepositInUnderlying(_accountId);
 271 |     |             if (depositAmount != 0) {
 272 |     |                 ++eval.numDeposit;
 273 |     |                 uint256 depositValue = (depositAmount * price) / PRICE_SCALE; // Rounds down
 274 |     |                 eval.depositTrueValue += depositValue;
 275 |     |                 uint256 collateralFactor = marketCount == 1
 276 |     |                     ? SELF_COLLATERALIZATION_FACTOR
 277 |     |                     : _account.modeId == 0 ? uint256(marketConfiguration_.collateralFactor) : uint256(mode.collateralFactor);
 278 |     |                 eval.depositAdjValue += (depositValue * collateralFactor) / FACTOR_PRECISION_SCALE; // Rounds down
 279 |     |             }
 280 |     |             if (i >= _poolMarkets.length) {
 281 |     |                 // Isolated collateral market. No borrow.
 282 |     |                 continue;
 283 |     |             }
 284 |     |             uint8 borrowTier = getAccountBorrowTier(_account);
 285 |     |             uint256 borrowAmount = IOmniToken(market).getAccountBorrowInUnderlying(_accountId, borrowTier);
 286 |     |             if (borrowAmount != 0) {
 287 |     |                 ++eval.numBorrow;
 288 |     |                 uint256 borrowValue = (borrowAmount * price) / PRICE_SCALE; // Rounds down
 289 |     |                 eval.borrowTrueValue += borrowValue;
 290 |     |                 uint256 borrowFactor = marketCount == 1
 291 |     |                     ? SELF_COLLATERALIZATION_FACTOR
 292 |     |                     : _account.modeId == 0 ? uint256(marketConfiguration_.borrowFactor) : uint256(mode.borrowFactor);
 293 |     |                 eval.borrowAdjValue += (borrowValue * FACTOR_PRECISION_SCALE) / borrowFactor; // Rounds down
 294 |     |             }
 295 |     |         }
 296 |     |     }
 297 |     | 
 298 |     |     /**
 299 |     |      * @notice Allows an account to borrow funds from a specified market the subaccount has entered, provided the account remains in a healthy financial standing post-borrow.
 300 |     |      * @param _subId The sub-account identifier from which to borrow.
 301 |     |      * @param _market The address of the market from which to borrow.
 302 |     |      * @param _amount The amount of funds to borrow.
 303 |     |      */
 304 |     |     function borrow(uint96 _subId, address _market, uint256 _amount) external nonReentrant whenNotPaused {
 305 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 306 |     |         AccountInfo memory account = accountInfos[accountId];
 307 |     |         address[] memory poolMarkets = getAccountPoolMarkets(accountId, account);
 308 |     |         require(_contains(poolMarkets, _market), "OmniPool::borrow: Not in pool markets.");
 309 |     |         uint8 borrowTier = getAccountBorrowTier(account);
 310 |     |         IOmniToken(_market).borrow(accountId, borrowTier, _amount);
 311 |     |         Evaluation memory eval = _evaluateAccountInternal(accountId, poolMarkets, account);
 312 |     |         require(
 313 |     |             eval.depositAdjValue >= eval.borrowAdjValue && !eval.isExpired,
 314 |     |             "OmniPool::borrow: Not healthy after borrow."
 315 |     |         );
 316 |     |     }
 317 |     | 
 318 |     |     /**
 319 |     |      * @notice Allows an account to repay borrowed funds to a specified market the subaccount has entered.
 320 |     |      * @param _subId The sub-account identifier from which to repay.
 321 |     |      * @param _market The address of the market to which to repay.
 322 |     |      * @param _amount The amount of funds to repay. If _amount is 0, the contract will repay the entire borrow balance.
 323 |     |      */
 324 |     |     function repay(uint96 _subId, address _market, uint256 _amount) external {
 325 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 326 |     |         AccountInfo memory account = accountInfos[accountId];
 327 |     |         address[] memory poolMarkets = getAccountPoolMarkets(accountId, account);
 328 |     |         require(_contains(poolMarkets, _market), "OmniPool::repay: Not in pool markets.");
 329 |     |         uint8 borrowTier = getAccountBorrowTier(account);
 330 |     |         IOmniToken(_market).repay(accountId, msg.sender, borrowTier, _amount);
 331 |     |     }
 332 |     | 
 333 |     |     /**
 334 |     |      * @notice Initiates the liquidation process on an undercollateralized or expired account, repaying some or all of the target account's borrow balance
 335 |     |      * while seizing a portion of the target's collateral. The amount of collateral seized is determined by the liquidation bonus and the price of the
 336 |     |      * assets involved. Soft liquidation is only allowed if there is no bad debt, otherwise if bad debt exists a full liquidation is bypassed.
 337 |     |      * @dev Liquidation configuration must be set for the _collateralMarket or else will revert.
 338 |     |      * The seized amount of shares is not guaranteed to compensate the value of the repayment during liquidation. Liquidators should check the returned value if they have a
 339 |     |      * minimum expectation of payout from liquidating, and perform necessary logic to revert if necessary.
 340 |     |      * @param _params The LiquidationParams struct containing the target account's identifier, the liquidator's identifier, the market to be liquidated,
 341 |     |      * @return seizedShares The amount of shares seized from the liquidated account.
 342 |     |      */
 343 |     |     function liquidate(LiquidationParams calldata _params)
 344 |     |         external
 345 |     |         whenNotPaused
 346 |     |         nonReentrant
 347 |     |         returns (uint256[] memory seizedShares)
 348 |     |     {
 349 |     |         AccountInfo memory targetAccount = accountInfos[_params.targetAccountId];
 350 |     |         address[] memory poolMarkets = getAccountPoolMarkets(_params.targetAccountId, targetAccount);
 351 |     |         require(
 352 |     |             _contains(poolMarkets, _params.liquidateMarket), "OmniPool::liquidate: LiquidateMarket not in pool markets."
 353 |     |         );
 354 |     |         require(
 355 |     |             _contains(poolMarkets, _params.collateralMarket)
 356 |     |                 || targetAccount.isolatedCollateralMarket == _params.collateralMarket,
 357 |     |             "OmniPool::liquidate: CollateralMarket not available to seize."
 358 |     |         );
 359 |     |         Evaluation memory evalBefore = _evaluateAccountInternal(_params.targetAccountId, poolMarkets, targetAccount);
 360 |     |         require(evalBefore.numBorrow > 0, "OmniPool::liquidate: No borrow to liquidate.");
 361 |     |         require(
 362 |     |             (evalBefore.depositAdjValue < evalBefore.borrowAdjValue)
 363 |     |                 || marketConfigurations[_params.collateralMarket].expirationTimestamp <= block.timestamp,
 364 |     |             "OmniPool::liquidate: Account still healthy."
 365 |     |         );
 366 |     |         uint8 borrowTier = getAccountBorrowTier(targetAccount);
 367 |     |         uint256 amount =
 368 |     |             IOmniToken(_params.liquidateMarket).repay(_params.targetAccountId, msg.sender, borrowTier, _params.amount);
 369 |     |         (uint256 liquidationBonus, uint256 softThreshold) = getLiquidationBonusAndThreshold(
 370 |     |             evalBefore.depositAdjValue, evalBefore.borrowAdjValue, _params.collateralMarket
 371 |     |         );
 372 |     |         {
 373 |     |             // Avoid stack too deep
 374 |     |             uint256 borrowPrice = IOmniOracle(oracle).getPrice(IWithUnderlying(_params.liquidateMarket).underlying());
 375 |     |             uint256 depositPrice = IOmniOracle(oracle).getPrice(IWithUnderlying(_params.collateralMarket).underlying());
 376 |     |             uint256 seizeAmount = Math.ceilDiv(
 377 |     |                 Math.ceilDiv(amount * borrowPrice, depositPrice) * (LIQ_BONUS_PRECISION_SCALE + liquidationBonus), // Need to add base since liquidationBonus < LIQ_BONUS_PRECISION_SCALE
 378 |     |                 LIQ_BONUS_PRECISION_SCALE
 379 |     |             ); // round up
 380 |     |             seizedShares = IOmniTokenBase(_params.collateralMarket).seize(
 381 |     |                 _params.targetAccountId, _params.liquidatorAccountId, seizeAmount
 382 |     |             );
 383 |     |         }
 384 |     |         Evaluation memory evalAfter = _evaluateAccountInternal(_params.targetAccountId, poolMarkets, targetAccount);
 385 |     |         if (evalAfter.borrowTrueValue > evalAfter.depositTrueValue) {
 386 |     |             pauseTranche = borrowTier > pauseTranche ? pauseTranche : borrowTier;
 387 |     |             emit PausedTranche(pauseTranche);
 388 |     |         } else if (!evalAfter.isExpired) {
 389 |     |             // If expired, no liquidation threshold
 390 |     |             require(
 391 |     |                 checkSoftLiquidation(evalAfter.depositAdjValue, evalAfter.borrowAdjValue, softThreshold, targetAccount),
 392 |     |                 "OmniPool::liquidate: Too much has been liquidated."
 393 |     |             );
 394 |     |         }
 395 |     |         emit Liquidated(
 396 |     |             msg.sender,
 397 |     |             _params.targetAccountId,
 398 |     |             _params.liquidatorAccountId,
 399 |     |             _params.liquidateMarket,
 400 |     |             _params.collateralMarket,
 401 |     |             amount
 402 |     |         );
 403 |     |     }
 404 |     | 
 405 |     |     /**
 406 |     |      * @notice Checks whether a soft liquidation condition is met based on the account's adjusted deposit and borrow values.
 407 |     |      * @param _depositAdjValue The adjusted value of the account's deposits.
 408 |     |      * @param _borrowAdjValue The adjusted value of the account's borrows.
 409 |     |      * @param _softThreshold The threshold value for soft liquidation.
 410 |     |      * @param _account The AccountInfo struct containing the account's mode, isolated collateral market, and other relevant data.
 411 |     |      * @return A boolean indicating whether a soft liquidation condition is met.
 412 |     |      */
 413 |     |     function checkSoftLiquidation(
 414 |     |         uint256 _depositAdjValue,
 415 |     |         uint256 _borrowAdjValue,
 416 |     |         uint256 _softThreshold,
 417 |     |         AccountInfo memory _account
 418 |     |     ) public pure returns (bool) {
 419 |     |         if (_borrowAdjValue == 0) {
 420 |     |             return false;
 421 |     |         }
 422 |     |         uint256 healthFactor = (_depositAdjValue * HEALTH_FACTOR_SCALE) / _borrowAdjValue; // Round down
 423 |     |         uint256 threshold = _account.softThreshold != 0 ? _account.softThreshold : _softThreshold;
 424 |     |         return healthFactor <= threshold;
 425 |     |     }
 426 |     | 
 427 |     |     /**
 428 |     |      * @notice Initiates the process of socializing a fully liquidated account's remaining loss to the users of the specified market and tranche, discretion to admin.
 429 |     |      * @dev There is a separate call that must be made to unpause the tranches, discretion to admin. Due to potential problems w/ a full liquidation
 430 |     |      * allow for 0.1bps ($10 for $1M) difference in deposit and borrow values. However, it is expected that admin calls liquidate prior to calling socializeLoss in script.
 431 |     |      * @param _market The address of the market in which the loss is socialized.
 432 |     |      * @param _account The unique identifier of the fully liquidated account.
 433 |     |      */
 434 |     |     function socializeLoss(address _market, bytes32 _account) external onlyRole(DEFAULT_ADMIN_ROLE) {
 435 |     |         uint8 borrowTier = getAccountBorrowTier(accountInfos[_account]);
 436 |     |         Evaluation memory eval = evaluateAccount(_account);
 437 |     |         uint256 percentDiff = eval.depositTrueValue * 1e18 / eval.borrowTrueValue;
 438 |     |         require(
 439 |     |             percentDiff < 0.00001e18,
 440 |     |             "OmniPool::socializeLoss: Account not fully liquidated, please call liquidate prior to fully liquidate account."
 441 |     |         );
 442 |     |         IOmniToken(_market).socializeLoss(_account, borrowTier);
 443 |     |         emit SocializedLoss(_market, borrowTier, _account);
 444 |     |     }
 445 |     | 
 446 |     |     /**
 447 |     |      * @notice Determines the risk tier associated with an subaccount's borrow activity. The tier is derived from the subaccount's isolated collateral market.
 448 |     |      * @param _account The AccountInfo struct containing the subaccount's mode, isolated collateral market, and other relevant data.
 449 |     |      * @return The risk tier associated with the subaccount's borrow activity.
 450 |     |      */
 451 |     |     function getAccountBorrowTier(AccountInfo memory _account) public view returns (uint8) {
 452 |     |         address isolatedCollateralMarket = _account.isolatedCollateralMarket;
 453 |     |         if (_account.modeId == 0) {
 454 |     |             if (isolatedCollateralMarket == address(0)) {
 455 |     |                 // Account has no isolated collateral market. Use tier 0 (lowest risk).
 456 |     |                 return 0;
 457 |     |             } else {
 458 |     |                 // Account has isolated collateral market. Use the market's risk tranche.
 459 |     |                 return marketConfigurations[isolatedCollateralMarket].riskTranche;
 460 |     |             }
 461 |     |         } else {
 462 |     |             // Account is in a mode. Use the mode's risk tranche.
 463 |     |             return modeConfigurations[_account.modeId].modeTranche;
 464 |     |         }
 465 |     |     }
 466 |     | 
 467 |     |     /**
 468 |     |      * @notice Retrieves all markets, except for the isolated collateral market, associated with an subaccount.
 469 |     |      * @param _accountId The unique identifier of the subaccount whose markets are to be retrieved.
 470 |     |      * @param _account The AccountInfo struct containing the subaccount's mode, isolated collateral market, and other relevant data.
 471 |     |      * @return An array of addresses representing the markets associated with the subaccount.
 472 |     |      */
 473 |     |     function getAccountPoolMarkets(bytes32 _accountId, AccountInfo memory _account)
 474 |     |         public
 475 |     |         view
 476 |     |         returns (address[] memory)
 477 |     |     {
 478 |     |         if (_account.modeId == 0) {
 479 |     |             // Account is not in a mode. Use the account's markets.
 480 |     |             return accountMarkets[_accountId];
 481 |     |         } else {
 482 |     |             // Account is in a mode. Use the mode's markets.
 483 |     |             assert(_account.modeId <= modeCount);
 484 |     |             return modeConfigurations[_account.modeId].markets;
 485 |     |         }
 486 |     |     }
 487 |     | 
 488 |     |     /**
 489 |     |      * @notice Computes the liquidation bonus and soft threshold values based on the account's adjusted deposit and borrow values and the specified collateral market.
 490 |     |      * @param _depositAdjValue The adjusted value of the account's deposits.
 491 |     |      * @param _borrowAdjValue The adjusted value of the account's borrows.
 492 |     |      * @param _collateralMarket The address of the collateral market.
 493 |     |      * @return bonus The computed liquidation bonus value.
 494 |     |      * @return softThreshold The computed soft threshold value.
 495 |     |      */
 496 |     |     function getLiquidationBonusAndThreshold(
 497 |     |         uint256 _depositAdjValue,
 498 |     |         uint256 _borrowAdjValue,
 499 |     |         address _collateralMarket
 500 |     |     ) public view returns (uint256 bonus, uint256 softThreshold) {
 501 |     |         if (_borrowAdjValue > _depositAdjValue) {
 502 |     |             // Prioritize unhealthiness over expiry in case where is expired and unhealthy is true
 503 |     |             LiquidationBonusConfiguration memory liquidationBonusConfiguration_ =
 504 |     |                 liquidationBonusConfigurations[_collateralMarket];
 505 |     |             softThreshold = liquidationBonusConfiguration_.softThreshold;
 506 |     |             uint256 pctDiff =
 507 |     |                 Math.ceilDiv(_borrowAdjValue * LIQ_BONUS_PRECISION_SCALE, _depositAdjValue) - LIQ_BONUS_PRECISION_SCALE; // Round up
 508 |     |             if (pctDiff <= liquidationBonusConfiguration_.kink) {
 509 |     |                 bonus = liquidationBonusConfiguration_.start;
 510 |     |                 bonus += Math.ceilDiv(
 511 |     |                     pctDiff * (liquidationBonusConfiguration_.end - liquidationBonusConfiguration_.start),
 512 |     |                     liquidationBonusConfiguration_.kink
 513 |     |                 );
 514 |     |             } else {
 515 |     |                 bonus = liquidationBonusConfiguration_.end;
 516 |     |             }
 517 |     |         } else if (marketConfigurations[_collateralMarket].expirationTimestamp <= block.timestamp) {
 518 |     |             LiquidationBonusConfiguration memory liquidationBonusConfiguration_ =
 519 |     |                 liquidationBonusConfigurations[_collateralMarket];
 520 |     |             softThreshold = liquidationBonusConfiguration_.softThreshold;
 521 |     |             bonus = liquidationBonusConfiguration_.expiredBonus;
 522 |     |         } else {
 523 |     |             revert("OmniPool::getLiquidationBonus: No liquidation bonus, account is not liquidatable ");
 524 |     |         }
 525 |     |     }
 526 |     | 
 527 |     |     /**
 528 |     |      * @notice Determines if an account is healthy by comparing the factor adjusted price weighted values of deposits and borrows.
 529 |     |      * @dev The function evaluates the account and returns true if the account is healthy. Intentionally do not check expiration here.
 530 |     |      * @param _accountId The account identifier.
 531 |     |      * @return A boolean indicating whether the account is healthy.
 532 |     |      */
 533 |     |     function isAccountHealthy(bytes32 _accountId) external returns (bool) {
 534 |     |         Evaluation memory eval = evaluateAccount(_accountId);
 535 |     |         return eval.depositAdjValue >= eval.borrowAdjValue && !eval.isExpired;
 536 |     |     }
 537 |     | 
 538 |     |     /**
 539 |     |      * @notice Resets the pause tranche to its default value. This function should only be called after all bad debt is resolved.
 540 |     |      * Must be called by an account with the DEFAULT_ADMIN_ROLE.
 541 |     |      */
 542 |     |     function resetPauseTranche() public onlyRole(DEFAULT_ADMIN_ROLE) {
 543 |     |         pauseTranche = type(uint8).max;
 544 |     |         emit UnpausedTranche();
 545 |     |     }
 546 |     | 
 547 |     |     /**
 548 |     |      * @notice Configures a market with specific parameters. This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.
 549 |     |      * It validates the configuration provided especially focusing on isolated collateral settings, borrow factors and risk tranches.
 550 |     |      * Should never configure a IOmniTokenNoBorrow (non-borrwable) token with a borrowFactor > 0 and not as isolated, otherwise will break.
 551 |     |      * @dev Setting markets to the 0 riskTranche comes with special privileges and should be used carefully after strict risk analysis.
 552 |     |      * @param _market The address of the market to be configured.
 553 |     |      * @param _marketConfig The MarketConfiguration struct containing the market's configurations.
 554 |     |      */
 555 |     |     function setMarketConfiguration(address _market, MarketConfiguration calldata _marketConfig)
 556 |     |         external
 557 |     |         onlyRole(MARKET_CONFIGURATOR_ROLE)
 558 |     |     {
 559 |     |         // Set to block.timestamp value to have the market expire in that block for emergencies
 560 |     |         if (_marketConfig.expirationTimestamp <= block.timestamp) {
 561 |     |             revert("OmniPool::setMarketConfiguration: Bad expiration timestamp.");
 562 |     |         }
 563 |     |         if (_marketConfig.isIsolatedCollateral && (_marketConfig.borrowFactor > 0 || _marketConfig.riskTranche == 0)) {
 564 |     |             revert("OmniPool::setMarketConfiguration: Bad configuration for isolated collateral.");
 565 |     |         }
 566 |     |         if (
 567 |     |             _marketConfig.collateralFactor == 0
 568 |     |                 && (_marketConfig.borrowFactor == 0 || _marketConfig.riskTranche != type(uint8).max)
 569 |     |         ) {
 570 |     |             revert("OmniPool::setMarketConfiguration: Invalid configuration for borrowable long tail asset.");
 571 |     |         }
 572 |     |         MarketConfiguration memory currentConfig = marketConfigurations[_market];
 573 |     |         if (currentConfig.collateralFactor != 0) {
 574 |     |             require(
 575 |     |                 _marketConfig.isIsolatedCollateral == currentConfig.isIsolatedCollateral,
 576 |     |                 "OmniPool::setMarketConfiguration: Cannot change isolated collateral status."
 577 |     |             );
 578 |     |         }
 579 |     |         marketConfigurations[_market] = _marketConfig;
 580 |     |         emit SetMarketConfiguration(_market, _marketConfig);
 581 |     |     }
 582 |     | 
 583 |     |     /**
 584 |     |      * @notice Removes the market configuration for a specified market.
 585 |     |      * @dev This function can only be called by an account with the `MARKET_CONFIGURATOR_ROLE` role.
 586 |     |      * It checks if the market's underlying asset balance is zero before allowing removal.
 587 |     |      * @param _market The address of the market whose configuration is to be removed.
 588 |     |      */
 589 |     |     function removeMarketConfiguration(address _market) external onlyRole(MARKET_CONFIGURATOR_ROLE) {
 590 |     |         require(
 591 |     |             IERC20(IWithUnderlying(_market).underlying()).balanceOf(_market) == 0,
 592 |     |             "OmniPool::removeMarketConfiguration: Market still has balance."
 593 |     |         );
 594 |     |         delete marketConfigurations[_market];
 595 |     |         emit RemovedMarketConfiguration(_market);
 596 |     |     }
 597 |     | 
 598 |     |     /**
 599 |     |      * @notice Sets the configurations for a mode. This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.
 600 |     |      * Each mode configuration overrides all borrow and collateral factors for markets within that mode and should be used cautiously.
 601 |     |      * @dev This is a privileged function that should be used carefully after strict risk analysis, as it overrides factors for all markets in the mode.
 602 |     |      * Modes should never include markets that are considered isolated assets.
 603 |     |      * @param _modeConfiguration A ModeConfiguration struct containing the configuration for the mode.
 604 |     |      */
 605 |     |     function setModeConfiguration(ModeConfiguration calldata _modeConfiguration)
 606 |     |         external
 607 |     |         onlyRole(MARKET_CONFIGURATOR_ROLE)
 608 |     |     {
 609 |     |         if (_modeConfiguration.expirationTimestamp <= block.timestamp) {
 610 |     |             revert("OmniPool::setModeConfiguration: Bad expiration timestamp.");
 611 |     |         }
 612 |     |         for (uint256 i = 0; i < _modeConfiguration.markets.length; ++i) {
 613 |     |             for (uint256 j = i + 1; j < _modeConfiguration.markets.length; j++) {
 614 |     |                 if (_modeConfiguration.markets[i] == _modeConfiguration.markets[j]) {
 615 |     |                     revert("OmniPool:setModeConfiguration: No duplicate markets allowed.");
 616 |     |                 }
 617 |     |             }
 618 |     |         }
 619 |     |         modeCount++;
 620 |     |         modeConfigurations[modeCount] = _modeConfiguration;
 621 |     |         emit SetModeConfiguration(modeCount, _modeConfiguration);
 622 |     |     }
 623 |     | 
 624 |     |     /**
 625 |     |      * @notice Sets the expiration timestamp for a specified mode. This expiration only signifies the mode can no longer be entered, but does not force exit exisitng subaccounts from the mode.
 626 |     |      * This function allows for updating the expiration timestamp of a specific mode, given its mode ID.
 627 |     |      * It reverts if the provided expiration timestamp is in the past or if the mode ID is invalid.
 628 |     |      * Only an account with the MARKET_CONFIGURATOR_ROLE can call this function.
 629 |     |      * @param _modeId The ID of the mode whose expiration timestamp is to be updated.
 630 |     |      * @param _expirationTimestamp The new expiration timestamp for the mode.
 631 |     |      */
 632 |     |     function setModeExpiration(uint256 _modeId, uint32 _expirationTimestamp)
 633 |     |         external
 634 |     |         onlyRole(MARKET_CONFIGURATOR_ROLE)
 635 |     |     {
 636 |     |         require(_expirationTimestamp > block.timestamp, "OmniPool::setModeExpiration: Bad expiration timestamp.");
 637 |     |         require(_modeId != 0 && _modeId <= modeCount, "OmniPool::setModeExpiration: Bad mode ID.");
 638 |     |         modeConfigurations[_modeId].expirationTimestamp = _expirationTimestamp;
 639 |     |     }
 640 |     | 
 641 |     |     /**
 642 |     |      * @notice Sets a specific soft liquidation threshold for an account. This function can only be called by an account with the SOFT_LIQUIDATION_ROLE.
 643 |     |      * The soft liquidation threshold determines the health factor below which an account is considered for soft liquidation.
 644 |     |      * @dev The soft liquidation role should only be assigned to the admin or a smart contract that implements a strategy for why a user should receive a special soft liquidation.
 645 |     |      * @param _accountId The unique identifier of the account for which to set the soft liquidation threshold.
 646 |     |      * @param _softThreshold The soft liquidation threshold to set for the account.
 647 |     |      */
 648 |     |     function setAccountSoftLiquidation(bytes32 _accountId, uint32 _softThreshold)
 649 |     |         external
 650 |     |         onlyRole(SOFT_LIQUIDATION_ROLE)
 651 |     |     {
 652 |     |         if (_softThreshold > MAX_BASE_SOFT_LIQUIDATION || _softThreshold < HEALTH_FACTOR_SCALE) {
 653 |     |             revert(
 654 |     |                 "OmniPool::setSoftLiquidation: Soft liquidation health factor threshold cannot be greater than the standard max and must be greater than 1."
 655 |     |             );
 656 |     |         }
 657 |     |         accountInfos[_accountId].softThreshold = _softThreshold;
 658 |     |     }
 659 |     | 
 660 |     |     /**
 661 |     |      * @notice Sets the configuration for liquidation bonuses for a specific market. This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.
 662 |     |      * The configuration includes parameters that affect the calculation of liquidation bonuses during the liquidation process.
 663 |     |      * @param _market The address of the market for which to set the liquidation bonus configuration.
 664 |     |      * @param _config The LiquidationBonusConfiguration struct containing the configuration for liquidation bonuses.
 665 |     |      */
 666 |     |     function setLiquidationBonusConfiguration(address _market, LiquidationBonusConfiguration calldata _config)
 667 |     |         external
 668 |     |         onlyRole(MARKET_CONFIGURATOR_ROLE)
 669 |     |     {
 670 |     |         require(
 671 |     |             _config.kink <= MAX_LIQ_KINK,
 672 |     |             "OmniPool::setLiquidationBonusConfiguration: Bad kink for maximum liquidation."
 673 |     |         );
 674 |     |         require(
 675 |     |             _config.start <= _config.end && _config.end <= LIQ_BONUS_PRECISION_SCALE,
 676 |     |             "OmniPool::setLiquidationBonusConfiguration: Bad start and end bonus values."
 677 |     |         );
 678 |     |         if (_config.expiredBonus > LIQ_BONUS_PRECISION_SCALE) {
 679 |     |             revert("OmniPool::setLiquidationBonusConfiguration: Bad expired bonus value.");
 680 |     |         }
 681 |     |         if (_config.softThreshold > MAX_BASE_SOFT_LIQUIDATION || _config.softThreshold < HEALTH_FACTOR_SCALE) {
 682 |     |             revert(
 683 |     |                 "OmniPool::setSoftLiquidation: Soft liquidation health factor threshold cannot be greater than the standard max and must be greater than 1."
 684 |     |             );
 685 |     |         }
 686 |     |         liquidationBonusConfigurations[_market] = _config;
 687 |     |     }
 688 |     | 
 689 |     |     /**
 690 |     |      * @notice Sets the tranche count for a specific market.
 691 |     |      * @dev This function allows to set the number of tranches for a given market.
 692 |     |      * It's an external function that can only be called by an account with the `MARKET_CONFIGURATOR_ROLE`.
 693 |     |      * @param _market The address of the market contract.
 694 |     |      * @param _trancheCount The number of tranches to be set for the market.
 695 |     |      */
 696 |     |     function setTrancheCount(address _market, uint8 _trancheCount) external onlyRole(MARKET_CONFIGURATOR_ROLE) {
 697 |     |         IOmniToken(_market).setTrancheCount(_trancheCount);
 698 |     |     }
 699 |     | 
 700 |     |     /**
 701 |     |      * @notice Sets the borrow cap for each tranche of a specific market.
 702 |     |      * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.
 703 |     |      * It invokes the setTrancheBorrowCaps function of the IOmniToken contract associated with the specified market.
 704 |     |      * @param _market The address of the market for which to set the borrow caps.
 705 |     |      * @param _borrowCaps An array of borrow cap values, one for each tranche of the market.
 706 |     |      */
 707 |     |     function setBorrowCap(address _market, uint256[] calldata _borrowCaps)
 708 |     |         external
 709 |     |         onlyRole(MARKET_CONFIGURATOR_ROLE)
 710 |     |     {
 711 |     |         for (uint256 i = 0; i < _borrowCaps.length - 1; ++i) {
 712 |     |             require(_borrowCaps[i] >= _borrowCaps[i + 1], "OmniPool::setBorrowCap: Invalid borrow cap.");
 713 |     |         }
 714 |     |         IOmniToken(_market).setTrancheBorrowCaps(_borrowCaps);
 715 |     |     }
 716 |     | 
 717 |     |     /**
 718 |     |      * @notice Sets the supply cap for a market that doesn't allow borrowing.
 719 |     |      * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.
 720 |     |      * It invokes the setSupplyCap function of the IOmniTokenNoBorrow contract associated with the specified market.
 721 |     |      * @param _market The address of the market for which to set the no-borrow supply cap.
 722 |     |      * @param _noBorrowSupplyCap The value of the no-borrow supply cap to set.
 723 |     |      */
 724 |     |     function setNoBorrowSupplyCap(address _market, uint256 _noBorrowSupplyCap)
 725 |     |         external
 726 |     |         onlyRole(MARKET_CONFIGURATOR_ROLE)
 727 |     |     {
 728 |     |         IOmniTokenNoBorrow(_market).setSupplyCap(_noBorrowSupplyCap);
 729 |     |     }
 730 |     | 
 731 |     |     /**
 732 |     |      * @notice Sets the reserve receiver's address. This function can only be called by an account with the DEFAULT_ADMIN_ROLE.
 733 |     |      * @dev The reserve receiver's address is converted to a bytes32 account identifier using the toAccount function with a subId of 0.
 734 |     |      * @param _reserveReceiver The address of the reserve receiver to be set.
 735 |     |      */
 736 |     |     function setReserveReceiver(address _reserveReceiver) external onlyRole(DEFAULT_ADMIN_ROLE) {
 737 |     |         reserveReceiver = _reserveReceiver.toAccount(0);
 738 |     |     }
 739 |     | 
 740 |     |     /**
 741 |     |      * @notice Pauses the protocol, halting certain functionalities, i.e. withdraw, borrow, repay, liquidate.
 742 |     |      * @dev This function triggers the `_pause()` internal function and sets `pauseTranche` to 0.
 743 |     |      * It's an external function that can only be called by an account with the `DEFAULT_ADMIN_ROLE`.
 744 |     |      * The function can only be executed when the contract is not already paused,
 745 |     |      * which is checked by the `whenNotPaused` modifier.
 746 |     |      */
 747 |     |     function pause() external whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {
 748 |     |         _pause();
 749 |     |         pauseTranche = 0;
 750 |     |         emit PausedTranche(0);
 751 |     |     }
 752 |     | 
 753 |     |     /**
 754 |     |      * @notice Unpauses the protocol, re-enabling certain functionalities, i.e. withdraw, borrow, repay, liquidate.
 755 |     |      * @dev This function triggers the `_unpause()` internal function and calls `resetPauseTranche()` to reset tranche pause state.
 756 |     |      * It's an external function that can only be called by an account with the `DEFAULT_ADMIN_ROLE`.
 757 |     |      * The function can only be executed when the contract is paused,
 758 |     |      * which is checked by the `whenPaused` modifier.
 759 |     |      */
 760 |     |     function unpause() external whenPaused onlyRole(DEFAULT_ADMIN_ROLE) {
 761 |     |         _unpause();
 762 |     |         resetPauseTranche();
 763 |     |     }
 764 |     | 
 765 |     |     /**
 766 |     |      * @dev Internal utility function to check if a specific value exists within an array of addresses.
 767 |     |      * @param _arr The array of addresses to search.
 768 |     |      * @param _value The address value to look for within the array.
 769 |     |      * @return A boolean indicating whether the value exists within the array.
 770 |     |      */
 771 |     |     function _contains(address[] memory _arr, address _value) internal pure returns (bool) {
 772 |     |         for (uint256 i = 0; i < _arr.length; ++i) {
 773 |     |             if (_arr[i] == _value) {
 774 |     |                 return true;
 775 |     |             }
 776 |     |         }
 777 |     |         return false;
 778 |     |     }
 779 |     | }
 780 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/OmniToken.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   5 |     | import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
   6 |     | import "@openzeppelin-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol";
   7 |     | import "@openzeppelin/contracts/utils/math/Math.sol";
   8 |     | 
   9 |     | import "./interfaces/IIRM.sol";
  10 |     | import "./interfaces/IOmniPool.sol";
  11 |     | import "./interfaces/IOmniToken.sol";
  12 |     | import "./SubAccount.sol";
  13 |     | import "./WithUnderlying.sol";
  14 |     | 
  15 |     | /**
  16 |     |  * @title OmniToken Contract
  17 |     |  * @notice This contract manages deposits, withdrawals, borrowings, and repayments within the Omni protocol. There is only borrow caps, no supply caps.
  18 |     |  * @dev It has multiple tranches, each with its own borrowing and depositing conditions. This contract does not handle rebasing tokens.
  19 |     |  * Inherits from IOmniToken, WithUnderlying, and ReentrancyGuardUpgradeable (includes Initializable) from the OpenZeppelin library.
  20 |     |  * Utilizes the SafeERC20, SubAccount libraries for safe token transfers and account management.
  21 |     |  * Emits events for significant state changes like deposits, withdrawals, borrowings, repayments, and tranches updates.
  22 |     |  */
  23 |     | contract OmniToken is IOmniToken, WithUnderlying, ReentrancyGuardUpgradeable {
  24 |     |     struct OmniTokenTranche {
  25 |     |         uint256 totalDepositAmount;
  26 |     |         uint256 totalBorrowAmount;
  27 |     |         uint256 totalDepositShare;
  28 |     |         uint256 totalBorrowShare;
  29 |     |     }
  30 |     | 
  31 |     |     using SafeERC20 for IERC20;
  32 |     |     using SubAccount for address;
  33 |     |     using SubAccount for bytes32;
  34 |     | 
  35 |     |     uint256 public constant RESERVE_FEE = 0.1e9;
  36 |     |     uint256 public constant FEE_SCALE = 1e9;
  37 |     |     uint256 public constant IRM_SCALE = 1e9; // Must match IRM.sol
  38 |     |     uint256 private constant MAX_VIEW_ACCOUNTS = 25;
  39 |     | 
  40 |     |     address public omniPool;
  41 |     |     address public irm;
  42 |     |     uint256 public lastAccrualTime;
  43 |     |     uint8 public trancheCount;
  44 |     |     bytes32 public reserveReceiver;
  45 |     |     mapping(uint8 => mapping(bytes32 => uint256)) private trancheAccountDepositShares;
  46 |     |     mapping(uint8 => mapping(bytes32 => uint256)) private trancheAccountBorrowShares;
  47 |     |     uint256[] public trancheBorrowCaps;
  48 |     |     OmniTokenTranche[] public tranches;
  49 |     | 
  50 |     |     /**
  51 |     |      * @notice Contract initializes the OmniToken with required parameters.
  52 |     |      * @param _omniPool Address of the OmniPool contract.
  53 |     |      * @param _underlying Address of the underlying asset.
  54 |     |      * @param _irm Address of the Interest Rate Model contract.
  55 |     |      * @param _borrowCaps Initial borrow caps for each tranche.
  56 |     |      */
  57 |     |     function initialize(address _omniPool, address _underlying, address _irm, uint256[] calldata _borrowCaps)
  58 |     |         external
  59 |     |         initializer
  60 |     |     {
  61 |     |         __ReentrancyGuard_init();
  62 |     |         __WithUnderlying_init(_underlying);
  63 |     |         omniPool = _omniPool;
  64 |     |         irm = _irm;
  65 |     |         lastAccrualTime = block.timestamp;
  66 |     |         trancheBorrowCaps = _borrowCaps;
  67 |     |         trancheCount = uint8(_borrowCaps.length);
  68 |     |         for (uint8 i = 0; i < _borrowCaps.length; ++i) {
  69 |     |             tranches.push(OmniTokenTranche(0, 0, 0, 0));
  70 |     |         }
  71 |     |         reserveReceiver = IOmniPool(omniPool).reserveReceiver();
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @notice Accrues interest for all tranches, calculates and distributes the interest among the depositors and updates tranche balances.
  76 |     |      * The function also handles reserve payments. This method needs to be called before any deposit, withdrawal, borrow, or repayment actions to update the state of the contract.
  77 |     |      * @dev Interest is paid out proportionately to more risky tranche deposits per tranche
  78 |     |      */
  79 |     |     function accrue() public {
  80 |     |         uint256 timePassed = block.timestamp - lastAccrualTime;
  81 |     |         if (timePassed == 0) {
  82 |     |             return;
  83 |     |         }
  84 |     |         uint8 trancheIndex = trancheCount;
  85 |     |         uint256 totalBorrow = 0;
  86 |     |         uint256 totalDeposit = 0;
  87 |     |         uint256[] memory trancheDepositAmounts_ = new uint256[](trancheIndex); // trancheIndeex == trancheCount initially
  88 |     |         uint256[] memory trancheAccruedDepositCache = new uint256[](trancheIndex);
  89 |     |         uint256[] memory reserveFeeCache = new uint256[](trancheIndex);
  90 |     |         while (trancheIndex != 0) {
  91 |     |             unchecked {
  92 |     |                 --trancheIndex;
  93 |     |             }
  94 |     |             OmniTokenTranche storage tranche = tranches[trancheIndex];
  95 |     |             uint256 trancheDepositAmount_ = tranche.totalDepositAmount;
  96 |     |             uint256 trancheBorrowAmount_ = tranche.totalBorrowAmount;
  97 |     |             totalBorrow += trancheBorrowAmount_;
  98 |     |             totalDeposit += trancheDepositAmount_;
  99 |     |             trancheDepositAmounts_[trancheIndex] = trancheDepositAmount_;
 100 |     |             trancheAccruedDepositCache[trancheIndex] = trancheDepositAmount_;
 101 |     | 
 102 |     |             if (trancheBorrowAmount_ == 0) {
 103 |     |                 continue;
 104 |     |             }
 105 |     |             uint256 interestAmount;
 106 |     |             {
 107 |     |                 uint256 interestRate = IIRM(irm).getInterestRate(address(this), trancheIndex, totalDeposit, totalBorrow);
 108 |     |                 interestAmount = (trancheBorrowAmount_ * interestRate * timePassed) / 365 days / IRM_SCALE;
 109 |     |             }
 110 |     | 
 111 |     |             // Handle reserve payments
 112 |     |             uint256 reserveInterestAmount = interestAmount * RESERVE_FEE / FEE_SCALE;
 113 |     |             reserveFeeCache[trancheIndex] = reserveInterestAmount;
 114 |     | 
 115 |     |             // Handle deposit interest
 116 |     |             interestAmount -= reserveInterestAmount;
 117 |     |             {
 118 |     |                 uint256 depositInterestAmount = 0;
 119 |     |                 uint256 interestAmountProportion;
 120 |     |                 for (uint8 ti = trancheCount; ti > trancheIndex;) {
 121 |     |                     unchecked {
 122 |     |                         --ti;
 123 |     |                     }
 124 |     |                     interestAmountProportion = interestAmount * trancheDepositAmounts_[ti] / totalDeposit;
 125 |     |                     trancheAccruedDepositCache[ti] += interestAmountProportion;
 126 |     |                     depositInterestAmount += interestAmountProportion;
 127 |     |                 }
 128 |     |                 tranche.totalBorrowAmount = trancheBorrowAmount_ + depositInterestAmount + reserveInterestAmount;
 129 |     |             }
 130 |     |         }
 131 |     |         for (uint8 ti = 0; ti < trancheCount; ++ti) {
 132 |     |             OmniTokenTranche memory tranche_ = tranches[ti];
 133 |     |             // Pay the reserve
 134 |     |             uint256 reserveShare;
 135 |     |             if (reserveFeeCache[ti] > 0) {
 136 |     |                 if (trancheAccruedDepositCache[ti] == 0) {
 137 |     |                     reserveShare = reserveFeeCache[ti];
 138 |     |                 } else {
 139 |     |                     reserveShare = (reserveFeeCache[ti] * tranche_.totalDepositShare) / trancheAccruedDepositCache[ti];
 140 |     |                 }
 141 |     |                 trancheAccruedDepositCache[ti] += reserveFeeCache[ti];
 142 |     |                 trancheAccountDepositShares[ti][reserveReceiver] += reserveShare;
 143 |     |                 tranche_.totalDepositShare += reserveShare;
 144 |     |             }
 145 |     |             tranche_.totalDepositAmount = trancheAccruedDepositCache[ti];
 146 |     |             tranches[ti] = tranche_;
 147 |     |         }
 148 |     |         lastAccrualTime = block.timestamp;
 149 |     |         emit Accrue();
 150 |     |     }
 151 |     | 
 152 |     |     /**
 153 |     |      * @notice Allows a user to deposit a specified amount into a specified tranche.
 154 |     |      * @param _subId Sub-account identifier for the depositor.
 155 |     |      * @param _trancheId Identifier of the tranche to deposit into.
 156 |     |      * @param _amount Amount to deposit.
 157 |     |      * @return share Amount of deposit shares received in exchange for the deposit.
 158 |     |      */
 159 |     |     function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount) external nonReentrant returns (uint256 share) {
 160 |     |         require(_trancheId < IOmniPool(omniPool).pauseTranche(), "OmniToken::deposit: Tranche paused.");
 161 |     |         require(_trancheId < trancheCount, "OmniToken::deposit: Invalid tranche id.");
 162 |     |         accrue();
 163 |     |         bytes32 account = msg.sender.toAccount(_subId);
 164 |     |         uint256 amount = _inflowTokens(account.toAddress(), _amount);
 165 |     |         OmniTokenTranche storage tranche = tranches[_trancheId];
 166 |     |         uint256 totalDepositShare_ = tranche.totalDepositShare;
 167 |     |         uint256 totalDepositAmount_ = tranche.totalDepositAmount;
 168 |     |         if (totalDepositShare_ == 0) {
 169 |     |             share = amount;
 170 |     |         } else {
 171 |     |             assert(totalDepositAmount_ > 0);
 172 |     |             share = (amount * totalDepositShare_) / totalDepositAmount_;
 173 |     |         }
 174 |     |         tranche.totalDepositAmount = totalDepositAmount_ + amount;
 175 |     |         tranche.totalDepositShare = totalDepositShare_ + share;
 176 |     |         trancheAccountDepositShares[_trancheId][account] += share;
 177 |     |         emit Deposit(account, _trancheId, amount, share);
 178 |     |     }
 179 |     | 
 180 |     |     /**
 181 |     |      * @notice Allows a user to withdraw their funds from a specified tranche.
 182 |     |      * @param _subId The ID of the sub-account.
 183 |     |      * @param _trancheId The ID of the tranche.
 184 |     |      * @param _share The share of the user in the tranche.
 185 |     |      * @return amount The amount of funds withdrawn.
 186 |     |      */
 187 |     |     function withdraw(uint96 _subId, uint8 _trancheId, uint256 _share) external nonReentrant returns (uint256 amount) {
 188 |     |         require(_trancheId < IOmniPool(omniPool).pauseTranche(), "OmniToken::withdraw: Tranche paused.");
 189 |     |         require(_trancheId < trancheCount, "OmniToken::withdraw: Invalid tranche id.");
 190 |     |         accrue();
 191 |     |         bytes32 account = msg.sender.toAccount(_subId);
 192 |     |         OmniTokenTranche storage tranche = tranches[_trancheId];
 193 |     |         uint256 totalDepositAmount_ = tranche.totalDepositAmount;
 194 |     |         uint256 totalDepositShare_ = tranche.totalDepositShare;
 195 |     |         uint256 accountDepositShares_ = trancheAccountDepositShares[_trancheId][account];
 196 |     |         if (_share == 0) {
 197 |     |             _share = accountDepositShares_;
 198 |     |         }
 199 |     |         amount = (_share * totalDepositAmount_) / totalDepositShare_;
 200 |     |         tranche.totalDepositAmount = totalDepositAmount_ - amount;
 201 |     |         tranche.totalDepositShare = totalDepositShare_ - _share;
 202 |     |         trancheAccountDepositShares[_trancheId][account] = accountDepositShares_ - _share;
 203 |     |         require(_checkBorrowAllocationOk(), "OmniToken::withdraw: Insufficient withdrawals available.");
 204 |     |         _outflowTokens(account.toAddress(), amount);
 205 |     |         require(IOmniPool(omniPool).isAccountHealthy(account), "OmniToken::withdraw: Not healthy.");
 206 |     |         emit Withdraw(account, _trancheId, amount, _share);
 207 |     |     }
 208 |     | 
 209 |     |     /**
 210 |     |      * @notice Allows a user to borrow funds from a specified tranche.
 211 |     |      * @param _account The account of the user.
 212 |     |      * @param _trancheId The ID of the tranche.
 213 |     |      * @param _amount The amount to borrow.
 214 |     |      * @return share The share of the borrowed amount in the tranche.
 215 |     |      */
 216 |     |     function borrow(bytes32 _account, uint8 _trancheId, uint256 _amount)
 217 |     |         external
 218 |     |         nonReentrant
 219 |     |         returns (uint256 share)
 220 |     |     {
 221 |     |         require(_trancheId < IOmniPool(omniPool).pauseTranche(), "OmniToken::borrow: Tranche paused.");
 222 |     |         require(msg.sender == omniPool, "OmniToken::borrow: Bad caller.");
 223 |     |         accrue();
 224 |     |         OmniTokenTranche storage tranche = tranches[_trancheId];
 225 |     |         uint256 totalBorrowAmount_ = tranche.totalBorrowAmount;
 226 |     |         uint256 totalBorrowShare_ = tranche.totalBorrowShare;
 227 |     |         require(totalBorrowAmount_ + _amount <= trancheBorrowCaps[_trancheId], "OmniToken::borrow: Borrow cap reached.");
 228 |     |         if (totalBorrowShare_ == 0) {
 229 |     |             share = _amount;
 230 |     |         } else {
 231 |     |             assert(totalBorrowAmount_ > 0); // Should only happen if bad debt exists & all other debts repaid
 232 |     |             share = Math.ceilDiv(_amount * totalBorrowShare_, totalBorrowAmount_);
 233 |     |         }
 234 |     |         tranche.totalBorrowAmount = totalBorrowAmount_ + _amount;
 235 |     |         tranche.totalBorrowShare = totalBorrowShare_ + share;
 236 |     |         trancheAccountBorrowShares[_trancheId][_account] += share;
 237 |     |         require(_checkBorrowAllocationOk(), "OmniToken::borrow: Invalid borrow allocation.");
 238 |     |         _outflowTokens(_account.toAddress(), _amount);
 239 |     |         emit Borrow(_account, _trancheId, _amount, share);
 240 |     |     }
 241 |     | 
 242 |     |     /**
 243 |     |      * @notice Allows a user or another account to repay borrowed funds.
 244 |     |      * @param _account The account of the user.
 245 |     |      * @param _payer The account that will pay the borrowed amount.
 246 |     |      * @param _trancheId The ID of the tranche.
 247 |     |      * @param _amount The amount to repay.
 248 |     |      * @return amount The amount of the repaid amount in the tranche.
 249 |     |      */
 250 |     |     function repay(bytes32 _account, address _payer, uint8 _trancheId, uint256 _amount)
 251 |     |         external
 252 |     |         nonReentrant
 253 |     |         returns (uint256 amount)
 254 |     |     {
 255 |     |         require(msg.sender == omniPool, "OmniToken::repay: Bad caller.");
 256 |     |         accrue();
 257 |     |         OmniTokenTranche storage tranche = tranches[_trancheId];
 258 |     |         uint256 totalBorrowAmount_ = tranche.totalBorrowAmount;
 259 |     |         uint256 totalBorrowShare_ = tranche.totalBorrowShare;
 260 |     |         uint256 accountBorrowShares_ = trancheAccountBorrowShares[_trancheId][_account];
 261 |     |         if (_amount == 0) {
 262 |     |             _amount = Math.ceilDiv(accountBorrowShares_ * totalBorrowAmount_, totalBorrowShare_);
 263 |     |         }
 264 |     |         amount = _inflowTokens(_payer, _amount);
 265 |     |         uint256 share = (amount * totalBorrowShare_) / totalBorrowAmount_;    
 266 |     |         tranche.totalBorrowAmount = totalBorrowAmount_ - amount;
 267 |     |         tranche.totalBorrowShare = totalBorrowShare_ - share;
 268 |     |         trancheAccountBorrowShares[_trancheId][_account] = accountBorrowShares_ - share;
 269 |     |         emit Repay(_account, _payer, _trancheId, amount, share);
 270 |     |     }
 271 |     | 
 272 |     |     /**
 273 |     |      * @notice Transfers specified shares from one account to another within a specified tranche.
 274 |     |      * @dev This function can only be called externally and is protected against reentrancy.
 275 |     |      * Requires the tranche to be unpaused and the sender account to remain healthy post-transfer.
 276 |     |      * @param _subId The subscription ID related to the sender's account.
 277 |     |      * @param _to The account identifier to which shares are being transferred.
 278 |     |      * @param _trancheId The identifier of the tranche where the transfer is occurring.
 279 |     |      * @param _shares The amount of shares to transfer.
 280 |     |      * @return A boolean value indicating whether the transfer was successful.
 281 |     |      */
 282 |     |     function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, uint256 _shares)
 283 |     |         external
 284 |     |         nonReentrant
 285 |     |         returns (bool)
 286 |     |     {
 287 |     |         require(_trancheId < IOmniPool(omniPool).pauseTranche(), "OmniToken::transfer: Tranche paused.");
 288 |     |         accrue();
 289 |     |         bytes32 from = msg.sender.toAccount(_subId);
 290 |     |         trancheAccountDepositShares[_trancheId][from] -= _shares;
 291 |     |         trancheAccountDepositShares[_trancheId][_to] += _shares;
 292 |     |         require(IOmniPool(omniPool).isAccountHealthy(from), "OmniToken::transfer: Not healthy.");
 293 |     |         emit Transfer(from, _to, _trancheId, _shares);
 294 |     |         return true;
 295 |     |     }
 296 |     | 
 297 |     |     /**
 298 |     |      * @notice Allows the a liquidator to seize funds from a user's account. OmniPool is responsible for defining how this function is called.
 299 |     |      * Greedily seizes as much collateral as possible, does not revert if no more collateral is left to seize and _amount is nonzero.
 300 |     |      * @param _account The account from which funds will be seized.
 301 |     |      * @param _to The account to which seized funds will be sent.
 302 |     |      * @param _amount The amount of funds to seize.
 303 |     |      * @return seizedShares The shares seized from each tranche.
 304 |     |      */
 305 |     |     function seize(bytes32 _account, bytes32 _to, uint256 _amount)
 306 |     |         external
 307 |     |         override
 308 |     |         nonReentrant
 309 |     |         returns (uint256[] memory)
 310 |     |     {
 311 |     |         require(msg.sender == omniPool, "OmniToken::seize: Bad caller");
 312 |     |         accrue();
 313 |     |         uint256 amount_ = _amount;
 314 |     |         uint256[] memory seizedShares = new uint256[](trancheCount);
 315 |     |         for (uint8 ti = 0; ti < trancheCount; ++ti) {
 316 |     |             uint256 totalShare = tranches[ti].totalDepositShare;
 317 |     |             if (totalShare == 0) {
 318 |     |                 continue;
 319 |     |             }
 320 |     |             uint256 totalAmount = tranches[ti].totalDepositAmount;
 321 |     |             uint256 share = trancheAccountDepositShares[ti][_account];
 322 |     |             uint256 amount = (share * totalAmount) / totalShare;
 323 |     |             if (amount_ > amount) {
 324 |     |                 amount_ -= amount;
 325 |     |                 trancheAccountDepositShares[ti][_account] = 0;
 326 |     |                 trancheAccountDepositShares[ti][_to] += share;
 327 |     |                 seizedShares[ti] = share;
 328 |     |             } else {
 329 |     |                 uint256 transferShare = (share * amount_) / amount;
 330 |     |                 trancheAccountDepositShares[ti][_account] = share - transferShare;
 331 |     |                 trancheAccountDepositShares[ti][_to] += transferShare;
 332 |     |                 seizedShares[ti] = transferShare;
 333 |     |                 break;
 334 |     |             }
 335 |     |         }
 336 |     |         emit Seize(_account, _to, _amount, seizedShares);
 337 |     |         return seizedShares;
 338 |     |     }
 339 |     | 
 340 |     |     /**
 341 |     |      * @notice Distributes the bad debt loss in a tranche among all tranche members in cases of bad debt. OmniPool is responsible for defining how this function is called.
 342 |     |      * @dev This should only be called when the _account does not have any collateral left to seize.
 343 |     |      * @param _account The account that incurred a loss.
 344 |     |      * @param _trancheId The ID of the tranche.
 345 |     |      */
 346 |     |     function socializeLoss(bytes32 _account, uint8 _trancheId) external nonReentrant {
 347 |     |         require(msg.sender == omniPool, "OmniToken::socializeLoss: Bad caller");
 348 |     |         uint256 totalDeposits = 0;
 349 |     |         for (uint8 i = _trancheId; i < trancheCount; ++i) {
 350 |     |             totalDeposits += tranches[i].totalDepositAmount;
 351 |     |         }
 352 |     |         OmniTokenTranche storage tranche = tranches[_trancheId];
 353 |     |         uint256 share = trancheAccountBorrowShares[_trancheId][_account];
 354 |     |         uint256 amount = Math.ceilDiv(share * tranche.totalBorrowAmount, tranche.totalBorrowShare); // Represents amount of bad debt there still is (need to ensure user's account is emptied of collateral before this is called)
 355 |     |         uint256 leftoverAmount = amount;
 356 |     |         for (uint8 ti = trancheCount - 1; ti > _trancheId; --ti) {
 357 |     |             OmniTokenTranche storage upperTranche = tranches[ti];
 358 |     |             uint256 amountProp = (amount * upperTranche.totalDepositAmount) / totalDeposits;
 359 |     |             upperTranche.totalDepositAmount -= amountProp;
 360 |     |             leftoverAmount -= amountProp;
 361 |     |         }
 362 |     |         tranche.totalDepositAmount -= leftoverAmount;
 363 |     |         tranche.totalBorrowAmount -= amount;
 364 |     |         tranche.totalBorrowShare -= share;
 365 |     |         trancheAccountBorrowShares[_trancheId][_account] = 0;
 366 |     |         emit SocializedLoss(_account, _trancheId, amount, share);
 367 |     |     }
 368 |     | 
 369 |     |     /**
 370 |     |      * @notice Computes the borrowing amount of a specific account in the underlying asset for a given borrow tier.
 371 |     |      * @dev The division is ceiling division.
 372 |     |      * @param _account The account identifier for which the borrowing amount is to be computed.
 373 |     |      * @param _borrowTier The borrow tier identifier from which the borrowing amount is to be computed.
 374 |     |      * @return The borrowing amount of the account in the underlying asset for the given borrow tier.
 375 |     |      */
 376 |     |     function getAccountBorrowInUnderlying(bytes32 _account, uint8 _borrowTier) external view returns (uint256) {
 377 |     |         OmniTokenTranche storage tranche = tranches[_borrowTier];
 378 |     |         uint256 share = trancheAccountBorrowShares[_borrowTier][_account];
 379 |     |         if (share == 0) {
 380 |     |             return 0;
 381 |     |         } else {
 382 |     |             return Math.ceilDiv(share * tranche.totalBorrowAmount, tranche.totalBorrowShare);
 383 |     |         }
 384 |     |     }
 385 |     | 
 386 |     |     /**
 387 |     |      * @notice Retrieves the total deposit amount for a specific account across all tranches.
 388 |     |      * @param _account The account identifier.
 389 |     |      * @return The total deposit amount.
 390 |     |      */
 391 |     |     function getAccountDepositInUnderlying(bytes32 _account) public view returns (uint256) {
 392 |     |         uint256 totalDeposit = 0;
 393 |     |         for (uint8 trancheIndex = 0; trancheIndex < trancheCount; ++trancheIndex) {
 394 |     |             OmniTokenTranche storage tranche = tranches[trancheIndex];
 395 |     |             uint256 share = trancheAccountDepositShares[trancheIndex][_account];
 396 |     |             if (share > 0) {
 397 |     |                 totalDeposit += (share * tranche.totalDepositAmount) / tranche.totalDepositShare;
 398 |     |             }
 399 |     |         }
 400 |     |         return totalDeposit;
 401 |     |     }
 402 |     | 
 403 |     |     /**
 404 |     |      * @notice Retrieves the deposit and borrow shares for a specific account in a specific tranche.
 405 |     |      * @param _account The account identifier.
 406 |     |      * @param _trancheId The tranche identifier.
 407 |     |      * @return depositShare The deposit share.
 408 |     |      * @return borrowShare The borrow share.
 409 |     |      */
 410 |     |     function getAccountSharesByTranche(bytes32 _account, uint8 _trancheId)
 411 |     |         external
 412 |     |         view
 413 |     |         returns (uint256 depositShare, uint256 borrowShare)
 414 |     |     {
 415 |     |         depositShare = trancheAccountDepositShares[_trancheId][_account];
 416 |     |         borrowShare = trancheAccountBorrowShares[_trancheId][_account];
 417 |     |     }
 418 |     | 
 419 |     |     /**
 420 |     |      * @notice Gets the borrow cap for a specific tranche.
 421 |     |      * @param _trancheId The ID of the tranche for which to retrieve the borrow cap.
 422 |     |      * @return The borrow cap for the specified tranche.
 423 |     |      */
 424 |     |     function getBorrowCap(uint8 _trancheId) external view returns (uint256) {
 425 |     |         return trancheBorrowCaps[_trancheId];
 426 |     |     }
 427 |     | 
 428 |     |     /**
 429 |     |      * @notice Sets the borrow caps for each tranche.
 430 |     |      * @param _borrowCaps An array of borrow caps in the underlying's decimals.
 431 |     |      */
 432 |     |     function setTrancheBorrowCaps(uint256[] calldata _borrowCaps) external {
 433 |     |         require(msg.sender == omniPool, "OmniToken::setTrancheBorrowCaps: Bad caller.");
 434 |     |         require(_borrowCaps.length == trancheCount, "OmniToken::setTrancheBorrowCaps: Invalid borrow caps length.");
 435 |     |         require(
 436 |     |             _borrowCaps[0] > 0, "OmniToken::setTrancheBorrowCaps: Invalid borrow caps, must always allow 0 to borrow."
 437 |     |         );
 438 |     |         trancheBorrowCaps = _borrowCaps;
 439 |     |         emit SetTrancheBorrowCaps(_borrowCaps);
 440 |     |     }
 441 |     | 
 442 |     |     /**
 443 |     |      * @notice Sets the number of tranches. Can only increase the number of tranches by one at a time, never decrease.
 444 |     |      * @param _trancheCount The new tranche count.
 445 |     |      */
 446 |     |     function setTrancheCount(uint8 _trancheCount) external {
 447 |     |         require(msg.sender == omniPool, "OmniToken::setTrancheCount: Bad caller.");
 448 |     |         require(_trancheCount == trancheCount + 1, "OmniToken::setTrancheCount: Invalid tranche count.");
 449 |     |         trancheCount = _trancheCount;
 450 |     |         OmniTokenTranche memory tranche = OmniTokenTranche(0, 0, 0, 0);
 451 |     |         tranches.push(tranche);
 452 |     |         emit SetTrancheCount(_trancheCount);
 453 |     |     }
 454 |     | 
 455 |     |     /**
 456 |     |      * @notice Fetches and updates the reserve receiver from the OmniPool contract. Anyone can call.
 457 |     |      */
 458 |     |     function fetchReserveReceiver() external {
 459 |     |         reserveReceiver = IOmniPool(omniPool).reserveReceiver();
 460 |     |     }
 461 |     | 
 462 |     |     /**
 463 |     |      * @notice Calculates the total deposited amount for a specific owner across MAX_VIEW_ACCOUNTS sub-accounts. Above will be excluded, function is imperfect.
 464 |     |      * @dev This is just for wallets and Etherscan to pick up the deposit balance of a user for the first MAX_VIEW_ACCOUNTS sub-accounts.
 465 |     |      * @param _owner The address of the owner.
 466 |     |      * @return The total deposited amount.
 467 |     |      */
 468 |     |     function balanceOf(address _owner) external view returns (uint256) {
 469 |     |         uint256 totalDeposit = 0;
 470 |     |         for (uint96 i = 0; i < MAX_VIEW_ACCOUNTS; ++i) {
 471 |     |             totalDeposit += getAccountDepositInUnderlying(_owner.toAccount(i));
 472 |     |         }
 473 |     |         return totalDeposit;
 474 |     |     }
 475 |     | 
 476 |     |     /**
 477 |     |      * @notice Checks if the borrow allocation is valid across all tranches, through the invariant cumulative totalBorrow <= totalDeposit from highest to lowest tranche.
 478 |     |      * @return A boolean value indicating the validity of the borrow allocation.
 479 |     |      */
 480 |     |     function _checkBorrowAllocationOk() internal view returns (bool) {
 481 |     |         uint8 trancheIndex = trancheCount;
 482 |     |         uint256 totalBorrow = 0;
 483 |     |         uint256 totalDeposit = 0;
 484 |     |         while (trancheIndex != 0) {
 485 |     |             unchecked {
 486 |     |                 --trancheIndex;
 487 |     |             }
 488 |     |             totalBorrow += tranches[trancheIndex].totalBorrowAmount;
 489 |     |             totalDeposit += tranches[trancheIndex].totalDepositAmount;
 490 |     |             if (totalBorrow > totalDeposit) {
 491 |     |                 return false;
 492 |     |             }
 493 |     |         }
 494 |     |         return true;
 495 |     |     }
 496 |     | }
 497 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/OmniTokenNoBorrow.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol";
   5 |     | 
   6 |     | import "./interfaces/IOmniPool.sol";
   7 |     | import "./interfaces/IOmniTokenNoBorrow.sol";
   8 |     | import "./SubAccount.sol";
   9 |     | import "./WithUnderlying.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @title OmniTokenNoBorrow
  13 |     |  * @notice This contract represents a token pool with deposit and withdrawal capabilities, without borrowing features. Should only be used for isolated collateral, never borrowable. There is only supply caps.
  14 |     |  * @dev It inherits functionalities from WithUnderlying, ReentrancyGuardUpgradeable (includes Initializable), and implements IOmniTokenNoBorrow interface.
  15 |     |  * The contract allows depositors to deposit and withdraw their funds, and for the OmniPool to seize funds if necessary.
  16 |     |  * It keeps track of the total supply and individual balances, and enforces a supply cap. This contract does not handle rebasing tokens.
  17 |     |  */
  18 |     | contract OmniTokenNoBorrow is IOmniTokenNoBorrow, WithUnderlying, ReentrancyGuardUpgradeable {
  19 |     |     using SubAccount for address;
  20 |     | 
  21 |     |     uint256 private constant MAX_VIEW_ACCOUNTS = 25;
  22 |     | 
  23 |     |     address public omniPool;
  24 |     |     uint256 public totalSupply;
  25 |     |     uint256 public supplyCap;
  26 |     |     mapping(bytes32 => uint256) public balanceOfAccount;
  27 |     | 
  28 |     |     /**
  29 |     |      * @notice Contract initializes the OmniTokenNoBorrow with required parameters.
  30 |     |      * @param _omniPool Address of the OmniPool contract.
  31 |     |      * @param _underlying Address of the underlying asset.
  32 |     |      * @param _supplyCap Initial supply cap.
  33 |     |      */
  34 |     |     function initialize(address _omniPool, address _underlying, uint256 _supplyCap) external initializer {
  35 |     |         __ReentrancyGuard_init();
  36 |     |         __WithUnderlying_init(_underlying);
  37 |     |         omniPool = _omniPool;
  38 |     |         supplyCap = _supplyCap;
  39 |     |     }
  40 |     | 
  41 |     |     /**
  42 |     |      * @notice Deposits a specified amount to the account associated with the message sender and the specified subId.
  43 |     |      * @param _subId The sub-account identifier.
  44 |     |      * @param _amount The amount to deposit.
  45 |     |      * @return amount The actual amount deposited.
  46 |     |      */
  47 |     |     function deposit(uint96 _subId, uint256 _amount) external nonReentrant returns (uint256 amount) {
  48 |     |         bytes32 account = msg.sender.toAccount(_subId);
  49 |     |         amount = _inflowTokens(msg.sender, _amount);
  50 |     |         require(totalSupply + amount <= supplyCap, "OmniTokenNoBorrow::deposit: Supply cap exceeded.");
  51 |     |         totalSupply += amount;
  52 |     |         balanceOfAccount[account] += amount;
  53 |     |         emit Deposit(account, amount);
  54 |     |     }
  55 |     | 
  56 |     |     /**
  57 |     |      * @notice Withdraws a specified amount from the account associated with the message sender and the specified subId.
  58 |     |      * @param _subId The sub-account identifier.
  59 |     |      * @param _amount The amount to withdraw.
  60 |     |      * @return amount The actual amount withdrawn.
  61 |     |      */
  62 |     |     function withdraw(uint96 _subId, uint256 _amount) external nonReentrant returns (uint256 amount) {
  63 |     |         bytes32 account = msg.sender.toAccount(_subId);
  64 |     |         if (_amount == 0) {
  65 |     |             _amount = balanceOfAccount[account];
  66 |     |         }
  67 |     |         balanceOfAccount[account] -= _amount;
  68 |     |         totalSupply -= _amount;
  69 |     |         amount = _outflowTokens(msg.sender, _amount);
  70 |     |         require(IOmniPool(omniPool).isAccountHealthy(account), "OmniTokenNoBorrow::withdraw: Not healthy.");
  71 |     |         emit Withdraw(account, amount);
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @notice Transfers a specified amount of tokens from the sender's account to another account.
  76 |     |      * The transfer operation is subject to the sender's account remaining healthy post-transfer.
  77 |     |      * @dev This function can only be called externally and is protected against reentrant calls.
  78 |     |      * @param _subId The subscription ID associated with the sender's account.
  79 |     |      * @param _to The account identifier to which the tokens are being transferred.
  80 |     |      * @param _amount The amount of tokens to transfer.
  81 |     |      * @return A boolean value indicating whether the transfer was successful.
  82 |     |      */
  83 |     |     function transfer(uint96 _subId, bytes32 _to, uint256 _amount) external nonReentrant returns (bool) {
  84 |     |         bytes32 from = msg.sender.toAccount(_subId);
  85 |     |         balanceOfAccount[from] -= _amount;
  86 |     |         balanceOfAccount[_to] += _amount;
  87 |     |         require(IOmniPool(omniPool).isAccountHealthy(from), "OmniTokenNoBorrow::transfer: Not healthy.");
  88 |     |         emit Transfer(from, _to, _amount);
  89 |     |         return true;
  90 |     |     }
  91 |     | 
  92 |     |     /**
  93 |     |      * @notice Allows the a liquidator to seize funds from a user's account. OmniPool is responsible for defining how this function is called. Should be called carefully, as it has strong privileges.
  94 |     |      * @param _account The account from which funds are seized.
  95 |     |      * @param _to The account to which funds are transferred.
  96 |     |      * @param _amount The amount of funds to seize.
  97 |     |      * @return seizedShares The shares corresponding to the seized amount.
  98 |     |      */
  99 |     |     function seize(bytes32 _account, bytes32 _to, uint256 _amount)
 100 |     |         external
 101 |     |         override
 102 |     |         nonReentrant
 103 |     |         returns (uint256[] memory)
 104 |     |     {
 105 |     |         require(msg.sender == omniPool, "OmniTokenNoBorrow::seize: Bad caller.");
 106 |     |         uint256 accountBalance = balanceOfAccount[_account];
 107 |     |         if (accountBalance < _amount) {
 108 |     |             _amount = accountBalance;
 109 |     |             balanceOfAccount[_account] = 0;
 110 |     |             balanceOfAccount[_to] += accountBalance;
 111 |     |         } else {
 112 |     |             balanceOfAccount[_account] -= _amount;
 113 |     |             balanceOfAccount[_to] += _amount;
 114 |     |         }
 115 |     |         uint256[] memory seizedShares = new uint256[](1);
 116 |     |         seizedShares[0] = _amount;
 117 |     |         emit Seize(_account, _to, _amount, seizedShares);
 118 |     |         return seizedShares;
 119 |     |     }
 120 |     | 
 121 |     |     /**
 122 |     |      * @notice Returns the deposit balance of a specific account.
 123 |     |      * @param _account The account identifier.
 124 |     |      * @return The deposit balance of the account.
 125 |     |      */
 126 |     |     function getAccountDepositInUnderlying(bytes32 _account) external view override returns (uint256) {
 127 |     |         return balanceOfAccount[_account];
 128 |     |     }
 129 |     | 
 130 |     |     /**
 131 |     |      * @notice Sets a new supply cap for the contract.
 132 |     |      * @param _supplyCap The new supply cap amount.
 133 |     |      */
 134 |     |     function setSupplyCap(uint256 _supplyCap) external {
 135 |     |         require(msg.sender == omniPool, "OmniTokenNoBorrow::setSupplyCap: Bad caller.");
 136 |     |         supplyCap = _supplyCap;
 137 |     |         emit SetSupplyCap(_supplyCap);
 138 |     |     }
 139 |     | 
 140 |     |     /**
 141 |     |      * @notice Calculates the total deposited amount for a specific owner across MAX_VIEW_ACCOUNTS sub-accounts. Above will be excluded, function is imperfect.
 142 |     |      * @dev This is just for wallets and Etherscan to pick up the deposit balance of a user for the first MAX_VIEW_ACCOUNTS sub-accounts.
 143 |     |      * @param _owner The address of the owner.
 144 |     |      * @return The total deposited amount.
 145 |     |      */
 146 |     |     function balanceOf(address _owner) external view returns (uint256) {
 147 |     |         uint256 totalDeposit = 0;
 148 |     |         for (uint96 i = 0; i < MAX_VIEW_ACCOUNTS; ++i) {
 149 |     |             totalDeposit += balanceOfAccount[_owner.toAccount(i)];
 150 |     |         }
 151 |     |         return totalDeposit;
 152 |     |     }
 153 |     | }
 154 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/SubAccount.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | /**
  5 |     |  * @title SubAccount
  6 |     |  * @notice This library provides utility functions to handle sub-accounts using bytes32 types, where id is most significant bytes.
  7 |     |  */
  8 |     | library SubAccount {
  9 |     |     /**
 10 |     |      * @notice Combines an address and a sub-account identifier into a bytes32 account representation.
 11 |     |      * @param _sender The address component.
 12 |     |      * @param _subId The sub-account identifier component.
 13 |     |      * @return A bytes32 representation of the account.
 14 |     |      */
 15 |     |     function toAccount(address _sender, uint96 _subId) internal pure returns (bytes32) {
 16 |     |         return bytes32(uint256(uint160(_sender)) | (uint256(_subId) << 160));
 17 |     |     }
 18 |     | 
 19 |     |     /**
 20 |     |      * @notice Extracts the address component from a bytes32 account representation.
 21 |     |      * @param _account The bytes32 representation of the account.
 22 |     |      * @return The address component.
 23 |     |      */
 24 |     |     function toAddress(bytes32 _account) internal pure returns (address) {
 25 |     |         return address(uint160(uint256(_account)));
 26 |     |     }
 27 |     | 
 28 |     |     /**
 29 |     |      * @notice Extracts the sub-account identifier component from a bytes32 account representation.
 30 |     |      * @param _account The bytes32 representation of the account.
 31 |     |      * @return The sub-account identifier component.
 32 |     |      */
 33 |     |     function toSubId(bytes32 _account) internal pure returns (uint96) {
 34 |     |         return uint96(uint256(_account) >> 160);
 35 |     |     }
 36 |     | }
 37 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/WETHGateway.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol";
  5 |     | 
  6 |     | import "./interfaces/IOmniToken.sol";
  7 |     | import "./interfaces/IWETH9.sol";
  8 |     | import "./interfaces/IWithUnderlying.sol";
  9 |     | import "./SubAccount.sol";
 10 |     | 
 11 |     | /**
 12 |     |  * @title WETHGateway
 13 |     |  * @notice Handles native ETH deposits directly to contract through WETH, but does not handle native ETH withdrawals.
 14 |     |  * @dev This contract serves as a gateway for handling deposits of native ETH, which are then wrapped into WETH tokens.
 15 |     |  */
 16 |     | contract WETHGateway is Initializable {
 17 |     |     using SubAccount for address;
 18 |     | 
 19 |     |     address public oweth;
 20 |     |     address public weth;
 21 |     |     uint96 private constant SUBACCOUNT_ID = 0;
 22 |     | 
 23 |     |     event Deposit(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);
 24 |     | 
 25 |     |     /**
 26 |     |      * @notice Initializes the contract with the OWETH contract address.
 27 |     |      * @param _oweth The address of the OWETH contract.
 28 |     |      */
 29 |     |     function initialize(address _oweth) external initializer {
 30 |     |         address _weth = IWithUnderlying(_oweth).underlying();
 31 |     |         IWETH9(_weth).approve(_oweth, type(uint256).max);
 32 |     |         oweth = _oweth;
 33 |     |         weth = _weth;
 34 |     |     }
 35 |     | 
 36 |     |     /**
 37 |     |      * @notice Deposits native ETH to the contract, wraps it into WETH tokens, and handles the deposit operation
 38 |     |      * through the Omni Token contract.
 39 |     |      * @dev The function is payable to accept ETH deposits.
 40 |     |      * @param _subId The subscription ID related to the depositor's account.
 41 |     |      * @param _trancheId The identifier of the tranche where the deposit is occurring.
 42 |     |      * @return share The number of shares received in exchange for the deposited ETH.
 43 |     |      */
 44 |     |     function deposit(uint96 _subId, uint8 _trancheId) external payable returns (uint256 share) {
 45 |     |         bytes32 to = msg.sender.toAccount(_subId);
 46 |     |         IWETH9(weth).deposit{value: msg.value}();
 47 |     |         share = IOmniToken(oweth).deposit(SUBACCOUNT_ID, _trancheId, msg.value);
 48 |     |         IOmniToken(oweth).transfer(SUBACCOUNT_ID, to, _trancheId, share);
 49 |     |         emit Deposit(to, _trancheId, msg.value, share);
 50 |     |     }
 51 |     | 
 52 |     |     /**
 53 |     |      * @notice Fallback function that reverts if ETH is sent directly to the contract.
 54 |     |      * @dev Any attempts to send ETH directly to the contract will cause a transaction revert.
 55 |     |      */
 56 |     |     receive() external payable {
 57 |     |         revert("This contract should not accept ETH directly.");
 58 |     |     }
 59 |     | }
 60 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/WithUnderlying.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  5 |     | import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
  6 |     | import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
  7 |     | import "@openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol";
  8 |     | import "./interfaces/IWithUnderlying.sol";
  9 |     | 
 10 |     | /**
 11 |     |  * @title WithUnderlying
 12 |     |  * @notice A helper contract to handle the inflow and outflow of ERC20 tokens.
 13 |     |  * @dev Utilizes OpenZeppelin's SafeERC20 library to handle ERC20 transactions.
 14 |     |  */
 15 |     | abstract contract WithUnderlying is Initializable, IWithUnderlying {
 16 |     |     using SafeERC20 for IERC20;
 17 |     | 
 18 |     |     address public underlying;
 19 |     | 
 20 |     |     /**
 21 |     |      * @notice Initialies the abstract contract instance.
 22 |     |      * @param _underlying The address of the underlying ERC20 token.
 23 |     |      */
 24 |     |     function __WithUnderlying_init(address _underlying) internal onlyInitializing {
 25 |     |         underlying = _underlying;
 26 |     |     }
 27 |     | 
 28 |     |     /**
 29 |     |      * @notice Retrieves the name of the token.
 30 |     |      * @return The name of the token, either prefixed from the underlying token or the default "Omni Token".
 31 |     |      */
 32 |     |     function name() external view returns (string memory) {
 33 |     |         try IERC20Metadata(underlying).name() returns (string memory data) {
 34 |     |             return string(abi.encodePacked("Omni ", data));
 35 |     |         } catch (bytes memory) {
 36 |     |             return "Omni Token";
 37 |     |         }
 38 |     |     }
 39 |     | 
 40 |     |     /**
 41 |     |      * @notice Retrieves the symbol of the token.
 42 |     |      * @return The symbol of the token, either prefixed from the underlying token or the default "oToken".
 43 |     |      */
 44 |     |     function symbol() external view returns (string memory) {
 45 |     |         try IERC20Metadata(underlying).symbol() returns (string memory data) {
 46 |     |             return string(abi.encodePacked("o", data));
 47 |     |         } catch (bytes memory) {
 48 |     |             return "oToken";
 49 |     |         }
 50 |     |     }
 51 |     | 
 52 |     |     /**
 53 |     |      * @notice Retrieves the number of decimals the token uses.
 54 |     |      * @return The number of decimals of the token, either from the underlying token or the default 18.
 55 |     |      */
 56 |     |     function decimals() external view returns (uint8) {
 57 |     |         try IERC20Metadata(underlying).decimals() returns (uint8 data) {
 58 |     |             return data;
 59 |     |         } catch (bytes memory) {
 60 |     |             return 18;
 61 |     |         }
 62 |     |     }
 63 |     | 
 64 |     |     /**
 65 |     |      * @notice Handles the inflow of tokens to the contract.
 66 |     |      * @dev Transfers `_amount` tokens from `_from` to this contract and returns the actual amount received.
 67 |     |      * @param _from The address from which tokens are transferred.
 68 |     |      * @param _amount The amount of tokens to transfer.
 69 |     |      * @return The actual amount of tokens received by the contract.
 70 |     |      */
 71 |     |     function _inflowTokens(address _from, uint256 _amount) internal returns (uint256) {
 72 |     |         uint256 balanceBefore = IERC20(underlying).balanceOf(address(this));
 73 |     |         IERC20(underlying).safeTransferFrom(_from, address(this), _amount);
 74 |     |         uint256 balanceAfter = IERC20(underlying).balanceOf(address(this));
 75 |     |         return balanceAfter - balanceBefore;
 76 |     |     }
 77 |     | 
 78 |     |     /**
 79 |     |      * @notice Handles the outflow of tokens from the contract.
 80 |     |      * @dev Transfers `_amount` tokens from this contract to `_to` and returns the actual amount sent.
 81 |     |      * @param _to The address to which tokens are transferred.
 82 |     |      * @param _amount The amount of tokens to transfer.
 83 |     |      * @return The actual amount of tokens sent from the contract.
 84 |     |      */
 85 |     |     function _outflowTokens(address _to, uint256 _amount) internal returns (uint256) {
 86 |     |         uint256 balanceBefore = IERC20(underlying).balanceOf(address(this));
 87 |     |         IERC20(underlying).safeTransfer(_to, _amount);
 88 |     |         uint256 balanceAfter = IERC20(underlying).balanceOf(address(this));
 89 |     |         return balanceBefore - balanceAfter;
 90 |     |     }
 91 |     | }
 92 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IBandReference.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | interface IStdReference {
  5 |     |     /// A structure returned whenever someone requests for standard reference data.
  6 |     |     struct ReferenceData {
  7 |     |         uint256 rate; // base/quote exchange rate, multiplied by 1e18.
  8 |     |         uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.
  9 |     |         uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.
 10 |     |     }
 11 |     | 
 12 |     |     /// @dev Returns the price data for the given base/quote pair. Revert if not available.
 13 |     |     function getReferenceData(string memory _base, string memory _quote) external view returns (ReferenceData memory);
 14 |     | 
 15 |     |     /// @dev Similar to getReferenceData, but with multiple base/quote pairs at once.
 16 |     |     function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)
 17 |     |         external
 18 |     |         view
 19 |     |         returns (ReferenceData[] memory);
 20 |     | }
 21 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IChainlinkAggregator.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | interface IChainlinkAggregator {
  5 |     |     function decimals() external view returns (uint8);
  6 |     | 
  7 |     |     function description() external view returns (string memory);
  8 |     | 
  9 |     |     function version() external view returns (uint256);
 10 |     | 
 11 |     |     function getRoundData(uint80 _roundId)
 12 |     |         external
 13 |     |         view
 14 |     |         returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
 15 |     | 
 16 |     |     function latestRoundData()
 17 |     |         external
 18 |     |         view
 19 |     |         returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
 20 |     | }
 21 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/ICustomOmniOracle.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | /**
  5 |     |  * @title ICustomOmniOracle Interface
  6 |     |  * @notice Interface for the custom oracle used by OmniOracle contract.
  7 |     |  */
  8 |     | interface ICustomOmniOracle {
  9 |     |     /**
 10 |     |      * @notice Fetches the price of the specified asset.
 11 |     |      * @param _underlying The address of the asset.
 12 |     |      * @return The price of the asset, normalized to 1e18.
 13 |     |      */
 14 |     |     function getPrice(address _underlying) external view returns (uint256);
 15 |     | }
 16 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IIRM.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | /**
  5 |     |  * @title Interest Rate Model (IRM) Interface
  6 |     |  * @notice This interface describes the publicly accessible functions implemented by the IRM contract.
  7 |     |  */
  8 |     | interface IIRM {
  9 |     |     /// Events
 10 |     |     event SetIRMForMarket(address indexed market, uint8[] tranches, IRMConfig[] configs);
 11 |     | 
 12 |     |     /**
 13 |     |      * @notice This structure defines the configuration for the interest rate model.
 14 |     |      * @dev It contains the kink utilization point, and the interest rates at 0%, kink, and 100% utilization.
 15 |     |      */
 16 |     |     struct IRMConfig {
 17 |     |         uint64 kink; // utilization at mid point (1e9 is 100%)
 18 |     |         uint64 start; // interest rate at 0% utlization
 19 |     |         uint64 mid; // interest rate at kink utlization
 20 |     |         uint64 end; // interest rate at 100% utlization
 21 |     |     }
 22 |     | 
 23 |     |     /**
 24 |     |      * @notice Calculates the interest rate for a specific market, tranche, total deposit, and total borrow.
 25 |     |      * @param _market The address of the market
 26 |     |      * @param _tranche The tranche number
 27 |     |      * @param _totalDeposit The total amount deposited in the market
 28 |     |      * @param _totalBorrow The total amount borrowed from the market
 29 |     |      * @return The calculated interest rate
 30 |     |      */
 31 |     | 
 32 |     |     function getInterestRate(address _market, uint8 _tranche, uint256 _totalDeposit, uint256 _totalBorrow)
 33 |     |         external
 34 |     |         view
 35 |     |         returns (uint256);
 36 |     | 
 37 |     |     /**
 38 |     |      * @notice Sets the IRM configuration for a specific market and tranches.
 39 |     |      * @param _market The address of the market
 40 |     |      * @param _tranches An array of tranche numbers
 41 |     |      * @param _configs An array of IRMConfig structures
 42 |     |      */
 43 |     |     function setIRMForMarket(address _market, uint8[] calldata _tranches, IRMConfig[] calldata _configs) external;
 44 |     | }
 45 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IOmniOracle.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | /**
  5 |     |  * @title IOmniOracle Interface
  6 |     |  * @notice Interface for the OmniOracle contract.
  7 |     |  */
  8 |     | interface IOmniOracle {
  9 |     |     /// Events
 10 |     |     event SetOracle(
 11 |     |         address indexed underlying,
 12 |     |         address indexed oracle,
 13 |     |         Provider provider,
 14 |     |         uint32 delay,
 15 |     |         uint32 delayQuote,
 16 |     |         uint8 underlyingDecimals
 17 |     |     );
 18 |     |     event RemoveOracle(address indexed underlying);
 19 |     | 
 20 |     |     /// Structs
 21 |     |     enum Provider {
 22 |     |         Invalid,
 23 |     |         Band,
 24 |     |         Chainlink,
 25 |     |         Other // Must implement the ICustomOmniOracle interface, use very carefully should return 1 full unit price multiplied by 1e18
 26 |     |     }
 27 |     | 
 28 |     |     struct OracleConfig {
 29 |     |         // One storage slot
 30 |     |         address oracleAddress; // 160 bits
 31 |     |         Provider provider; // 8 bits
 32 |     |         uint32 delay; // 32 bits, because this is time-based in unix
 33 |     |         uint32 delayQuote; // 32 bits, for Band quote delay
 34 |     |         uint8 underlyingDecimals; // 8 bits, decimals of underlying token
 35 |     |     }
 36 |     | 
 37 |     |     /**
 38 |     |      * @notice Fetches the price of the specified asset.
 39 |     |      * @param _underlying The address of the asset.
 40 |     |      * @return The price of the asset, normalized to 1e18.
 41 |     |      */
 42 |     |     function getPrice(address _underlying) external view returns (uint256);
 43 |     | }
 44 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IOmniPool.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | /**
   5 |     |  * @title IOmniPool Interface
   6 |     |  * @dev This interface outlines the functions available in the OmniPool contract.
   7 |     |  */
   8 |     | interface IOmniPool {
   9 |     |     /// Events
  10 |     |     event ClearedMarkets(bytes32 indexed account);
  11 |     |     event EnteredIsolatedMarket(bytes32 indexed account, address market);
  12 |     |     event EnteredMarkets(bytes32 indexed account, address[] markets);
  13 |     |     event EnteredMode(bytes32 indexed account, uint256 modeId);
  14 |     |     event ExitedMarket(bytes32 indexed account, address market);
  15 |     |     event ExitedMode(bytes32 indexed account);
  16 |     |     event Liquidated(
  17 |     |         address indexed liquidator,
  18 |     |         bytes32 indexed targetAccount,
  19 |     |         bytes32 liquidatorAccount,
  20 |     |         address liquidateMarket,
  21 |     |         address collateralMarket,
  22 |     |         uint256 amount
  23 |     |     );
  24 |     |     event PausedTranche(uint8 trancheId);
  25 |     |     event UnpausedTranche();
  26 |     |     event SetMarketConfiguration(address indexed market, MarketConfiguration marketConfig);
  27 |     |     event RemovedMarketConfiguration(address indexed market);
  28 |     |     event SetModeConfiguration(uint256 indexed modeId, ModeConfiguration modeConfig);
  29 |     |     event SocializedLoss(address indexed market, uint8 trancheId, bytes32 account);
  30 |     | 
  31 |     |     // Structs
  32 |     |     /**
  33 |     |      * @dev Structure to hold market configuration data.
  34 |     |      */
  35 |     |     struct MarketConfiguration {
  36 |     |         uint32 collateralFactor;
  37 |     |         uint32 borrowFactor; // Set to 0 if not borrowable.
  38 |     |         uint32 expirationTimestamp;
  39 |     |         uint8 riskTranche;
  40 |     |         bool isIsolatedCollateral; // If this is false, riskTranche must be 0
  41 |     |     }
  42 |     | 
  43 |     |     /**
  44 |     |      * @dev Structure to hold mode configuration data.
  45 |     |      */
  46 |     |     struct ModeConfiguration {
  47 |     |         uint32 collateralFactor;
  48 |     |         uint32 borrowFactor;
  49 |     |         uint8 modeTranche;
  50 |     |         uint32 expirationTimestamp; // Only prevents people from entering a mode, does not affect users already in existing mode
  51 |     |         address[] markets;
  52 |     |     }
  53 |     | 
  54 |     |     /**
  55 |     |      * @dev Structure to hold account specific data.
  56 |     |      */
  57 |     |     struct AccountInfo {
  58 |     |         uint8 modeId;
  59 |     |         address isolatedCollateralMarket;
  60 |     |         uint32 softThreshold;
  61 |     |     }
  62 |     | 
  63 |     |     /**
  64 |     |      * @dev Structure to hold evaluation data for an account.
  65 |     |      */
  66 |     |     struct Evaluation {
  67 |     |         uint256 depositTrueValue;
  68 |     |         uint256 borrowTrueValue;
  69 |     |         uint256 depositAdjValue;
  70 |     |         uint256 borrowAdjValue;
  71 |     |         uint64 numDeposit; // To combine into 1 storage slot
  72 |     |         uint64 numBorrow;
  73 |     |         bool isExpired;
  74 |     |     }
  75 |     | 
  76 |     |     /**
  77 |     |      * @dev Structure to hold liquidation bonus configuration data.
  78 |     |      */
  79 |     |     struct LiquidationBonusConfiguration {
  80 |     |         uint64 start; // 1e9 precision
  81 |     |         uint64 end; // 1e9 precision
  82 |     |         uint64 kink; // 1e9 precision
  83 |     |         uint32 expiredBonus; // 1e9 precision
  84 |     |         uint32 softThreshold; // 1e9 precision
  85 |     |     }
  86 |     | 
  87 |     |     /**
  88 |     |      * @dev Structure to hold liquidation arguments.
  89 |     |      */
  90 |     |     struct LiquidationParams {
  91 |     |         bytes32 targetAccountId; // The unique identifier of the target account to be liquidated.
  92 |     |         bytes32 liquidatorAccountId; // The unique identifier of the account initiating the liquidation.
  93 |     |         address liquidateMarket; // The address of the market from which to repay the borrow.
  94 |     |         address collateralMarket; // The address of the market from which to seize collateral.
  95 |     |         uint256 amount; // The amount of the target account's borrow balance to repay. If _amount is 0, liquidator will repay the entire borrow balance, and will error if the repayment is too large.
  96 |     |     }
  97 |     | 
  98 |     |     // Function Signatures
  99 |     |     /**
 100 |     |      * @dev Returns the address of the oracle contract.
 101 |     |      * @return The address of the oracle.
 102 |     |      */
 103 |     |     function oracle() external view returns (address);
 104 |     | 
 105 |     |     /**
 106 |     |      * @dev Returns the pause tranche value.
 107 |     |      * @return The pause tranche value.
 108 |     |      */
 109 |     |     function pauseTranche() external view returns (uint8);
 110 |     | 
 111 |     |     /**
 112 |     |      * @dev Returns the reserve receiver.
 113 |     |      * @return The reserve receiver identifier.
 114 |     |      */
 115 |     |     function reserveReceiver() external view returns (bytes32);
 116 |     | 
 117 |     |     /**
 118 |     |      * @dev Allows a user to enter an isolated market, the market configuration must be for isolated collateral.
 119 |     |      * @param _subId The identifier of the sub-account.
 120 |     |      * @param _isolatedMarket The address of the isolated market to enter.
 121 |     |      */
 122 |     |     function enterIsolatedMarket(uint96 _subId, address _isolatedMarket) external;
 123 |     | 
 124 |     |     /**
 125 |     |      * @dev Allows a user to enter multiple unique markets, none of them are isolated collateral markets.
 126 |     |      * @param _subId The identifier of the sub-account.
 127 |     |      * @param _markets The addresses of the markets to enter.
 128 |     |      */
 129 |     |     function enterMarkets(uint96 _subId, address[] calldata _markets) external;
 130 |     | 
 131 |     |     /**
 132 |     |      * @dev Allows a user to exit a single market including their isolated market. There must be no borrows active on the subaccount to exit a market.
 133 |     |      * @param _subId The identifier of the sub-account.
 134 |     |      * @param _market The addresses of the markets to exit.
 135 |     |      */
 136 |     |     function exitMarket(uint96 _subId, address _market) external;
 137 |     | 
 138 |     |     /**
 139 |     |      * @dev Clears all markets for a user. The subaccount must have no active borrows to clear markets.
 140 |     |      * @param _subId The identifier of the sub-account.
 141 |     |      */
 142 |     |     function clearMarkets(uint96 _subId) external;
 143 |     | 
 144 |     |     /**
 145 |     |      * @dev Sets a mode for a sub-account.
 146 |     |      * @param _subId The identifier of the sub-account.
 147 |     |      * @param _modeId The identifier of the mode to enter.
 148 |     |      */
 149 |     |     function enterMode(uint96 _subId, uint8 _modeId) external;
 150 |     | 
 151 |     |     /**
 152 |     |      * @dev Exits the mode currently set for a sub-account.
 153 |     |      * @param _subId The identifier of the sub-account.
 154 |     |      */
 155 |     |     function exitMode(uint96 _subId) external;
 156 |     | 
 157 |     |     /**
 158 |     |      * @dev Evaluates an account's financial metrics.
 159 |     |      * @param _accountId The identifier of the account.
 160 |     |      * @return eval A struct containing the evaluated metrics of the account.
 161 |     |      */
 162 |     |     function evaluateAccount(bytes32 _accountId) external returns (Evaluation memory eval);
 163 |     | 
 164 |     |     /**
 165 |     |      * @dev Allows a sub-account to borrow assets from a specified market.
 166 |     |      * @param _subId The identifier of the sub-account.
 167 |     |      * @param _market The address of the market to borrow from.
 168 |     |      * @param _amount The amount of assets to borrow.
 169 |     |      */
 170 |     |     function borrow(uint96 _subId, address _market, uint256 _amount) external;
 171 |     | 
 172 |     |     /**
 173 |     |      * @dev Allows a sub-account to repay borrowed assets to a specified market.
 174 |     |      * @param _subId The identifier of the sub-account.
 175 |     |      * @param _market The address of the market to repay to.
 176 |     |      * @param _amount The amount of assets to repay.
 177 |     |      */
 178 |     |     function repay(uint96 _subId, address _market, uint256 _amount) external;
 179 |     | 
 180 |     |     /**
 181 |     |      * @dev Initiates a liquidation process to recover assets from an under-collateralized account.
 182 |     |      * @param _params The liquidation parameters.
 183 |     |      * @return seizedShares The amount of shares seized from the liquidated account.
 184 |     |      */
 185 |     |     function liquidate(LiquidationParams calldata _params) external returns (uint256[] memory seizedShares);
 186 |     | 
 187 |     |     /**
 188 |     |      * @dev Distributes loss incurred in a market to a specified tranche of accounts.
 189 |     |      * @param _market The address of the market where the loss occurred.
 190 |     |      * @param _account The account identifier to record the loss.
 191 |     |      */
 192 |     |     function socializeLoss(address _market, bytes32 _account) external;
 193 |     | 
 194 |     |     /**
 195 |     |      * @dev Retrieves the borrow tier of an account.
 196 |     |      * @param _account The account info struct containing the account's details.
 197 |     |      * @return The borrowing tier of the account.
 198 |     |      */
 199 |     |     function getAccountBorrowTier(AccountInfo memory _account) external view returns (uint8);
 200 |     | 
 201 |     |     /**
 202 |     |      * @dev Retrieves the market addresses associated with an account.
 203 |     |      * @param _accountId The identifier of the account.
 204 |     |      * @param _account The account info struct containing the account's details.
 205 |     |      * @return A list of market addresses associated with the account.
 206 |     |      */
 207 |     |     function getAccountPoolMarkets(bytes32 _accountId, AccountInfo memory _account)
 208 |     |         external
 209 |     |         view
 210 |     |         returns (address[] memory);
 211 |     | 
 212 |     |     /**
 213 |     |      * @dev Retrieves the liquidation bonus and soft threshold values for a market.
 214 |     |      * @param _depositAdjValue The adjusted value of deposits in the market.
 215 |     |      * @param _borrowAdjValue The adjusted value of borrows in the market.
 216 |     |      * @param _collateralMarket The address of the collateral market.
 217 |     |      * @return bonus The liquidation bonus value.
 218 |     |      * @return softThreshold The soft liquidation threshold value.
 219 |     |      */
 220 |     |     function getLiquidationBonusAndThreshold(
 221 |     |         uint256 _depositAdjValue,
 222 |     |         uint256 _borrowAdjValue,
 223 |     |         address _collateralMarket
 224 |     |     ) external view returns (uint256 bonus, uint256 softThreshold);
 225 |     | 
 226 |     |     /**
 227 |     |      * @dev Checks if an account is healthy based on its financial metrics.
 228 |     |      * @param _accountId The identifier of the account.
 229 |     |      * @return A boolean indicating whether the account is healthy.
 230 |     |      */
 231 |     |     function isAccountHealthy(bytes32 _accountId) external returns (bool);
 232 |     | 
 233 |     |     /**
 234 |     |      * @dev Resets the pause tranche to its initial state.
 235 |     |      */
 236 |     |     function resetPauseTranche() external;
 237 |     | 
 238 |     |     /**
 239 |     |      * @dev Updates the market configuration.
 240 |     |      * @param _market The address of the market.
 241 |     |      * @param _marketConfig The market configuration data.
 242 |     |      */
 243 |     |     function setMarketConfiguration(address _market, MarketConfiguration calldata _marketConfig) external;
 244 |     | 
 245 |     |     /**
 246 |     |      * @dev Updates mode configurations one at a time.
 247 |     |      * @param _modeConfiguration An single mode configuration.
 248 |     |      */
 249 |     |     function setModeConfiguration(ModeConfiguration calldata _modeConfiguration) external;
 250 |     | 
 251 |     |     /**
 252 |     |      * @dev Updates the soft liquidation threshold for an account.
 253 |     |      * @param _accountId The account identifier.
 254 |     |      * @param _softThreshold The soft liquidation threshold value.
 255 |     |      */
 256 |     |     function setAccountSoftLiquidation(bytes32 _accountId, uint32 _softThreshold) external;
 257 |     | 
 258 |     |     /**
 259 |     |      * @dev Updates the liquidation bonus configuration for a market.
 260 |     |      * @param _market The address of the market.
 261 |     |      * @param _config The liquidation bonus configuration data.
 262 |     |      */
 263 |     |     function setLiquidationBonusConfiguration(address _market, LiquidationBonusConfiguration calldata _config)
 264 |     |         external;
 265 |     | 
 266 |     |     /**
 267 |     |      * @notice Sets the tranche count for a specific market.
 268 |     |      * @dev This function allows to set the number of tranches for a given market.
 269 |     |      * It's an external function that can only be called by an account with the `MARKET_CONFIGURATOR_ROLE`.
 270 |     |      * @param _market The address of the market contract.
 271 |     |      * @param _trancheCount The number of tranches to be set for the market.
 272 |     |      */
 273 |     |     function setTrancheCount(address _market, uint8 _trancheCount) external;
 274 |     | 
 275 |     |     /**
 276 |     |      * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.
 277 |     |      * It invokes the setTrancheBorrowCaps function of the IOmniToken contract associated with the specified market.
 278 |     |      * @param _market The address of the market for which to set the borrow caps.
 279 |     |      * @param _borrowCaps An array of borrow cap values, one for each tranche of the market.
 280 |     |      */
 281 |     |     function setBorrowCap(address _market, uint256[] calldata _borrowCaps) external;
 282 |     | 
 283 |     |     /**
 284 |     |      * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.
 285 |     |      * It invokes the setSupplyCap function of the IOmniTokenNoBorrow contract associated with the specified market.
 286 |     |      * @param _market The address of the market for which to set the no-borrow supply cap.
 287 |     |      * @param _noBorrowSupplyCap The value of the no-borrow supply cap to set.
 288 |     |      */
 289 |     |     function setNoBorrowSupplyCap(address _market, uint256 _noBorrowSupplyCap) external;
 290 |     | 
 291 |     |     /**
 292 |     |      * @notice Sets the reserve receiver's address. This function can only be called by an account with the DEFAULT_ADMIN_ROLE.
 293 |     |      * @dev The reserve receiver's address is converted to a bytes32 account identifier using the toAccount function with a subId of 0.
 294 |     |      * @param _reserveReceiver The address of the reserve receiver to be set.
 295 |     |      */
 296 |     |     function setReserveReceiver(address _reserveReceiver) external;
 297 |     | }
 298 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IOmniToken.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "./IOmniTokenBase.sol";
   5 |     | 
   6 |     | /**
   7 |     |  * @title IOmniToken
   8 |     |  * @notice Interface for the OmniToken contract which manages deposits, withdrawals, borrowings, and repayments within the Omni protocol.
   9 |     |  */
  10 |     | interface IOmniToken is IOmniTokenBase {
  11 |     |     /// Events
  12 |     |     event Accrue();
  13 |     |     event Deposit(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);
  14 |     |     event Withdraw(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);
  15 |     |     event Borrow(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);
  16 |     |     event Repay(bytes32 indexed account, address indexed payer, uint8 indexed trancheId, uint256 amount, uint256 share);
  17 |     |     event Seize(bytes32 indexed account, bytes32 indexed to, uint256 amount, uint256[] seizedShares);
  18 |     |     event SetTrancheCount(uint8 trancheCount);
  19 |     |     event SetTrancheBorrowCaps(uint256[] borrowCaps);
  20 |     |     event SocializedLoss(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);
  21 |     |     event Transfer(bytes32 indexed from, bytes32 indexed to, uint8 indexed trancheId, uint256 share);
  22 |     | 
  23 |     |     /**
  24 |     |      * @notice Gets the address of the OmniPool contract.
  25 |     |      * @return The address of the OmniPool contract.
  26 |     |      */
  27 |     |     function omniPool() external view returns (address);
  28 |     | 
  29 |     |     /**
  30 |     |      * @notice Gets the address of the Interest Rate Model (IRM) contract.
  31 |     |      * @return The address of the IRM contract.
  32 |     |      */
  33 |     |     function irm() external view returns (address);
  34 |     | 
  35 |     |     /**
  36 |     |      * @notice Gets the last accrual time.
  37 |     |      * @return The timestamp of the last accrual time.
  38 |     |      */
  39 |     |     function lastAccrualTime() external view returns (uint256);
  40 |     | 
  41 |     |     /**
  42 |     |      * @notice Gets the count of tranches.
  43 |     |      * @return The total number of tranches.
  44 |     |      */
  45 |     |     function trancheCount() external view returns (uint8);
  46 |     | 
  47 |     |     /**
  48 |     |      * @notice Gets the reserve receiver.
  49 |     |      * @return The bytes32 identifier of the reserve receiver.
  50 |     |      */
  51 |     |     function reserveReceiver() external view returns (bytes32);
  52 |     | 
  53 |     |     /**
  54 |     |      * @notice Gets the borrow cap for a specific tranche.
  55 |     |      * @param _trancheId The ID of the tranche for which to retrieve the borrow cap.
  56 |     |      * @return The borrow cap for the specified tranche.
  57 |     |      */
  58 |     |     function getBorrowCap(uint8 _trancheId) external view returns (uint256);
  59 |     | 
  60 |     |     /**
  61 |     |      * @notice Accrues interest for all tranches, calculates and distributes the interest among the depositors and updates tranche balances.
  62 |     |      * The function also handles reserve payments. This method needs to be called before any deposit, withdrawal, borrow, or repayment actions to update the state of the contract.
  63 |     |      * @dev Interest is paid out proportionately to more risky tranche deposits per tranche
  64 |     |      */
  65 |     |     function accrue() external;
  66 |     | 
  67 |     |     /**
  68 |     |      * @notice Deposits a specified amount into a specified tranche.
  69 |     |      * @param _subId Sub-account identifier for the depositor.
  70 |     |      * @param _trancheId Identifier of the tranche to deposit into.
  71 |     |      * @param _amount Amount to deposit.
  72 |     |      * @return share Amount of deposit shares received in exchange for the deposit.
  73 |     |      */
  74 |     |     function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount) external returns (uint256 share);
  75 |     | 
  76 |     |     /**
  77 |     |      * @notice Withdraws funds from a specified tranche.
  78 |     |      * @param _subId The ID of the sub-account.
  79 |     |      * @param _trancheId The ID of the tranche.
  80 |     |      * @param _share The share of the user in the tranche.
  81 |     |      * @return amount The amount of funds withdrawn.
  82 |     |      */
  83 |     |     function withdraw(uint96 _subId, uint8 _trancheId, uint256 _share) external returns (uint256 amount);
  84 |     | 
  85 |     |     /**
  86 |     |      * @notice Borrows funds from a specified tranche.
  87 |     |      * @param _account The account of the user.
  88 |     |      * @param _trancheId The ID of the tranche.
  89 |     |      * @param _amount The amount to borrow.
  90 |     |      * @return share The share of the borrowed amount in the tranche.
  91 |     |      */
  92 |     |     function borrow(bytes32 _account, uint8 _trancheId, uint256 _amount) external returns (uint256 share);
  93 |     | 
  94 |     |     /**
  95 |     |      * @notice Repays borrowed funds.
  96 |     |      * @param _account The account of the user.
  97 |     |      * @param _payer The account that will pay the borrowed amount.
  98 |     |      * @param _trancheId The ID of the tranche.
  99 |     |      * @param _amount The amount to repay.
 100 |     |      * @return amount The amount of the repaid amount in the tranche.
 101 |     |      */
 102 |     |     function repay(bytes32 _account, address _payer, uint8 _trancheId, uint256 _amount)
 103 |     |         external
 104 |     |         returns (uint256 amount);
 105 |     | 
 106 |     |     /**
 107 |     |      * @notice Transfers specified shares from one account to another within a specified tranche.
 108 |     |      * @param _subId The subscription ID related to the sender's account.
 109 |     |      * @param _to The account identifier to which shares are being transferred.
 110 |     |      * @param _trancheId The identifier of the tranche where the transfer is occurring.
 111 |     |      * @param _shares The amount of shares to transfer.
 112 |     |      * @return A boolean value indicating whether the transfer was successful.
 113 |     |      */
 114 |     |     function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, uint256 _shares) external returns (bool);
 115 |     | 
 116 |     |     /**
 117 |     |      * @notice Distributes the bad debt loss in a tranche among all tranche members. This function should only be called by the OmniPool.
 118 |     |      * @param _account The account that incurred a loss.
 119 |     |      * @param _trancheId The ID of the tranche.
 120 |     |      */
 121 |     |     function socializeLoss(bytes32 _account, uint8 _trancheId) external;
 122 |     | 
 123 |     |     /**
 124 |     |      * @notice Computes the borrowing amount of a specific account in the underlying asset for a given borrow tier.
 125 |     |      * @dev The division is ceiling division.
 126 |     |      * @param _account The account identifier for which the borrowing amount is to be computed.
 127 |     |      * @param _borrowTier The borrow tier identifier from which the borrowing amount is to be computed.
 128 |     |      * @return The borrowing amount of the account in the underlying asset for the given borrow tier.
 129 |     |      */
 130 |     |     function getAccountBorrowInUnderlying(bytes32 _account, uint8 _borrowTier) external view returns (uint256);
 131 |     | 
 132 |     |     /**
 133 |     |      * @notice Retrieves the deposit and borrow shares for a specific account in a specific tranche.
 134 |     |      * @param _account The account identifier.
 135 |     |      * @param _trancheId The tranche identifier.
 136 |     |      * @return depositShare The deposit share.
 137 |     |      * @return borrowShare The borrow share.
 138 |     |      */
 139 |     |     function getAccountSharesByTranche(bytes32 _account, uint8 _trancheId)
 140 |     |         external
 141 |     |         view
 142 |     |         returns (uint256 depositShare, uint256 borrowShare);
 143 |     | 
 144 |     |     /**
 145 |     |      * @notice Sets the borrow caps for each tranche.
 146 |     |      * @param _borrowCaps An array of borrow caps in the underlying's decimals.
 147 |     |      */
 148 |     |     function setTrancheBorrowCaps(uint256[] calldata _borrowCaps) external;
 149 |     | 
 150 |     |     /**
 151 |     |      * @notice Sets the number of tranches.
 152 |     |      * @param _trancheCount The new tranche count.
 153 |     |      */
 154 |     |     function setTrancheCount(uint8 _trancheCount) external;
 155 |     | 
 156 |     |     /**
 157 |     |      * @notice Fetches and updates the reserve receiver from the OmniPool contract.
 158 |     |      */
 159 |     |     function fetchReserveReceiver() external;
 160 |     | }
 161 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IOmniTokenBase.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | /**
  5 |     |  * @title IOmniTokenBase
  6 |     |  * @notice Base interface shared by the IOmniToken and IOmniTokenNoBorrow interfaces.
  7 |     |  */
  8 |     | interface IOmniTokenBase {
  9 |     |     /**
 10 |     |      * @notice Retrieves the total deposit amount for a specific account.
 11 |     |      * @param _account The account identifier.
 12 |     |      * @return The total deposit amount.
 13 |     |      */
 14 |     |     function getAccountDepositInUnderlying(bytes32 _account) external view returns (uint256);
 15 |     | 
 16 |     |     /**
 17 |     |      * @notice Calculates the total deposited amount for a specific owner across sub-accounts. This funciton is for wallets and Etherscan to pick up balances.
 18 |     |      * @param _owner The address of the owner.
 19 |     |      * @return The total deposited amount.
 20 |     |      */
 21 |     |     function balanceOf(address _owner) external view returns (uint256);
 22 |     | 
 23 |     |     /**
 24 |     |      * @notice Seizes funds from a user's account in the event of a liquidation. This is a priveleged function only callable by the OmniPool and must be implemented carefully.
 25 |     |      * @param _account The account from which funds will be seized.
 26 |     |      * @param _to The account to which seized funds will be sent.
 27 |     |      * @param _amount The amount of funds to seize.
 28 |     |      * @return The shares seized from each tranche.
 29 |     |      */
 30 |     |     function seize(bytes32 _account, bytes32 _to, uint256 _amount) external returns (uint256[] memory);
 31 |     | }
 32 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IOmniTokenNoBorrow.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./IOmniTokenBase.sol";
  5 |     | 
  6 |     | /**
  7 |     |  * @title IOmniTokenNoBorrow
  8 |     |  * @notice Interface for the OmniTokenNoBorrow contract which provides deposit and withdrawal features, without borrowing features.
  9 |     |  */
 10 |     | interface IOmniTokenNoBorrow is IOmniTokenBase {
 11 |     |     /// Events
 12 |     |     event Deposit(bytes32 indexed account, uint256 amount);
 13 |     |     event Withdraw(bytes32 indexed account, uint256 amount);
 14 |     |     event Seize(bytes32 indexed account, bytes32 indexed to, uint256 amount, uint256[] seizeShares);
 15 |     |     event SetSupplyCap(uint256 supplyCap);
 16 |     |     event Transfer(bytes32 indexed from, bytes32 indexed to, uint256 amount);
 17 |     | 
 18 |     |     /**
 19 |     |      * @notice Deposits a specified amount to the account.
 20 |     |      * @param _subId The sub-account identifier.
 21 |     |      * @param _amount The amount to deposit.
 22 |     |      * @return amount The actual amount deposited.
 23 |     |      */
 24 |     |     function deposit(uint96 _subId, uint256 _amount) external returns (uint256 amount);
 25 |     | 
 26 |     |     /**
 27 |     |      * @notice Withdraws a specified amount from the account.
 28 |     |      * @param _subId The sub-account identifier.
 29 |     |      * @param _amount The amount to withdraw.
 30 |     |      * @return amount The actual amount withdrawn.
 31 |     |      */
 32 |     |     function withdraw(uint96 _subId, uint256 _amount) external returns (uint256 amount);
 33 |     | 
 34 |     |     /**
 35 |     |      * @notice Transfers a specified amount of tokens from the sender's account to another account.
 36 |     |      * @param _subId The subscription ID associated with the sender's account.
 37 |     |      * @param _to The account identifier to which the tokens are being transferred.
 38 |     |      * @param _amount The amount of tokens to transfer.
 39 |     |      * @return A boolean value indicating whether the transfer was successful.
 40 |     |      */
 41 |     |     function transfer(uint96 _subId, bytes32 _to, uint256 _amount) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @notice Sets a new supply cap for the contract.
 45 |     |      * @param _supplyCap The new supply cap amount.
 46 |     |      */
 47 |     |     function setSupplyCap(uint256 _supplyCap) external;
 48 |     | }
 49 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IWETH9.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  5 |     | 
  6 |     | /// @title Interface for WETH9
  7 |     | interface IWETH9 is IERC20 {
  8 |     |     /// @notice Deposit ether to get wrapped ether
  9 |     |     function deposit() external payable;
 10 |     | 
 11 |     |     /// @notice Withdraw wrapped ether to get ether
 12 |     |     function withdraw(uint256) external;
 13 |     | }
 14 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/interfaces/IWithUnderlying.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  5 |     | 
  6 |     | /**
  7 |     |  * @title IWithUnderlying
  8 |     |  * @notice Interface for the WithUnderlying contract to handle the inflow and outflow of ERC20 tokens.
  9 |     |  */
 10 |     | interface IWithUnderlying {
 11 |     |     /**
 12 |     |      * @notice Gets the address of the underlying ERC20 token.
 13 |     |      * @return The address of the underlying ERC20 token.
 14 |     |      */
 15 |     |     function underlying() external view returns (address);
 16 |     | }
 17 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/08-omni-protocol/oracles/WstETHCustomOracle.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "../interfaces/ICustomOmniOracle.sol";
  5 |     | import "../interfaces/IChainlinkAggregator.sol";
  6 |     | 
  7 |     | 
  8 |     | interface ILidoETH {
  9 |     |     function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);
 10 |     | }
 11 |     | 
 12 |     | contract WstETHCustomOracle is ICustomOmniOracle {
 13 |     |     address public immutable stETH;
 14 |     |     address public immutable wstETH;
 15 |     |     address public immutable chainlinkStETHUSD;
 16 |     |     uint256 private constant MAX_DELAY = 1 days;
 17 |     | 
 18 |     |     /**
 19 |     |      * @notice Constructor for the WstETHCustomOracle
 20 |     |      * @param _stETH The address of the stETH contract.
 21 |     |      * @param _wstETH The address of the wstETH contract. 
 22 |     |      * @param _chainlinkStETHUSD The address of the Chainlink aggregator contract.
 23 |     |      */
 24 |     |     constructor(address _stETH, address _wstETH, address _chainlinkStETHUSD) {
 25 |     |         stETH = _stETH;
 26 |     |         wstETH = _wstETH;
 27 |     |         chainlinkStETHUSD = _chainlinkStETHUSD;
 28 |     |     }
 29 |     | 
 30 |     |     /**
 31 |     |      * @notice Fetches the price of the specified asset.
 32 |     |      * @param _underlying The address of the asset.
 33 |     |      * @return The price of the asset, normalized to 1e18.
 34 |     |      */
 35 |     |     function getPrice(address _underlying) external view returns (uint256) {
 36 |     |         require(_underlying == wstETH, "Invalid address for oracle");
 37 |     |         (, int256 stETHPrice,,uint256 updatedAt,) = IChainlinkAggregator(chainlinkStETHUSD).latestRoundData();
 38 |     |         if (stETHPrice <= 0) return 0;
 39 |     |         require(updatedAt >= block.timestamp - MAX_DELAY, "Stale price for stETH");
 40 |     | 
 41 |     |         uint256 stEthPerWstETH = ILidoETH(stETH).getPooledEthByShares(1e18);
 42 |     | 
 43 |     |         return (stEthPerWstETH * uint256(stETHPrice)) / (10 ** IChainlinkAggregator(chainlinkStETHUSD).decimals());
 44 |     |     }
 45 |     | }
 46 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/09-vesting/Vesting.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | contract Vesting {
  5 |     |     uint24 public constant TOTAL_POINTS_PCT = 100_000;
  6 |     | 
  7 |     |     struct AllocationInput {
  8 |     |         address recipient;
  9 |     |         uint24 points;
 10 |     |         uint8  vestingWeeks;
 11 |     |     }
 12 |     | 
 13 |     |     struct AllocationData {
 14 |     |         uint24 points;
 15 |     |         uint8  vestingWeeks;
 16 |     |         bool   claimed;
 17 |     |     }
 18 |     | 
 19 |     |     mapping(address recipient => AllocationData data) public allocations;
 20 |     | 
 21 |     |     constructor(AllocationInput[] memory allocInput) {
 22 |     |         uint256 inputLength = allocInput.length;
 23 |     |         require(inputLength > 0, "No allocations");
 24 |     | 
 25 |     |         uint24 totalPoints;
 26 |     |         for(uint256 i; i<inputLength; i++) {
 27 |     |             require(allocInput[i].points != 0, "Zero points invalid");
 28 |     |             require(allocations[allocInput[i].recipient].points == 0, "Already set");
 29 |     | 
 30 |     |             totalPoints += allocInput[i].points;
 31 |     |             require(totalPoints <= TOTAL_POINTS_PCT, "Too many points");
 32 |     | 
 33 |     |             allocations[allocInput[i].recipient].points = allocInput[i].points;
 34 |     |             allocations[allocInput[i].recipient].vestingWeeks = allocInput[i].vestingWeeks;
 35 |     |         }
 36 |     |         
 37 |     |         require(totalPoints == TOTAL_POINTS_PCT, "Not enough points");
 38 |     |     }
 39 |     | 
 40 |     |     // users entitled to an allocation can transfer their points to
 41 |     |     // another address if they haven't claimed
 42 |     |     function transferPoints(address to, uint24 points) external {
 43 |     |         require(points != 0, "Zero points invalid");
 44 |     | 
 45 |     |         AllocationData memory fromAllocation = allocations[msg.sender];
 46 |     |         require(fromAllocation.points >= points, "Insufficient points");
 47 |     |         require(!fromAllocation.claimed, "Already claimed");
 48 |     | 
 49 |     |         AllocationData memory toAllocation = allocations[to];
 50 |     |         require(!toAllocation.claimed, "Already claimed");
 51 |     | 
 52 |     |         // enforce identical vesting periods if `to` has an active vesting period
 53 |     |         if(toAllocation.vestingWeeks != 0) {
 54 |     |             require(fromAllocation.vestingWeeks == toAllocation.vestingWeeks, "Vesting mismatch");
 55 |     |         }
 56 |     | 
 57 |     |         allocations[msg.sender].points = fromAllocation.points - points;
 58 |     |         allocations[to].points = toAllocation.points + points;
 59 |     | 
 60 |     |         // if `to` had no active vesting period, copy from `from`
 61 |     |         if (toAllocation.vestingWeeks == 0) {
 62 |     |             allocations[to].vestingWeeks = fromAllocation.vestingWeeks;
 63 |     |         }
 64 |     |     }
 65 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/10-vesting-ext/VestingExt.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | contract VestingExt {
  5 |     |     uint24  public  constant TOTAL_POINTS_PCT   = 100_000;
  6 |     |     uint256 public  constant TOTAL_PRECLAIM_PCT = 100;
  7 |     |     uint256 public  constant MAX_PRECLAIM_PCT   =  10;
  8 |     |     uint96  public  constant TOTAL_TOKEN_ALLOCATION = 1_000_000e18;
  9 |     | 
 10 |     |     struct AllocationInput {
 11 |     |         address recipient;
 12 |     |         uint24  points;
 13 |     |         uint8   vestingWeeks;
 14 |     |     }
 15 |     | 
 16 |     |     struct AllocationData {
 17 |     |         uint24  points;
 18 |     |         uint8   vestingWeeks;
 19 |     |         bool    claimed;
 20 |     |         uint96  preclaimed;
 21 |     |     }
 22 |     | 
 23 |     |     mapping(address recipient => AllocationData data) public allocations;
 24 |     | 
 25 |     |     constructor(AllocationInput[] memory allocInput) {
 26 |     |         uint256 inputLength = allocInput.length;
 27 |     |         require(inputLength > 0, "No allocations");
 28 |     | 
 29 |     |         uint24 totalPoints;
 30 |     |         for(uint256 i; i<inputLength; i++) {
 31 |     |             require(allocInput[i].points != 0, "Zero points invalid");
 32 |     |             require(allocations[allocInput[i].recipient].points == 0, "Already set");
 33 |     | 
 34 |     |             totalPoints += allocInput[i].points;
 35 |     |             require(totalPoints <= TOTAL_POINTS_PCT, "Too many points");
 36 |     | 
 37 |     |             allocations[allocInput[i].recipient].points = allocInput[i].points;
 38 |     |             allocations[allocInput[i].recipient].vestingWeeks = allocInput[i].vestingWeeks;
 39 |     |         }
 40 |     |         
 41 |     |         require(totalPoints == TOTAL_POINTS_PCT, "Not enough points");
 42 |     |     }
 43 |     | 
 44 |     |     // users entitled to an allocation can transfer their points to
 45 |     |     // another address if they haven't claimed
 46 |     |     function transferPoints(address to, uint24 points) external {
 47 |     |         require(msg.sender != to, "Self transfer invalid");
 48 |     |         require(points != 0, "Zero points invalid");
 49 |     | 
 50 |     |         AllocationData memory fromAllocation = allocations[msg.sender];
 51 |     |         require(fromAllocation.points >= points, "Insufficient points");
 52 |     |         require(!fromAllocation.claimed, "Already claimed");
 53 |     | 
 54 |     |         AllocationData memory toAllocation = allocations[to];
 55 |     |         require(!toAllocation.claimed, "Already claimed");
 56 |     | 
 57 |     |         // enforce identical vesting periods if `to` has an active vesting period
 58 |     |         if(toAllocation.vestingWeeks != 0) {
 59 |     |             require(fromAllocation.vestingWeeks == toAllocation.vestingWeeks, "Vesting mismatch");
 60 |     |         }
 61 |     | 
 62 |     |         allocations[msg.sender].points = fromAllocation.points - points;
 63 |     |         allocations[to].points = toAllocation.points + points;
 64 |     | 
 65 |     |         // if `to` had no active vesting period, copy from `from`
 66 |     |         if (toAllocation.vestingWeeks == 0) {
 67 |     |             allocations[to].vestingWeeks = fromAllocation.vestingWeeks;
 68 |     |         }
 69 |     |     }
 70 |     | 
 71 |     |     // calculates how many tokens user is entitled to based on their points
 72 |     |     function getUserTokenAllocation(uint24 points) public pure returns(uint96 allocatedTokens) {
 73 |     |         allocatedTokens = (points * TOTAL_TOKEN_ALLOCATION) / TOTAL_POINTS_PCT;
 74 |     |     }
 75 |     | 
 76 |     |     // calculates max preclaimable token amount given a user's total allocated tokens
 77 |     |     function getUserMaxPreclaimable(uint96 allocatedTokens) public pure returns(uint96 maxPreclaimable) {
 78 |     |         // unsafe cast OK here
 79 |     |         maxPreclaimable
 80 |     |             = uint96(MAX_PRECLAIM_PCT * allocatedTokens/ TOTAL_PRECLAIM_PCT);
 81 |     |     }
 82 |     | 
 83 |     |     // allows users to preclaim part of their token allocation
 84 |     |     function preclaim() external returns(uint96 userPreclaimAmount) {
 85 |     |         AllocationData memory userAllocation = allocations[msg.sender];
 86 |     | 
 87 |     |         require(!userAllocation.claimed, "Already claimed");
 88 |     |         require(userAllocation.preclaimed == 0, "Already preclaimed");
 89 |     | 
 90 |     |         userPreclaimAmount = getUserMaxPreclaimable(getUserTokenAllocation(userAllocation.points));
 91 |     |         require(userPreclaimAmount > 0, "Zero preclaim amount");
 92 |     | 
 93 |     |         allocations[msg.sender].preclaimed = userPreclaimAmount;
 94 |     |     }
 95 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/11-op-reg/OperatorRegistry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | contract OperatorRegistry {
  5 |     |     uint128 public numOperators;
  6 |     | 
  7 |     |     mapping(uint128 operatorId      => address operatorAddress) public operatorIdToAddress;
  8 |     |     mapping(address operatorAddress => uint128 operatorId) public operatorAddressToId;
  9 |     | 
 10 |     |     // anyone can register their address as an operator
 11 |     |     function register() external returns(uint128 newOperatorId) {
 12 |     |         require(operatorAddressToId[msg.sender] == 0, "Address already registered");
 13 |     | 
 14 |     |         newOperatorId = ++numOperators;
 15 |     | 
 16 |     |         operatorAddressToId[msg.sender] = newOperatorId;
 17 |     |         operatorIdToAddress[newOperatorId] = msg.sender;
 18 |     |     }
 19 |     | 
 20 |     |     // an operator can update their address
 21 |     |     function updateAddress(address newOperatorAddress) external {
 22 |     |         require(msg.sender != newOperatorAddress, "Updated address must be different");
 23 |     | 
 24 |     |         uint128 operatorId = _getOperatorIdSafe(msg.sender);
 25 |     | 
 26 |     |         operatorAddressToId[newOperatorAddress] = operatorId;
 27 |     |         operatorIdToAddress[operatorId] = newOperatorAddress;
 28 |     | 
 29 |     |         delete operatorAddressToId[msg.sender];
 30 |     |     }
 31 |     | 
 32 |     |     function _getOperatorIdSafe(address operatorAddress) internal view returns (uint128 operatorId) {
 33 |     |         operatorId = operatorAddressToId[operatorAddress];
 34 |     | 
 35 |     |         require(operatorId != 0, "Operator not registered");
 36 |     |     }
 37 |     | }
 38 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/12-liquidate-dos/LiquidateDos.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { EnumerableSet } from "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
  5 |     | 
  6 |     | interface ILiquidateDos {
  7 |     |     error InvalidMarketId();
  8 |     |     error UserAlreadyInMarket();
  9 |     |     error LiquidationsDisabled();
 10 |     |     error LiquidateUserNotInAnyMarkets();
 11 |     | }
 12 |     | 
 13 |     | contract LiquidateDos is ILiquidateDos {
 14 |     |     using EnumerableSet for EnumerableSet.UintSet;
 15 |     | 
 16 |     |     // 10 possible markets for users to trade in
 17 |     |     uint8 public constant MIN_MARKET_ID = 1;
 18 |     |     uint8 public constant MAX_MARKET_ID = 10;
 19 |     | 
 20 |     |     bool liquidationsEnabled;
 21 |     | 
 22 |     |     // tracks open markets for each user
 23 |     |     mapping(address user => EnumerableSet.UintSet activeMarkets) userActiveMarkets;
 24 |     | 
 25 |     |     // users can only have 1 open position in each market
 26 |     |     function openPosition(uint8 marketId) external {
 27 |     |         if(marketId < MIN_MARKET_ID || marketId > MAX_MARKET_ID) revert InvalidMarketId();
 28 |     | 
 29 |     |         if(!userActiveMarkets[msg.sender].add(marketId)) revert UserAlreadyInMarket();
 30 |     |     }
 31 |     | 
 32 |     |     function toggleLiquidations(bool toggle) external {
 33 |     |         liquidationsEnabled = toggle;
 34 |     |     }
 35 |     | 
 36 |     |     function liquidate(address user) external {
 37 |     |         if(!liquidationsEnabled) revert LiquidationsDisabled();
 38 |     | 
 39 |     |         uint8 userActiveMarketsNum = uint8(userActiveMarkets[user].length());
 40 |     |         if(userActiveMarketsNum == 0) revert LiquidateUserNotInAnyMarkets();
 41 |     | 
 42 |     |         // in our simple implementation users are always liquidated
 43 |     |         for(uint8 i; i<userActiveMarketsNum; i++) {
 44 |     |             uint8 marketId = uint8(userActiveMarkets[user].at(i));
 45 |     |             userActiveMarkets[user].remove(marketId);
 46 |     |         }
 47 |     |     }
 48 |     | 
 49 |     |     function userActiveInMarket(address user, uint8 marketId) external view returns(bool isActive) {
 50 |     |         isActive = userActiveMarkets[user].contains(marketId);
 51 |     |     }
 52 |     | }
 53 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/13-stability-pool/StabilityPool.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   5 |     | import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
   6 |     | import {SafeCast} from "@openzeppelin/contracts/utils/math/SafeCast.sol";
   7 |     | 
   8 |     | // A simplified version of Prisma Finance's StabilityPool where users
   9 |     | // can deposit `debtToken` to receive a share of `collateralToken`
  10 |     | // rewards from liquidations
  11 |     | //
  12 |     | // Challenge: write an invariant to test the solvency of the pool;
  13 |     | // can the pool reach a state where it owes more `collateralToken` to
  14 |     | // depositors than it has available?
  15 |     | contract StabilityPool {
  16 |     |     using SafeERC20 for IERC20;
  17 |     | 
  18 |     |     uint256 constant DECIMAL_PRECISION = 1e18;
  19 |     |     uint256 constant SCALE_FACTOR = 1e9;
  20 |     |     uint256 constant REWARD_DURATION = 1 weeks;
  21 |     |     uint8 constant COLLATERAL_DECIMALS = 18;
  22 |     | 
  23 |     |     IERC20 public immutable debtToken;
  24 |     |     IERC20 public immutable collateralToken;
  25 |     | 
  26 |     |     uint128 public currentScale;
  27 |     |     uint128 public currentEpoch;
  28 |     |     uint256 public lastBabelError;
  29 |     |     uint256 public lastCollateralError_Offset;
  30 |     |     uint256 public lastDebtLossError_Offset;
  31 |     |     uint256 public P = DECIMAL_PRECISION;
  32 |     |     uint256 public totalDebtTokenDeposits;
  33 |     | 
  34 |     |     // mappings
  35 |     |     mapping(address depositor => AccountDeposit) public accountDeposits;
  36 |     |     mapping(address depositor => Snapshots) public depositSnapshots;
  37 |     |     mapping(address depositor => uint256 deposits) public depositSums;
  38 |     |     mapping(address depositor => uint80 gains) public collateralGainsByDepositor;
  39 |     |     mapping(uint128 epoch => mapping(uint128 scale => uint256 sumS)) public epochToScaleToSums;
  40 |     | 
  41 |     |     // structs
  42 |     |     struct AccountDeposit {
  43 |     |         uint128 amount;
  44 |     |         uint128 timestamp; // timestamp of the last deposit
  45 |     |     }
  46 |     |     struct Snapshots {
  47 |     |         uint256 P;
  48 |     |         uint128 scale;
  49 |     |         uint128 epoch;
  50 |     |     }
  51 |     | 
  52 |     |     constructor(IERC20 _debtTokenAddress, IERC20 _collateralToken) {
  53 |     |         debtToken = _debtTokenAddress;
  54 |     |         collateralToken = _collateralToken;
  55 |     |     }
  56 |     | 
  57 |     |     // provides collateral tokens to the stability pool
  58 |     |     function provideToSP(uint256 _amount) external {
  59 |     |         require(_amount > 0, "StabilityPool: Amount must be non-zero");
  60 |     | 
  61 |     |         _accrueDepositorCollateralGain(msg.sender);
  62 |     | 
  63 |     |         uint256 compoundedDebtDeposit = getCompoundedDebtDeposit(msg.sender);
  64 |     | 
  65 |     |         debtToken.safeTransferFrom(msg.sender, address(this), _amount);
  66 |     | 
  67 |     |         uint256 newTotalDebtTokenDeposits = totalDebtTokenDeposits + _amount;
  68 |     |         totalDebtTokenDeposits = newTotalDebtTokenDeposits;
  69 |     | 
  70 |     |         uint256 newTotalDeposited = compoundedDebtDeposit + _amount;
  71 |     | 
  72 |     |         accountDeposits[msg.sender] = AccountDeposit({
  73 |     |             amount: SafeCast.toUint128(newTotalDeposited),
  74 |     |             timestamp: uint128(block.timestamp)
  75 |     |         });
  76 |     | 
  77 |     |         _updateSnapshots(msg.sender, newTotalDeposited);
  78 |     |     }
  79 |     | 
  80 |     |     function registerLiquidation(uint256 _debtToOffset, uint256 _collToAdd) external {
  81 |     |         uint256 totalDebt = totalDebtTokenDeposits;
  82 |     |         if (totalDebt == 0 || _debtToOffset == 0) {
  83 |     |             return;
  84 |     |         }
  85 |     | 
  86 |     |         (uint256 collateralGainPerUnitStaked, uint256 debtLossPerUnitStaked) = _computeRewardsPerUnitStaked(
  87 |     |             _collToAdd,
  88 |     |             _debtToOffset,
  89 |     |             totalDebt
  90 |     |         );
  91 |     | 
  92 |     |         _updateRewardSumAndProduct(collateralGainPerUnitStaked, debtLossPerUnitStaked);
  93 |     | 
  94 |     |         _decreaseDebt(_debtToOffset);
  95 |     |     }
  96 |     | 
  97 |     |     function _computeRewardsPerUnitStaked(
  98 |     |         uint256 _collToAdd,
  99 |     |         uint256 _debtToOffset,
 100 |     |         uint256 _totalDebtTokenDeposits
 101 |     |     ) internal returns (uint256 collateralGainPerUnitStaked, uint256 debtLossPerUnitStaked) {
 102 |     |         /*
 103 |     |          * Compute the Debt and collateral rewards. Uses a "feedback" error correction, to keep
 104 |     |          * the cumulative error in the P and S state variables low:
 105 |     |          *
 106 |     |          * 1) Form numerators which compensate for the floor division errors that occurred the last time this
 107 |     |          * function was called.
 108 |     |          * 2) Calculate "per-unit-staked" ratios.
 109 |     |          * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.
 110 |     |          * 4) Store these errors for use in the next correction when this function is called.
 111 |     |          * 5) Note: static analysis tools complain about this "division before multiplication", however, it is intended.
 112 |     |          */
 113 |     |         uint256 collateralNumerator = (_collToAdd * DECIMAL_PRECISION) + lastCollateralError_Offset;
 114 |     | 
 115 |     |         if (_debtToOffset == _totalDebtTokenDeposits) {
 116 |     |             debtLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit
 117 |     |             lastDebtLossError_Offset = 0;
 118 |     |         } else {
 119 |     |             uint256 debtLossNumerator = (_debtToOffset * DECIMAL_PRECISION) - lastDebtLossError_Offset;
 120 |     |             /*
 121 |     |              * Add 1 to make error in quotient positive. We want "slightly too much" Debt loss,
 122 |     |              * which ensures the error in any given compoundedDebtDeposit favors the Stability Pool.
 123 |     |              */
 124 |     |             debtLossPerUnitStaked = (debtLossNumerator / _totalDebtTokenDeposits) + 1;
 125 |     |             lastDebtLossError_Offset = (debtLossPerUnitStaked * _totalDebtTokenDeposits) - debtLossNumerator;
 126 |     |         }
 127 |     | 
 128 |     |         collateralGainPerUnitStaked = collateralNumerator / _totalDebtTokenDeposits;
 129 |     |        lastCollateralError_Offset = collateralNumerator - (collateralGainPerUnitStaked * _totalDebtTokenDeposits);
 130 |     |     }
 131 |     | 
 132 |     |     // Update the Stability Pool reward sum S and product P
 133 |     |     function _updateRewardSumAndProduct(
 134 |     |         uint256 _collateralGainPerUnitStaked,
 135 |     |         uint256 _debtLossPerUnitStaked
 136 |     |     ) internal {
 137 |     |         uint256 currentP = P;
 138 |     |         uint256 newP;
 139 |     | 
 140 |     |         /*
 141 |     |          * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool Debt in the liquidation.
 142 |     |          * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - DebtLossPerUnitStaked)
 143 |     |          */
 144 |     |         uint256 newProductFactor = DECIMAL_PRECISION - _debtLossPerUnitStaked;
 145 |     | 
 146 |     |         uint128 currentScaleCached = currentScale;
 147 |     |         uint128 currentEpochCached = currentEpoch;
 148 |     |         uint256 currentS = epochToScaleToSums[currentEpochCached][currentScaleCached];
 149 |     | 
 150 |     |         /*
 151 |     |          * Calculate the new S first, before we update P.
 152 |     |          * The collateral gain for any given depositor from a liquidation depends on the value of their deposit
 153 |     |          * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.
 154 |     |          *
 155 |     |          * Since S corresponds to collateral gain, and P to deposit loss, we update S first.
 156 |     |          */
 157 |     |         uint256 marginalCollateralGain = _collateralGainPerUnitStaked * currentP;
 158 |     |         uint256 newS = currentS + marginalCollateralGain;
 159 |     |         epochToScaleToSums[currentEpochCached][currentScaleCached] = newS;
 160 |     | 
 161 |     |         // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P
 162 |     |         if (newProductFactor == 0) {
 163 |     |             currentEpoch = currentEpochCached + 1;
 164 |     |             currentScale = 0;
 165 |     |             newP = DECIMAL_PRECISION;
 166 |     | 
 167 |     |             // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale
 168 |     |         } else if ((currentP * newProductFactor) / DECIMAL_PRECISION < SCALE_FACTOR) {
 169 |     |             newP = (currentP * newProductFactor * SCALE_FACTOR) / DECIMAL_PRECISION;
 170 |     |             currentScale = currentScaleCached + 1;
 171 |     |         } else {
 172 |     |             newP = (currentP * newProductFactor) / DECIMAL_PRECISION;
 173 |     |         }
 174 |     | 
 175 |     |         require(newP > 0, "NewP");
 176 |     |         P = newP;
 177 |     |     }
 178 |     | 
 179 |     |     function _decreaseDebt(uint256 _amount) internal {
 180 |     |         uint256 newTotalDebtTokenDeposits = totalDebtTokenDeposits - _amount;
 181 |     |         totalDebtTokenDeposits = newTotalDebtTokenDeposits;
 182 |     |     }
 183 |     | 
 184 |     |     // --- Reward calculator functions for depositor and front end ---
 185 |     | 
 186 |     |     /* Calculates the collateral gain earned by the deposit since its last snapshots were taken.
 187 |     |      * Given by the formula:  E = d0 * (S - S(0))/P(0)
 188 |     |      * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.
 189 |     |      * d0 is the last recorded deposit value.
 190 |     |      */
 191 |     |     function getDepositorCollateralGain(address _depositor) external view returns (uint256 collateralGains) {
 192 |     |         uint256 P_Snapshot = depositSnapshots[_depositor].P;
 193 |     |         if (P_Snapshot == 0) return collateralGains;
 194 |     |         collateralGains = collateralGainsByDepositor[_depositor];
 195 |     |         uint256 initialDeposit = accountDeposits[_depositor].amount;
 196 |     |         uint128 epochSnapshot = depositSnapshots[_depositor].epoch;
 197 |     |         uint128 scaleSnapshot = depositSnapshots[_depositor].scale;
 198 |     |         uint256 sums = epochToScaleToSums[epochSnapshot][scaleSnapshot];
 199 |     |         uint256 nextSums = epochToScaleToSums[epochSnapshot][scaleSnapshot + 1];
 200 |     |         uint256 depSums = depositSums[_depositor];
 201 |     | 
 202 |     |         if (sums != 0) {
 203 |     |             uint256 firstPortion = sums - depSums;
 204 |     |             uint256 secondPortion = nextSums / SCALE_FACTOR;
 205 |     |             collateralGains += (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION;
 206 |     |         }
 207 |     |     }
 208 |     | 
 209 |     |     function _accrueDepositorCollateralGain(address _depositor) private returns (bool hasGains) {
 210 |     |         // cache user's initial deposit amount
 211 |     |         uint256 initialDeposit = accountDeposits[_depositor].amount;
 212 |     | 
 213 |     |         if(initialDeposit != 0) {
 214 |     |             uint128 epochSnapshot = depositSnapshots[_depositor].epoch;
 215 |     |             uint128 scaleSnapshot = depositSnapshots[_depositor].scale;
 216 |     |             uint256 P_Snapshot = depositSnapshots[_depositor].P;
 217 |     | 
 218 |     |             uint256 sumS = epochToScaleToSums[epochSnapshot][scaleSnapshot];
 219 |     |             uint256 nextSumS = epochToScaleToSums[epochSnapshot][scaleSnapshot + 1];
 220 |     |             uint256 depSums = depositSums[_depositor];
 221 |     | 
 222 |     |             if (sumS != 0) {
 223 |     |                 hasGains = true;
 224 |     | 
 225 |     |                 uint256 firstPortion = sumS - depSums;
 226 |     |                 uint256 secondPortion = nextSumS / SCALE_FACTOR;
 227 |     | 
 228 |     |                 collateralGainsByDepositor[_depositor] += SafeCast.toUint80(
 229 |     |                     (initialDeposit * (firstPortion + secondPortion)) / P_Snapshot / DECIMAL_PRECISION
 230 |     |                 );
 231 |     |             }
 232 |     |         }
 233 |     |     }
 234 |     | 
 235 |     |     function getCompoundedDebtDeposit(address _depositor) public view returns (uint256 compoundedDeposit) {
 236 |     |         compoundedDeposit = accountDeposits[_depositor].amount;
 237 |     | 
 238 |     |         if (compoundedDeposit != 0) {
 239 |     |             Snapshots memory snapshots = depositSnapshots[_depositor];
 240 |     | 
 241 |     |             compoundedDeposit = _getCompoundedStakeFromSnapshots(compoundedDeposit, snapshots);
 242 |     |         }
 243 |     |     }
 244 |     | 
 245 |     |     function _getCompoundedStakeFromSnapshots(
 246 |     |         uint256 initialStake,
 247 |     |         Snapshots memory snapshots
 248 |     |     ) internal view returns (uint256 compoundedStake) {
 249 |     |         if(snapshots.epoch >= currentEpoch) {
 250 |     |             uint128 scaleDiff = currentScale - snapshots.scale;
 251 |     | 
 252 |     |             if (scaleDiff == 0) {
 253 |     |                 compoundedStake = (initialStake * P) / snapshots.P;
 254 |     |             } else if (scaleDiff == 1) {
 255 |     |                 compoundedStake = (initialStake * P) / snapshots.P / SCALE_FACTOR;
 256 |     |             } 
 257 |     |         }
 258 |     |     }
 259 |     | 
 260 |     |     function claimCollateralGains() external {
 261 |     |         _accrueDepositorCollateralGain(msg.sender);
 262 |     | 
 263 |     |         uint80 depositorGains = collateralGainsByDepositor[msg.sender];
 264 |     | 
 265 |     |         if (depositorGains > 0) {
 266 |     |             collateralGainsByDepositor[msg.sender] = 0;
 267 |     | 
 268 |     |             collateralToken.safeTransfer(msg.sender, depositorGains);
 269 |     |         }
 270 |     |     }
 271 |     | 
 272 |     |     function _updateSnapshots(address _depositor, uint256 _newValue) internal {
 273 |     |         if (_newValue == 0) {
 274 |     |             delete depositSnapshots[_depositor];
 275 |     |             
 276 |     |             depositSums[_depositor] = 0;
 277 |     |         }
 278 |     |         else {
 279 |     |             uint128 currentScaleCached = currentScale;
 280 |     |             uint128 currentEpochCached = currentEpoch;
 281 |     |             uint256 currentP = P;
 282 |     | 
 283 |     |             // Get S and G for the current epoch and current scale
 284 |     |             uint256 currentS = epochToScaleToSums[currentEpochCached][currentScaleCached];
 285 |     | 
 286 |     |             // Record new snapshots of the latest running product P, sum S, and sum G, for the depositor
 287 |     |             depositSnapshots[_depositor].P = currentP;
 288 |     |             depositSnapshots[_depositor].scale = currentScaleCached;
 289 |     |             depositSnapshots[_depositor].epoch = currentEpochCached;
 290 |     |             depositSums[_depositor] = currentS;
 291 |     |         }
 292 |     |     }
 293 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/14-priority/Priority.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { EnumerableSet } from "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
  5 |     | 
  6 |     | // A simplified collateral priority queue used in multi-collateral
  7 |     | // borrowing protocols. The queue ensures that the riskiest collateral
  8 |     | // at the start of the queue is liquidated first such that the
  9 |     | // borrower's remaining collateral basket is more stable post-liquidation
 10 |     | //
 11 |     | // Challenge: write an invariant to test whether the collateral priority
 12 |     | // order is always maintained
 13 |     | contract Priority {
 14 |     |     using EnumerableSet for EnumerableSet.UintSet;
 15 |     | 
 16 |     |     error InvalidCollateralId();
 17 |     |     error CollateralAlreadyAdded();
 18 |     |     error CollateralNotAdded();
 19 |     |     error InvalidIndex();
 20 |     | 
 21 |     |     uint8 public constant MIN_COLLATERAL_ID = 1;
 22 |     |     uint8 public constant MAX_COLLATERAL_ID = 4;
 23 |     | 
 24 |     |     EnumerableSet.UintSet collateralPriority;
 25 |     | 
 26 |     |     function addCollateral(uint8 collateralId) external {
 27 |     |         if(collateralId < MIN_COLLATERAL_ID || collateralId > MAX_COLLATERAL_ID) revert InvalidCollateralId();
 28 |     | 
 29 |     |         if(!collateralPriority.add(collateralId)) revert CollateralAlreadyAdded();
 30 |     |     }
 31 |     | 
 32 |     |     function removeCollateral(uint8 collateralId) external {
 33 |     |         if(collateralId < MIN_COLLATERAL_ID || collateralId > MAX_COLLATERAL_ID) revert InvalidCollateralId();
 34 |     | 
 35 |     |         if(!collateralPriority.remove(collateralId)) revert CollateralNotAdded();
 36 |     |     }
 37 |     | 
 38 |     |     function getCollateralAtPriority(uint8 index) external view returns(uint8 val) {
 39 |     |         if(index >= MAX_COLLATERAL_ID) revert InvalidIndex();
 40 |     | 
 41 |     |         val = uint8(collateralPriority.at(index));
 42 |     |     }
 43 |     | 
 44 |     |     function containsCollateral(uint8 collateralId) external view returns(bool result) {
 45 |     |         if(collateralId < MIN_COLLATERAL_ID || collateralId > MAX_COLLATERAL_ID) revert InvalidCollateralId();
 46 |     | 
 47 |     |         result = collateralPriority.contains(collateralId);
 48 |     |     }
 49 |     | 
 50 |     |     function numCollateral() external view returns(uint256 length) {
 51 |     |         length = collateralPriority.length();
 52 |     |     }
 53 |     | 
 54 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/MockERC20.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/access/AccessControl.sol";
  5 |     | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  6 |     | 
  7 |     | contract MockERC20 is AccessControl, ERC20 {
  8 |     |     bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
  9 |     |     uint8 private __decimals = 18;
 10 |     | 
 11 |     |     constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {
 12 |     |         _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
 13 |     |         _grantRole(MINTER_ROLE, msg.sender);
 14 |     |     }
 15 |     | 
 16 |     |     function decimals() public view override returns (uint8) {
 17 |     |         return __decimals;
 18 |     |     }
 19 |     | 
 20 |     |     function setDecimals(uint8 _decimals) external onlyRole(DEFAULT_ADMIN_ROLE) {
 21 |     |         __decimals = _decimals;
 22 |     |     }
 23 |     | 
 24 |     |     function mint(address _to, uint256 _value) external onlyRole(MINTER_ROLE) {
 25 |     |         _mint(_to, _value);
 26 |     |     }
 27 |     | }
 28 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/TestToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  5 |     | 
  6 | *   | contract TestToken is ERC20 {
  7 |     | 
  8 |     |     uint8 immutable private s_decimals;
  9 |     | 
 10 |     |     // mint initial supply to msg.sender. Used in test
 11 |     |     // setups so test setup can then distribute initial
 12 |     |     // tokens to different participants
 13 | *   |     constructor(uint256 initialMint, uint8 decimal) ERC20("TTKN", "TTKN") {
 14 | *   |         _mint(msg.sender, initialMint);
 15 | *   |         s_decimals = decimal;
 16 |     |     }
 17 |     | 
 18 |     |     function decimals() public view override returns (uint8) {
 19 |     |         return s_decimals;
 20 |     |     }
 21 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/TestToken2.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  5 |     | 
  6 | *   | contract TestToken2 is ERC20 {
  7 |     | 
  8 |     |     uint8 immutable private s_decimals;
  9 |     | 
 10 |     |     // mint initial supply to msg.sender. Used in test
 11 |     |     // setups so test setup can then distribute initial
 12 |     |     // tokens to different participants
 13 | *   |     constructor(uint256 initialMint, uint8 decimal) ERC20("TTKN", "TTKN") {
 14 | *   |         _mint(msg.sender, initialMint);
 15 | *   |         s_decimals = decimal;
 16 |     |     }
 17 |     | 
 18 |     |     function decimals() public view override returns (uint8) {
 19 |     |         return s_decimals;
 20 |     |     }
 21 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/src/TestToken3.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  5 |     | 
  6 | *   | contract TestToken3 is ERC20 {
  7 |     | 
  8 |     |     uint8 immutable private s_decimals;
  9 |     | 
 10 |     |     // mint initial supply to msg.sender. Used in test
 11 |     |     // setups so test setup can then distribute initial
 12 |     |     // tokens to different participants
 13 | *   |     constructor(uint256 initialMint, uint8 decimal,string memory name, string memory symbol) ERC20(name, symbol) {
 14 | *   |         _mint(msg.sender, initialMint);
 15 | *   |         s_decimals = decimal;
 16 |     |     }
 17 |     | 
 18 |     |     function decimals() public view override returns (uint8) {
 19 |     |         return s_decimals;
 20 |     |     }
 21 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/01-naive-receiver/NaiveReceiverAdvancedEchidna.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./NaiveReceiverBasicEchidna.t.sol";
  5 |     | 
  6 |     | // configure solc-select to use compiler version:
  7 |     | // solc-select use 0.8.23 
  8 |     | //
  9 |     | // run from base project directory with:
 10 |     | // echidna --config test/01-naive-receiver/NaiveReceiverAdvancedEchidna.yaml ./ --contract NaiveReceiverAdvancedEchidna
 11 |     | // medusa --config test/01-naive-receiver/NaiveReceiverAdvancedMedusa.json fuzz
 12 |     | contract NaiveReceiverAdvancedEchidna is NaiveReceiverBasicEchidna {
 13 |     | 
 14 |     |     // constructor has to be payable if balanceContract > 0 in yaml config
 15 |     |     constructor() payable NaiveReceiverBasicEchidna() {
 16 |     |         // advanced test with guiding of the fuzzer
 17 |     |         //
 18 |     |         // make this contract into a handler to wrap the pool's flashLoan()
 19 |     |         // function and instruct echidna to call it passing receiver's
 20 |     |         // address as the parameter.
 21 |     |         // 
 22 |     |         // This is done in the yaml configuration file by setting 
 23 |     |         // `allContracts: false` then creating a wrapper function in this 
 24 |     |         // contract. With `allContracts: false` fuzzing will only call 
 25 |     |         // functions in this or parent contracts.
 26 |     |         //
 27 |     |         // advanced echidna is able to break both invariants and find
 28 |     |         // much more simplified exploit chains than advanced foundry!
 29 |     |     }
 30 |     | 
 31 |     |     // wrapper around pool.flashLoan() to "guide" the fuzz test
 32 |     |     function flashLoanWrapper(uint256 borrowAmount) public {
 33 |     |         // instruct fuzzer to cap borrowAmount under pool's
 34 |     |         // available amount to prevent wasted runs
 35 |     |         //
 36 |     |         // commented out as echidna is faster at breaking the invariant
 37 |     |         // without this
 38 |     |         //borrowAmount = borrowAmount % INIT_ETH_POOL;
 39 |     | 
 40 |     |         // call underlying function being tested with the receiver address
 41 |     |         // to prevent wasted runs. Initially tried it with address as fuzz
 42 |     |         // input parameter but this was unable to break the harder invariant
 43 |     |         pool.flashLoan(address(receiver), borrowAmount);
 44 |     |     }
 45 |     | 
 46 |     |     // invariants inherited from base contract
 47 |     | }
 48 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/01-naive-receiver/NaiveReceiverAdvancedFoundry.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./NaiveReceiverBasicFoundry.t.sol";
  5 |     | 
  6 |     | // run from base project directory with:
  7 |     | // forge test --match-contract NaiveReceiverAdvancedFoundry
  8 |     | //
  9 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 10 |     | // 1) forge coverage --report lcov --report-file test/01-naive-receiver/coverage-foundry-advanced.lcov --match-contract NaiveReceiverAdvancedFoundry
 11 |     | // 2) genhtml test/01-naive-receiver/coverage-foundry-advanced.lcov -o test/01-naive-receiver/coverage-foundry-advanced
 12 |     | // 3) open test/01-naive-receiver/coverage-foundry-advanced/index.html in your browser and
 13 |     | //    navigate to the relevant source file to see line-by-line execution records
 14 |     | contract NaiveReceiverAdvancedFoundry is NaiveReceiverBasicFoundry {
 15 |     | 
 16 |     |     function setUp() public override {
 17 |     |         // call parent first to setup test environment
 18 |     |         super.setUp();
 19 |     | 
 20 |     |         // advanced test with guiding of the fuzzer
 21 |     |         //
 22 |     |         // make this contract into a handler to wrap the pool's flashLoan()
 23 |     |         // function and instruct foundry to call it passing receiver's
 24 |     |         // address as the parameter. This significantly reduces
 25 |     |         // the amount of useless fuzz runs
 26 |     |         //
 27 |     |         // advanced foundry is able to break both invariants
 28 |     |         targetContract(address(this));
 29 |     | 
 30 |     |         // functions to target during invariant tests
 31 |     |         bytes4[] memory selectors = new bytes4[](1);
 32 |     |         selectors[0] = this.flashLoanWrapper.selector;
 33 |     | 
 34 |     |         targetSelector(FuzzSelector({
 35 |     |             addr: address(this),
 36 |     |             selectors: selectors
 37 |     |         }));
 38 |     |     }
 39 |     | 
 40 |     |     // wrapper around pool.flashLoan() to "guide" the fuzz test
 41 |     |     function flashLoanWrapper(uint256 borrowAmount) public {
 42 |     |         // instruct fuzzer to cap borrowAmount under pool's
 43 |     |         // available amount to prevent wasted runs
 44 |     |         vm.assume(borrowAmount <= INIT_ETH_POOL);
 45 |     | 
 46 |     |         // call underlying function being tested with the receiver address
 47 |     |         // to prevent wasted runs. Initially tried it with address as fuzz
 48 |     |         // input parameter but this was unable to break the harder invariant
 49 |     |         pool.flashLoan(address(receiver), borrowAmount);
 50 |     |     }
 51 |     | 
 52 |     |     // invariants inherited from base contract
 53 |     | }
 54 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/01-naive-receiver/NaiveReceiverBasicEchidna.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "../../src/01-naive-receiver/NaiveReceiverLenderPool.sol";
  5 |     | import "../../src/01-naive-receiver/FlashLoanReceiver.sol";
  6 |     | import "@openzeppelin/contracts/utils/Address.sol";
  7 |     | 
  8 |     | // configure solc-select to use compiler version:
  9 |     | // solc-select use 0.8.23 
 10 |     | //
 11 |     | // run from base project directory with:
 12 |     | // echidna --config test/01-naive-receiver/NaiveReceiverBasicEchidna.yaml ./ --contract NaiveReceiverBasicEchidna
 13 |     | // medusa --config test/01-naive-receiver/NaiveReceiverBasicMedusa.json fuzz
 14 |     | contract NaiveReceiverBasicEchidna {
 15 |     |     using Address for address payable;
 16 |     | 
 17 |     |     // initial eth flash loan pool
 18 |     |     uint256 constant INIT_ETH_POOL     = 1000e18;
 19 |     |     // initial eth flash loan receiver
 20 |     |     uint256 constant INIT_ETH_RECEIVER = 10e18;
 21 |     | 
 22 |     |     // contracts required for test
 23 |     |     NaiveReceiverLenderPool pool;
 24 |     |     FlashLoanReceiver receiver;
 25 |     | 
 26 |     |     // constructor has to be payable if balanceContract > 0 in yaml config
 27 |     |     constructor() payable {
 28 |     |         // create contracts to be tested
 29 |     |         pool     = new NaiveReceiverLenderPool();
 30 |     |         receiver = new FlashLoanReceiver(payable(address(pool)));
 31 |     | 
 32 |     |         // set their initial eth balances by sending them ether. This contract
 33 |     |         // starts with `balanceContract` defined in yaml config
 34 |     |         payable(address(pool)).sendValue(INIT_ETH_POOL);
 35 |     |         payable(address(receiver)).sendValue(INIT_ETH_RECEIVER);
 36 |     | 
 37 |     |         // basic test with no advanced guiding of the fuzzer
 38 |     |         // echidna doesn't tell us how many fuzz runs reverted
 39 |     |         //
 40 |     |         // echidna is able to break invariant 2) but not 1)
 41 |     |     }
 42 |     | 
 43 |     |     // two possible invariants in order of importance:
 44 |     |     //
 45 |     |     // 1) receiver's balance is not 0
 46 |     |     // breaking this invariant is very valuable but much harder
 47 |     |     function invariant_receiver_balance_not_zero() public view returns (bool) {
 48 |     |         return(address(receiver).balance != 0);
 49 |     |     }
 50 |     | 
 51 |     |     // 2) receiver's balance is not less than starting balance
 52 |     |     // breaking this invariant is less valuable but much easier
 53 |     |     function invariant_receiver_balance_not_less_initial() public view returns (bool) {
 54 |     |        return(address(receiver).balance >= INIT_ETH_RECEIVER);
 55 |     |     }
 56 |     | 
 57 |     | }
 58 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/01-naive-receiver/NaiveReceiverBasicFoundry.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "../../src/01-naive-receiver/NaiveReceiverLenderPool.sol";
  5 |     | import "../../src/01-naive-receiver/FlashLoanReceiver.sol";
  6 |     | 
  7 |     | import "forge-std/Test.sol";
  8 |     | 
  9 |     | // run from base project directory with:
 10 |     | // forge test --match-contract NaiveReceiverBasicFoundry
 11 |     | //
 12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 13 |     | // 1) forge coverage --report lcov --report-file test/01-naive-receiver/coverage-foundry-basic.lcov --match-contract NaiveReceiverBasicFoundry
 14 |     | // 2) genhtml test/01-naive-receiver/coverage-foundry-basic.lcov -o test/01-naive-receiver/coverage-foundry-basic
 15 |     | // 3) open test/01-naive-receiver/coverage-foundry-basic/index.html in your browser and
 16 |     | //    navigate to the relevant source file to see line-by-line execution records
 17 |     | contract NaiveReceiverBasicFoundry is Test {
 18 |     | 
 19 |     |     // initial eth flash loan pool
 20 |     |     uint256 constant INIT_ETH_POOL     = 1000e18;
 21 |     |     // initial eth flash loan receiver
 22 |     |     uint256 constant INIT_ETH_RECEIVER = 10e18;
 23 |     | 
 24 |     |     // contracts required for test
 25 |     |     NaiveReceiverLenderPool pool;
 26 |     |     FlashLoanReceiver receiver;
 27 |     | 
 28 |     |     function setUp() public virtual {
 29 |     |         // setup contracts to be tested
 30 |     |         pool     = new NaiveReceiverLenderPool();
 31 |     |         receiver = new FlashLoanReceiver(payable(address(pool)));
 32 |     | 
 33 |     |         // set their initial eth balances
 34 |     |         deal(address(pool), INIT_ETH_POOL);
 35 |     |         deal(address(receiver), INIT_ETH_RECEIVER);
 36 |     | 
 37 |     |         // basic test with no advanced guiding of the fuzzer
 38 |     |         // most of the fuzz runs revert and are useless
 39 |     |         //
 40 |     |         // basic foundry is able to break invariant 2) but not 1)
 41 |     |     }
 42 |     | 
 43 |     |     // two possible invariants in order of importance:
 44 |     |     //
 45 |     |     // 1) receiver's balance is not 0
 46 |     |     // breaking this invariant is very valuable but much harder
 47 |     |     function invariant_receiver_balance_not_zero() public view {
 48 |     |         assert(address(receiver).balance != 0);
 49 |     |     }
 50 |     | 
 51 |     |     // 2) receiver's balance is not less than starting balance
 52 |     |     // breaking this invariant is less valuable but much easier
 53 |     |     function invariant_receiver_balance_not_less_initial() public view {
 54 |     |        assert(address(receiver).balance >= INIT_ETH_RECEIVER);
 55 |     |     }
 56 |     | 
 57 |     | }
 58 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/02-unstoppable/UnstoppableBasicEchidna.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "../../src/02-unstoppable/UnstoppableLender.sol";
  5 |     | import "../../src/02-unstoppable/ReceiverUnstoppable.sol";
  6 |     | 
  7 |     | import "../../src/TestToken.sol";
  8 |     | 
  9 |     | // configure solc-select to use compiler version:
 10 |     | // solc-select use 0.8.23 
 11 |     | //
 12 |     | // run from base project directory with:
 13 |     | // echidna --config test/02-unstoppable/UnstoppableBasicEchidna.yaml ./ --contract UnstoppableBasicEchidna
 14 |     | // medusa --config test/02-unstoppable/UnstoppableBasicMedusa.json fuzz
 15 |     | contract UnstoppableBasicEchidna {
 16 |     |     
 17 |     |     // initial tokens in pool
 18 |     |     uint256 constant INIT_TOKENS_POOL     = 1000000e18;
 19 |     |     // initial tokens attacker
 20 |     |     uint256 constant INIT_TOKENS_ATTACKER = 100e18;
 21 |     | 
 22 |     |     // contracts required for test
 23 |     |     ERC20               token;
 24 |     |     UnstoppableLender   pool;
 25 |     |     ReceiverUnstoppable receiver;
 26 |     |     address             attacker = address(0x1337000000000000000000000000000000000000);
 27 |     | 
 28 |     |     // constructor has to be payable if balanceContract > 0 in yaml config
 29 |     |     constructor() payable {
 30 |     |         // setup contracts to be tested
 31 |     |         token    = new TestToken(INIT_TOKENS_POOL + INIT_TOKENS_ATTACKER, 18);
 32 |     |         pool     = new UnstoppableLender(address(token));
 33 |     |         receiver = new ReceiverUnstoppable(payable(address(pool)));
 34 |     | 
 35 |     |         // transfer deposit initial tokens into pool
 36 |     |         token.approve(address(pool), INIT_TOKENS_POOL);
 37 |     |         pool.depositTokens(INIT_TOKENS_POOL);
 38 |     | 
 39 |     |         // transfer remaining tokens to the attacker
 40 |     |         token.transfer(attacker, INIT_TOKENS_ATTACKER);
 41 |     | 
 42 |     |         // attacker configured as msg.sender in yaml config
 43 |     |     }
 44 |     | 
 45 |     |     // invariant #1 very generic but Echidna can still break it even
 46 |     |     // if this is the only invariant
 47 |     |     function invariant_receiver_can_take_flash_loan() public returns (bool) {
 48 |     |         receiver.executeFlashLoan(10);
 49 |     |         return true;
 50 |     |     }
 51 |     | 
 52 |     |     // invariant #2 is more specific and Echidna can easily break it
 53 |     |     function invariant_pool_bal_equal_token_pool_bal() public view returns(bool) {
 54 |     |         return(pool.poolBalance() == token.balanceOf(address(pool)));
 55 |     |     }
 56 |     | }
 57 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/02-unstoppable/UnstoppableBasicFoundry.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "../../src/02-unstoppable/UnstoppableLender.sol";
  5 |     | import "../../src/02-unstoppable/ReceiverUnstoppable.sol";
  6 |     | import "../../src/TestToken.sol";
  7 |     | 
  8 |     | import "forge-std/Test.sol";
  9 |     | 
 10 |     | // run from base project directory with:
 11 |     | // forge test --match-contract UnstoppableBasicFoundry
 12 |     | //
 13 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 14 |     | // 1) forge coverage --report lcov --report-file test/02-unstoppable/coverage-foundry-basic.lcov --match-contract UnstoppableBasicFoundry
 15 |     | // 2) genhtml test/02-unstoppable/coverage-foundry-basic.lcov -o test/02-unstoppable/coverage-foundry-basic
 16 |     | // 3) open test/02-unstoppable/coverage-foundry-basic/index.html in your browser and
 17 |     | //    navigate to the relevant source file to see line-by-line execution records
 18 |     | contract UnstoppableBasicFoundry is Test {
 19 |     | 
 20 |     |     // initial tokens in pool
 21 |     |     uint256 constant INIT_TOKENS_POOL     = 1000000e18;
 22 |     |     // initial tokens attacker
 23 |     |     uint256 constant INIT_TOKENS_ATTACKER = 100e18;
 24 |     | 
 25 |     |     // contracts required for test
 26 |     |     ERC20               token;
 27 |     |     UnstoppableLender   pool;
 28 |     |     ReceiverUnstoppable receiver;
 29 |     |     address             attacker = address(0x1337);
 30 |     | 
 31 |     |     function setUp() public virtual {
 32 |     |         // setup contracts to be tested
 33 |     |         token    = new TestToken(INIT_TOKENS_POOL + INIT_TOKENS_ATTACKER, 18);
 34 |     |         pool     = new UnstoppableLender(address(token));
 35 |     |         receiver = new ReceiverUnstoppable(payable(address(pool)));
 36 |     | 
 37 |     |         // transfer deposit initial tokens into pool
 38 |     |         token.approve(address(pool), INIT_TOKENS_POOL);
 39 |     |         pool.depositTokens(INIT_TOKENS_POOL);
 40 |     | 
 41 |     |         // transfer remaining tokens to the attacker
 42 |     |         token.transfer(attacker, INIT_TOKENS_ATTACKER);
 43 |     | 
 44 |     |         // only one attacker
 45 |     |         targetSender(attacker);
 46 |     |     }
 47 |     |     
 48 |     |     // invariant #1 very generic, harder to break
 49 |     |     function invariant_receiver_can_take_flash_loan() public {
 50 |     |         receiver.executeFlashLoan(10);
 51 |     |         assert(true);
 52 |     |     }
 53 |     | 
 54 |     |     // invariant #2 more specific, should be easier to break
 55 |     |     function invariant_pool_bal_equal_token_pool_bal() public view {
 56 |     |         assert(pool.poolBalance() == token.balanceOf(address(pool)));
 57 |     |     }
 58 |     | }
 59 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/03-proposal/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Asserts} from "@chimera/Asserts.sol";
  5 |     | import {Setup} from "./Setup.sol";
  6 |     | 
  7 |     | abstract contract Properties is Setup, Asserts {
  8 |     | 
  9 |     |     // event to raise if invariant broken to see interesting state
 10 |     |     event ProposalBalance(uint256 balance);
 11 |     | 
 12 |     |     // once the proposal has completed, all the eth should be distributed
 13 |     |     // either to the owner if the proposal failed or to the winners if
 14 |     |     // the proposal succeeded. no eth should remain forever stuck in the
 15 |     |     // contract
 16 |     |     function property_proposal_complete_all_rewards_distributed() public returns(bool) {
 17 |     |         uint256 proposalBalance = address(prop).balance;
 18 |     | 
 19 |     |         // only visible when invariant fails
 20 |     |         emit ProposalBalance(proposalBalance);
 21 |     | 
 22 |     |         return(
 23 |     |             // either proposal is active and contract balance > 0 
 24 |     |             (prop.isActive() && proposalBalance > 0) ||
 25 |     | 
 26 |     |             // or proposal is not active and contract balance == 0
 27 |     |             (!prop.isActive() && proposalBalance == 0)
 28 |     |         );
 29 |     |     }
 30 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/03-proposal/ProposalCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Properties} from "./Properties.sol";
  5 |     | import {CryticAsserts} from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // run from base project directory with:
  8 |     | // echidna --config test/03-proposal/echidna.yaml ./ --contract ProposalCryticTester
  9 |     | // medusa --config test/03-proposal/medusa.json fuzz
 10 |     | contract ProposalCryticTester is Properties, CryticAsserts {
 11 |     |     constructor() payable {
 12 |     |        setup();
 13 |     |     }
 14 |     | }
 15 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/03-proposal/ProposalCryticTesterToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Properties} from "./Properties.sol";
  5 |     | import {FoundryAsserts} from "@chimera/FoundryAsserts.sol";
  6 |     | import {Test} from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract ProposalCryticTesterToFoundry -vvv
 10 |     | //
 11 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 12 |     | // 1) forge coverage --report lcov --report-file test/03-proposal/coverage-foundry.lcov --match-contract ProposalCryticTesterToFoundry
 13 |     | // 2) genhtml test/03-proposal/coverage-foundry.lcov -o test/03-proposal/coverage-foundry
 14 |     | // 3) open test/03-proposal/coverage-foundry/index.html in your browser and
 15 |     | //    navigate to the relevant source file to see line-by-line execution records
 16 |     | contract ProposalCryticTesterToFoundry is Test, Properties, FoundryAsserts {
 17 |     |     function setUp() public virtual {
 18 |     |         setup();
 19 |     | 
 20 |     |         // constrain fuzz test senders to the set of allowed voting addresses
 21 |     |         for(uint256 i; i<voters.length; ++i) {
 22 |     |             targetSender(voters[i]);
 23 |     |         }
 24 |     |     }
 25 |     | 
 26 |     |     // wrap common invariants for foundry
 27 |     |     function invariant_proposal_complete_all_rewards_distributed() external {
 28 |     |         t(property_proposal_complete_all_rewards_distributed(), "All rewards distributed when proposal completed");
 29 |     |     }
 30 |     | 
 31 |     | }
 32 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/03-proposal/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Proposal} from "../../src/03-proposal/Proposal.sol";
  5 |     | import {BaseSetup} from "@chimera/BaseSetup.sol";
  6 |     | 
  7 |     | abstract contract Setup is BaseSetup {
  8 |     | 
  9 |     |     // eth reward
 10 |     |     uint256 constant ETH_REWARD = 10e18;
 11 |     | 
 12 |     |     // allowed voters
 13 |     |     address[] voters;
 14 |     | 
 15 |     |     // contracts required for test
 16 |     |     Proposal prop;
 17 |     | 
 18 |     |     function setup() internal override {
 19 |     |         // this contract given ETH_REWARD in yaml config
 20 |     | 
 21 |     |         // setup the allowed list of voters
 22 |     |         // make sure to use full address not just shorthand as Echidna
 23 |     |         // expands the address differently to Foundry & make sure to
 24 |     |         // use full addresses in yaml config `sender` list
 25 |     |         voters.push(address(0x1000000000000000000000000000000000000000));
 26 |     |         voters.push(address(0x2000000000000000000000000000000000000000));
 27 |     |         voters.push(address(0x3000000000000000000000000000000000000000));
 28 |     |         voters.push(address(0x4000000000000000000000000000000000000000));
 29 |     |         voters.push(address(0x5000000000000000000000000000000000000000));
 30 |     |         
 31 |     |         // setup contract to be tested
 32 |     |         prop = new Proposal{value:ETH_REWARD}(voters);
 33 |     | 
 34 |     |         // verify setup
 35 |     |         //
 36 |     |         // proposal has rewards
 37 |     |         assert(address(prop).balance == ETH_REWARD);
 38 |     |         // proposal is active
 39 |     |         assert(prop.isActive());
 40 |     |         // proposal has correct number of allowed voters
 41 |     |         assert(prop.getTotalAllowedVoters() == voters.length);
 42 |     |         // this contract is the creator
 43 |     |         assert(prop.getCreator() == address(this));
 44 |     | 
 45 |     |         // constrain fuzz test senders to the set of allowed voting addresses
 46 |     |         // done in yaml config
 47 |     |     }
 48 |     | 
 49 |     |     // required to receive refund if proposal fails
 50 |     |     receive() external payable {}
 51 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/04-voting-nft/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Asserts} from "@chimera/Asserts.sol";
  5 |     | import {Setup} from "./Setup.sol";
  6 |     | 
  7 |     | abstract contract Properties is Setup, Asserts {
  8 |     |     // two possible invariants in order of importance:
  9 |     |     //
 10 |     |     // 1) at power calculation timestamp, total voting power is not 0
 11 |     |     // breaking this invariant is very valuable but much harder
 12 |     |     // if it can break this invariant, it has pulled off the epic hack
 13 |     |     function property_total_power_gt_zero_power_calc_start() public view returns(bool) {
 14 |     |         return votingNft.getTotalPower() != 0;
 15 |     |     }
 16 |     | 
 17 |     | 
 18 |     |     // 2)  at power calculation timestamp, total voting power is equal
 19 |     |     //     to the initial max nft power
 20 |     |     // breaking this invariant is less valuable but much easier
 21 |     |     // if it can break this invariant, it has found the problem that would
 22 |     |     // then lead a human auditor to the big hack
 23 |     |     function property_total_power_eq_init_max_power_calc_start() public view returns(bool) {
 24 |     |         return votingNft.getTotalPower() == initMaxNftPower;
 25 |     |     }
 26 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/04-voting-nft/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {VotingNftForFuzz} from "../../src/04-voting-nft/VotingNftForFuzz.sol";
  5 |     | import {BaseSetup} from "@chimera/BaseSetup.sol";
  6 |     | 
  7 |     | abstract contract Setup is BaseSetup {
  8 |     |     uint256 constant requiredCollateral       = 100000000000000000000;
  9 |     |     uint256 constant maxNftPower              = 1000000000000000000000000000;
 10 |     |     uint256 constant nftPowerReductionPercent = 100000000000000000000000000;
 11 |     |     uint256 constant nftsToMint               = 10;
 12 |     |     uint256 constant initMaxNftPower          = maxNftPower * nftsToMint;
 13 |     |     uint256 constant timeUntilPowerCalc       = 1000;
 14 |     | 
 15 |     |     uint256 powerCalcTimestamp;
 16 |     | 
 17 |     |     // contracts required for test
 18 |     |     VotingNftForFuzz votingNft;
 19 |     | 
 20 |     |     function setup() internal override {
 21 |     |         powerCalcTimestamp = block.timestamp + timeUntilPowerCalc;
 22 |     | 
 23 |     |         // setup contract to be tested
 24 |     |         votingNft = new VotingNftForFuzz(requiredCollateral,
 25 |     |                                          powerCalcTimestamp,
 26 |     |                                          maxNftPower,
 27 |     |                                          nftPowerReductionPercent);
 28 |     | 
 29 |     |         // no nfts deployed yet so total power should be 0
 30 |     |         assert(votingNft.getTotalPower() == 0);
 31 |     | 
 32 |     |         // create 10 power nfts
 33 |     |         for(uint i=1; i<11; ++i) {
 34 |     |             votingNft.safeMint(address(0x1234), i);
 35 |     |         }
 36 |     | 
 37 |     |         // verify max power has been correctly increased
 38 |     |         assert(votingNft.getTotalPower() == initMaxNftPower);
 39 |     | 
 40 |     |         // this contract is the owner
 41 |     |         assert(votingNft.owner() == address(this));
 42 |     | 
 43 |     |         // advance time to power calculation start; we modify the
 44 |     |         // contract to use hard-coded constant instead of block.timestamp
 45 |     |         // such that the fuzzer can focus on probing the initial power
 46 |     |         // calculation state, without the fuzzer moving block.timestamp
 47 |     |         // passed the initial power calculation timestamp
 48 |     |         votingNft.setFuzzerConstantBlockTimestamp(powerCalcTimestamp);
 49 |     |     }
 50 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/04-voting-nft/VotingNftCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Properties} from "./Properties.sol";
  5 |     | import {CryticAsserts} from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // run from base project directory with:
  8 |     | // echidna --config test/04-voting-nft/echidna.yaml ./ --contract VotingNftCryticTester
  9 |     | // medusa --config test/04-voting-nft/medusa.json fuzz
 10 |     | contract VotingNftCryticTester is Properties, CryticAsserts {
 11 |     |     constructor() payable {
 12 |     |        setup();
 13 |     |     }
 14 |     | }
 15 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/04-voting-nft/VotingNftCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Properties} from "./Properties.sol";
  5 |     | import {FoundryAsserts} from "@chimera/FoundryAsserts.sol";
  6 |     | import {Test} from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract VotingNftCryticToFoundry
 10 |     | //
 11 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 12 |     | // 1) forge coverage --report lcov --report-file test/04-voting-nft/coverage-foundry.lcov --match-contract VotingNftCryticToFoundry
 13 |     | // 2) genhtml test/04-voting-nft/coverage-foundry.lcov -o test/04-voting-nft/coverage-foundry
 14 |     | // 3) open test/04-voting-nft/coverage-foundry/index.html in your browser and
 15 |     | //    navigate to the relevant source file to see line-by-line execution records
 16 |     | contract VotingNftCryticToFoundry is Test, Properties, FoundryAsserts {
 17 |     |     function setUp() public virtual {
 18 |     |         setup();
 19 |     | 
 20 |     |         // use specific attacker address; attacker has no assets or
 21 |     |         // any special permissions for the contract being attacked
 22 |     |         targetSender(address(0x1337));
 23 |     |     }
 24 |     | 
 25 |     |     // wrap common invariants for foundry
 26 |     |     function invariant_total_power_gt_zero_power_calc_start() external {
 27 |     |         t(property_total_power_gt_zero_power_calc_start(), "Total voting power not zero when power calculation starts");
 28 |     |     }
 29 |     | 
 30 |     |     function invariant_total_power_eq_init_max_power_calc_start() external {
 31 |     |         t(property_total_power_eq_init_max_power_calc_start(), "Total voting power correct when power calculation starts");
 32 |     |     }
 33 |     | }
 34 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/05-token-sale/TokenSaleAdvancedEchidna.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./TokenSaleBasicEchidna.t.sol";
  5 |     | 
  6 |     | // configure solc-select to use compiler version:
  7 |     | // solc-select use 0.8.23 
  8 |     | //
  9 |     | // run from base project directory with:
 10 |     | // echidna --config test/05-token-sale/TokenSaleAdvancedEchidna.yaml ./ --contract TokenSaleAdvancedEchidna
 11 | *   | contract TokenSaleAdvancedEchidna is TokenSaleBasicEchidna {
 12 |     | 
 13 |     |     // constructor has to be payable if balanceContract > 0 in yaml config
 14 |     |     constructor() payable TokenSaleBasicEchidna() {
 15 |     |         // advanced test with guiding of the fuzzer
 16 |     |         //
 17 |     |         // ideally we would like a quick way to just point Echidna
 18 |     |         // at only the `tokenSale` contract, but since I'm not aware
 19 |     |         // of one we just wrap every function from that contract
 20 |     |         // into this one.
 21 |     |         // 
 22 |     |         // Also in the yaml config set `allContracts: false`
 23 |     |         //
 24 |     |         // advanced echidna is able to break both invariants and find
 25 |     |         // much more simplified exploit chains than advanced foundry!
 26 |     |     }
 27 |     | 
 28 |     |     // dumb wrappers around the non-view `tokenSale` contract functions
 29 |     |     // would be nice if there was a simple way to just point Echidna
 30 |     |     // at the contract
 31 | *   |     function buy(uint256 amountToBuy) public {
 32 | *   |         hevm.prank(msg.sender);
 33 | *r  |         tokenSale.buy(amountToBuy);
 34 |     |     }
 35 |     | 
 36 | *   |     function endSale() public {
 37 | *   |         hevm.prank(msg.sender);
 38 | *r  |         tokenSale.endSale();
 39 |     |     }
 40 |     | 
 41 |     |     // invariants inherited from base contract
 42 |     | }
 43 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/05-token-sale/TokenSaleAdvancedFoundry.t.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import "./TokenSaleBasicFoundry.t.sol";
  5 |     | 
  6 |     | // run from base project directory with:
  7 |     | // forge test --match-contract TokenSaleAdvancedFoundry
  8 |     | //
  9 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 10 |     | // 1) forge coverage --report lcov --report-file test/05-token-sale/coverage-foundry-advanced.lcov --match-contract TokenSaleAdvancedFoundry
 11 |     | // 2) genhtml test/05-token-sale/coverage-foundry-advanced.lcov -o test/05-token-sale/coverage-foundry-advanced
 12 |     | // 3) open test/05-token-sale/coverage-foundry-advanced/index.html in your browser and
 13 |     | //    navigate to the relevant source file to see line-by-line execution records
 14 |     | contract TokenSaleAdvancedFoundry is TokenSaleBasicFoundry {
 15 |     | 
 16 |     |     function setUp() public override {
 17 |     |         // call parent first to setup test environment
 18 |     |         super.setUp();
 19 |     | 
 20 |     |         // advanced test with guiding of the fuzzer
 21 |     |         //
 22 |     |         // guide Foundry to focus only on the `tokenSale` contract
 23 |     |         //
 24 |     |         // advanced foundry is able to break both invariants!
 25 |     |         targetContract(address(tokenSale));
 26 |     |     }
 27 |     | 
 28 |     |     // invariants inherited from base contract
 29 |     | }
 30 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/05-token-sale/TokenSaleBasicEchidna.t.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "../../src/05-token-sale/TokenSale.sol";
   5 |     | import "../../src/TestToken.sol";
   6 |     | 
   7 |     | // configure solc-select to use compiler version:
   8 |     | // solc-select use 0.8.23 
   9 |     | //
  10 |     | // run from base project directory with:
  11 |     | // echidna --config test/05-token-sale/TokenSaleBasicEchidna.yaml ./ --contract TokenSaleBasicEchidna
  12 |     | // medusa --config test/05-token-sale/TokenSaleBasicMedusa.json fuzz
  13 |     | 
  14 |     | // used for HEVM cheat codes
  15 |     | // https://github.com/crytic/building-secure-contracts/blob/master/program-analysis/echidna/advanced/on-using-cheat-codes.md
  16 |     | // https://hevm.dev/controlling-the-unit-testing-environment.html#cheat-codes
  17 |     | interface IHevm {
  18 |     |     function prank(address) external;
  19 |     | }
  20 |     | 
  21 |     | contract TokenSaleBasicEchidna {
  22 | *   |     IHevm hevm = IHevm(address(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D));
  23 |     | 
  24 |     |     event creatorbal(uint256 bal);
  25 |     |     event soldTokens(uint256 soldtokens);
  26 |     |     
  27 |     | 
  28 | *   |     uint8 private constant SELL_DECIMALS = 18;
  29 | *   |     uint8 private constant BUY_DECIMALS  = 6;
  30 |     | 
  31 |     |     // total tokens to sell
  32 | *   |     uint256 private constant SELL_TOKENS = 1000e18;
  33 |     | 
  34 |     |     // buy tokens to give each buyer
  35 | *   |     uint256 private constant BUY_TOKENS  = 500e6;
  36 |     | 
  37 |     |     // number of buyers allowed in the token sale
  38 | *   |     uint8 private constant NUM_BUYERS    = 5;
  39 |     | 
  40 |     |     // max each buyer can buy
  41 | *   |     uint256 private constant MAX_TOKENS_PER_BUYER = 200e18;
  42 |     | 
  43 |     |     // allowed buyers
  44 |     |     address[] buyers;
  45 |     | 
  46 |     |     // contracts required for test
  47 |     |     ERC20     sellToken;
  48 |     |     ERC20     buyToken;
  49 |     |     TokenSale tokenSale;
  50 |     | 
  51 |     | 
  52 |     |     // constructor has to be payable if balanceContract > 0 in yaml config
  53 |     |     constructor() payable {
  54 | *   |         sellToken = new TestToken(SELL_TOKENS, SELL_DECIMALS);
  55 | *   |         buyToken  = new TestToken(BUY_TOKENS*NUM_BUYERS, BUY_DECIMALS);
  56 |     | 
  57 |     |         // setup the allowed list of buyers
  58 |     |         // make sure to use full address not just shorthand as Echidna
  59 |     |         // expands the address differently to Foundry & make sure to
  60 |     |         // use full addresses in yaml config `sender` list
  61 | *   |         buyers.push(address(0x1000000000000000000000000000000000000000));
  62 | *   |         buyers.push(address(0x2000000000000000000000000000000000000000));
  63 | *   |         buyers.push(address(0x3000000000000000000000000000000000000000));
  64 | *   |         buyers.push(address(0x4000000000000000000000000000000000000000));
  65 | *   |         buyers.push(address(0x5000000000000000000000000000000000000000));
  66 |     | 
  67 | *   |         assert(buyers.length == NUM_BUYERS);
  68 |     | 
  69 |     |         // setup contract to be tested
  70 | *   |         tokenSale = new TokenSale(buyers,
  71 | *   |                                   address(sellToken),
  72 | *   |                                   address(buyToken),
  73 |     |                                   MAX_TOKENS_PER_BUYER,
  74 |     |                                   SELL_TOKENS);
  75 |     | 
  76 |     |         // fund the contract
  77 | *   |         sellToken.transfer(address(tokenSale), SELL_TOKENS);
  78 |     | 
  79 |     |         // verify setup
  80 |     |         //
  81 |     |         // token sale tokens & parameters
  82 | *   |         assert(sellToken.balanceOf(address(tokenSale)) == SELL_TOKENS);
  83 | *   |         assert(tokenSale.getSellTokenTotalAmount() == SELL_TOKENS);
  84 | *   |         assert(tokenSale.getSellTokenAddress() == address(sellToken));
  85 | *   |         assert(tokenSale.getBuyTokenAddress() == address(buyToken));
  86 | *   |         assert(tokenSale.getMaxTokensPerBuyer() == MAX_TOKENS_PER_BUYER);
  87 | *   |         assert(tokenSale.getTotalAllowedBuyers() == NUM_BUYERS);
  88 |     | 
  89 |     |         // no tokens have yet been sold
  90 | *   |         assert(tokenSale.getRemainingSellTokens() == SELL_TOKENS);
  91 |     | 
  92 |     |         // this contract is the creator
  93 | *   |         assert(tokenSale.getCreator() == address(this));
  94 |     | 
  95 |     |         // constrain fuzz test senders to the set of allowed buying addresses
  96 |     |         // done in yaml config for echidna
  97 |     | 
  98 |     |         // distribute tokens to buyers
  99 | *   |         for(uint256 i; i<buyers.length; ++i) {
 100 | *   |             address buyer = buyers[i];
 101 |     | 
 102 |     |             // distribute buy tokens to buyer
 103 | *   |             buyToken.transfer(buyer, BUY_TOKENS);
 104 | *   |             assert(buyToken.balanceOf(buyer) == BUY_TOKENS);
 105 |     | 
 106 |     |             // buyer approves token sale contract to prevent reverts
 107 | *   |             hevm.prank(buyer);
 108 | *   |             buyToken.approve(address(tokenSale), type(uint256).max);
 109 |     |         }
 110 |     | 
 111 |     |         // no buy tokens yet received, all distributed to buyers
 112 | *   |         assert(buyToken.balanceOf(address(this)) == 0);
 113 |     | 
 114 |     |         // basic test with no advanced guiding of the fuzzer
 115 |     |         // Echidna is able to break the first & most valuable invariant,
 116 |     |         // but can't break the second one as it gets distracted calling
 117 |     |         // functions on the 2 token contracts which don't help at all
 118 |     |         //
 119 |     |         // Basic Medusa is able to break both invariants!
 120 |     |     }
 121 |     | 
 122 |     | 
 123 |     |     // two possible invariants in order of importance:
 124 |     |     //
 125 |     |     // 1) the amount of tokens bought (received by this contract)
 126 |     |     //    should equal the amount of tokens sold as the exchange
 127 |     |     //    rate is 1:1, when accounted for precision difference
 128 |     |     function invariant_tokens_bought_eq_tokens_sold() public  returns(bool) {
 129 |     |         uint256 soldAmount = tokenSale.getSellTokenSoldAmount();
 130 |     |         uint256 boughtBal  = buyToken.balanceOf(address(this));
 131 |     | 
 132 |     |         // scale up `boughtBal` by the precision difference
 133 |     |         boughtBal *= 10 ** (SELL_DECIMALS - BUY_DECIMALS);
 134 |     | 
 135 |     |         // assert the equality; if this breaks that means something
 136 |     |         // has gone wrong with the buying and selling. In our private
 137 |     |         // audit there was a precision miscalculation that allowed
 138 |     |         // an attacker to buy the sale tokens without paying due to
 139 |     |         // rounding down to zero
 140 |     |         emit creatorbal(boughtBal);
 141 |     |         emit soldTokens(soldAmount);
 142 |     |         return(boughtBal == soldAmount);
 143 |     |     }
 144 |     | 
 145 |     | 
 146 |     |     // 2) amount each user has bought shouldn't exceed max token buy per user
 147 |     |     //    the code only checks on a per-transaction basis, so a user can
 148 |     |     //    buy over their limit through multiple smaller buys
 149 |     |     function invariant_max_token_buy_per_user() public view returns(bool) {
 150 |     |         for(uint256 i; i<buyers.length; ++i) {
 151 |     |             address buyer = buyers[i];
 152 |     |             
 153 |     |             if(sellToken.balanceOf(buyer) > MAX_TOKENS_PER_BUYER) {
 154 |     |                 return false;
 155 |     |             }
 156 |     |         }
 157 |     | 
 158 |     |         return true;
 159 |     |     }
 160 |     | 
 161 |     |     // this test case shows the major problem; the decimal precision
 162 |     |     // conversion code is assuming the input amount is formatted
 163 |     |     // with 18 decimals, even if the underlying token does not have
 164 |     |     // 18 decimals. Hence by sending a amount small enough the
 165 |     |     // conversion will round down to zero and the buyer can buy free
 166 |     |     // tokens from the token sale, since the conversion isn't checking
 167 |     |     // if the conversion of the buyer's input returned 0 & ERC20
 168 |     |     // will happily transfer 0 tokens!
 169 |     |     //
 170 |     |     /* commented out by default since the invariants are what we are
 171 |     |        testing, this is just here to more clearly show the major bug 
 172 |     |     function testBuy() public {
 173 |     |         address buyer  = buyers[0];
 174 |     |         uint256 amount = 200e6;
 175 |     | 
 176 |     |         hevm.prank(buyer);
 177 |     |         tokenSale.buy(amount);
 178 |     | 
 179 |     |         // buyer still has all their tokens
 180 |     |         assertEq(buyToken.balanceOf(buyer), BUY_TOKENS);
 181 |     | 
 182 |     |         // buyer got some sell tokens for free!
 183 |     |         assertEq(sellToken.balanceOf(buyer), 200e6);
 184 |     |     }
 185 |     |     */
 186 |     | }
 187 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/05-token-sale/TokenSaleBasicFoundry.t.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "../../src/05-token-sale/TokenSale.sol";
   5 |     | import "../../src/TestToken.sol";
   6 |     | 
   7 |     | import "forge-std/Test.sol";
   8 |     | 
   9 |     | // run from base project directory with:
  10 |     | // forge test --match-contract TokenSaleBasicFoundry
  11 |     | //
  12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
  13 |     | // 1) forge coverage --report lcov --report-file test/05-token-sale/coverage-foundry-basic.lcov --match-contract TokenSaleBasicFoundry
  14 |     | // 2) genhtml test/05-token-sale/coverage-foundry-basic.lcov -o test/05-token-sale/coverage-foundry-basic
  15 |     | // 3) open test/05-token-sale/coverage-foundry-basic/index.html in your browser and
  16 |     | //    navigate to the relevant source file to see line-by-line execution records
  17 |     | contract TokenSaleBasicFoundry is Test {
  18 |     | 
  19 |     |     uint8 private constant SELL_DECIMALS = 18;
  20 |     |     uint8 private constant BUY_DECIMALS  = 6;
  21 |     | 
  22 |     |     // total tokens to sell
  23 |     |     uint256 private constant SELL_TOKENS = 1000e18;
  24 |     | 
  25 |     |     // buy tokens to give each buyer
  26 |     |     uint256 private constant BUY_TOKENS  = 500e6;
  27 |     | 
  28 |     |     // number of buyers allowed in the token sale
  29 |     |     uint8 private constant NUM_BUYERS    = 5;
  30 |     | 
  31 |     |     // max each buyer can buy
  32 |     |     uint256 private constant MAX_TOKENS_PER_BUYER = 200e18;
  33 |     | 
  34 |     |     // allowed buyers
  35 |     |     address[] buyers;
  36 |     | 
  37 |     |     // contracts required for test
  38 |     |     ERC20     sellToken;
  39 |     |     ERC20     buyToken;
  40 |     |     TokenSale tokenSale;
  41 |     | 
  42 |     |     function setUp() public virtual {
  43 |     |         sellToken = new TestToken(SELL_TOKENS, SELL_DECIMALS);
  44 |     |         buyToken  = new TestToken(BUY_TOKENS*NUM_BUYERS, BUY_DECIMALS);
  45 |     | 
  46 |     |         // setup the allowed list of buyers
  47 |     |         buyers.push(address(0x1));
  48 |     |         buyers.push(address(0x2));
  49 |     |         buyers.push(address(0x3));
  50 |     |         buyers.push(address(0x4));
  51 |     |         buyers.push(address(0x5));
  52 |     | 
  53 |     |         assert(buyers.length == NUM_BUYERS);
  54 |     | 
  55 |     |         // setup contract to be tested
  56 |     |         tokenSale = new TokenSale(buyers,
  57 |     |                                   address(sellToken),
  58 |     |                                   address(buyToken),
  59 |     |                                   MAX_TOKENS_PER_BUYER,
  60 |     |                                   SELL_TOKENS);
  61 |     | 
  62 |     |         // fund the contract
  63 |     |         sellToken.transfer(address(tokenSale), SELL_TOKENS);
  64 |     | 
  65 |     |         // verify setup
  66 |     |         //
  67 |     |         // token sale tokens & parameters
  68 |     |         assert(sellToken.balanceOf(address(tokenSale)) == SELL_TOKENS);
  69 |     |         assert(tokenSale.getSellTokenTotalAmount() == SELL_TOKENS);
  70 |     |         assert(tokenSale.getSellTokenAddress() == address(sellToken));
  71 |     |         assert(tokenSale.getBuyTokenAddress() == address(buyToken));
  72 |     |         assert(tokenSale.getMaxTokensPerBuyer() == MAX_TOKENS_PER_BUYER);
  73 |     |         assert(tokenSale.getTotalAllowedBuyers() == NUM_BUYERS);
  74 |     | 
  75 |     |         // no tokens have yet been sold
  76 |     |         assert(tokenSale.getRemainingSellTokens() == SELL_TOKENS);
  77 |     | 
  78 |     |         // this contract is the creator
  79 |     |         assert(tokenSale.getCreator() == address(this));
  80 |     | 
  81 |     |         // constrain fuzz test senders to the set of allowed buying addresses
  82 |     |         for(uint256 i; i<buyers.length; ++i) {
  83 |     |             address buyer = buyers[i];
  84 |     | 
  85 |     |             // add buyer to sender list
  86 |     |             targetSender(buyer);
  87 |     | 
  88 |     |             // distribute buy tokens to buyer
  89 |     |             buyToken.transfer(buyer, BUY_TOKENS);
  90 |     |             assert(buyToken.balanceOf(buyer) == BUY_TOKENS);
  91 |     | 
  92 |     |             // buyer approves token sale contract to prevent reverts
  93 |     |             vm.prank(buyer);
  94 |     |             buyToken.approve(address(tokenSale), type(uint256).max);
  95 |     |         }
  96 |     | 
  97 |     |         // no buy tokens yet received, all distributed to buyers
  98 |     |         assert(buyToken.balanceOf(address(this)) == 0);
  99 |     | 
 100 |     |         // basic test with no advanced guiding of the fuzzer
 101 |     |         // Foundry is able to break the first & most valuable invariant,
 102 |     |         // but can't break the second one as it gets distracted calling
 103 |     |         // functions on the 2 token contracts which don't help at all
 104 |     |     }
 105 |     | 
 106 |     | 
 107 |     |     // two possible invariants in order of importance:
 108 |     |     //
 109 |     |     // 1) the amount of tokens bought (received by this contract)
 110 |     |     //    should equal the amount of tokens sold as the exchange
 111 |     |     //    rate is 1:1, when accounted for precision difference
 112 |     |     function invariant_tokens_bought_eq_tokens_sold() public view {
 113 |     |         uint256 soldAmount = tokenSale.getSellTokenSoldAmount();
 114 |     |         uint256 boughtBal  = buyToken.balanceOf(address(this));
 115 |     | 
 116 |     |         // scale up `boughtBal` by the precision difference
 117 |     |         boughtBal *= 10 ** (SELL_DECIMALS - BUY_DECIMALS);
 118 |     | 
 119 |     |         // assert the equality; if this breaks that means something
 120 |     |         // has gone wrong with the buying and selling. In our private
 121 |     |         // audit there was a precision miscalculation that allowed
 122 |     |         // an attacker to buy the sale tokens without paying due to
 123 |     |         // rounding down to zero
 124 |     |         assert(boughtBal == soldAmount);
 125 |     |     }
 126 |     | 
 127 |     | 
 128 |     |     // 2) amount each user has bought shouldn't exceed max token buy per user
 129 |     |     //    the code only checks on a per-transaction basis, so a user can
 130 |     |     //    buy over their limit through multiple smaller buys
 131 |     |     function invariant_max_token_buy_per_user() public view {
 132 |     |         for(uint256 i; i<buyers.length; ++i) {
 133 |     |             address buyer = buyers[i];
 134 |     | 
 135 |     |             assert(sellToken.balanceOf(buyer) <= MAX_TOKENS_PER_BUYER);
 136 |     |         }
 137 |     |     }
 138 |     | 
 139 |     |     // this test case shows the major problem; the decimal precision
 140 |     |     // conversion code is assuming the input amount is formatted
 141 |     |     // with 18 decimals, even if the underlying token does not have
 142 |     |     // 18 decimals. Hence by sending a amount small enough the
 143 |     |     // conversion will round down to zero and the buyer can buy free
 144 |     |     // tokens from the token sale, since the conversion isn't checking
 145 |     |     // if the conversion of the buyer's input returned 0 & ERC20
 146 |     |     // will happily transfer 0 tokens!
 147 |     |     //
 148 |     |     /* commented out by default since the invariants are what we are
 149 |     |        testing, this is just here to more clearly show the major bug 
 150 |     |     function testBuy() public {
 151 |     |         address buyer  = buyers[0];
 152 |     |         uint256 amount = 200e6;
 153 |     | 
 154 |     |         vm.prank(buyer);
 155 |     |         tokenSale.buy(amount);
 156 |     | 
 157 |     |         // buyer still has all their tokens
 158 |     |         assertEq(buyToken.balanceOf(buyer), BUY_TOKENS);
 159 |     | 
 160 |     |         // buyer got some sell tokens for free!
 161 |     |         assertEq(sellToken.balanceOf(buyer), 200e6);
 162 |     |     }
 163 |     |     */
 164 |     | }
 165 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/06-rarely-false/RarelyFalseCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {TargetFunctions} from "./TargetFunctions.sol";
  5 |     | import {CryticAsserts} from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // run from base project directory with:
  8 |     | // echidna --config test/06-rarely-false/echidna.yaml ./ --contract RarelyFalseCryticTester
  9 |     | // medusa --config test/06-rarely-false/medusa.json fuzz
 10 |     | contract RarelyFalseCryticTester is TargetFunctions, CryticAsserts {
 11 |     |     
 12 |     | }
 13 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/06-rarely-false/RarelyFalseCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {TargetFunctions} from "./TargetFunctions.sol";
  5 |     | import {FoundryAsserts} from "@chimera/FoundryAsserts.sol";
  6 |     | import {Test} from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract RarelyFalseCryticToFoundry --fuzz-runs 2000000
 10 |     | //
 11 |     | // get coverage report ( can be imported into https://lcov-viewer.netlify.app/ )
 12 |     | // forge coverage --report lcov --report-file test/06-rarely-false/coverage-foundry.lcov --match-contract RarelyFalseCryticToFoundry
 13 |     | //
 14 |     | // run halmos from base project directory:
 15 |     | // halmos --function test_ --match-contract RarelyFalseCryticToFoundry
 16 |     | contract RarelyFalseCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 17 |     | 
 18 |     | }
 19 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/06-rarely-false/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Asserts} from "@chimera/Asserts.sol";
  5 |     | 
  6 |     | // target functions to test
  7 |     | abstract contract TargetFunctions is Asserts {
  8 |     | 
  9 |     |     uint256 constant private OFFSET = 1234;
 10 |     |     uint256 constant private POW    = 80;
 11 |     |     uint256 constant private LIMIT  = type(uint256).max - OFFSET;
 12 |     | 
 13 |     |     // fuzzers call this function
 14 |     |     function test_RarelyFalse(uint256 n) external {
 15 |     |         // input preconditions
 16 |     |         n = between(n, 1, LIMIT);
 17 |     | 
 18 |     |         // assertion to break
 19 |     |         t(_rarelyFalse(n + OFFSET, POW), "Should not be false");
 20 |     |     }
 21 |     | 
 22 |     |      // actual implementation to test
 23 |     |     function _rarelyFalse(uint256 n, uint256 e) private pure returns(bool) {
 24 |     |         if(n % 2**e == 0) return false;
 25 |     |         return true;
 26 |     |     }
 27 |     | 
 28 |     | }
 29 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/07-byte-battle/ByteBattleCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {TargetFunctions} from "./TargetFunctions.sol";
  5 |     | import {CryticAsserts} from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // configure solc-select to use compiler version:
  8 |     | // solc-select use 0.8.23 
  9 |     | //
 10 |     | // run from base project directory with:
 11 |     | // echidna --config test/07-byte-battle/echidna.yaml ./ --contract ByteBattleCryticTester
 12 |     | // medusa --config test/07-byte-battle/medusa.json fuzz
 13 |     | contract ByteBattleCryticTester is TargetFunctions, CryticAsserts {
 14 |     | 
 15 |     | }
 16 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/07-byte-battle/ByteBattleCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {TargetFunctions} from "./TargetFunctions.sol";
  5 |     | import {FoundryAsserts} from "@chimera/FoundryAsserts.sol";
  6 |     | import {Test} from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract ByteBattleCryticToFoundry
 10 |     | //
 11 |     | // get coverage report ( can be imported into https://lcov-viewer.netlify.app/ )
 12 |     | // forge coverage --report lcov --report-file test/07-byte-battle/coverage-foundry.lcov --match-contract ByteBattleCryticToFoundry
 13 |     | //
 14 |     | // run halmos from base project directory:
 15 |     | // halmos --function test_ --match-contract ByteBattleCryticToFoundry
 16 |     | contract ByteBattleCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 17 |     | 
 18 |     | }
 19 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/07-byte-battle/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import {Asserts} from "@chimera/Asserts.sol";
  5 |     | 
  6 |     | // target functions to test
  7 |     | abstract contract TargetFunctions is Asserts {
  8 |     | 
  9 |     |     // fuzzers call this function
 10 |     |     function test_ByteBattle(bytes32 a, bytes32 b) external {
 11 |     |         // input precondition
 12 |     |         precondition(a != b);
 13 |     | 
 14 |     |         // assertion to break
 15 |     |         t(_convertIt(a) != _convertIt(b), "Different inputs should not convert to the same value");
 16 |     |     }
 17 |     | 
 18 |     |     // actual implementation to test
 19 |     |     function _convertIt(bytes32 b) private pure returns (uint96) {
 20 |     |         return uint96(uint256(b) >> 160);
 21 |     |     }
 22 |     | }
 23 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/08-omni-protocol/MockOracle.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity ^0.8.19;
  3 |     | 
  4 |     | import "@openzeppelin/contracts/access/AccessControl.sol";
  5 |     | import "../../src/08-omni-protocol/interfaces/IOmniOracle.sol";
  6 |     | 
  7 |     | contract MockOracle is AccessControl, IOmniOracle {
  8 |     |     event SetPrice(address underlying, uint256 price);
  9 |     | 
 10 |     |     bytes32 public constant UPDATER_ROLE = keccak256("UPDATER_ROLE");
 11 |     |     mapping(address => uint256) public prices;
 12 |     | 
 13 |     |     constructor() {
 14 |     |         _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
 15 |     |         _grantRole(UPDATER_ROLE, msg.sender);
 16 |     |     }
 17 |     | 
 18 |     |     function setPrices(address[] calldata _underlyings, uint256[] calldata _prices) external onlyRole(UPDATER_ROLE) {
 19 |     |         require(_underlyings.length == _prices.length, "MockOracle::setPrices: bad data length");
 20 |     |         for (uint256 index = 0; index < _underlyings.length; ++index) {
 21 |     |             prices[_underlyings[index]] = _prices[index];
 22 |     |             emit SetPrice(_underlyings[index], _prices[index]);
 23 |     |         }
 24 |     |     }
 25 |     | 
 26 |     |     function getPrice(address _underlying) external view returns (uint256) {
 27 |     |         uint256 price = prices[_underlying];
 28 |     |         require(price != 0, "MockOracle::getPrice: no price available");
 29 |     |         return price;
 30 |     |     }
 31 |     | }
 32 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/08-omni-protocol/OmniAdvancedFoundry.t.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   5 |     | 
   6 |     | import "../../src/MockERC20.sol";
   7 |     | import "./MockOracle.sol";
   8 |     | import "../../src/08-omni-protocol/IRM.sol";
   9 |     | import "../../src/08-omni-protocol/OmniPool.sol";
  10 |     | import "../../src/08-omni-protocol/OmniToken.sol";
  11 |     | import "../../src/08-omni-protocol/OmniTokenNoBorrow.sol";
  12 |     | import "../../src/08-omni-protocol/interfaces/IOmniToken.sol";
  13 |     | import "../../src/08-omni-protocol/interfaces/IOmniPool.sol";
  14 |     | import "../../src/08-omni-protocol/SubAccount.sol";
  15 |     | 
  16 |     | import "forge-std/Test.sol";
  17 |     | 
  18 |     | //
  19 |     | // Foundry Fuzzer Info:
  20 |     | //
  21 |     | // change foundry.toml fuzz run to 5000
  22 |     | // run from base project directory with:
  23 |     | // forge test --match-contract OmniAdvancedFoundry
  24 |     | //
  25 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
  26 |     | // 1) forge coverage --report lcov --report-file test/08-omni-protocol/coverage-foundry.lcov --match-contract OmniAdvancedFoundry
  27 |     | // 2) genhtml test/08-omni-protocol/coverage-foundry.lcov -o test/08-omni-protocol/coverage-foundry
  28 |     | // 3) open test/08-omni-protocol/coverage-foundry/index.html in your browser and
  29 |     | //    navigate to the relevant source file to see line-by-line execution records
  30 |     | //
  31 |     | // Foundry is unable to break any invariants even when Foundry.toml
  32 |     | // is configured with "runs = 40000" which takes ~5min to run.
  33 |     | //
  34 |     | // In contrast Echidna can sometimes break 1 invariant within 5 minutes and
  35 |     | // Medusa can almost always break 2 invariants within 2 minutes, often
  36 |     | // much faster.
  37 |     | //
  38 |     | contract OmniAdvancedFoundry is Test {
  39 |     |     using SubAccount for address;
  40 |     | 
  41 |     |     // make these constant to match Echidna & Medusa configs, left same for Foundry
  42 |     |     address public constant ALICE = address(0x1000000000000000000000000000000000000000);
  43 |     |     address public constant BOB   = address(0x2000000000000000000000000000000000000000);
  44 |     | 
  45 |     |     // used for input restriction during fuzzing
  46 |     |     uint8  public constant MAX_TRANCH_ID  = 1; // only 2 tranches
  47 |     |     uint8  public constant MIN_MODE_ID    = 1;
  48 |     |     uint8  public constant MAX_MODE_ID    = 2;
  49 |     |     uint96 public constant MAX_SUB_ID     = 2;
  50 |     | 
  51 |     |     // used for price oracle
  52 |     |     uint8  public constant PRICES_COUNT   = 3;
  53 |     |     // maximum price move % each time for Oracle assets
  54 |     |     uint8  public constant MIN_PRICE_MOVE = 2;
  55 |     |     uint8  public constant MAX_PRICE_MOVE = 10;
  56 |     | 
  57 |     |     // misc constants
  58 |     |     uint256 public constant USER_TOKENS   = 1_000_000; // multiplied by token decimals
  59 |     |     uint256 public constant BORROW_CAP    = 1_000_000; // multiplied by token decimals
  60 |     | 
  61 |     |     OmniPool pool;
  62 |     |     OmniToken oToken;
  63 |     |     OmniToken oToken2;
  64 |     |     OmniTokenNoBorrow oToken3;
  65 |     |     OmniTokenNoBorrow oToken4;
  66 |     | 
  67 |     |     IRM irm;
  68 |     |     MockERC20 uToken;
  69 |     |     MockERC20 uToken2;
  70 |     |     MockERC20 uToken3;
  71 |     |     MockOracle oracle;
  72 |     | 
  73 |     |     // used to update oracle prices
  74 |     |     address[] underlyings = new address[](PRICES_COUNT);
  75 |     |     uint256[] prices      = new uint256[](PRICES_COUNT);
  76 |     | 
  77 |     |     // ghost variables used to verify invariants
  78 |     |     struct SubAccountGhost {
  79 |     |         uint8 numEnteredIsolatedMarkets;
  80 |     |         uint8 numEnteredMarkets;
  81 |     |         uint8 numEnteredModes;
  82 |     |         bool  enteredIsolatedMarketWithActiveBorrows;
  83 |     |         bool  exitedMarketOrModeWithActiveBorrows;
  84 |     |         bool  enteredModeWithEnteredMarkets;
  85 |     |         bool  enteredExpiredMarketOrMode;
  86 |     |         bool  depositReceivedZeroShares;
  87 |     |         bool  depositReceivedIncorrectAmount;
  88 |     |         bool  withdrawReceivedIncorrectAmount;
  89 |     |         bool  withdrawDecreasedZeroShares;
  90 |     |         bool  repayDidntDecreaseBorrowShares;
  91 |     |         bool  repayIncorrectBorrowAmountDecrease;
  92 |     |         bool  borrowIncorrectBorrowAmountIncrease;
  93 |     |         bool  borrowDidntIncreaseBorrowShares;
  94 |     |     }
  95 |     | 
  96 |     |     mapping(bytes32 accountId => SubAccountGhost) ghost_subAccount;
  97 |     | 
  98 |     |     // changed from constructor() to setUp() for Foundry
  99 |     |     function setUp() public {
 100 |     |         // Init contracts
 101 |     |         oracle = new MockOracle();
 102 |     |         irm = new IRM();
 103 |     |         irm.initialize(address(this));
 104 |     |         pool = new OmniPool();
 105 |     |         pool.initialize(address(oracle), address(this), address(this));
 106 |     |         uToken = new MockERC20('USD Coin', 'USDC');
 107 |     |         uToken2 = new MockERC20('Wrapped Ethereum', 'WETH');
 108 |     |         uToken3 = new MockERC20('Shiba Inu', 'SHIB');
 109 |     | 
 110 |     |         // Initial Oracle configs
 111 |     |         underlyings[0] = address(uToken);
 112 |     |         prices[0]      = 1e18; // USDC
 113 |     | 
 114 |     |         underlyings[1] = address(uToken2);
 115 |     |         prices[1]      = 2000e18; // WETH
 116 |     | 
 117 |     |         underlyings[2] = address(uToken3);
 118 |     |         prices[2]      = 0.00001e18; // SHIB
 119 |     |         
 120 |     |         oracle.setPrices(underlyings, prices);
 121 |     | 
 122 |     |         // Configs for oTokens
 123 |     |         IIRM.IRMConfig[] memory configs = new IIRM.IRMConfig[](MAX_TRANCH_ID+1);
 124 |     |         configs[0] = IIRM.IRMConfig(0.9e9, 0.01e9, 0.035e9, 0.635e9);
 125 |     |         configs[1] = IIRM.IRMConfig(0.8e9, 0.03e9, 0.1e9, 1.2e9);
 126 |     |         IIRM.IRMConfig[] memory configs2 = new IIRM.IRMConfig[](MAX_TRANCH_ID+1);
 127 |     |         configs2[0] = IIRM.IRMConfig(0.85e9, 0.02e9, 0.055e9, 0.825e9);
 128 |     |         configs2[1] = IIRM.IRMConfig(0.75e9, 0.04e9, 0.12e9, 1.2e9);
 129 |     |         uint8[] memory tranches = new uint8[](MAX_TRANCH_ID+1);
 130 |     |         tranches[0] = 0;
 131 |     |         tranches[1] = 1;
 132 |     |         uint256[] memory borrowCaps = new uint256[](MAX_TRANCH_ID+1);
 133 |     |         borrowCaps[0] = BORROW_CAP * (10 ** uToken.decimals());
 134 |     |         borrowCaps[1] = BORROW_CAP * (10 ** uToken.decimals());
 135 |     | 
 136 |     |         // Init oTokens
 137 |     |         oToken = new OmniToken();
 138 |     |         oToken.initialize(address(pool), address(uToken), address(irm), borrowCaps);
 139 |     |         oToken2 = new OmniToken();
 140 |     |         oToken2.initialize(address(pool), address(uToken2), address(irm), borrowCaps);
 141 |     |         oToken3 = new OmniTokenNoBorrow();
 142 |     |         oToken3.initialize(address(pool), address(uToken3), borrowCaps[0]);
 143 |     |         oToken4 = new OmniTokenNoBorrow();
 144 |     |         oToken4.initialize(address(pool), address(uToken3), borrowCaps[0]);
 145 |     |         irm.setIRMForMarket(address(oToken), tranches, configs);
 146 |     |         irm.setIRMForMarket(address(oToken2), tranches, configs2);
 147 |     | 
 148 |     |         // Set MarketConfigs for Pool
 149 |     |         // expiration times made lower to trigger more liquidations
 150 |     |         IOmniPool.MarketConfiguration memory mConfig1 =
 151 |     |             IOmniPool.MarketConfiguration(0.9e9, 0.9e9, uint32(block.timestamp + 100 days), 0, false);
 152 |     |         IOmniPool.MarketConfiguration memory mConfig2 =
 153 |     |             IOmniPool.MarketConfiguration(0.8e9, 0.8e9, uint32(block.timestamp + 100 days), 0, false);
 154 |     |         IOmniPool.MarketConfiguration memory mConfig3 =
 155 |     |             IOmniPool.MarketConfiguration(0.4e9, 0, uint32(block.timestamp + 5 days), 1, true);
 156 |     |         IOmniPool.MarketConfiguration memory mConfig4 =
 157 |     |             IOmniPool.MarketConfiguration(0.4e9, 0, uint32(block.timestamp + 2 days), 1, true);
 158 |     |         pool.setMarketConfiguration(address(oToken), mConfig1);
 159 |     |         pool.setMarketConfiguration(address(oToken2), mConfig2);
 160 |     |         pool.setMarketConfiguration(address(oToken3), mConfig3);
 161 |     |         pool.setMarketConfiguration(address(oToken4), mConfig4);
 162 |     | 
 163 |     |         // Set ModeConfigs for Pool
 164 |     |         address[] memory modeMarkets = new address[](2);
 165 |     |         modeMarkets[0] = address(oToken);
 166 |     |         modeMarkets[1] = address(oToken2);
 167 |     |         IOmniPool.ModeConfiguration memory modeStableMode =
 168 |     |             IOmniPool.ModeConfiguration(0.95e9, 0.95e9, 0, uint32(block.timestamp + 7 days), modeMarkets);
 169 |     |         pool.setModeConfiguration(modeStableMode);
 170 |     |         pool.setModeConfiguration(modeStableMode);
 171 |     | 
 172 |     |         // mint user tokens
 173 |     |         uToken.mint(address(ALICE), USER_TOKENS * (10 ** uToken.decimals()));
 174 |     |         uToken.mint(address(BOB), USER_TOKENS * (10 ** uToken.decimals()));
 175 |     |         uToken2.mint(address(ALICE), USER_TOKENS * (10 ** uToken2.decimals()));
 176 |     |         uToken2.mint(address(BOB), USER_TOKENS * (10 ** uToken2.decimals()));
 177 |     |         uToken3.mint(address(ALICE), USER_TOKENS * (10 ** uToken3.decimals()));
 178 |     |         uToken3.mint(address(BOB), USER_TOKENS * (10 ** uToken3.decimals()));
 179 |     | 
 180 |     |         // setup user token approvals
 181 |     |         vm.startPrank(ALICE);
 182 |     |         uToken.approve(address(oToken), type(uint256).max);
 183 |     |         uToken2.approve(address(oToken2), type(uint256).max);
 184 |     |         uToken3.approve(address(oToken3), type(uint256).max);
 185 |     |         uToken3.approve(address(oToken4), type(uint256).max);
 186 |     |         vm.stopPrank();
 187 |     | 
 188 |     |         vm.startPrank(BOB);
 189 |     |         uToken.approve(address(oToken), type(uint256).max);
 190 |     |         uToken2.approve(address(oToken2), type(uint256).max);
 191 |     |         uToken3.approve(address(oToken3), type(uint256).max);
 192 |     |         uToken3.approve(address(oToken4), type(uint256).max);
 193 |     |         vm.stopPrank();
 194 |     | 
 195 |     |         // foundry-specific sender setup
 196 |     |         targetSender(ALICE);
 197 |     |         targetSender(BOB);
 198 |     | 
 199 |     |         // foundry-specific fuzz targeting
 200 |     |         targetContract(address(this));
 201 |     | 
 202 |     |         bytes4[] memory selectors = new bytes4[](13);
 203 |     |         selectors[0]  = this.enterIsolatedMarket.selector;
 204 |     |         selectors[1]  = this.enterMarkets.selector;
 205 |     |         selectors[2]  = this.exitMarket.selector;
 206 |     |         selectors[3]  = this.clearMarkets.selector;
 207 |     |         selectors[4]  = this.enterMode.selector;
 208 |     |         selectors[5]  = this.exitMode.selector;
 209 |     |         selectors[6]  = this.borrow.selector;
 210 |     |         selectors[7]  = this.repay.selector;
 211 |     |         selectors[8]  = this.liquidate.selector;
 212 |     |         selectors[9]  = this.deposit.selector;
 213 |     |         selectors[10] = this.withdraw.selector;
 214 |     |         selectors[11] = this.transfer.selector;
 215 |     |         selectors[12] = this.updateOraclePrice.selector;
 216 |     |         
 217 |     |         targetSelector(FuzzSelector({
 218 |     |             addr: address(this),
 219 |     |             selectors: selectors
 220 |     |         }));
 221 |     |     }
 222 |     | 
 223 |     |     /* DEFINE INVARIANTS HERE */
 224 |     |     //
 225 |     |     // changed invariants to use assertions for Foundry
 226 |     |     //
 227 |     |     // INVARIANT 1) tranche should never reach a state where:
 228 |     |     // `tranche.totalBorrowShare > 0 && tranche.totalBorrowAmount == 0` or
 229 |     |     // `tranche.totalDepositShare > 0 && tranche.totalDepositAmount == 0`
 230 |     |     //
 231 |     |     // if these states are reached borrows/deposits in that tranche will permanently
 232 |     |     // be bricked. Either both == 0 or both > 0
 233 |     |     function _getTranchBorrowDepositShareIntegrity(address _token, uint8 _tranche) private view returns(bool) {
 234 |     |         OmniToken.OmniTokenTranche memory trancheData = _getOmniTokenTranche(_token, _tranche);
 235 |     |         
 236 |     |         return ((trancheData.totalBorrowShare  == 0 && trancheData.totalBorrowAmount  == 0) ||
 237 |     |                 (trancheData.totalBorrowShare  >  0 && trancheData.totalBorrowAmount  >  0)) &&
 238 |     |                ((trancheData.totalDepositShare == 0 && trancheData.totalDepositAmount == 0) ||
 239 |     |                 (trancheData.totalDepositShare >  0 && trancheData.totalDepositAmount >  0));
 240 |     |     }
 241 |     |     function invariant_tranche_borrow_deposit_shares_integrity() public view {
 242 |     |         assert(_getTranchBorrowDepositShareIntegrity(address(oToken),  0) &&
 243 |     |                _getTranchBorrowDepositShareIntegrity(address(oToken),  1) &&
 244 |     |                _getTranchBorrowDepositShareIntegrity(address(oToken2), 0) &&
 245 |     |                _getTranchBorrowDepositShareIntegrity(address(oToken2), 1));
 246 |     |     }
 247 |     | 
 248 |     |     // INVARIANT 2) each subaccount may only enter max 1 isolated market at the same time
 249 |     |     function _inMoreThanOneIsolatedMarket(address account) private view returns(bool) {
 250 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 251 |     |             bytes32 accountId = account.toAccount(subId);
 252 |     | 
 253 |     |             if(ghost_subAccount[accountId].numEnteredIsolatedMarkets >= 2) return true;
 254 |     |         }
 255 |     | 
 256 |     |         return false;
 257 |     |     }
 258 |     |     function invariant_subaccount_one_isolated_market() public view {
 259 |     |         assert(!_inMoreThanOneIsolatedMarket(ALICE) &&
 260 |     |                !_inMoreThanOneIsolatedMarket(BOB));
 261 |     |     }
 262 |     | 
 263 |     | 
 264 |     |     // INVARIANT 3) each subaccount many only enter max 1 mode at the same time
 265 |     |     function _inMoreThanOneMode(address account) private view returns(bool) {
 266 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 267 |     |             bytes32 accountId = account.toAccount(subId);
 268 |     | 
 269 |     |             if(ghost_subAccount[accountId].numEnteredModes >= 2) return true;
 270 |     |         }
 271 |     | 
 272 |     |         return false;
 273 |     |     }
 274 |     |     function invariant_subaccount_one_mode() public view {
 275 |     |         assert(!_inMoreThanOneMode(ALICE) &&
 276 |     |                !_inMoreThanOneMode(BOB));
 277 |     |     }
 278 |     | 
 279 |     | 
 280 |     |     // INVARIANT 4) subaccount can't enter isolated collateral market with active borrows
 281 |     |     function _hasEnteredIsolatedMarketWithActiveBorrows(address account) private view returns(bool) {
 282 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 283 |     |             bytes32 accountId = account.toAccount(subId);
 284 |     | 
 285 |     |             if(ghost_subAccount[accountId].enteredIsolatedMarketWithActiveBorrows) return true;
 286 |     |         }
 287 |     | 
 288 |     |         return false;
 289 |     |     }
 290 |     |     function invariant_cant_enter_isolated_market_with_active_borrows() public view {
 291 |     |         assert(!_hasEnteredIsolatedMarketWithActiveBorrows(ALICE) &&
 292 |     |                !_hasEnteredIsolatedMarketWithActiveBorrows(BOB));
 293 |     |     }
 294 |     | 
 295 |     | 
 296 |     |     // INVARIANT 5) subaccount can't exit market or mode with active borrows
 297 |     |     function _hasExitedMarketOrModeWithActiveBorrows(address account) private view returns(bool) {
 298 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 299 |     |             bytes32 accountId = account.toAccount(subId);
 300 |     | 
 301 |     |             if(ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows) return true;
 302 |     |         }
 303 |     | 
 304 |     |         return false;
 305 |     |     }
 306 |     |     function invariant_cant_exit_market_or_mode_with_active_borrows() public view {
 307 |     |         assert(!_hasExitedMarketOrModeWithActiveBorrows(ALICE) &&
 308 |     |                !_hasExitedMarketOrModeWithActiveBorrows(BOB));
 309 |     |     }
 310 |     | 
 311 |     | 
 312 |     |     // INVARIANT 6) subaccount can't enter a mode when it has already entered a market
 313 |     |     function _hasEnteredModeWithEnteredMarkets(address account) private view returns(bool) {
 314 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 315 |     |             bytes32 accountId = account.toAccount(subId);
 316 |     | 
 317 |     |             if(ghost_subAccount[accountId].enteredModeWithEnteredMarkets) return true;
 318 |     |         }
 319 |     | 
 320 |     |         return false;
 321 |     |     }
 322 |     |     function invariant_cant_enter_mode_with_entered_markets() public view {
 323 |     |         assert(!_hasEnteredModeWithEnteredMarkets(ALICE) &&
 324 |     |                !_hasEnteredModeWithEnteredMarkets(BOB));
 325 |     |     }
 326 |     | 
 327 |     | 
 328 |     |     // INVARIANT 7) subaccount can't enter an expired market or mode
 329 |     |     function _hasEnteredExpiredMarketOrMode(address account) private view returns(bool) {
 330 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 331 |     |             bytes32 accountId = account.toAccount(subId);
 332 |     | 
 333 |     |             if(ghost_subAccount[accountId].enteredExpiredMarketOrMode) return true;
 334 |     |         }
 335 |     | 
 336 |     |         return false;
 337 |     |     }
 338 |     |     function invariant_cant_enter_expired_market_or_mode() public view {
 339 |     |         assert(!_hasEnteredExpiredMarketOrMode(ALICE) &&
 340 |     |                !_hasEnteredExpiredMarketOrMode(BOB));
 341 |     |     }
 342 |     | 
 343 |     |     
 344 |     |     // INVARIANT 8) subaccount must have entered market/mode to take a loan
 345 |     |     function _hasLoanWithoutEnteringMarketOrMode(address account) private view returns(bool) {
 346 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 347 |     |             bytes32 accountId = account.toAccount(subId);
 348 |     | 
 349 |     |             if(_hasActiveBorrows(accountId) && 
 350 |     |                ghost_subAccount[accountId].numEnteredModes   == 0 &&
 351 |     |                ghost_subAccount[accountId].numEnteredMarkets == 0) return true;
 352 |     |         }
 353 |     | 
 354 |     |         return false;
 355 |     |     }
 356 |     |     function invariant_cant_borrow_without_entering_market_or_mode() public view {
 357 |     |         assert(!_hasLoanWithoutEnteringMarketOrMode(ALICE) &&
 358 |     |                !_hasLoanWithoutEnteringMarketOrMode(BOB));
 359 |     |     }
 360 |     | 
 361 |     |     
 362 |     |     // INVARIANT 9) subaccount should receive shares when making a deposit
 363 |     |     // Medusa is able to break this invariant when the fuzzer does small deposits 
 364 |     |     // due to a rounding-down-to-zero precision loss at:
 365 |     |     // https://github.com/beta-finance/Omni-Protocol/blob/main/src/OmniToken.sol#L172
 366 |     |     // Foundry is unable to break it
 367 |     |     function _hasDepositWhichReceivedZeroShares(address account) private view returns(bool) {
 368 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 369 |     |             bytes32 accountId = account.toAccount(subId);
 370 |     | 
 371 |     |             if(ghost_subAccount[accountId].depositReceivedZeroShares) return true;
 372 |     |         }
 373 |     | 
 374 |     |         return false;
 375 |     |     }
 376 |     |     function invariant_deposit_receives_shares() public view {
 377 |     |         assert(!_hasDepositWhichReceivedZeroShares(ALICE) &&
 378 |     |                !_hasDepositWhichReceivedZeroShares(BOB));
 379 |     |     }
 380 |     | 
 381 |     | 
 382 |     |     // INVARIANT 10) subaccount should receive amount when making a deposit
 383 |     |     function _hasDepositWhichReceivedIncorrectAmount(address account) private view returns(bool) {
 384 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 385 |     |             bytes32 accountId = account.toAccount(subId);
 386 |     | 
 387 |     |             if(ghost_subAccount[accountId].depositReceivedIncorrectAmount) return true;
 388 |     |         }
 389 |     | 
 390 |     |         return false;
 391 |     |     }
 392 |     |     function invariant_deposit_receives_correct_amount() public view {
 393 |     |         assert(!_hasDepositWhichReceivedIncorrectAmount(ALICE) &&
 394 |     |                !_hasDepositWhichReceivedIncorrectAmount(BOB));
 395 |     |     }
 396 |     | 
 397 |     | 
 398 |     |     // INVARIANT 11) subaccount should have shares decreased when withdrawing
 399 |     |     function _hasWithdrawWhichDecreasedZeroShares(address account) private view returns(bool) {
 400 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 401 |     |             bytes32 accountId = account.toAccount(subId);
 402 |     | 
 403 |     |             if(ghost_subAccount[accountId].withdrawDecreasedZeroShares) return true;
 404 |     |         }
 405 |     | 
 406 |     |         return false;
 407 |     |     }
 408 |     |     function invariant_withdraw_decreases_shares() public view {
 409 |     |         assert(!_hasWithdrawWhichDecreasedZeroShares(ALICE) &&
 410 |     |                !_hasWithdrawWhichDecreasedZeroShares(BOB));
 411 |     |     }
 412 |     |     
 413 |     | 
 414 |     |     // INVARIANT 12) subaccount should receive correct amount when withdrawing
 415 |     |     function _hasWithdrawWhichReceivedIncorrectAmount(address account) private view returns(bool) {
 416 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 417 |     |             bytes32 accountId = account.toAccount(subId);
 418 |     | 
 419 |     |             if(ghost_subAccount[accountId].withdrawReceivedIncorrectAmount) return true;
 420 |     |         }
 421 |     | 
 422 |     |         return false;
 423 |     |     }
 424 |     |     function invariant_withdraw_receives_correct_amount() public view {
 425 |     |         assert(!_hasWithdrawWhichReceivedIncorrectAmount(ALICE) &&
 426 |     |                !_hasWithdrawWhichReceivedIncorrectAmount(BOB));
 427 |     |     }
 428 |     |     
 429 |     | 
 430 |     |     // INVARIANT 13) repay should decrease borrow shares
 431 |     |     // Medusa is able to break this invariant when the fuzzer does small repayments
 432 |     |     // due to a rounding-down-to-zero precision loss at:
 433 |     |     // https://github.com/beta-finance/Omni-Protocol/blob/main/src/OmniToken.sol#L265
 434 |     |     // Foundry is unable to break it
 435 |     |     function _hasRepayWhichDidntDecreaseBorrowShares(address account) private view returns(bool) {
 436 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 437 |     |             bytes32 accountId = account.toAccount(subId);
 438 |     | 
 439 |     |             if(ghost_subAccount[accountId].repayDidntDecreaseBorrowShares) return true;
 440 |     |         }
 441 |     | 
 442 |     |         return false;
 443 |     |     }
 444 |     |     function invariant_repay_decreases_borrow_shares() public view {
 445 |     |         assert(!_hasRepayWhichDidntDecreaseBorrowShares(ALICE) &&
 446 |     |                !_hasRepayWhichDidntDecreaseBorrowShares(BOB));
 447 |     |     }
 448 |     | 
 449 |     | 
 450 |     |     // INVARIANT 14) repay should decrease borrow amount by correct amount
 451 |     |     function _hasRepayWhichIncorrectlyDecreasedBorrowAmount(address account) private view returns(bool) {
 452 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 453 |     |             bytes32 accountId = account.toAccount(subId);
 454 |     | 
 455 |     |             if(ghost_subAccount[accountId].repayIncorrectBorrowAmountDecrease) return true;
 456 |     |         }
 457 |     | 
 458 |     |         return false;
 459 |     |     }
 460 |     |     function invariant_repay_correctly_decreases_borrow_amount() public view {
 461 |     |         assert(!_hasRepayWhichIncorrectlyDecreasedBorrowAmount(ALICE) &&
 462 |     |                !_hasRepayWhichIncorrectlyDecreasedBorrowAmount(BOB));
 463 |     |     }
 464 |     | 
 465 |     | 
 466 |     |     // INVARIANT 15) borrow should increase borrow shares
 467 |     |     function _hasBorrowWhichDidntIncreaseBorrowShares(address account) private view returns(bool) {
 468 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 469 |     |             bytes32 accountId = account.toAccount(subId);
 470 |     | 
 471 |     |             if(ghost_subAccount[accountId].borrowDidntIncreaseBorrowShares) return true;
 472 |     |         }
 473 |     | 
 474 |     |         return false;
 475 |     |     }
 476 |     |     function invariant_borrow_increases_borrow_shares() public view {
 477 |     |         assert(!_hasBorrowWhichDidntIncreaseBorrowShares(ALICE) &&
 478 |     |                !_hasBorrowWhichDidntIncreaseBorrowShares(BOB));
 479 |     |     }
 480 |     | 
 481 |     | 
 482 |     |     // INVARIANT 16) borrow should increase borrow amount by correct amount
 483 |     |     function _hasBorrowWhichIncorrectlyIncreasedBorrowAmount(address account) private view returns(bool) {
 484 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 485 |     |             bytes32 accountId = account.toAccount(subId);
 486 |     | 
 487 |     |             if(ghost_subAccount[accountId].borrowIncorrectBorrowAmountIncrease) return true;
 488 |     |         }
 489 |     | 
 490 |     |         return false;
 491 |     |     }
 492 |     |     function invariant_borrow_correctly_increases_borrow_amount() public view {
 493 |     |         assert(!_hasRepayWhichIncorrectlyDecreasedBorrowAmount(ALICE) &&
 494 |     |                !_hasRepayWhichIncorrectlyDecreasedBorrowAmount(BOB));
 495 |     |     }
 496 |     | 
 497 |     | 
 498 |     |     /* OmniPool HANDLER FUNCTIONS */
 499 |     |     //
 500 |     |     // Handlers use input filtering to reduce but *not* to completely
 501 |     |     // eliminate invalid runs; there is still an element of randomness
 502 |     |     // where some inputs will be invalid
 503 |     |     function enterIsolatedMarket(uint96 _subId, uint8 _market) public {
 504 |     |         _subId         = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 505 |     |         address market = _getMarketIncIsolated(_market);
 506 |     | 
 507 |     |         vm.prank(msg.sender);
 508 |     |         pool.enterIsolatedMarket(_subId, market);
 509 |     | 
 510 |     |         // update ghost variables
 511 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 512 |     | 
 513 |     |         ghost_subAccount[accountId].numEnteredMarkets++;
 514 |     | 
 515 |     |         if(_isIsolatedMarket(market)) {
 516 |     |             ghost_subAccount[accountId].numEnteredIsolatedMarkets++;
 517 |     | 
 518 |     |             if(_hasActiveBorrows(accountId)) {
 519 |     |                 ghost_subAccount[accountId].enteredIsolatedMarketWithActiveBorrows = true;
 520 |     |             }
 521 |     |         }
 522 |     | 
 523 |     |         if(_marketExpired(market)) {
 524 |     |             ghost_subAccount[accountId].enteredExpiredMarketOrMode = true;
 525 |     |         }
 526 |     |     }
 527 |     | 
 528 |     |     function enterMarkets(uint96 _subId, uint8 _market) public {
 529 |     |         _subId         = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 530 |     |         address market = _getMarketIncIsolated(_market);
 531 |     | 
 532 |     |         address[] memory markets = new address[](1);
 533 |     |         markets[0] = market;
 534 |     | 
 535 |     |         vm.prank(msg.sender);
 536 |     |         pool.enterMarkets(_subId, markets);
 537 |     | 
 538 |     |         // update ghost variables
 539 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 540 |     | 
 541 |     |         ghost_subAccount[accountId].numEnteredMarkets++;
 542 |     | 
 543 |     |         if(_isIsolatedMarket(market)) {
 544 |     |             ghost_subAccount[accountId].numEnteredIsolatedMarkets++;
 545 |     | 
 546 |     |             if(_hasActiveBorrows(accountId)) {
 547 |     |                 ghost_subAccount[accountId].enteredIsolatedMarketWithActiveBorrows = true;
 548 |     |             }
 549 |     |         }
 550 |     | 
 551 |     |         if(_marketExpired(market)) {
 552 |     |             ghost_subAccount[accountId].enteredExpiredMarketOrMode = true;
 553 |     |         }
 554 |     |     }
 555 |     | 
 556 |     |     function exitMarket(uint96 _subId, uint8 _market) public {
 557 |     |         _subId         = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 558 |     |         address market = _getMarketIncIsolated(_market);
 559 |     | 
 560 |     |         vm.prank(msg.sender);
 561 |     |         pool.exitMarket(_subId, market);
 562 |     | 
 563 |     |         // update ghost variables
 564 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 565 |     | 
 566 |     |         ghost_subAccount[accountId].numEnteredMarkets--;
 567 |     | 
 568 |     |         if(_hasActiveBorrows(accountId)) {
 569 |     |             ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows = true;
 570 |     |         }
 571 |     | 
 572 |     |         if(_isIsolatedMarket(market)) {
 573 |     |             ghost_subAccount[accountId].numEnteredIsolatedMarkets--;
 574 |     |         }
 575 |     |     }
 576 |     | 
 577 |     |     function clearMarkets(uint96 _subId) public {
 578 |     |         _subId = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 579 |     | 
 580 |     |         vm.prank(msg.sender);
 581 |     |         pool.clearMarkets(_subId);
 582 |     | 
 583 |     |         // update ghost variables
 584 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 585 |     | 
 586 |     |         ghost_subAccount[accountId].numEnteredMarkets         = 0;
 587 |     |         ghost_subAccount[accountId].numEnteredIsolatedMarkets = 0;
 588 |     | 
 589 |     |         if(_hasActiveBorrows(accountId)) {
 590 |     |             ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows = true;
 591 |     |         }
 592 |     |     }
 593 |     | 
 594 |     |     function enterMode(uint96 _subId, uint8 _modeId) public {
 595 |     |         _subId  = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 596 |     |         _modeId = _clampBetweenU8(_modeId, MIN_MODE_ID, MAX_MODE_ID);
 597 |     | 
 598 |     |         vm.prank(msg.sender);
 599 |     |         pool.enterMode(_subId, _modeId);
 600 |     | 
 601 |     |         // update ghost variables
 602 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 603 |     | 
 604 |     |         ghost_subAccount[accountId].numEnteredModes++;
 605 |     | 
 606 |     |         if(ghost_subAccount[accountId].numEnteredMarkets > 0) {
 607 |     |             ghost_subAccount[accountId].enteredModeWithEnteredMarkets = true;
 608 |     |         }
 609 |     | 
 610 |     |         if(_modeExpired(_modeId)) {
 611 |     |             ghost_subAccount[accountId].enteredExpiredMarketOrMode = true;
 612 |     |         }
 613 |     |     }
 614 |     | 
 615 |     |     function exitMode(uint96 _subId) public {
 616 |     |         _subId = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 617 |     | 
 618 |     |         vm.prank(msg.sender);
 619 |     |         pool.exitMode(_subId);
 620 |     | 
 621 |     |         // update ghost variables
 622 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 623 |     | 
 624 |     |         ghost_subAccount[accountId].numEnteredModes--;
 625 |     | 
 626 |     |         if(_hasActiveBorrows(accountId)) {
 627 |     |             ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows = true;
 628 |     |         }
 629 |     |     }
 630 |     | 
 631 |     |     function borrow(uint96 _subId, uint8 _market, uint256 _amount) public {
 632 |     |         _subId         = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 633 |     |         address market = _getMarketExcIsolated(_market);
 634 |     | 
 635 |     |         // save borrow amount & shares before calling borrow, used in invariant checks
 636 |     |         OmniToken token   = OmniToken(market);
 637 |     | 
 638 |     |         // accrue() first so it cant change storage during the next txn 
 639 |     |         token.accrue();
 640 |     | 
 641 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 642 |     |         uint8 trancheId   = pool.getAccountBorrowTier(_getAccountInfo(accountId));
 643 |     | 
 644 |     |         ( , uint256 totalBorrowAmountPrev, , uint256 totalBorrowSharePrev) = token.tranches(trancheId);
 645 |     | 
 646 |     |         vm.prank(msg.sender);
 647 |     |         pool.borrow(_subId, market, _amount);
 648 |     | 
 649 |     |         ( , uint256 totalBorrowAmountAfter, , uint256 totalBorrowShareAfter) = token.tranches(trancheId);
 650 |     | 
 651 |     |         // update ghost variables
 652 |     |         uint256 borrowIncrease = totalBorrowAmountAfter - totalBorrowAmountPrev;
 653 |     | 
 654 |     |         if(_amount > 0) {
 655 |     |             if(borrowIncrease != _amount) {
 656 |     |                 ghost_subAccount[accountId].borrowIncorrectBorrowAmountIncrease = true;
 657 |     |             }
 658 |     | 
 659 |     |             if(totalBorrowShareAfter == totalBorrowSharePrev) {
 660 |     |                 ghost_subAccount[accountId].borrowDidntIncreaseBorrowShares = true;
 661 |     |             }
 662 |     |         }
 663 |     |     }
 664 |     | 
 665 |     |     function repay(uint96 _subId, uint8 _market, uint256 _amount) public {
 666 |     |         _subId         = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 667 |     |         address market = _getMarketExcIsolated(_market);
 668 |     | 
 669 |     |         // save borrow amount & shares before calling repay, used in invariant checks
 670 |     |         OmniToken token   = OmniToken(market);
 671 |     | 
 672 |     |         // accrue() first so it cant change storage during the next txn 
 673 |     |         token.accrue();
 674 |     | 
 675 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 676 |     |         uint8 trancheId   = pool.getAccountBorrowTier(_getAccountInfo(accountId));
 677 |     | 
 678 |     |         ( , uint256 totalBorrowAmountPrev, , uint256 totalBorrowSharePrev) = token.tranches(trancheId);
 679 |     | 
 680 |     |         vm.prank(msg.sender);
 681 |     |         pool.repay(_subId, market, _amount);
 682 |     | 
 683 |     |         ( , uint256 totalBorrowAmountAfter, , uint256 totalBorrowShareAfter) = token.tranches(trancheId);
 684 |     | 
 685 |     |         // update ghost variables
 686 |     |         uint256 borrowReduction = totalBorrowAmountPrev-totalBorrowAmountAfter;
 687 |     | 
 688 |     |         if(_amount > 0) { 
 689 |     |             if(borrowReduction != _amount) {
 690 |     |                 ghost_subAccount[accountId].repayIncorrectBorrowAmountDecrease = true;
 691 |     |             }
 692 |     | 
 693 |     |             if(totalBorrowShareAfter == totalBorrowSharePrev) {
 694 |     |                 ghost_subAccount[accountId].repayDidntDecreaseBorrowShares = true;
 695 |     |             }
 696 |     |         }
 697 |     |     }
 698 |     | 
 699 |     |     function liquidate(uint96 _targetSubId, uint96 _liquidatorSubId, uint8 _targetAccount, 
 700 |     |                        uint8 _liquidateMarket, uint8 _collateralMarket, uint256 _amount, 
 701 |     |                        bool giveTokens) public {
 702 |     |         _targetSubId      = _clampBetweenU96(_targetSubId, 0, MAX_SUB_ID);
 703 |     |         _liquidatorSubId  = _clampBetweenU96(_liquidatorSubId, 0, MAX_SUB_ID);
 704 |     |         address liqMarket = _getMarketExcIsolated(_liquidateMarket);
 705 |     |         address colMarket = _getMarketIncIsolated(_collateralMarket);
 706 |     | 
 707 |     |         bytes32 targetAccountId = (_getActor(_targetAccount)).toAccount(_targetSubId);
 708 |     |         bytes32 liqAccountId    = msg.sender.toAccount(_liquidatorSubId);
 709 |     | 
 710 |     |         // introduce some randomness into whether the test ensures account
 711 |     |         // has sufficent tokens to liquidate or not. This allows some invalid runs through
 712 |     |         // where account won't have enough tokens to liquidate but also helps ensure
 713 |     |         // there will be some valid liquidations
 714 |     |         if(giveTokens) {
 715 |     |             (MockERC20((OmniToken(liqMarket)).underlying())).mint(msg.sender, _amount);
 716 |     |         }
 717 |     | 
 718 |     |         vm.prank(msg.sender);
 719 |     |         pool.liquidate(
 720 |     |             IOmniPool.LiquidationParams(targetAccountId, liqAccountId, liqMarket, colMarket, _amount));
 721 |     | 
 722 |     |         // no prank here, has to be called by admin. If it fails don't worry, just
 723 |     |         // trying to call it after liquidation to get some more coverage if liquidation
 724 |     |         // totally liquidates a user. Not fully working yet
 725 |     |         try pool.socializeLoss(liqMarket, targetAccountId) {} catch {}
 726 |     |     }
 727 |     | 
 728 |     | 
 729 |     |     /* OmniToken HANDLER FUNCTIONS */
 730 |     |     //
 731 |     |     function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount, 
 732 |     |                      uint8 _token, bool giveTokens) public {
 733 |     |         _subId          = _clampBetweenU96(_subId   , 0, MAX_SUB_ID);
 734 |     |         _trancheId      = _clampBetweenU8(_trancheId, 0, MAX_TRANCH_ID);
 735 |     |         OmniToken token = OmniToken(_getMarketIncIsolated(_token));
 736 |     | 
 737 |     |         // introduce some randomness into whether the test ensures account
 738 |     |         // has sufficent tokens to deposit or not. This allows some invalid
 739 |     |         // runs through where account won't have enough tokens to deposit.
 740 |     |         // Accounts can also have their tokens replenished this way
 741 |     |         if(giveTokens) {
 742 |     |             (MockERC20(token.underlying())).mint(msg.sender, _amount);
 743 |     |         }
 744 |     | 
 745 |     |         // accrue() first so it cant change storage during the next txn 
 746 |     |         token.accrue();
 747 |     | 
 748 |     |         // save deposit amount & shares before calling deposit, used in invariant checks
 749 |     |         (uint256 totalDepositAmountPrev, , uint256 totalDepositSharePrev, ) = token.tranches(_trancheId);
 750 |     | 
 751 |     |         vm.prank(msg.sender);
 752 |     |         token.deposit(_subId, _trancheId, _amount);
 753 |     | 
 754 |     |         // update ghost variables
 755 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 756 |     | 
 757 |     |         (uint256 totalDepositAmountAfter, , uint256 totalDepositShareAfter, ) = token.tranches(_trancheId);
 758 |     | 
 759 |     |         if(_amount > 0 && totalDepositShareAfter == totalDepositSharePrev) {
 760 |     |             ghost_subAccount[accountId].depositReceivedZeroShares = true;
 761 |     |         }
 762 |     | 
 763 |     |         if(totalDepositAmountAfter-totalDepositAmountPrev != _amount) {
 764 |     |             ghost_subAccount[accountId].depositReceivedIncorrectAmount = true;
 765 |     |         }
 766 |     |     }
 767 |     | 
 768 |     |     function withdraw(uint96 _subId, uint8 _trancheId, 
 769 |     |                       uint256 _share, uint8 _token) public {
 770 |     |         _subId          = _clampBetweenU96(_subId   , 0, MAX_SUB_ID);
 771 |     |         _trancheId      = _clampBetweenU8(_trancheId, 0, MAX_TRANCH_ID);
 772 |     |         OmniToken token = OmniToken(_getMarketIncIsolated(_token)); 
 773 |     | 
 774 |     |         // accrue() first so it cant change storage during the next txn 
 775 |     |         token.accrue();
 776 |     | 
 777 |     |         // save deposit amount & shares before calling withdraw, used in invariant checks
 778 |     |         (uint256 totalDepositAmountPrev, , uint256 totalDepositSharePrev, ) = token.tranches(_trancheId);
 779 |     | 
 780 |     |         vm.prank(msg.sender);
 781 |     |         uint256 amount = token.withdraw(_subId, _trancheId, _share);
 782 |     | 
 783 |     |         // update ghost variables
 784 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 785 |     | 
 786 |     |         (uint256 totalDepositAmountAfter, , uint256 totalDepositShareAfter, ) = token.tranches(_trancheId);
 787 |     | 
 788 |     |         uint256 actualDifference = totalDepositAmountPrev-totalDepositAmountAfter;
 789 |     | 
 790 |     |         if(_share > 0 && (actualDifference == 0 || actualDifference != amount)) {
 791 |     |             ghost_subAccount[accountId].withdrawReceivedIncorrectAmount = true;
 792 |     |         }
 793 |     | 
 794 |     |         if(_share > 0 && totalDepositShareAfter == totalDepositSharePrev) {
 795 |     |             ghost_subAccount[accountId].withdrawDecreasedZeroShares = true;
 796 |     |         }
 797 |     |     }
 798 |     | 
 799 |     |     function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, 
 800 |     |                       uint256 _shares, uint8 _token) public {
 801 |     |         _subId           = _clampBetweenU96(_subId   , 0, MAX_SUB_ID);
 802 |     |         _trancheId       = _clampBetweenU8(_trancheId, 0, MAX_TRANCH_ID);
 803 |     |         IOmniToken token = IOmniToken(_getMarketIncIsolated(_token)); 
 804 |     | 
 805 |     |         vm.prank(msg.sender);
 806 |     |         token.transfer(_subId, _to, _trancheId, _shares);
 807 |     |     }
 808 |     | 
 809 |     | 
 810 |     |     /* Price Oracle UTILITY FUNCTION */
 811 |     |     //
 812 |     |     // function which changes oracle pricing of underlying tokens
 813 |     |     // will be called randomly by fuzzer. This enables positions to become
 814 |     |     // subject to liquidation enabling greater coverage
 815 |     |     function updateOraclePrice(uint8 _priceIndex, uint8 _percentMove, 
 816 |     |                                bool _increasePrice) public {
 817 |     |         _priceIndex  = _clampBetweenU8(_priceIndex, 0, PRICES_COUNT-1);
 818 |     | 
 819 |     |         // price can move in a set % range
 820 |     |         _percentMove = _clampBetweenU8(_percentMove, MIN_PRICE_MOVE, MAX_PRICE_MOVE);
 821 |     | 
 822 |     |         // calculate price delta
 823 |     |         uint256 priceDelta = prices[_priceIndex] * _percentMove / 100;
 824 |     | 
 825 |     |         // apply direction
 826 |     |         if(_increasePrice) prices[_priceIndex] += priceDelta;
 827 |     |         else prices[_priceIndex] -= priceDelta;
 828 |     | 
 829 |     |         // save new pricing
 830 |     |         oracle.setPrices(underlyings, prices);
 831 |     |     }
 832 |     | 
 833 |     | 
 834 |     |     /* Helper functions to fetch data used in invariant checks */
 835 |     |     // 
 836 |     |     function _getOmniTokenTranche(address _market, uint8 _tranche) private view
 837 |     |         returns (OmniToken.OmniTokenTranche memory)
 838 |     |     {
 839 |     |         (uint256 totalDeposit, uint256 totalBorrow, uint256 totalDepositShares, uint256 totalBorrowShares) =
 840 |     |             OmniToken(_market).tranches(_tranche);
 841 |     |         return OmniToken.OmniTokenTranche(totalDeposit, totalBorrow, totalDepositShares, totalBorrowShares);
 842 |     |     }
 843 |     |     function _getAccountInfo(bytes32 account) internal view returns (IOmniPool.AccountInfo memory) {
 844 |     |         (uint8 modeId, address isolatedCollateralMarket, uint32 softThreshold) = pool.accountInfos(account);
 845 |     |         return IOmniPool.AccountInfo(modeId, isolatedCollateralMarket, softThreshold);
 846 |     |     }
 847 |     |     function _marketExpired(address _market) private view returns(bool) {
 848 |     |         ( , , uint32 expirationTimestamp, , ) = pool.marketConfigurations(_market);
 849 |     | 
 850 |     |         return block.timestamp >= expirationTimestamp;
 851 |     |     }
 852 |     |     function _modeExpired(uint8 _modeId) private view returns(bool) {
 853 |     |         ( , , , uint32 expirationTimestamp ) = pool.modeConfigurations(_modeId);
 854 |     | 
 855 |     |         return block.timestamp >= expirationTimestamp;
 856 |     |     }
 857 |     |     function _hasActiveBorrows(bytes32 accountId) private view returns(bool) {
 858 |     | 
 859 |     |         return (oToken.getAccountBorrowInUnderlying(accountId,  0) + 
 860 |     |                 oToken.getAccountBorrowInUnderlying(accountId,  1) +
 861 |     |                 oToken2.getAccountBorrowInUnderlying(accountId, 0) + 
 862 |     |                 oToken2.getAccountBorrowInUnderlying(accountId, 1)) > 0;
 863 |     |     }
 864 |     | 
 865 |     | 
 866 |     |     /* Helper functions to choose between valid entities to interact with */
 867 |     |     // 
 868 |     |     function _getMarketExcIsolated(uint8 _market) private view returns (address marketOut) {
 869 |     |         _market = _clampBetweenU8(_market, 0, 1);
 870 |     |         if(_market == 0)      marketOut = address(oToken);
 871 |     |         else if(_market == 1) marketOut = address(oToken2);
 872 |     |     }
 873 |     |     function _getMarketIncIsolated(uint8 _market) private view returns (address marketOut) {
 874 |     |         _market = _clampBetweenU8(_market, 0, 3);
 875 |     |         if(_market == 0)      marketOut = address(oToken);
 876 |     |         else if(_market == 1) marketOut = address(oToken2);
 877 |     |         else if(_market == 2) marketOut = address(oToken3);
 878 |     |         else if(_market == 3) marketOut = address(oToken4);
 879 |     |     }
 880 |     |     function _getMarketOnlyIsolated(uint8 _market) private view returns (address marketOut) {
 881 |     |         _market = _clampBetweenU8(_market, 0, 1);
 882 |     |         if(_market == 0)      marketOut = address(oToken3);
 883 |     |         else if(_market == 1) marketOut = address(oToken4);
 884 |     |     }
 885 |     |     function _getActor(uint8 _actor) private pure returns (address actorOut) {
 886 |     |         _actor = _clampBetweenU8(_actor, 0, 1);
 887 |     |         if(_actor == 0)      actorOut = ALICE;
 888 |     |         else if(_actor == 1) actorOut = BOB;
 889 |     |     }
 890 |     |     function _isIsolatedMarket(address _market) private view returns(bool) {
 891 |     |         if(_market == address(oToken3) || _market == address(oToken4)) return true;
 892 |     |         return false;
 893 |     |     }
 894 |     | 
 895 |     | 
 896 |     |     /* Helper functions for platform-agnostic input restriction */
 897 |     |     // 
 898 |     |     function _clampBetweenU256(uint256 value, uint256 low, uint256 high) private pure returns (uint256) {
 899 |     |         if (value < low || value > high) {
 900 |     |             return (low + (value % (high - low + 1)));
 901 |     |         }
 902 |     |         return value;
 903 |     |     }
 904 |     |     function _clampBetweenU96(uint96 value, uint96 low, uint96 high) private pure returns (uint96) {
 905 |     |         if (value < low || value > high) {
 906 |     |             return (low + (value % (high - low + 1)));
 907 |     |         }
 908 |     |         return value;
 909 |     |     }
 910 |     |     function _clampBetweenU8(uint8 value, uint8 low, uint8 high) private pure returns (uint8) {
 911 |     |         if (value < low || value > high) {
 912 |     |             return (low + (value % (high - low + 1)));
 913 |     |         }
 914 |     |         return value;
 915 |     |     }
 916 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/08-omni-protocol/OmniAdvancedMedusa.t.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.23;
   3 |     | 
   4 |     | import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   5 |     | 
   6 |     | import "../../src/MockERC20.sol";
   7 |     | import "./MockOracle.sol";
   8 |     | import "../../src/08-omni-protocol/IRM.sol";
   9 |     | import "../../src/08-omni-protocol/OmniPool.sol";
  10 |     | import "../../src/08-omni-protocol/OmniToken.sol";
  11 |     | import "../../src/08-omni-protocol/OmniTokenNoBorrow.sol";
  12 |     | import "../../src/08-omni-protocol/interfaces/IOmniToken.sol";
  13 |     | import "../../src/08-omni-protocol/interfaces/IOmniPool.sol";
  14 |     | import "../../src/08-omni-protocol/SubAccount.sol";
  15 |     | 
  16 |     | //
  17 |     | // Medusa & Echidna Fuzzer info:
  18 |     | //
  19 |     | // Medusa is working best, recommend to use it by compiling from
  20 |     | // source @ https://github.com/crytic/medusa/ since the current
  21 |     | // official release is missing some fixes.
  22 |     | //
  23 |     | // configure solc-select to use compiler version:
  24 |     | // solc-select use 0.8.23 
  25 |     | //
  26 |     | // run from base project directory with:
  27 |     | // medusa --config test/08-omni-protocol/OmniAdvancedMedusa.json fuzz
  28 |     | // echidna --config test/08-omni-protocol/OmniAdvancedEchidna.yaml ./ --contract OmniAdvancedMedusa
  29 |     | //
  30 |     | // view html coverage reports:
  31 |     | // test/08-omni-protocol/coverage-medusa-advanced/coverage_report.html
  32 |     | // test/08-omni-protocol/coverage-echidna-advanced/covered.X.html (biggest X = latest run)
  33 |     | //
  34 |     | // in the reports search for OmniPool & OmniToken
  35 |     | // Medusa coverage: OmniPool 78% OmniToken 82% including successful liquidations
  36 |     | // Echidna coverage: not as good, liquidation isn't working
  37 |     | // 
  38 |     | // Using Medusa most of the important user functionality inc liquidation gets executed
  39 |     | //
  40 |     | // 2/16 invariants can be broken; Medusa typically breaks both in 1 run
  41 |     | // within 2 minutes and often much faster, while Echidna sometimes breaks 1 invariant
  42 |     | // within 5 minutes. Foundry is unable to break any invariants within 5 minutes.
  43 |     | //
  44 |     | interface IHevm {
  45 |     |     function prank(address) external;
  46 |     | }
  47 |     | 
  48 |     | contract OmniAdvancedMedusa {
  49 |     |     IHevm hevm = IHevm(address(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D));
  50 |     | 
  51 |     |     using SubAccount for address;
  52 |     | 
  53 |     |     // make these constant to match Echidna & Medusa configs
  54 |     |     address public constant ALICE = address(0x1000000000000000000000000000000000000000);
  55 |     |     address public constant BOB   = address(0x2000000000000000000000000000000000000000);
  56 |     | 
  57 |     |     // used for input restriction during fuzzing
  58 |     |     uint8  public constant MAX_TRANCH_ID  = 1; // only 2 tranches
  59 |     |     uint8  public constant MIN_MODE_ID    = 1;
  60 |     |     uint8  public constant MAX_MODE_ID    = 2;
  61 |     |     uint96 public constant MAX_SUB_ID     = 2;
  62 |     | 
  63 |     |     // used for price oracle
  64 |     |     uint8  public constant PRICES_COUNT   = 3;
  65 |     |     // maximum price move % each time for Oracle assets
  66 |     |     uint8  public constant MIN_PRICE_MOVE = 2;
  67 |     |     uint8  public constant MAX_PRICE_MOVE = 10;
  68 |     | 
  69 |     |     // misc constants
  70 |     |     uint256 public constant USER_TOKENS   = 1_000_000; // multiplied by token decimals
  71 |     |     uint256 public constant BORROW_CAP    = 1_000_000; // multiplied by token decimals
  72 |     | 
  73 |     |     OmniPool pool;
  74 |     |     OmniToken oToken;
  75 |     |     OmniToken oToken2;
  76 |     |     OmniTokenNoBorrow oToken3;
  77 |     |     OmniTokenNoBorrow oToken4;
  78 |     | 
  79 |     |     IRM irm;
  80 |     |     MockERC20 uToken;
  81 |     |     MockERC20 uToken2;
  82 |     |     MockERC20 uToken3;
  83 |     |     MockOracle oracle;
  84 |     | 
  85 |     |     // used to update oracle prices
  86 |     |     address[] underlyings = new address[](PRICES_COUNT);
  87 |     |     uint256[] prices      = new uint256[](PRICES_COUNT);
  88 |     | 
  89 |     |     // ghost variables used to verify invariants
  90 |     |     struct SubAccountGhost {
  91 |     |         uint8 numEnteredIsolatedMarkets;
  92 |     |         uint8 numEnteredMarkets;
  93 |     |         uint8 numEnteredModes;
  94 |     |         bool  enteredIsolatedMarketWithActiveBorrows;
  95 |     |         bool  exitedMarketOrModeWithActiveBorrows;
  96 |     |         bool  enteredModeWithEnteredMarkets;
  97 |     |         bool  enteredExpiredMarketOrMode;
  98 |     |         bool  depositReceivedZeroShares;
  99 |     |         bool  depositReceivedIncorrectAmount;
 100 |     |         bool  withdrawReceivedIncorrectAmount;
 101 |     |         bool  withdrawDecreasedZeroShares;
 102 |     |         bool  repayDidntDecreaseBorrowShares;
 103 |     |         bool  repayIncorrectBorrowAmountDecrease;
 104 |     |         bool  borrowIncorrectBorrowAmountIncrease;
 105 |     |         bool  borrowDidntIncreaseBorrowShares;
 106 |     |     }
 107 |     | 
 108 |     |     mapping(bytes32 accountId => SubAccountGhost) ghost_subAccount;
 109 |     | 
 110 |     |     constructor() {
 111 |     |         // Init contracts
 112 |     |         oracle = new MockOracle();
 113 |     |         irm = new IRM();
 114 |     |         irm.initialize(address(this));
 115 |     |         pool = new OmniPool();
 116 |     |         pool.initialize(address(oracle), address(this), address(this));
 117 |     |         uToken = new MockERC20('USD Coin', 'USDC');
 118 |     |         uToken2 = new MockERC20('Wrapped Ethereum', 'WETH');
 119 |     |         uToken3 = new MockERC20('Shiba Inu', 'SHIB');
 120 |     | 
 121 |     |         // Initial Oracle configs
 122 |     |         underlyings[0] = address(uToken);
 123 |     |         prices[0]      = 1e18; // USDC
 124 |     | 
 125 |     |         underlyings[1] = address(uToken2);
 126 |     |         prices[1]      = 2000e18; // WETH
 127 |     | 
 128 |     |         underlyings[2] = address(uToken3);
 129 |     |         prices[2]      = 0.00001e18; // SHIB
 130 |     |         
 131 |     |         oracle.setPrices(underlyings, prices);
 132 |     | 
 133 |     |         // Configs for oTokens
 134 |     |         IIRM.IRMConfig[] memory configs = new IIRM.IRMConfig[](MAX_TRANCH_ID+1);
 135 |     |         configs[0] = IIRM.IRMConfig(0.9e9, 0.01e9, 0.035e9, 0.635e9);
 136 |     |         configs[1] = IIRM.IRMConfig(0.8e9, 0.03e9, 0.1e9, 1.2e9);
 137 |     |         IIRM.IRMConfig[] memory configs2 = new IIRM.IRMConfig[](MAX_TRANCH_ID+1);
 138 |     |         configs2[0] = IIRM.IRMConfig(0.85e9, 0.02e9, 0.055e9, 0.825e9);
 139 |     |         configs2[1] = IIRM.IRMConfig(0.75e9, 0.04e9, 0.12e9, 1.2e9);
 140 |     |         uint8[] memory tranches = new uint8[](MAX_TRANCH_ID+1);
 141 |     |         tranches[0] = 0;
 142 |     |         tranches[1] = 1;
 143 |     |         uint256[] memory borrowCaps = new uint256[](MAX_TRANCH_ID+1);
 144 |     |         borrowCaps[0] = BORROW_CAP * (10 ** uToken.decimals());
 145 |     |         borrowCaps[1] = BORROW_CAP * (10 ** uToken.decimals());
 146 |     | 
 147 |     |         // Init oTokens
 148 |     |         oToken = new OmniToken();
 149 |     |         oToken.initialize(address(pool), address(uToken), address(irm), borrowCaps);
 150 |     |         oToken2 = new OmniToken();
 151 |     |         oToken2.initialize(address(pool), address(uToken2), address(irm), borrowCaps);
 152 |     |         oToken3 = new OmniTokenNoBorrow();
 153 |     |         oToken3.initialize(address(pool), address(uToken3), borrowCaps[0]);
 154 |     |         oToken4 = new OmniTokenNoBorrow();
 155 |     |         oToken4.initialize(address(pool), address(uToken3), borrowCaps[0]);
 156 |     |         irm.setIRMForMarket(address(oToken), tranches, configs);
 157 |     |         irm.setIRMForMarket(address(oToken2), tranches, configs2);
 158 |     | 
 159 |     |         // Set MarketConfigs for Pool
 160 |     |         // expiration times made lower to trigger more liquidations
 161 |     |         IOmniPool.MarketConfiguration memory mConfig1 =
 162 |     |             IOmniPool.MarketConfiguration(0.9e9, 0.9e9, uint32(block.timestamp + 100 days), 0, false);
 163 |     |         IOmniPool.MarketConfiguration memory mConfig2 =
 164 |     |             IOmniPool.MarketConfiguration(0.8e9, 0.8e9, uint32(block.timestamp + 100 days), 0, false);
 165 |     |         IOmniPool.MarketConfiguration memory mConfig3 =
 166 |     |             IOmniPool.MarketConfiguration(0.4e9, 0, uint32(block.timestamp + 5 days), 1, true);
 167 |     |         IOmniPool.MarketConfiguration memory mConfig4 =
 168 |     |             IOmniPool.MarketConfiguration(0.4e9, 0, uint32(block.timestamp + 2 days), 1, true);
 169 |     |         pool.setMarketConfiguration(address(oToken), mConfig1);
 170 |     |         pool.setMarketConfiguration(address(oToken2), mConfig2);
 171 |     |         pool.setMarketConfiguration(address(oToken3), mConfig3);
 172 |     |         pool.setMarketConfiguration(address(oToken4), mConfig4);
 173 |     | 
 174 |     |         // Set ModeConfigs for Pool
 175 |     |         address[] memory modeMarkets = new address[](2);
 176 |     |         modeMarkets[0] = address(oToken);
 177 |     |         modeMarkets[1] = address(oToken2);
 178 |     |         IOmniPool.ModeConfiguration memory modeStableMode =
 179 |     |             IOmniPool.ModeConfiguration(0.95e9, 0.95e9, 0, uint32(block.timestamp + 7 days), modeMarkets);
 180 |     |         pool.setModeConfiguration(modeStableMode);
 181 |     |         pool.setModeConfiguration(modeStableMode);
 182 |     | 
 183 |     |         // mint user tokens
 184 |     |         uToken.mint(address(ALICE), USER_TOKENS * (10 ** uToken.decimals()));
 185 |     |         uToken.mint(address(BOB), USER_TOKENS * (10 ** uToken.decimals()));
 186 |     |         uToken2.mint(address(ALICE), USER_TOKENS * (10 ** uToken2.decimals()));
 187 |     |         uToken2.mint(address(BOB), USER_TOKENS * (10 ** uToken2.decimals()));
 188 |     |         uToken3.mint(address(ALICE), USER_TOKENS * (10 ** uToken3.decimals()));
 189 |     |         uToken3.mint(address(BOB), USER_TOKENS * (10 ** uToken3.decimals()));
 190 |     | 
 191 |     |         // setup user token approvals
 192 |     |         hevm.prank(ALICE);
 193 |     |         uToken.approve(address(oToken), type(uint256).max);
 194 |     |         hevm.prank(ALICE);
 195 |     |         uToken2.approve(address(oToken2), type(uint256).max);
 196 |     |         hevm.prank(ALICE);
 197 |     |         uToken3.approve(address(oToken3), type(uint256).max);
 198 |     |         hevm.prank(ALICE);
 199 |     |         uToken3.approve(address(oToken4), type(uint256).max);
 200 |     | 
 201 |     |         hevm.prank(BOB);
 202 |     |         uToken.approve(address(oToken), type(uint256).max);
 203 |     |         hevm.prank(BOB);
 204 |     |         uToken2.approve(address(oToken2), type(uint256).max);
 205 |     |         hevm.prank(BOB);
 206 |     |         uToken3.approve(address(oToken3), type(uint256).max);
 207 |     |         hevm.prank(BOB);
 208 |     |         uToken3.approve(address(oToken4), type(uint256).max);
 209 |     |     }
 210 |     | 
 211 |     |     /* DEFINE INVARIANTS HERE */
 212 |     |     //
 213 |     |     // INVARIANT 1) tranche should never reach a state where:
 214 |     |     // `tranche.totalBorrowShare > 0 && tranche.totalBorrowAmount == 0` or
 215 |     |     // `tranche.totalDepositShare > 0 && tranche.totalDepositAmount == 0`
 216 |     |     //
 217 |     |     // if these states are reached borrows/deposits in that tranche will permanently
 218 |     |     // be bricked. Either both == 0 or both > 0
 219 |     |     function _getTranchBorrowDepositShareIntegrity(address _token, uint8 _tranche) private view returns(bool) {
 220 |     |         OmniToken.OmniTokenTranche memory trancheData = _getOmniTokenTranche(_token, _tranche);
 221 |     |         
 222 |     |         return ((trancheData.totalBorrowShare  == 0 && trancheData.totalBorrowAmount  == 0) ||
 223 |     |                 (trancheData.totalBorrowShare  >  0 && trancheData.totalBorrowAmount  >  0)) &&
 224 |     |                ((trancheData.totalDepositShare == 0 && trancheData.totalDepositAmount == 0) ||
 225 |     |                 (trancheData.totalDepositShare >  0 && trancheData.totalDepositAmount >  0));
 226 |     |     }
 227 |     |     function medusa_tranche_borrow_deposit_shares_integrity() public view returns(bool) {
 228 |     |         return _getTranchBorrowDepositShareIntegrity(address(oToken),  0) &&
 229 |     |                _getTranchBorrowDepositShareIntegrity(address(oToken),  1) &&
 230 |     |                _getTranchBorrowDepositShareIntegrity(address(oToken2), 0) &&
 231 |     |                _getTranchBorrowDepositShareIntegrity(address(oToken2), 1);
 232 |     |     }
 233 |     | 
 234 |     |     // INVARIANT 2) each subaccount may only enter max 1 isolated market at the same time
 235 |     |     function _inMoreThanOneIsolatedMarket(address account) private view returns(bool) {
 236 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 237 |     |             bytes32 accountId = account.toAccount(subId);
 238 |     | 
 239 |     |             if(ghost_subAccount[accountId].numEnteredIsolatedMarkets >= 2) return true;
 240 |     |         }
 241 |     | 
 242 |     |         return false;
 243 |     |     }
 244 |     |     function medusa_subaccount_one_isolated_market() public view returns(bool) {
 245 |     |         return !_inMoreThanOneIsolatedMarket(ALICE) &&
 246 |     |                !_inMoreThanOneIsolatedMarket(BOB);
 247 |     |     }
 248 |     | 
 249 |     | 
 250 |     |     // INVARIANT 3) each subaccount many only enter max 1 mode at the same time
 251 |     |     function _inMoreThanOneMode(address account) private view returns(bool) {
 252 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 253 |     |             bytes32 accountId = account.toAccount(subId);
 254 |     | 
 255 |     |             if(ghost_subAccount[accountId].numEnteredModes >= 2) return true;
 256 |     |         }
 257 |     | 
 258 |     |         return false;
 259 |     |     }
 260 |     |     function medusa_subaccount_one_mode() public view returns(bool) {
 261 |     |         return !_inMoreThanOneMode(ALICE) &&
 262 |     |                !_inMoreThanOneMode(BOB);
 263 |     |     }
 264 |     | 
 265 |     | 
 266 |     |     // INVARIANT 4) subaccount can't enter isolated collateral market with active borrows
 267 |     |     function _hasEnteredIsolatedMarketWithActiveBorrows(address account) private view returns(bool) {
 268 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 269 |     |             bytes32 accountId = account.toAccount(subId);
 270 |     | 
 271 |     |             if(ghost_subAccount[accountId].enteredIsolatedMarketWithActiveBorrows) return true;
 272 |     |         }
 273 |     | 
 274 |     |         return false;
 275 |     |     }
 276 |     |     function medusa_cant_enter_isolated_market_with_active_borrows() public view returns(bool) {
 277 |     |         return !_hasEnteredIsolatedMarketWithActiveBorrows(ALICE) &&
 278 |     |                !_hasEnteredIsolatedMarketWithActiveBorrows(BOB);
 279 |     |     }
 280 |     | 
 281 |     | 
 282 |     |     // INVARIANT 5) subaccount can't exit market or mode with active borrows
 283 |     |     function _hasExitedMarketOrModeWithActiveBorrows(address account) private view returns(bool) {
 284 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 285 |     |             bytes32 accountId = account.toAccount(subId);
 286 |     | 
 287 |     |             if(ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows) return true;
 288 |     |         }
 289 |     | 
 290 |     |         return false;
 291 |     |     }
 292 |     |     function medusa_cant_exit_market_or_mode_with_active_borrows() public view returns(bool) {
 293 |     |         return !_hasExitedMarketOrModeWithActiveBorrows(ALICE) &&
 294 |     |                !_hasExitedMarketOrModeWithActiveBorrows(BOB);
 295 |     |     }
 296 |     | 
 297 |     | 
 298 |     |     // INVARIANT 6) subaccount can't enter a mode when it has already entered a market
 299 |     |     function _hasEnteredModeWithEnteredMarkets(address account) private view returns(bool) {
 300 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 301 |     |             bytes32 accountId = account.toAccount(subId);
 302 |     | 
 303 |     |             if(ghost_subAccount[accountId].enteredModeWithEnteredMarkets) return true;
 304 |     |         }
 305 |     | 
 306 |     |         return false;
 307 |     |     }
 308 |     |     function medusa_cant_enter_mode_with_entered_markets() public view returns(bool) {
 309 |     |         return !_hasEnteredModeWithEnteredMarkets(ALICE) &&
 310 |     |                !_hasEnteredModeWithEnteredMarkets(BOB);
 311 |     |     }
 312 |     | 
 313 |     | 
 314 |     |     // INVARIANT 7) subaccount can't enter an expired market or mode
 315 |     |     function _hasEnteredExpiredMarketOrMode(address account) private view returns(bool) {
 316 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 317 |     |             bytes32 accountId = account.toAccount(subId);
 318 |     | 
 319 |     |             if(ghost_subAccount[accountId].enteredExpiredMarketOrMode) return true;
 320 |     |         }
 321 |     | 
 322 |     |         return false;
 323 |     |     }
 324 |     |     function medusa_cant_enter_expired_market_or_mode() public view returns(bool) {
 325 |     |         return !_hasEnteredExpiredMarketOrMode(ALICE) &&
 326 |     |                !_hasEnteredExpiredMarketOrMode(BOB);
 327 |     |     }
 328 |     | 
 329 |     |     
 330 |     |     // INVARIANT 8) subaccount must have entered market/mode to take a loan
 331 |     |     function _hasLoanWithoutEnteringMarketOrMode(address account) private view returns(bool) {
 332 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 333 |     |             bytes32 accountId = account.toAccount(subId);
 334 |     | 
 335 |     |             if(_hasActiveBorrows(accountId) && 
 336 |     |                ghost_subAccount[accountId].numEnteredModes   == 0 &&
 337 |     |                ghost_subAccount[accountId].numEnteredMarkets == 0) return true;
 338 |     |         }
 339 |     | 
 340 |     |         return false;
 341 |     |     }
 342 |     |     function medusa_cant_borrow_without_entering_market_or_mode() public view returns(bool) {
 343 |     |         return !_hasLoanWithoutEnteringMarketOrMode(ALICE) &&
 344 |     |                !_hasLoanWithoutEnteringMarketOrMode(BOB);
 345 |     |     }
 346 |     | 
 347 |     |     
 348 |     |     // INVARIANT 9) subaccount should receive shares when making a deposit
 349 |     |     // note: this invariant is currently failing during some runs when the fuzzer
 350 |     |     // does small deposits due to a rounding-down-to-zero precision loss at
 351 |     |     // https://github.com/beta-finance/Omni-Protocol/blob/main/src/OmniToken.sol#L172
 352 |     |     function _hasDepositWhichReceivedZeroShares(address account) private view returns(bool) {
 353 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 354 |     |             bytes32 accountId = account.toAccount(subId);
 355 |     | 
 356 |     |             if(ghost_subAccount[accountId].depositReceivedZeroShares) return true;
 357 |     |         }
 358 |     | 
 359 |     |         return false;
 360 |     |     }
 361 |     |     function medusa_deposit_receives_shares() public view returns(bool) {
 362 |     |         return !_hasDepositWhichReceivedZeroShares(ALICE) &&
 363 |     |                !_hasDepositWhichReceivedZeroShares(BOB);
 364 |     |     }
 365 |     | 
 366 |     | 
 367 |     |     // INVARIANT 10) subaccount should receive amount when making a deposit
 368 |     |     function _hasDepositWhichReceivedIncorrectAmount(address account) private view returns(bool) {
 369 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 370 |     |             bytes32 accountId = account.toAccount(subId);
 371 |     | 
 372 |     |             if(ghost_subAccount[accountId].depositReceivedIncorrectAmount) return true;
 373 |     |         }
 374 |     | 
 375 |     |         return false;
 376 |     |     }
 377 |     |     function medusa_deposit_receives_correct_amount() public view returns(bool) {
 378 |     |         return !_hasDepositWhichReceivedIncorrectAmount(ALICE) &&
 379 |     |                !_hasDepositWhichReceivedIncorrectAmount(BOB);
 380 |     |     }
 381 |     | 
 382 |     | 
 383 |     |     // INVARIANT 11) subaccount should have shares decreased when withdrawing
 384 |     |     function _hasWithdrawWhichDecreasedZeroShares(address account) private view returns(bool) {
 385 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 386 |     |             bytes32 accountId = account.toAccount(subId);
 387 |     | 
 388 |     |             if(ghost_subAccount[accountId].withdrawDecreasedZeroShares) return true;
 389 |     |         }
 390 |     | 
 391 |     |         return false;
 392 |     |     }
 393 |     |     function medusa_withdraw_decreases_shares() public view returns(bool) {
 394 |     |         return !_hasWithdrawWhichDecreasedZeroShares(ALICE) &&
 395 |     |                !_hasWithdrawWhichDecreasedZeroShares(BOB);
 396 |     |     }
 397 |     |     
 398 |     | 
 399 |     |     // INVARIANT 12) subaccount should receive correct amount when withdrawing
 400 |     |     function _hasWithdrawWhichReceivedIncorrectAmount(address account) private view returns(bool) {
 401 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 402 |     |             bytes32 accountId = account.toAccount(subId);
 403 |     | 
 404 |     |             if(ghost_subAccount[accountId].withdrawReceivedIncorrectAmount) return true;
 405 |     |         }
 406 |     | 
 407 |     |         return false;
 408 |     |     }
 409 |     |     function medusa_withdraw_receives_correct_amount() public view returns(bool) {
 410 |     |         return !_hasWithdrawWhichReceivedIncorrectAmount(ALICE) &&
 411 |     |                !_hasWithdrawWhichReceivedIncorrectAmount(BOB);
 412 |     |     }
 413 |     |     
 414 |     | 
 415 |     |     // INVARIANT 13) repay should decrease borrow shares
 416 |     |     // note: this invariant is currently failing during some runs when the fuzzer
 417 |     |     // does small repayments due to a rounding-down-to-zero precision loss at
 418 |     |     // https://github.com/beta-finance/Omni-Protocol/blob/main/src/OmniToken.sol#L265
 419 |     |     function _hasRepayWhichDidntDecreaseBorrowShares(address account) private view returns(bool) {
 420 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 421 |     |             bytes32 accountId = account.toAccount(subId);
 422 |     | 
 423 |     |             if(ghost_subAccount[accountId].repayDidntDecreaseBorrowShares) return true;
 424 |     |         }
 425 |     | 
 426 |     |         return false;
 427 |     |     }
 428 |     |     function medusa_repay_decreases_borrow_shares() public view returns(bool) {
 429 |     |         return !_hasRepayWhichDidntDecreaseBorrowShares(ALICE) &&
 430 |     |                !_hasRepayWhichDidntDecreaseBorrowShares(BOB);
 431 |     |     }
 432 |     | 
 433 |     | 
 434 |     |     // INVARIANT 14) repay should decrease borrow amount by correct amount
 435 |     |     function _hasRepayWhichIncorrectlyDecreasedBorrowAmount(address account) private view returns(bool) {
 436 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 437 |     |             bytes32 accountId = account.toAccount(subId);
 438 |     | 
 439 |     |             if(ghost_subAccount[accountId].repayIncorrectBorrowAmountDecrease) return true;
 440 |     |         }
 441 |     | 
 442 |     |         return false;
 443 |     |     }
 444 |     |     function medusa_repay_correctly_decreases_borrow_amount() public view returns(bool) {
 445 |     |         return !_hasRepayWhichIncorrectlyDecreasedBorrowAmount(ALICE) &&
 446 |     |                !_hasRepayWhichIncorrectlyDecreasedBorrowAmount(BOB);
 447 |     |     }
 448 |     | 
 449 |     | 
 450 |     |     // INVARIANT 15) borrow should increase borrow shares
 451 |     |     function _hasBorrowWhichDidntIncreaseBorrowShares(address account) private view returns(bool) {
 452 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 453 |     |             bytes32 accountId = account.toAccount(subId);
 454 |     | 
 455 |     |             if(ghost_subAccount[accountId].borrowDidntIncreaseBorrowShares) return true;
 456 |     |         }
 457 |     | 
 458 |     |         return false;
 459 |     |     }
 460 |     |     function medusa_borrow_increases_borrow_shares() public view returns(bool) {
 461 |     |         return !_hasBorrowWhichDidntIncreaseBorrowShares(ALICE) &&
 462 |     |                !_hasBorrowWhichDidntIncreaseBorrowShares(BOB);
 463 |     |     }
 464 |     | 
 465 |     | 
 466 |     |     // INVARIANT 16) borrow should increase borrow amount by correct amount
 467 |     |     function _hasBorrowWhichIncorrectlyIncreasedBorrowAmount(address account) private view returns(bool) {
 468 |     |         for(uint96 subId; subId<=MAX_SUB_ID; ++subId) {
 469 |     |             bytes32 accountId = account.toAccount(subId);
 470 |     | 
 471 |     |             if(ghost_subAccount[accountId].borrowIncorrectBorrowAmountIncrease) return true;
 472 |     |         }
 473 |     | 
 474 |     |         return false;
 475 |     |     }
 476 |     |     function medusa_borrow_correctly_increases_borrow_amount() public view returns(bool) {
 477 |     |         return !_hasRepayWhichIncorrectlyDecreasedBorrowAmount(ALICE) &&
 478 |     |                !_hasRepayWhichIncorrectlyDecreasedBorrowAmount(BOB);
 479 |     |     }
 480 |     | 
 481 |     | 
 482 |     |     /* OmniPool HANDLER FUNCTIONS */
 483 |     |     //
 484 |     |     // Handlers use input filtering to reduce but *not* to completely
 485 |     |     // eliminate invalid runs; there is still an element of randomness
 486 |     |     // where some inputs will be invalid
 487 |     |     function enterIsolatedMarket(uint96 _subId, uint8 _market) public {
 488 |     |         _subId        = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 489 |     |         address market = _getMarketIncIsolated(_market);
 490 |     | 
 491 |     |         hevm.prank(msg.sender);
 492 |     |         pool.enterIsolatedMarket(_subId, market);
 493 |     | 
 494 |     |         // update ghost variables
 495 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 496 |     | 
 497 |     |         ghost_subAccount[accountId].numEnteredMarkets++;
 498 |     | 
 499 |     |         if(_isIsolatedMarket(market)) {
 500 |     |             ghost_subAccount[accountId].numEnteredIsolatedMarkets++;
 501 |     | 
 502 |     |             if(_hasActiveBorrows(accountId)) {
 503 |     |                 ghost_subAccount[accountId].enteredIsolatedMarketWithActiveBorrows = true;
 504 |     |             }
 505 |     |         }
 506 |     | 
 507 |     |         if(_marketExpired(market)) {
 508 |     |             ghost_subAccount[accountId].enteredExpiredMarketOrMode = true;
 509 |     |         }
 510 |     |     }
 511 |     | 
 512 |     |     function enterMarkets(uint96 _subId, uint8 _market) public {
 513 |     |         _subId        = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 514 |     |         address market = _getMarketIncIsolated(_market);
 515 |     | 
 516 |     |         address[] memory markets = new address[](1);
 517 |     |         markets[0] = market;
 518 |     | 
 519 |     |         hevm.prank(msg.sender);
 520 |     |         pool.enterMarkets(_subId, markets);
 521 |     | 
 522 |     |         // update ghost variables
 523 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 524 |     | 
 525 |     |         ghost_subAccount[accountId].numEnteredMarkets++;
 526 |     | 
 527 |     |         if(_isIsolatedMarket(market)) {
 528 |     |             ghost_subAccount[accountId].numEnteredIsolatedMarkets++;
 529 |     | 
 530 |     |             if(_hasActiveBorrows(accountId)) {
 531 |     |                 ghost_subAccount[accountId].enteredIsolatedMarketWithActiveBorrows = true;
 532 |     |             }
 533 |     |         }
 534 |     | 
 535 |     |         if(_marketExpired(market)) {
 536 |     |             ghost_subAccount[accountId].enteredExpiredMarketOrMode = true;
 537 |     |         }
 538 |     |     }
 539 |     | 
 540 |     |     function exitMarket(uint96 _subId, uint8 _market) public {
 541 |     |         _subId        = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 542 |     |         address market = _getMarketIncIsolated(_market);
 543 |     | 
 544 |     |         hevm.prank(msg.sender);
 545 |     |         pool.exitMarket(_subId, market);
 546 |     | 
 547 |     |         // update ghost variables
 548 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 549 |     | 
 550 |     |         ghost_subAccount[accountId].numEnteredMarkets--;
 551 |     | 
 552 |     |         if(_hasActiveBorrows(accountId)) {
 553 |     |             ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows = true;
 554 |     |         }
 555 |     | 
 556 |     |         if(_isIsolatedMarket(market)) {
 557 |     |             ghost_subAccount[accountId].numEnteredIsolatedMarkets--;
 558 |     |         }
 559 |     |     }
 560 |     | 
 561 |     |     function clearMarkets(uint96 _subId) public {
 562 |     |         _subId = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 563 |     | 
 564 |     |         hevm.prank(msg.sender);
 565 |     |         pool.clearMarkets(_subId);
 566 |     | 
 567 |     |         // update ghost variables
 568 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 569 |     | 
 570 |     |         ghost_subAccount[accountId].numEnteredMarkets         = 0;
 571 |     |         ghost_subAccount[accountId].numEnteredIsolatedMarkets = 0;
 572 |     | 
 573 |     |         if(_hasActiveBorrows(accountId)) {
 574 |     |             ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows = true;
 575 |     |         }
 576 |     |     }
 577 |     | 
 578 |     |     function enterMode(uint96 _subId, uint8 _modeId) public {
 579 |     |         _subId  = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 580 |     |         _modeId = _clampBetweenU8(_modeId, MIN_MODE_ID, MAX_MODE_ID);
 581 |     | 
 582 |     |         hevm.prank(msg.sender);
 583 |     |         pool.enterMode(_subId, _modeId);
 584 |     | 
 585 |     |         // update ghost variables
 586 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 587 |     | 
 588 |     |         ghost_subAccount[accountId].numEnteredModes++;
 589 |     | 
 590 |     |         if(ghost_subAccount[accountId].numEnteredMarkets > 0) {
 591 |     |             ghost_subAccount[accountId].enteredModeWithEnteredMarkets = true;
 592 |     |         }
 593 |     | 
 594 |     |         if(_modeExpired(_modeId)) {
 595 |     |             ghost_subAccount[accountId].enteredExpiredMarketOrMode = true;
 596 |     |         }
 597 |     |     }
 598 |     | 
 599 |     |     function exitMode(uint96 _subId) public {
 600 |     |         _subId = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 601 |     | 
 602 |     |         hevm.prank(msg.sender);
 603 |     |         pool.exitMode(_subId);
 604 |     | 
 605 |     |         // update ghost variables
 606 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 607 |     | 
 608 |     |         ghost_subAccount[accountId].numEnteredModes--;
 609 |     | 
 610 |     |         if(_hasActiveBorrows(accountId)) {
 611 |     |             ghost_subAccount[accountId].exitedMarketOrModeWithActiveBorrows = true;
 612 |     |         }
 613 |     |     }
 614 |     | 
 615 |     |     function borrow(uint96 _subId, uint8 _market, uint256 _amount) public {
 616 |     |         _subId        = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 617 |     |         address market = _getMarketExcIsolated(_market);
 618 |     | 
 619 |     |         // save borrow amount & shares before calling borrow, used in invariant checks
 620 |     |         OmniToken token   = OmniToken(market);
 621 |     | 
 622 |     |         // accrue() first so it cant change storage during the next txn 
 623 |     |         token.accrue();
 624 |     | 
 625 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 626 |     |         uint8 trancheId   = pool.getAccountBorrowTier(_getAccountInfo(accountId));
 627 |     | 
 628 |     |         ( , uint256 totalBorrowAmountPrev, , uint256 totalBorrowSharePrev) = token.tranches(trancheId);
 629 |     | 
 630 |     |         hevm.prank(msg.sender);
 631 |     |         pool.borrow(_subId, market, _amount);
 632 |     | 
 633 |     |         ( , uint256 totalBorrowAmountAfter, , uint256 totalBorrowShareAfter) = token.tranches(trancheId);
 634 |     | 
 635 |     |         // update ghost variables
 636 |     |         uint256 borrowIncrease = totalBorrowAmountAfter - totalBorrowAmountPrev;
 637 |     | 
 638 |     |         if(_amount > 0) {
 639 |     |             if(borrowIncrease != _amount) {
 640 |     |                 ghost_subAccount[accountId].borrowIncorrectBorrowAmountIncrease = true;
 641 |     |             }
 642 |     | 
 643 |     |             if(totalBorrowShareAfter == totalBorrowSharePrev) {
 644 |     |                 ghost_subAccount[accountId].borrowDidntIncreaseBorrowShares = true;
 645 |     |             }
 646 |     |         }
 647 |     |     }
 648 |     | 
 649 |     |     function repay(uint96 _subId, uint8 _market, uint256 _amount) public {
 650 |     |         _subId        = _clampBetweenU96(_subId, 0, MAX_SUB_ID);
 651 |     |         address market = _getMarketExcIsolated(_market);
 652 |     | 
 653 |     |         // save borrow amount & shares before calling repay, used in invariant checks
 654 |     |         OmniToken token   = OmniToken(market);
 655 |     | 
 656 |     |         // accrue() first so it cant change storage during the next txn 
 657 |     |         token.accrue();
 658 |     | 
 659 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 660 |     |         uint8 trancheId   = pool.getAccountBorrowTier(_getAccountInfo(accountId));
 661 |     | 
 662 |     |         ( , uint256 totalBorrowAmountPrev, , uint256 totalBorrowSharePrev) = token.tranches(trancheId);
 663 |     | 
 664 |     |         hevm.prank(msg.sender);
 665 |     |         pool.repay(_subId, market, _amount);
 666 |     | 
 667 |     |         ( , uint256 totalBorrowAmountAfter, , uint256 totalBorrowShareAfter) = token.tranches(trancheId);
 668 |     | 
 669 |     |         // update ghost variables
 670 |     |         uint256 borrowReduction = totalBorrowAmountPrev-totalBorrowAmountAfter;
 671 |     | 
 672 |     |         if(_amount > 0) { 
 673 |     |             if(borrowReduction != _amount) {
 674 |     |                 ghost_subAccount[accountId].repayIncorrectBorrowAmountDecrease = true;
 675 |     |             }
 676 |     | 
 677 |     |             if(totalBorrowShareAfter == totalBorrowSharePrev) {
 678 |     |                 ghost_subAccount[accountId].repayDidntDecreaseBorrowShares = true;
 679 |     |             }
 680 |     |         }
 681 |     |     }
 682 |     | 
 683 |     |     function liquidate(uint96 _targetSubId, uint96 _liquidatorSubId, uint8 _targetAccount, 
 684 |     |                        uint8 _liquidateMarket, uint8 _collateralMarket, uint256 _amount, 
 685 |     |                        bool giveTokens) public {
 686 |     |         _targetSubId     = _clampBetweenU96(_targetSubId, 0, MAX_SUB_ID);
 687 |     |         _liquidatorSubId = _clampBetweenU96(_liquidatorSubId, 0, MAX_SUB_ID);
 688 |     |         address liqMarket = _getMarketExcIsolated(_liquidateMarket);
 689 |     |         address colMarket = _getMarketIncIsolated(_collateralMarket);
 690 |     | 
 691 |     |         bytes32 targetAccountId = (_getActor(_targetAccount)).toAccount(_targetSubId);
 692 |     |         bytes32 liqAccountId    = msg.sender.toAccount(_liquidatorSubId);
 693 |     | 
 694 |     |         // introduce some randomness into whether the test ensures account
 695 |     |         // has sufficent tokens to liquidate or not. This allows some invalid runs through
 696 |     |         // where account won't have enough tokens to liquidate but also helps ensure
 697 |     |         // there will be some valid liquidations
 698 |     |         if(giveTokens) {
 699 |     |             (MockERC20((OmniToken(liqMarket)).underlying())).mint(msg.sender, _amount);
 700 |     |         }
 701 |     | 
 702 |     |         hevm.prank(msg.sender);
 703 |     |         pool.liquidate(
 704 |     |             IOmniPool.LiquidationParams(targetAccountId, liqAccountId, liqMarket, colMarket, _amount));
 705 |     | 
 706 |     |         // no prank here, has to be called by admin. If it fails don't worry, just
 707 |     |         // trying to call it after liquidation to get some more coverage if liquidation
 708 |     |         // totally liquidates a user. Not fully working yet
 709 |     |         try pool.socializeLoss(liqMarket, targetAccountId) {} catch {}
 710 |     |     }
 711 |     | 
 712 |     | 
 713 |     |     /* OmniToken HANDLER FUNCTIONS */
 714 |     |     //
 715 |     |     function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount, 
 716 |     |                      uint8 _token, bool giveTokens) public {
 717 |     |         _subId         = _clampBetweenU96(_subId   , 0, MAX_SUB_ID);
 718 |     |         _trancheId     = _clampBetweenU8(_trancheId, 0, MAX_TRANCH_ID);
 719 |     |         OmniToken token = OmniToken(_getMarketIncIsolated(_token));
 720 |     | 
 721 |     |         // introduce some randomness into whether the test ensures account
 722 |     |         // has sufficent tokens to deposit or not. This allows some invalid
 723 |     |         // runs through where account won't have enough tokens to deposit.
 724 |     |         // Accounts can also have their tokens replenished this way
 725 |     |         if(giveTokens) {
 726 |     |             (MockERC20(token.underlying())).mint(msg.sender, _amount);
 727 |     |         }
 728 |     | 
 729 |     |         // accrue() first so it cant change storage during the next txn 
 730 |     |         token.accrue();
 731 |     | 
 732 |     |         // save deposit amount & shares before calling deposit, used in invariant checks
 733 |     |         (uint256 totalDepositAmountPrev, , uint256 totalDepositSharePrev, ) = token.tranches(_trancheId);
 734 |     | 
 735 |     |         hevm.prank(msg.sender);
 736 |     |         token.deposit(_subId, _trancheId, _amount);
 737 |     | 
 738 |     |         // update ghost variables
 739 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 740 |     | 
 741 |     |         (uint256 totalDepositAmountAfter, , uint256 totalDepositShareAfter, ) = token.tranches(_trancheId);
 742 |     | 
 743 |     |         if(_amount > 0 && totalDepositShareAfter == totalDepositSharePrev) {
 744 |     |             ghost_subAccount[accountId].depositReceivedZeroShares = true;
 745 |     |         }
 746 |     | 
 747 |     |         if(totalDepositAmountAfter-totalDepositAmountPrev != _amount) {
 748 |     |             ghost_subAccount[accountId].depositReceivedIncorrectAmount = true;
 749 |     |         }
 750 |     |     }
 751 |     | 
 752 |     |     function withdraw(uint96 _subId, uint8 _trancheId, 
 753 |     |                       uint256 _share, uint8 _token) public {
 754 |     |         _subId         = _clampBetweenU96(_subId   , 0, MAX_SUB_ID);
 755 |     |         _trancheId     = _clampBetweenU8(_trancheId, 0, MAX_TRANCH_ID);
 756 |     |         OmniToken token = OmniToken(_getMarketIncIsolated(_token)); 
 757 |     | 
 758 |     |         // accrue() first so it cant change storage during the next txn 
 759 |     |         token.accrue();
 760 |     | 
 761 |     |         // save deposit amount & shares before calling withdraw, used in invariant checks
 762 |     |         (uint256 totalDepositAmountPrev, , uint256 totalDepositSharePrev, ) = token.tranches(_trancheId);
 763 |     | 
 764 |     |         hevm.prank(msg.sender);
 765 |     |         uint256 amount = token.withdraw(_subId, _trancheId, _share);
 766 |     | 
 767 |     |         // update ghost variables
 768 |     |         bytes32 accountId = msg.sender.toAccount(_subId);
 769 |     | 
 770 |     |         (uint256 totalDepositAmountAfter, , uint256 totalDepositShareAfter, ) = token.tranches(_trancheId);
 771 |     | 
 772 |     |         uint256 actualDifference = totalDepositAmountPrev-totalDepositAmountAfter;
 773 |     | 
 774 |     |         if(_share > 0 && (actualDifference == 0 || actualDifference != amount)) {
 775 |     |             ghost_subAccount[accountId].withdrawReceivedIncorrectAmount = true;
 776 |     |         }
 777 |     | 
 778 |     |         if(_share > 0 && totalDepositShareAfter == totalDepositSharePrev) {
 779 |     |             ghost_subAccount[accountId].withdrawDecreasedZeroShares = true;
 780 |     |         }
 781 |     |     }
 782 |     | 
 783 |     |     function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, 
 784 |     |                       uint256 _shares, uint8 _token) public {
 785 |     |         _subId          = _clampBetweenU96(_subId   , 0, MAX_SUB_ID);
 786 |     |         _trancheId      = _clampBetweenU8(_trancheId, 0, MAX_TRANCH_ID);
 787 |     |         IOmniToken token = IOmniToken(_getMarketIncIsolated(_token)); 
 788 |     | 
 789 |     |         hevm.prank(msg.sender);
 790 |     |         token.transfer(_subId, _to, _trancheId, _shares);
 791 |     |     }
 792 |     | 
 793 |     | 
 794 |     |     /* Price Oracle UTILITY FUNCTION */
 795 |     |     //
 796 |     |     // function which changes oracle pricing of underlying tokens
 797 |     |     // will be called randomly by fuzzer. This enables positions to become
 798 |     |     // subject to liquidation enabling greater coverage
 799 |     |     function updateOraclePrice(uint8 _priceIndex, uint8 _percentMove, 
 800 |     |                                bool _increasePrice) public {
 801 |     |         _priceIndex  = _clampBetweenU8(_priceIndex, 0, PRICES_COUNT-1);
 802 |     | 
 803 |     |         // price can move in a set % range
 804 |     |         _percentMove = _clampBetweenU8(_percentMove, MIN_PRICE_MOVE, MAX_PRICE_MOVE);
 805 |     | 
 806 |     |         // calculate price delta
 807 |     |         uint256 priceDelta = prices[_priceIndex] * _percentMove / 100;
 808 |     | 
 809 |     |         // apply direction
 810 |     |         if(_increasePrice) prices[_priceIndex] += priceDelta;
 811 |     |         else prices[_priceIndex] -= priceDelta;
 812 |     | 
 813 |     |         // save new pricing
 814 |     |         oracle.setPrices(underlyings, prices);
 815 |     |     }
 816 |     | 
 817 |     | 
 818 |     |     /* Helper functions to fetch data used in invariant checks */
 819 |     |     // 
 820 |     |     function _getOmniTokenTranche(address _market, uint8 _tranche) private view
 821 |     |         returns (OmniToken.OmniTokenTranche memory)
 822 |     |     {
 823 |     |         (uint256 totalDeposit, uint256 totalBorrow, uint256 totalDepositShares, uint256 totalBorrowShares) =
 824 |     |             OmniToken(_market).tranches(_tranche);
 825 |     |         return OmniToken.OmniTokenTranche(totalDeposit, totalBorrow, totalDepositShares, totalBorrowShares);
 826 |     |     }
 827 |     |     function _getAccountInfo(bytes32 account) internal view returns (IOmniPool.AccountInfo memory) {
 828 |     |         (uint8 modeId, address isolatedCollateralMarket, uint32 softThreshold) = pool.accountInfos(account);
 829 |     |         return IOmniPool.AccountInfo(modeId, isolatedCollateralMarket, softThreshold);
 830 |     |     }
 831 |     |     function _marketExpired(address _market) private view returns(bool) {
 832 |     |         ( , , uint32 expirationTimestamp, , ) = pool.marketConfigurations(_market);
 833 |     | 
 834 |     |         return block.timestamp >= expirationTimestamp;
 835 |     |     }
 836 |     |     function _modeExpired(uint8 _modeId) private view returns(bool) {
 837 |     |         ( , , , uint32 expirationTimestamp ) = pool.modeConfigurations(_modeId);
 838 |     | 
 839 |     |         return block.timestamp >= expirationTimestamp;
 840 |     |     }
 841 |     |     function _hasActiveBorrows(bytes32 accountId) private view returns(bool) {
 842 |     | 
 843 |     |         return (oToken.getAccountBorrowInUnderlying(accountId,  0) + 
 844 |     |                 oToken.getAccountBorrowInUnderlying(accountId,  1) +
 845 |     |                 oToken2.getAccountBorrowInUnderlying(accountId, 0) + 
 846 |     |                 oToken2.getAccountBorrowInUnderlying(accountId, 1)) > 0;
 847 |     |     }
 848 |     | 
 849 |     | 
 850 |     |     /* Helper functions to choose between valid entities to interact with */
 851 |     |     // 
 852 |     |     function _getMarketExcIsolated(uint8 _market) private view returns (address marketOut) {
 853 |     |         _market = _clampBetweenU8(_market, 0, 1);
 854 |     |         if(_market == 0)      marketOut = address(oToken);
 855 |     |         else if(_market == 1) marketOut = address(oToken2);
 856 |     |     }
 857 |     |     function _getMarketIncIsolated(uint8 _market) private view returns (address marketOut) {
 858 |     |         _market = _clampBetweenU8(_market, 0, 3);
 859 |     |         if(_market == 0)      marketOut = address(oToken);
 860 |     |         else if(_market == 1) marketOut = address(oToken2);
 861 |     |         else if(_market == 2) marketOut = address(oToken3);
 862 |     |         else if(_market == 3) marketOut = address(oToken4);
 863 |     |     }
 864 |     |     function _getMarketOnlyIsolated(uint8 _market) private view returns (address marketOut) {
 865 |     |         _market = _clampBetweenU8(_market, 0, 1);
 866 |     |         if(_market == 0)      marketOut = address(oToken3);
 867 |     |         else if(_market == 1) marketOut = address(oToken4);
 868 |     |     }
 869 |     |     function _getActor(uint8 _actor) private pure returns (address actorOut) {
 870 |     |         _actor = _clampBetweenU8(_actor, 0, 1);
 871 |     |         if(_actor == 0)      actorOut = ALICE;
 872 |     |         else if(_actor == 1) actorOut = BOB;
 873 |     |     }
 874 |     |     function _isIsolatedMarket(address _market) private view returns(bool) {
 875 |     |         if(_market == address(oToken3) || _market == address(oToken4)) return true;
 876 |     |         return false;
 877 |     |     }
 878 |     | 
 879 |     | 
 880 |     |     /* Helper functions for platform-agnostic input restriction */
 881 |     |     // 
 882 |     |     function _clampBetweenU256(uint256 value, uint256 low, uint256 high) private pure returns (uint256) {
 883 |     |         if (value < low || value > high) {
 884 |     |             return (low + (value % (high - low + 1)));
 885 |     |         }
 886 |     |         return value;
 887 |     |     }
 888 |     |     function _clampBetweenU96(uint96 value, uint96 low, uint96 high) private pure returns (uint96) {
 889 |     |         if (value < low || value > high) {
 890 |     |             return (low + (value % (high - low + 1)));
 891 |     |         }
 892 |     |         return value;
 893 |     |     }
 894 |     |     function _clampBetweenU8(uint8 value, uint8 low, uint8 high) private pure returns (uint8) {
 895 |     |         if (value < low || value > high) {
 896 |     |             return (low + (value % (high - low + 1)));
 897 |     |         }
 898 |     |         return value;
 899 |     |     }
 900 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/09-vesting/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Setup } from "./Setup.sol";
  5 |     | import { Asserts } from "@chimera/Asserts.sol";
  6 |     | 
  7 |     | abstract contract Properties is Setup, Asserts {
  8 |     | 
  9 |     |     function property_users_points_sum_eq_total_points() public view returns(bool result) {
 10 |     |         uint24 totalPoints;
 11 |     | 
 12 |     |         // sum up all user points
 13 |     |         for(uint256 i; i<recipients.length; i++) {
 14 |     |             (uint24 points, , ) = vesting.allocations(recipients[i]);
 15 |     | 
 16 |     |             totalPoints += points;
 17 |     |         }
 18 |     | 
 19 |     |         // true if invariant held, false otherwise
 20 |     |         if(totalPoints == TOTAL_POINTS) result = true;
 21 |     | 
 22 |     |         // note: Solidity always initializes to default values
 23 |     |         // so no need to explicitly set result = false as false
 24 |     |         // is the default value for bool
 25 |     |     }
 26 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/09-vesting/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Vesting } from "../../src/09-vesting/Vesting.sol";
  5 |     | import { BaseSetup } from "@chimera/BaseSetup.sol";
  6 |     | 
  7 |     | abstract contract Setup is BaseSetup {
  8 |     |     // contract being tested
  9 |     |     uint24 constant TOTAL_POINTS = 100_000;
 10 |     |     Vesting vesting;
 11 |     | 
 12 |     |     // ghost variables
 13 |     |     address[] recipients;
 14 |     | 
 15 |     |     function setup() internal virtual override {
 16 |     |         // use two recipients with equal allocation
 17 |     |         recipients.push(address(0x1111));
 18 |     |         recipients.push(address(0x2222));
 19 |     | 
 20 |     |         // prepare allocation array
 21 |     |         Vesting.AllocationInput[] memory inputs
 22 |     |             = new Vesting.AllocationInput[](2);
 23 |     |         inputs[0].recipient = recipients[0];
 24 |     |         inputs[0].points = TOTAL_POINTS / 2;
 25 |     |         inputs[0].vestingWeeks = 10;
 26 |     |         inputs[1].recipient = recipients[1];
 27 |     |         inputs[1].points = TOTAL_POINTS / 2;
 28 |     |         inputs[1].vestingWeeks = 10;
 29 |     | 
 30 |     |         vesting = new Vesting(inputs);
 31 |     |     }
 32 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/09-vesting/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Properties } from "./Properties.sol";
  5 |     | import { BaseTargetFunctions } from "@chimera/BaseTargetFunctions.sol";
  6 |     | import { IHevm, vm } from "@chimera/Hevm.sol";
  7 |     | 
  8 |     | abstract contract TargetFunctions is BaseTargetFunctions, Properties {
  9 |     | 
 10 |     |     function handler_transferPoints(uint256 recipientIndex,
 11 |     |                                     uint256 senderIndex,
 12 |     |                                     uint24 pointsToTransfer) external {
 13 |     |         // get an index into the recipients array to randomly
 14 |     |         // select a valid recipient
 15 |     |         //
 16 |     |         // note: using `between` provided by Chimera instead of
 17 |     |         // Foundry's `bound` for cross-fuzzer compatibility
 18 |     |         recipientIndex = between(recipientIndex, 0, recipients.length-1);
 19 |     |         senderIndex    = between(senderIndex, 0, recipients.length-1);
 20 |     | 
 21 |     |         address sender = recipients[senderIndex];
 22 |     |         address recipient = recipients[recipientIndex];
 23 |     | 
 24 |     |         (uint24 senderMaxPoints, , ) = vesting.allocations(sender);
 25 |     | 
 26 |     |         pointsToTransfer = uint24(between(pointsToTransfer, 1, senderMaxPoints));
 27 |     | 
 28 |     |         // note: using `vm` from Chimera's IHevm
 29 |     |         // for cross-fuzzer cheatcode compatibility
 30 |     |         vm.prank(sender);
 31 |     |         vesting.transferPoints(recipient, pointsToTransfer);
 32 |     |     }
 33 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/09-vesting/VestingCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { CryticAsserts } from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // configure solc-select to use compiler version:
  8 |     | // solc-select install 0.8.23
  9 |     | // solc-select use 0.8.23
 10 |     | //
 11 |     | // run from base project directory with:
 12 |     | // echidna . --contract VestingCryticTester --config test/09-vesting/echidna.yaml
 13 |     | // medusa --config test/09-vesting/medusa.json fuzz
 14 |     | contract VestingCryticTester is TargetFunctions, CryticAsserts {
 15 |     |   constructor() payable {
 16 |     |     setup();
 17 |     |   }
 18 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/09-vesting/VestingCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { FoundryAsserts } from "@chimera/FoundryAsserts.sol";
  6 |     | import { Test } from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract VestingCryticToFoundry
 10 |     | // (if an invariant fails add -vvvvv on the end to see what failed)
 11 |     | //
 12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 13 |     | //
 14 |     | // 1) forge coverage --report lcov --report-file test/09-vesting/coverage-foundry.lcov --match-contract VestingCryticToFoundry
 15 |     | // 2) genhtml test/09-vesting/coverage-foundry.lcov -o test/09-vesting/coverage-foundry
 16 |     | // 3) open test/09-vesting/coverage-foundry/index.html in your browser and
 17 |     | //    navigate to the relevant source file to see line-by-line execution records
 18 |     | 
 19 |     | contract VestingCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 20 |     |     function setUp() public {
 21 |     |       setup();
 22 |     | 
 23 |     |       // Foundry doesn't use config files but does
 24 |     |       // the setup programmatically here
 25 |     | 
 26 |     |       // target the fuzzer on this contract as it will
 27 |     |       // contain the handler functions
 28 |     |       targetContract(address(this));
 29 |     | 
 30 |     |       // handler functions to target during invariant tests
 31 |     |       bytes4[] memory selectors = new bytes4[](1);
 32 |     |       selectors[0] = this.handler_transferPoints.selector;
 33 |     | 
 34 |     |       targetSelector(FuzzSelector({ addr: address(this), selectors: selectors }));
 35 |     |     }
 36 |     | 
 37 |     |     // wrap every "property_*" invariant function into
 38 |     |     // a Foundry-style "invariant_*" function
 39 |     |     function invariant_users_points_sum_eq_total_points() public  view{
 40 |     |       assertTrue(property_users_points_sum_eq_total_points());
 41 |     |     }
 42 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/10-vesting-ext/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Setup } from "./Setup.sol";
  5 |     | import { Asserts } from "@chimera/Asserts.sol";
  6 |     | 
  7 |     | abstract contract Properties is Setup, Asserts {
  8 |     | 
  9 |     |     function property_users_points_sum_eq_total_points() public view returns(bool result) {
 10 |     |         uint24 totalPoints;
 11 |     | 
 12 |     |         // sum up all user points
 13 |     |         for(uint256 i; i<recipients.length; i++) {
 14 |     |             (uint24 points, , , ) = vesting.allocations(recipients[i]);
 15 |     | 
 16 |     |             totalPoints += points;
 17 |     |         }
 18 |     | 
 19 |     |         // true if invariant held, false otherwise
 20 |     |         if(totalPoints == TOTAL_POINTS) result = true;
 21 |     | 
 22 |     |         // note: Solidity always initializes to default values
 23 |     |         // so no need to explicitly set result = false as false
 24 |     |         // is the default value for bool
 25 |     |     }
 26 |     | 
 27 |     |     function property_total_preclaimed_lt_eq_max_preclaimable() public view returns(bool result) {
 28 |     |         result = totalPreclaimed <= MAX_PRECLAIMABLE;
 29 |     |     }
 30 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/10-vesting-ext/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { VestingExt } from "../../src/10-vesting-ext/VestingExt.sol";
  5 |     | import { BaseSetup } from "@chimera/BaseSetup.sol";
  6 |     | 
  7 |     | abstract contract Setup is BaseSetup {
  8 |     |     // contract being tested
  9 |     |     uint24 constant TOTAL_POINTS = 100_000;
 10 |     |     VestingExt vesting;
 11 |     | 
 12 |     |     // ghost variables
 13 |     |     address[] recipients;
 14 |     |     uint96 totalPreclaimed;
 15 |     |     uint96 MAX_PRECLAIMABLE;
 16 |     | 
 17 |     |     function setup() internal virtual override {
 18 |     |         // use two recipients with equal allocation
 19 |     |         recipients.push(address(0x1111));
 20 |     |         recipients.push(address(0x2222));
 21 |     | 
 22 |     |         // prepare allocation array
 23 |     |         VestingExt.AllocationInput[] memory inputs
 24 |     |             = new VestingExt.AllocationInput[](2);
 25 |     |         inputs[0].recipient = recipients[0];
 26 |     |         inputs[0].points = TOTAL_POINTS / 2;
 27 |     |         inputs[0].vestingWeeks = 10;
 28 |     |         inputs[1].recipient = recipients[1];
 29 |     |         inputs[1].points = TOTAL_POINTS / 2;
 30 |     |         inputs[1].vestingWeeks = 10;
 31 |     | 
 32 |     |         vesting = new VestingExt(inputs);
 33 |     | 
 34 |     |         // calculate and save total max preclaimable token amount
 35 |     |         for(uint256 i; i<inputs.length; i++) {
 36 |     |             MAX_PRECLAIMABLE
 37 |     |                 += vesting.getUserMaxPreclaimable(
 38 |     |                        vesting.getUserTokenAllocation(inputs[0].points));
 39 |     |         }
 40 |     |     }
 41 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/10-vesting-ext/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Properties } from "./Properties.sol";
  5 |     | import { BaseTargetFunctions } from "@chimera/BaseTargetFunctions.sol";
  6 |     | import { IHevm, vm } from "@chimera/Hevm.sol";
  7 |     | 
  8 |     | abstract contract TargetFunctions is BaseTargetFunctions, Properties {
  9 |     | 
 10 |     |     function handler_transferPoints(uint256 recipientIndex,
 11 |     |                                     uint256 senderIndex,
 12 |     |                                     uint24 pointsToTransfer) external {
 13 |     |         // get an index into the recipients array to randomly
 14 |     |         // select a valid recipient
 15 |     |         //
 16 |     |         // note: using `between` provided by Chimera instead of
 17 |     |         // Foundry's `bound` for cross-fuzzer compatibility
 18 |     |         recipientIndex = between(recipientIndex, 0, recipients.length-1);
 19 |     |         senderIndex    = between(senderIndex, 0, recipients.length-1);
 20 |     | 
 21 |     |         address sender = recipients[senderIndex];
 22 |     |         address recipient = recipients[recipientIndex];
 23 |     | 
 24 |     |         (uint24 senderMaxPoints, , , ) = vesting.allocations(sender);
 25 |     | 
 26 |     |         pointsToTransfer = uint24(between(pointsToTransfer, 1, senderMaxPoints));
 27 |     | 
 28 |     |         // note: using `vm` from Chimera's IHevm
 29 |     |         // for cross-fuzzer cheatcode compatibility
 30 |     |         vm.prank(sender);
 31 |     |         vesting.transferPoints(recipient, pointsToTransfer);
 32 |     |     }
 33 |     | 
 34 |     |     function handler_preclaim(uint256 userIndex) external {
 35 |     |         userIndex = between(userIndex, 0, recipients.length-1);
 36 |     | 
 37 |     |         address user = recipients[userIndex];
 38 |     | 
 39 |     |         vm.prank(user);
 40 |     |         uint96 userPreclaimed = vesting.preclaim();
 41 |     | 
 42 |     |         totalPreclaimed += userPreclaimed;
 43 |     |     }
 44 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/10-vesting-ext/VestingExtCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { CryticAsserts } from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // configure solc-select to use compiler version:
  8 |     | // solc-select install 0.8.23
  9 |     | // solc-select use 0.8.23
 10 |     | //
 11 |     | // run from base project directory with:
 12 |     | // echidna . --contract VestingExtCryticTester --config test/10-vesting-ext/echidna.yaml
 13 |     | // medusa --config test/10-vesting-ext/medusa.json fuzz
 14 |     | contract VestingExtCryticTester is TargetFunctions, CryticAsserts {
 15 |     |   constructor() payable {
 16 |     |     setup();
 17 |     |   }
 18 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/10-vesting-ext/VestingExtCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { FoundryAsserts } from "@chimera/FoundryAsserts.sol";
  6 |     | import { Test } from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract VestingExtCryticToFoundry
 10 |     | // (if an invariant fails add -vvvvv on the end to see what failed)
 11 |     | //
 12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 13 |     | //
 14 |     | // 1) forge coverage --report lcov --report-file test/10-vesting-ext/coverage-foundry.lcov --match-contract VestingExtCryticToFoundry
 15 |     | // 2) genhtml test/10-vesting-ext/coverage-foundry.lcov -o test/10-vesting-ext/coverage-foundry
 16 |     | // 3) open test/10-vesting-ext/coverage-foundry/index.html in your browser and
 17 |     | //    navigate to the relevant source file to see line-by-line execution records
 18 |     | 
 19 |     | contract VestingExtCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 20 |     |     function setUp() public {
 21 |     |       setup();
 22 |     | 
 23 |     |       // Foundry doesn't use config files but does
 24 |     |       // the setup programmatically here
 25 |     | 
 26 |     |       // target the fuzzer on this contract as it will
 27 |     |       // contain the handler functions
 28 |     |       targetContract(address(this));
 29 |     | 
 30 |     |       // handler functions to target during invariant tests
 31 |     |       bytes4[] memory selectors = new bytes4[](2);
 32 |     |       selectors[0] = this.handler_transferPoints.selector;
 33 |     |       selectors[1] = this.handler_preclaim.selector;
 34 |     | 
 35 |     |       targetSelector(FuzzSelector({ addr: address(this), selectors: selectors }));
 36 |     |     }
 37 |     | 
 38 |     |     // wrap every "property_*" invariant function into
 39 |     |     // a Foundry-style "invariant_*" function
 40 |     |     function invariant_users_points_sum_eq_total_points() public {
 41 |     |       t(property_users_points_sum_eq_total_points(), "User points sum total points");
 42 |     |     }
 43 |     | 
 44 |     |     function invariant_total_preclaimed_lt_eq_max_preclaimable() public {
 45 |     |       t(property_total_preclaimed_lt_eq_max_preclaimable(), "Total Preclaimed <= Max Preclaimable");
 46 |     |     }
 47 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/11-op-reg/OpRegCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { CryticAsserts } from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // configure solc-select to use compiler version:
  8 |     | // solc-select install 0.8.23
  9 |     | // solc-select use 0.8.23
 10 |     | //
 11 |     | // run from base project directory with:
 12 |     | // echidna . --contract OpRegCryticTester --config test/11-op-reg/echidna.yaml
 13 |     | // medusa --config test/11-op-reg/medusa.json fuzz
 14 |     | contract OpRegCryticTester is TargetFunctions, CryticAsserts {
 15 |     |   constructor() payable {
 16 |     |     setup();
 17 |     |   }
 18 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/11-op-reg/OpRegCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { FoundryAsserts } from "@chimera/FoundryAsserts.sol";
  6 |     | import { Test } from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract OpRegCryticToFoundry
 10 |     | // (if an invariant fails add -vvvvv on the end to see what failed)
 11 |     | //
 12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 13 |     | //
 14 |     | // 1) forge coverage --report lcov --report-file test/11-op-reg/coverage-foundry.lcov --match-contract OpRegCryticToFoundry
 15 |     | // 2) genhtml test/11-op-reg/coverage-foundry.lcov -o test/11-op-reg/coverage-foundry
 16 |     | // 3) open test/11-op-reg/coverage-foundry/index.html in your browser and
 17 |     | //    navigate to the relevant source file to see line-by-line execution records
 18 |     | 
 19 |     | contract OpRegCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 20 |     |     function setUp() public {
 21 |     |       setup();
 22 |     | 
 23 |     |       // Foundry doesn't use config files but does
 24 |     |       // the setup programmatically here
 25 |     | 
 26 |     |       // target the fuzzer on this contract as it will
 27 |     |       // contain the handler functions
 28 |     |       targetContract(address(this));
 29 |     | 
 30 |     |       // handler functions to target during invariant tests
 31 |     |       bytes4[] memory selectors = new bytes4[](2);
 32 |     |       selectors[0] = this.handler_register.selector;
 33 |     |       selectors[1] = this.handler_updateAddress.selector;
 34 |     | 
 35 |     |       targetSelector(FuzzSelector({ addr: address(this), selectors: selectors }));
 36 |     |     }
 37 |     | 
 38 |     |     // wrap every "property_*" invariant function into
 39 |     |     // a Foundry-style "invariant_*" function
 40 |     |     function invariant_operator_ids_have_unique_addresses() public {
 41 |     |       t(property_operator_ids_have_unique_addresses(), "Operator ids have unique addresses");
 42 |     |     }
 43 |     | 
 44 |     |     // TODO: wrap new "property_*" invariant into Foundry-style invariant
 45 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/11-op-reg/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Setup } from "./Setup.sol";
  5 |     | import { Asserts } from "@chimera/Asserts.sol";
  6 |     | import { EnumerableSet } from "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";
  7 |     | 
  8 |     | abstract contract Properties is Setup, Asserts {
  9 |     |     using EnumerableSet for EnumerableSet.AddressSet;
 10 |     | 
 11 |     |     EnumerableSet.AddressSet foundAddresses;
 12 |     | 
 13 |     |     function property_operator_ids_have_unique_addresses() public returns(bool result) {
 14 |     |         // first remove old found
 15 |     |         uint256 oldFoundLength = foundAddresses.length();
 16 |     |         if(oldFoundLength > 0) {
 17 |     |             address[] memory values = foundAddresses.values();
 18 |     | 
 19 |     |             for(uint256 i; i<oldFoundLength; i++) {
 20 |     |                 foundAddresses.remove(values[i]);
 21 |     |             }
 22 |     |         }
 23 |     | 
 24 |     |         // then iterate over every current operator, fetch its address
 25 |     |         // and attempt to add it to the found set. If the add fails it is
 26 |     |         // a duplicate breaking the invariant
 27 |     |         uint128 numOperators = operatorRegistry.numOperators();
 28 |     |         if(numOperators > 0) {
 29 |     |             // operator ids start at 1
 30 |     |             for(uint128 operatorId = 1; operatorId <= numOperators; operatorId++) {
 31 |     |                 if(!foundAddresses.add(operatorRegistry.operatorIdToAddress(operatorId))) {
 32 |     |                     return false;
 33 |     |                 }
 34 |     |             }
 35 |     |         }
 36 |     | 
 37 |     |         result = true;
 38 |     |     }
 39 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/11-op-reg/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { OperatorRegistry } from "../../src/11-op-reg/OperatorRegistry.sol";
  5 |     | import { BaseSetup } from "@chimera/BaseSetup.sol";
  6 |     | 
  7 |     | abstract contract Setup is BaseSetup {
  8 |     |     // contract being tested
  9 |     |     OperatorRegistry operatorRegistry;
 10 |     | 
 11 |     |     // ghost variables
 12 |     |     address[] addressPool;
 13 |     |     uint8 internal ADDRESS_POOL_LENGTH;
 14 |     | 
 15 |     |     function setup() internal virtual override {
 16 |     |         addressPool.push(address(0x1111));
 17 |     |         addressPool.push(address(0x2222));
 18 |     |         addressPool.push(address(0x3333));
 19 |     |         addressPool.push(address(0x4444));
 20 |     |         addressPool.push(address(0x5555));
 21 |     |         addressPool.push(address(0x6666));
 22 |     |         addressPool.push(address(0x7777));
 23 |     |         addressPool.push(address(0x8888));
 24 |     |         addressPool.push(address(0x9999));
 25 |     |         ADDRESS_POOL_LENGTH = uint8(addressPool.length);
 26 |     | 
 27 |     |         operatorRegistry = new OperatorRegistry();
 28 |     |     }
 29 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/11-op-reg/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Properties } from "./Properties.sol";
  5 |     | import { BaseTargetFunctions } from "@chimera/BaseTargetFunctions.sol";
  6 |     | import { IHevm, vm } from "@chimera/Hevm.sol";
  7 |     | 
  8 |     | abstract contract TargetFunctions is BaseTargetFunctions, Properties {
  9 |     | 
 10 |     |     // gets a random non-zero address from `Setup::addressPool`
 11 |     |     function _getRandomAddress(uint8 index) internal returns(address addr) {
 12 |     |         index = uint8(between(index, 0, ADDRESS_POOL_LENGTH - 1));
 13 |     |         addr = addressPool[index];
 14 |     |     }
 15 |     | 
 16 |     |     function handler_register(uint8 callerIndex) external {
 17 |     |         address caller = _getRandomAddress(callerIndex);
 18 |     | 
 19 |     |         vm.prank(caller);
 20 |     |         operatorRegistry.register();
 21 |     |     }
 22 |     | 
 23 |     |     function handler_updateAddress(uint8 callerIndex, uint8 updateIndex) external {
 24 |     |         address caller = _getRandomAddress(callerIndex);
 25 |     |         address update = _getRandomAddress(updateIndex);
 26 |     | 
 27 |     |         vm.prank(caller);
 28 |     |         operatorRegistry.updateAddress(update);
 29 |     |     }
 30 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/12-liquidate-dos/LiquidateDosCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { CryticAsserts } from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // configure solc-select to use compiler version:
  8 |     | // solc-select install 0.8.23
  9 |     | // solc-select use 0.8.23
 10 |     | //
 11 |     | // run from base project directory with:
 12 |     | // echidna . --contract LiquidateDosCryticTester --config test/12-liquidate-dos/echidna.yaml
 13 |     | // medusa --config test/12-liquidate-dos/medusa.json fuzz
 14 |     | contract LiquidateDosCryticTester is TargetFunctions, CryticAsserts {
 15 |     |   constructor() payable {
 16 |     |     setup();
 17 |     |   }
 18 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/12-liquidate-dos/LiquidateDosCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { FoundryAsserts } from "@chimera/FoundryAsserts.sol";
  6 |     | import { Test } from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract LiquidateDosCryticToFoundry
 10 |     | // (if an invariant fails add -vvvvv on the end to see what failed)
 11 |     | //
 12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 13 |     | //
 14 |     | // 1) forge coverage --report lcov --report-file test/12-liquidate-dos/coverage-foundry.lcov --match-contract LiquidateDosCryticToFoundry
 15 |     | // 2) genhtml test/12-liquidate-dos/coverage-foundry.lcov -o test/12-liquidate-dos/coverage-foundry
 16 |     | // 3) open test/12-liquidate-dos/coverage-foundry/index.html in your browser and
 17 |     | //    navigate to the relevant source file to see line-by-line execution records
 18 |     | 
 19 |     | contract LiquidateDosCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 20 |     |     function setUp() public {
 21 |     |       setup();
 22 |     | 
 23 |     |       // Foundry doesn't use config files but does
 24 |     |       // the setup programmatically here
 25 |     | 
 26 |     |       // target the fuzzer on this contract as it will
 27 |     |       // contain the handler functions
 28 |     |       targetContract(address(this));
 29 |     | 
 30 |     |       // handler functions to target during invariant tests
 31 |     |       bytes4[] memory selectors = new bytes4[](3);
 32 |     |       selectors[0] = this.handler_openPosition.selector;
 33 |     |       selectors[1] = this.handler_toggleLiquidations.selector;
 34 |     |       selectors[2] = this.handler_liquidate.selector;
 35 |     | 
 36 |     |       targetSelector(FuzzSelector({ addr: address(this), selectors: selectors }));
 37 |     |     }
 38 |     | 
 39 |     |     function invariant_user_active_markets_correct() public {
 40 |     |       t(property_user_active_markets_correct(), "User active markets correct");
 41 |     |     }
 42 |     | 
 43 |     |     function invariant_property_liquidate_no_unexpected_error() public {
 44 |     |       t(property_liquidate_no_unexpected_error(), "Liquidate failed with unexpected error");
 45 |     |     }
 46 |     |     
 47 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/12-liquidate-dos/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Setup } from "./Setup.sol";
  5 |     | import { Asserts } from "@chimera/Asserts.sol";
  6 |     | 
  7 |     | abstract contract Properties is Setup, Asserts {
  8 |     | 
  9 |     |     function property_user_active_markets_correct() public view returns(bool result) {
 10 |     |         // for each possible user
 11 |     |         for(uint8 i; i<ADDRESS_POOL_LENGTH; i++) {
 12 |     |             address user = addressPool[i];
 13 |     | 
 14 |     |             // if they are active in at least 1 market
 15 |     |             if(userActiveMarketsCount[user] != 0) {
 16 |     |                 // then iterate over all possible markets for that user
 17 |     |                 // verifying their active markets in ghost variables
 18 |     |                 // match what is stored in the underlying contract
 19 |     |                 for(uint8 marketId = liquidateDos.MIN_MARKET_ID();
 20 |     |                     marketId <= liquidateDos.MAX_MARKET_ID();
 21 |     |                     marketId++) {
 22 |     |                     // if any irregularity occurs, immediately fail invariant
 23 |     |                     bool activeInGhost = userActiveMarkets[user][marketId];
 24 |     |                     bool activeInContract = liquidateDos.userActiveInMarket(user, marketId);
 25 |     | 
 26 |     |                     if(activeInGhost != activeInContract) return false;
 27 |     |                 }
 28 |     |             }
 29 |     |         }
 30 |     | 
 31 |     |         result = true;
 32 |     |     }
 33 |     | 
 34 |     |     function property_liquidate_no_unexpected_error() public view returns(bool result) {
 35 |     |         result = !liquidateUnexpectedError;
 36 |     |     }
 37 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/12-liquidate-dos/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { LiquidateDos } from "../../src/12-liquidate-dos/LiquidateDos.sol";
  5 |     | import { BaseSetup } from "@chimera/BaseSetup.sol";
  6 |     | 
  7 |     | abstract contract Setup is BaseSetup {
  8 |     |     // contract being tested
  9 |     |     LiquidateDos liquidateDos;
 10 |     | 
 11 |     |     // ghost variables
 12 |     |     address[] addressPool;
 13 |     |     uint8 internal ADDRESS_POOL_LENGTH;
 14 |     | 
 15 |     |     // tracks open markets for each user, using different
 16 |     |     // method than the underlying implementation
 17 |     |     mapping(address user => uint8 activeMarketCount) userActiveMarketsCount;
 18 |     |     mapping(address user => mapping(uint8 marketId => bool userInMarket)) userActiveMarkets;
 19 |     | 
 20 |     |     // track unexpected errors
 21 |     |     bool liquidateUnexpectedError;
 22 |     | 
 23 |     |     function setup() internal virtual override {
 24 |     |         addressPool.push(address(0x1111));
 25 |     |         addressPool.push(address(0x2222));
 26 |     |         addressPool.push(address(0x3333));
 27 |     |         addressPool.push(address(0x4444));
 28 |     |         addressPool.push(address(0x5555));
 29 |     |         addressPool.push(address(0x6666));
 30 |     |         addressPool.push(address(0x7777));
 31 |     |         addressPool.push(address(0x8888));
 32 |     |         addressPool.push(address(0x9999));
 33 |     |         ADDRESS_POOL_LENGTH = uint8(addressPool.length);
 34 |     | 
 35 |     |         liquidateDos = new LiquidateDos();
 36 |     |     }
 37 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/12-liquidate-dos/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { ILiquidateDos } from "../../src/12-liquidate-dos/LiquidateDos.sol";
  5 |     | import { Properties } from "./Properties.sol";
  6 |     | import { BaseTargetFunctions } from "@chimera/BaseTargetFunctions.sol";
  7 |     | import { IHevm, vm } from "@chimera/Hevm.sol";
  8 |     | 
  9 |     | abstract contract TargetFunctions is BaseTargetFunctions, Properties {
 10 |     | 
 11 |     |     // gets a random non-zero address from `Setup::addressPool`
 12 |     |     function _getRandomAddress(uint8 index) internal returns(address addr) {
 13 |     |         index = uint8(between(index, 0, ADDRESS_POOL_LENGTH - 1));
 14 |     |         addr = addressPool[index];
 15 |     |     }
 16 |     | 
 17 |     |     function handler_openPosition(uint8 callerIndex, uint8 marketId) external {
 18 |     |         address caller = _getRandomAddress(callerIndex);
 19 |     | 
 20 |     |         vm.prank(caller);
 21 |     |         liquidateDos.openPosition(marketId);
 22 |     | 
 23 |     |         // update ghost variables
 24 |     |         ++userActiveMarketsCount[caller];
 25 |     |         userActiveMarkets[caller][marketId] = true;
 26 |     |     }
 27 |     | 
 28 |     |     function handler_toggleLiquidations(bool toggle) external {
 29 |     |         liquidateDos.toggleLiquidations(toggle);
 30 |     |     }
 31 |     | 
 32 |     |     function handler_liquidate(uint8 victimIndex) external {
 33 |     |         address victim = _getRandomAddress(victimIndex);
 34 |     | 
 35 |     |         try liquidateDos.liquidate(victim) {
 36 |     |             // update ghost variables
 37 |     |             delete userActiveMarketsCount[victim];
 38 |     | 
 39 |     |             for(uint8 marketId = liquidateDos.MIN_MARKET_ID();
 40 |     |                 marketId <= liquidateDos.MAX_MARKET_ID();
 41 |     |                 marketId++) {
 42 |     |                 delete userActiveMarkets[victim][marketId];
 43 |     |             }
 44 |     |         }
 45 |     |         catch(bytes memory err) {
 46 |     |             bytes4[] memory allowedErrors = new bytes4[](2);
 47 |     |             allowedErrors[0] = ILiquidateDos.LiquidationsDisabled.selector;
 48 |     |             allowedErrors[1] = ILiquidateDos.LiquidateUserNotInAnyMarkets.selector;
 49 |     | 
 50 |     |             if(_isUnexpectedError(bytes4(err), allowedErrors)) {
 51 |     |                 liquidateUnexpectedError = true;
 52 |     |             }
 53 |     |         }
 54 |     |     }
 55 |     | 
 56 |     |     // returns whether error was unexpected
 57 |     |     function _isUnexpectedError(
 58 |     |         bytes4 errorSelector,
 59 |     |         bytes4[] memory allowedErrors
 60 |     |     ) internal pure returns(bool isUnexpectedError) {
 61 |     |         for (uint256 i; i < allowedErrors.length; i++) {
 62 |     |             if (errorSelector == allowedErrors[i]) {
 63 |     |                 return false;
 64 |     |             }
 65 |     |         }
 66 |     | 
 67 |     |         isUnexpectedError = true;
 68 |     |     }
 69 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/13-stability-pool/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Setup } from "./Setup.sol";
  5 |     | import { Asserts } from "@chimera/Asserts.sol";
  6 |     | 
  7 |     | abstract contract Properties is Setup, Asserts {
  8 |     | 
  9 |     |     function property_stability_pool_solvent() public view returns(bool result) {
 10 |     |         uint256 totalClaimableRewards;
 11 |     | 
 12 |     |         // sum total claimable rewards for each possible user
 13 |     |         for(uint8 i; i<ADDRESS_POOL_LENGTH; i++) {
 14 |     |             address user = addressPool[i];
 15 |     | 
 16 |     |             totalClaimableRewards += stabilityPool.getDepositorCollateralGain(user);
 17 |     |         }
 18 |     | 
 19 |     |         // pool is solvent if the total claimable rewards are
 20 |     |         // lte its collateral token balance
 21 |     |         if(totalClaimableRewards <= collateralToken.balanceOf(address(stabilityPool)))
 22 |     |             result = true;
 23 |     |     }
 24 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/13-stability-pool/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { MockERC20 } from "../../src/MockERC20.sol";
  5 |     | import { StabilityPool } from "../../src/13-stability-pool/StabilityPool.sol";
  6 |     | import { BaseSetup } from "@chimera/BaseSetup.sol";
  7 |     | 
  8 |     | abstract contract Setup is BaseSetup {
  9 |     |     // contract being tested
 10 |     |     StabilityPool stabilityPool;
 11 |     | 
 12 |     |     // support contracts
 13 |     |     MockERC20 collateralToken;
 14 |     |     MockERC20 debtToken;
 15 |     | 
 16 |     |     // ghost variables
 17 |     |     address[] addressPool;
 18 |     |     uint8 internal ADDRESS_POOL_LENGTH;
 19 |     | 
 20 |     |     function setup() internal virtual override {
 21 |     |         addressPool.push(address(0x1111));
 22 |     |         addressPool.push(address(0x2222));
 23 |     |         ADDRESS_POOL_LENGTH = uint8(addressPool.length);
 24 |     | 
 25 |     |         collateralToken = new MockERC20("CT","CT");
 26 |     |         debtToken = new MockERC20("DT","DT");
 27 |     | 
 28 |     |         stabilityPool = new StabilityPool(debtToken, collateralToken);
 29 |     |     }
 30 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/13-stability-pool/StabilityPoolCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { CryticAsserts } from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // configure solc-select to use compiler version:
  8 |     | // solc-select install 0.8.23
  9 |     | // solc-select use 0.8.23
 10 |     | //
 11 |     | // run from base project directory with:
 12 |     | // echidna . --contract StabilityPoolCryticTester --config test/13-stability-pool/echidna.yaml
 13 |     | // medusa --config test/13-stability-pool/medusa.json fuzz
 14 |     | contract StabilityPoolCryticTester is TargetFunctions, CryticAsserts {
 15 |     |   constructor() payable {
 16 |     |     setup();
 17 |     |   }
 18 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/13-stability-pool/StabilityPoolCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { FoundryAsserts } from "@chimera/FoundryAsserts.sol";
  6 |     | import { Test } from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract StabilityPoolCryticToFoundry
 10 |     | // (if an invariant fails add -vvvvv on the end to see what failed)
 11 |     | //
 12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 13 |     | //
 14 |     | // 1) forge coverage --report lcov --report-file test/13-stability-pool/coverage-foundry.lcov --match-contract LiquidateDosCryticToFoundry
 15 |     | // 2) genhtml test/13-stability-pool/coverage-foundry.lcov -o test/13-stability-pool/coverage-foundry
 16 |     | // 3) open test/13-stability-pool/coverage-foundry/index.html in your browser and
 17 |     | //    navigate to the relevant source file to see line-by-line execution records
 18 |     | 
 19 |     | contract StabilityPoolCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 20 |     |     function setUp() public {
 21 |     |       setup();
 22 |     | 
 23 |     |       // Foundry doesn't use config files but does
 24 |     |       // the setup programmatically here
 25 |     | 
 26 |     |       // target the fuzzer on this contract as it will
 27 |     |       // contain the handler functions
 28 |     |       targetContract(address(this));
 29 |     | 
 30 |     |       // handler functions to target during invariant tests
 31 |     |       bytes4[] memory selectors = new bytes4[](3);
 32 |     |       selectors[0] = this.handler_provideToSP.selector;
 33 |     |       selectors[1] = this.handler_registerLiquidation.selector;
 34 |     |       selectors[2] = this.handler_claimCollateralGains.selector;
 35 |     | 
 36 |     |       targetSelector(FuzzSelector({ addr: address(this), selectors: selectors }));
 37 |     |     }
 38 |     | 
 39 |     |     function invariant_property_stability_pool_solvent() public {
 40 |     |       t(property_stability_pool_solvent(), "Stability pool solvent");
 41 |     |     }    
 42 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/13-stability-pool/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Properties } from "./Properties.sol";
  5 |     | import { BaseTargetFunctions } from "@chimera/BaseTargetFunctions.sol";
  6 |     | import { IHevm, vm } from "@chimera/Hevm.sol";
  7 |     | 
  8 |     | abstract contract TargetFunctions is BaseTargetFunctions, Properties {
  9 |     | 
 10 |     |     uint80 internal constant MIN_DEBT = 1000e18;
 11 |     |     uint80 internal constant MIN_COLL = 10e18;
 12 |     | 
 13 |     |     // gets a random non-zero address from `Setup::addressPool`
 14 |     |     function _getRandomAddress(uint8 index) internal returns(address addr) {
 15 |     |         index = uint8(between(index, 0, ADDRESS_POOL_LENGTH - 1));
 16 |     |         addr = addressPool[index];
 17 |     |     }
 18 |     | 
 19 |     |     function handler_provideToSP(uint8 callerIndex, uint80 amount) external {
 20 |     |         address caller = _getRandomAddress(callerIndex);
 21 |     |         amount = uint80(between(amount, MIN_DEBT, type(uint80).max));
 22 |     | 
 23 |     |         vm.prank(address(this));
 24 |     |         debtToken.mint(caller, amount);
 25 |     | 
 26 |     |         vm.prank(caller);
 27 |     |         debtToken.approve(address(stabilityPool), amount);
 28 |     |         vm.prank(caller);
 29 |     |         stabilityPool.provideToSP(amount);
 30 |     |     }
 31 |     | 
 32 |     |     function handler_registerLiquidation(uint80 debtToOffset, uint80 seizedCollateral) external {
 33 |     |         debtToOffset = uint80(between(debtToOffset, MIN_DEBT, type(uint80).max));
 34 |     |         seizedCollateral = uint80(between(seizedCollateral, MIN_COLL, type(uint80).max));
 35 |     | 
 36 |     |         stabilityPool.registerLiquidation(debtToOffset, seizedCollateral);
 37 |     | 
 38 |     |         vm.prank(address(this));
 39 |     |         collateralToken.mint(address(stabilityPool), seizedCollateral);
 40 |     |     }
 41 |     | 
 42 |     |     function handler_claimCollateralGains(uint8 callerIndex) external {
 43 |     |         address caller = _getRandomAddress(callerIndex);
 44 |     | 
 45 |     |         vm.prank(caller);
 46 |     |         stabilityPool.claimCollateralGains();
 47 |     |     }
 48 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/14-priority/PriorityCryticTester.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { CryticAsserts } from "@chimera/CryticAsserts.sol";
  6 |     | 
  7 |     | // configure solc-select to use compiler version:
  8 |     | // solc-select install 0.8.23
  9 |     | // solc-select use 0.8.23
 10 |     | //
 11 |     | // run from base project directory with:
 12 |     | // echidna . --contract PriorityCryticTester --config test/14-priority/echidna.yaml
 13 |     | // medusa --config test/14-priority/medusa.json fuzz
 14 |     | contract PriorityCryticTester is TargetFunctions, CryticAsserts {
 15 |     |   constructor() payable {
 16 |     |     setup();
 17 |     |   }
 18 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/14-priority/PriorityCryticToFoundry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { TargetFunctions } from "./TargetFunctions.sol";
  5 |     | import { FoundryAsserts } from "@chimera/FoundryAsserts.sol";
  6 |     | import { Test } from "forge-std/Test.sol";
  7 |     | 
  8 |     | // run from base project directory with:
  9 |     | // forge test --match-contract PriorityCryticToFoundry
 10 |     | // (if an invariant fails add -vvvvv on the end to see what failed)
 11 |     | //
 12 |     | // get coverage report (see https://medium.com/@rohanzarathustra/forge-coverage-overview-744d967e112f):
 13 |     | //
 14 |     | // 1) forge coverage --report lcov --report-file test/14-priority/coverage-foundry.lcov --match-contract PriorityCryticToFoundry
 15 |     | // 2) genhtml test/14-priority/coverage-foundry.lcov -o test/14-priority/coverage-foundry
 16 |     | // 3) open test/14-priority/coverage-foundry/index.html in your browser and
 17 |     | //    navigate to the relevant source file to see line-by-line execution records
 18 |     | 
 19 |     | contract PriorityCryticToFoundry is Test, TargetFunctions, FoundryAsserts {
 20 |     |     function setUp() public {
 21 |     |       setup();
 22 |     | 
 23 |     |       // Foundry doesn't use config files but does
 24 |     |       // the setup programmatically here
 25 |     | 
 26 |     |       // target the fuzzer on this contract as it will
 27 |     |       // contain the handler functions
 28 |     |       targetContract(address(this));
 29 |     | 
 30 |     |       // handler functions to target during invariant tests
 31 |     |       bytes4[] memory selectors = new bytes4[](2);
 32 |     |       selectors[0] = this.handler_addCollateral.selector;
 33 |     |       selectors[1] = this.handler_removeCollateral.selector;
 34 |     | 
 35 |     |       targetSelector(FuzzSelector({ addr: address(this), selectors: selectors }));
 36 |     |     }
 37 |     | 
 38 |     |     function invariant_property_priority_order_correct() public {
 39 |     |       t(property_priority_order_correct(), "Collateral priority order maintained");
 40 |     |     }
 41 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/14-priority/Properties.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Setup } from "./Setup.sol";
  5 |     | import { Asserts } from "@chimera/Asserts.sol";
  6 |     | 
  7 |     | abstract contract Properties is Setup, Asserts {
  8 |     | 
  9 |     |     function property_priority_order_correct() public view returns(bool result) {
 10 |     |         if(priority0 != 0) {
 11 |     |             if(priority.getCollateralAtPriority(0) != priority0) return false;
 12 |     |         }
 13 |     |         if(priority1 != 0) {
 14 |     |             if(priority.getCollateralAtPriority(1) != priority1) return false;
 15 |     |         }
 16 |     |         if(priority2 != 0) {
 17 |     |             if(priority.getCollateralAtPriority(2) != priority2) return false;
 18 |     |         }
 19 |     |         if(priority3 != 0) {
 20 |     |             if(priority.getCollateralAtPriority(3) != priority3) return false;
 21 |     |         }
 22 |     | 
 23 |     |         result = true;
 24 |     |     }
 25 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/14-priority/Setup.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Priority } from "../../src/14-priority/Priority.sol";
  5 |     | import { BaseSetup } from "@chimera/BaseSetup.sol";
  6 |     | 
  7 |     | abstract contract Setup is BaseSetup {
  8 |     |     // contract being tested
  9 |     |     Priority priority;
 10 |     | 
 11 |     |     // ghost variables
 12 |     |     uint8 priority0;
 13 |     |     uint8 priority1;
 14 |     |     uint8 priority2;
 15 |     |     uint8 priority3;
 16 |     | 
 17 |     |     function setup() internal virtual override {
 18 |     |         priority = new Priority();
 19 |     |     }
 20 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/14-priority/TargetFunctions.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | import { Properties } from "./Properties.sol";
  5 |     | import { BaseTargetFunctions } from "@chimera/BaseTargetFunctions.sol";
  6 |     | import { IHevm, vm } from "@chimera/Hevm.sol";
  7 |     | 
  8 |     | abstract contract TargetFunctions is BaseTargetFunctions, Properties {
  9 |     | 
 10 |     |     function handler_addCollateral(uint8 collateralId) external {
 11 |     |         collateralId = uint8(between(collateralId,
 12 |     |                                        priority.MIN_COLLATERAL_ID(),
 13 |     |                                        priority.MAX_COLLATERAL_ID()));
 14 |     | 
 15 |     |         priority.addCollateral(collateralId);
 16 |     | 
 17 |     |         // update ghost variables with expected order
 18 |     |         if(priority0 == 0) priority0 = collateralId;
 19 |     |         else if(priority1 == 0) priority1 = collateralId;
 20 |     |         else if(priority2 == 0) priority2 = collateralId;
 21 |     |         else priority3 = collateralId;
 22 |     |     }
 23 |     | 
 24 |     |     function handler_removeCollateral(uint8 collateralId) external {
 25 |     |         collateralId = uint8(between(collateralId,
 26 |     |                                        priority.MIN_COLLATERAL_ID(),
 27 |     |                                        priority.MAX_COLLATERAL_ID()));
 28 |     | 
 29 |     |         priority.removeCollateral(collateralId);
 30 |     | 
 31 |     |         // update ghost variables with expected order
 32 |     |         if(priority0 == collateralId) {
 33 |     |             priority0 = priority1;
 34 |     |             priority1 = priority2;
 35 |     |             priority2 = priority3;
 36 |     |         }
 37 |     |         else if(priority1 == collateralId) {
 38 |     |             priority1 = priority2;
 39 |     |             priority2 = priority3;
 40 |     |         }
 41 |     |         else if(priority2 == collateralId) {
 42 |     |             priority2 = priority3;
 43 |     |         }
 44 |     |         
 45 |     |         delete priority3;
 46 |     |     }
 47 |     | }

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/TestUtils.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.23;
  3 |     | 
  4 |     | // adapted from https://github.com/crytic/properties/blob/main/contracts/util/PropertiesHelper.sol#L240-L259
  5 |     | library TestUtils {
  6 |     | 
  7 |     |     // platform-agnostic input restriction to easily
  8 |     |     // port fuzz tests between different fuzzers
  9 |     |     function clampBetween(uint256 value, 
 10 |     |                           uint256 low, 
 11 |     |                           uint256 high
 12 |     |     ) internal pure returns (uint256) {
 13 |     |         if (value < low || value > high) {
 14 |     |             return (low + (value % (high - low + 1)));
 15 |     |         }
 16 |     |         return value;
 17 |     |     }
 18 |     | }
 19 |     | 
 20 |     | 

/Users/gurkiratsingh/Desktop/Fuzz Dev Dacian Exercise/test/selfTesting/02-unstoppable/EchidnaUnstoppable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity ^0.8.23;
  4 |     | 
  5 |     | import "../../../src/02-unstoppable/ReceiverUnstoppable.sol";
  6 |     | import "../../../src/02-unstoppable/UnstoppableLender.sol";
  7 |     | import "../../../src/TestToken.sol";
  8 |     | import "forge-std/Test.sol";
  9 |     | 
 10 |     | contract EchidnaUnstoppable is Test {
 11 |     | 
 12 |     |     TestToken public token;
 13 |     |     UnstoppableLender public pool;
 14 |     |     ReceiverUnstoppable public user;
 15 |     |     // uint256 initialMint, uint8 decimal
 16 |     | 
 17 |     |     uint256 public INITIAL_POOL_AMT = 1000000e18;
 18 |     |     uint256 public INITIAL_USER_AMT = 100e18;
 19 |     |     uint8 public DECIMALS = 18;
 20 |     | 
 21 |     |     constructor () payable {
 22 |     |         token = new TestToken(INITIAL_POOL_AMT + INITIAL_USER_AMT, DECIMALS);
 23 |     |         pool = new UnstoppableLender(address(token));
 24 |     |         user = new ReceiverUnstoppable(address(pool));
 25 |     |         console.log("Balance of user before transfer of pool " , token.balanceOf(address(pool)));
 26 |     |         console.log("Balance of user before transfer of user " , token.balanceOf(address(user)));
 27 |     |         token.approve(address(pool), INITIAL_POOL_AMT);
 28 |     |         pool.depositTokens(INITIAL_POOL_AMT);
 29 |     |         token.transfer(address(user), INITIAL_USER_AMT);
 30 |     |         console.log("Balance of user after transfer of pool " , token.balanceOf(address(pool))/1e18);
 31 |     |         console.log("Balance of user after transfer of user " , token.balanceOf(address(user))/1e18);
 32 |     |     }
 33 |     | 
 34 |     |     // function testBalance() public view{
 35 |     |     //     assert(token.balanceOf(address(pool)) == INITIAL_POOL_AMT);
 36 |     |     // }
 37 |     | 
 38 |     |     // function receiveTokens(address tokenAddress, uint256 amount) external {
 39 |     |     //     require(msg.sender == address(pool), "Sender must be pool");
 40 |     |     //     // Return all tokens to the pool
 41 |     |     //     require(
 42 |     |     //         IERC20(tokenAddress).transfer(msg.sender, amount),
 43 |     |     //         "Transfer of tokens failed"
 44 |     |     //     );
 45 |     |     // }
 46 |     | 
 47 |     |     function echidna_flashloan() public returns(bool){
 48 |     |         user.executeFlashLoan(10);
 49 |     |         return true;
 50 |     |     }
 51 |     | 
 52 |     |     function echidna_pool_bal_equal_token_pool_bal() public view returns(bool) {
 53 |     |         return(pool.poolBalance() == token.balanceOf(address(pool)));
 54 |     |     }
 55 |     | 
 56 |     | }

